{"HumanEval/0": ["assert has_close_elements([1.0, 2.0, 3.0], 0.5) == False", "assert has_close_elements([1.0, 2.0, 3.0], 0.1) == False", "assert has_close_elements([1.0, 2.0, 3.0], 0.9) == False", "assert has_close_elements([1.0, 2.0, 3.0], 0.0) == False", "assert has_close_elements([1.0, 2.0, 3.0], 0.1) == True", "assert has_close_elements([1.0, 2.0, 3.0], 0.2) == True", "assert has_close_elements([1.0, 2.0, 3.0], 0.3) == True", "assert has_close_elements([1.0, 2.0, 3.0], 0.4) == False", "assert has_close_elements([1.0, 2.0, 3.0], 0.0) == True", "assert has_close_elements([1.0, 2.0, 3.0], 0.01) == True", "assert has_close_elements([1.0, 2.0, 3.0], 0.001) == True", "assert has_close_elements([1.0, 2.0, 3.0], 0.0001) == True", "assert has_close_elements([1.0, 2.0, 3.0], 0.00001) == True", "assert has_close_elements([1.0, 2.0, 3.0], 0.000001) == True", "assert has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) == True", "assert has_close_elements([-1.0, -2.0, -3.0], 0.5) == False", "assert has_close_elements([-1.0, -2.8, -3.0, -4.0, -5.0, -2.0], 0.3) == True", "assert has_close_elements([1.0, 2.0, 3.0], 0.7) == False", "assert has_close_elements([1.0, 2.0, 3.0], 0.2) == False", "assert has_close_elements([1.0, 2.0, 3.0], 0.6) == False", "assert has_close_elements([-1.0, -2.0, -3.0], 0.7) == False", "assert has_close_elements([1.0, 2.0, 3.0], 0.499) == False", "assert has_close_elements([1.0, 2.0, 3.0], 0.501) == True", "assert has_close_elements([1.0, 2.0, 3.0], 0.5001) == True", "assert has_close_elements([1.0, 2.0, 3.0], 0.4999) == True", "assert has_close_elements([1.0, 2.0, 3.0], 0.50001) == True", "assert has_close_elements([-1.0, 2.0, 3.0], 0.5) == False", "assert has_close_elements([-1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) == True", "assert has_close_elements([1.0, 2.0, 3.0], 1.0) == False", "assert has_close_elements([1.0, 2.0, 3.0], 0.01) == False", "assert has_close_elements([1.0, 2.0, 3.0], 0.001) == False", "assert has_close_elements([1.0, 2.0, 3.0], 0.0001) == False", "assert has_close_elements([1.0, 2.0, 3.0], 0.00001) == False", "assert has_close_elements([1.0, 2.0, 3.0], 0.000001) == False", "assert has_close_elements([1.0, 2.0, 3.0], 0.8) == False", "assert has_close_elements([1.0, 2.0, 3.0], 0.0000001) == False", "assert has_close_elements([1.0, 2.0, 3.0], 0.00000001) == False", "assert has_close_elements([1.0, 2.0, 3.0], 0.000000001) == False", "assert has_close_elements([1.0, 2.0, 3.0], 0.0000000001) == False", "assert has_close_elements([1.0, 2.0, 3.0], 0.00000000001) == False", "assert has_close_elements([1.0, 2.0, 3.0], 0.000000000001) == False", "assert has_close_elements([1.0, 2.0, 3.0], 0.0000000000001) == False", "assert has_close_elements([1.0, 2.0, 3.0], 0.00000000000001) == False", "assert has_close_elements([1.0, 2.0, 3.0], 0.000000000000001) == False", "assert has_close_elements([1.0, 2.0, 3.0], 0.25) == True", "assert has_close_elements([1.0, 2.0, 3.0], 0.75) == False", "assert has_close_elements([1.0, 2.0, 3.0], 0.11) == True", "assert has_close_elements([1.0, 2.0, 3.0], 0.12) == False", "assert has_close_elements([-1.0, -2.0, -3.0], 0.4) == False", "assert has_close_elements([-1.0, -2.0, -3.0], 0.1) == False", "assert has_close_elements([1.0, 2.0, 3.0], 0.0000001) == True", "assert has_close_elements([1.0, 2.0, 3.0], 0.00000001) == True", "assert has_close_elements([1.0, 2.0, 3.0], 0.000000001) == True", "assert has_close_elements([1.0, 2.0, 3.0], 0.49) == False", "assert has_close_elements([1.0, 2.0, 3.0], 0.48) == True", "assert has_close_elements([1.0, 2.0, 3.0], 0.47) == True", "assert has_close_elements([1.0, 2.0, 3.0], 0.46) == True", "assert has_close_elements([1.0, 2.0, 3.0], 0.45) == True", "assert has_close_elements([1.0, 2.0, 3.0], 0.44) == True", "assert has_close_elements([-1.0, -2.0, -3.0], 0.5) == True", "assert has_close_elements([1.0, 2.0, 3.0], 0.5) == True", "assert has_close_elements([1.0, 2.0, 3.0], 0.4) == True", "assert has_close_elements([-1.0, -2.0, -3.0], 0.2) == False", "assert has_close_elements([1.0, 2.0, 3.0], 0.11) == False", "assert has_close_elements([1.0, 2.0, 3.0], 0.101) == True", "assert has_close_elements([1.0, 2.0, 3.0], 0.7) == True", "assert has_close_elements([1.0, 2.0, 3.0], 0.6) == True", "assert has_close_elements([1.0, 2.0, 3.0], 0.9) == True", "assert has_close_elements([-1.0, -2.0, -3.0], 0.3) == True", "assert has_close_elements([1.0, 2.0, 3.0], 0.3) == False"]}
{"HumanEval/1": ["assert separate_paren_groups('') == []", "assert separate_paren_groups('((()))') == ['']", "assert separate_paren_groups('( )(( ))') == ['(', '(', ')', ')(', ')', ')']", "assert separate_paren_groups('((( )((())))') == ['(', '(', ')', '(', ')', ')(', ')', ')', ')']", "assert separate_paren_groups(\"\") == []", "assert separate_paren_groups(\"( )\") == [\"\"]", "assert separate_paren_groups(\"(( )( ) ) \") == [\"\", \"(( )( ) \", \"(( )( ) )\"]", "assert separate_paren_groups(\"(( )( )(( )( ) ) )\") == [\"\", \"(( )( )(( )( ) ) \", \"(( )( )(( )( ) )\"]", "assert separate_paren_groups(\"( )(( ( )( )( ) ) )\") == [\"\", \"( )(( ( )( )( ) ) )\", \"(( )( )(( ( )( )( ) )\"]", "assert separate_paren_groups('(a(b))c') == ['ab', 'ac']", "assert separate_paren_groups('((a))') == ['a']", "assert separate_paren_groups(\"((()))\") == [\"()\"]", "assert separate_paren_groups(\"((()))\") == [\"()\", \"()\"]", "assert separate_paren_groups(\"((())\") == [\"()\"]", "assert separate_paren_groups(\"((())\") == [\"()\", \"()\"]", "assert separate_paren_groups('((()))') == [['(', '(', ')', ')'], ['(', ')', ')']]", "assert separate_paren_groups(\"()\") == ['']", "assert separate_paren_groups(\"( )(( ))(( )( ))\") == [\"\", \"( )\", \"(( )( ))\", \"(( )( ))\", \"(( )( ))\", \"(( )( ))\"]", "assert separate_paren_groups('(a)') == ['']", "assert separate_paren_groups('((a))') == ['']", "assert separate_paren_groups('(((a)))') == ['a']", "assert separate_paren_groups('(((a))(b))') == ['a', 'b']", "assert separate_paren_groups('(((a))(b))(c))') == ['a', 'b', 'c']", "assert separate_paren_groups('(((a))(b))(c))(d))') == ['a', 'b', 'c', 'd']", "assert separate_paren_groups('(((a))(b))(c))(d))(e))') == ['a', 'b', 'c', 'd', 'e']", "assert separate_paren_groups(\"((()))\") == [\"(\", \"))\", \")\"]", "assert separate_paren_groups(\"((()))\") == [\"()\", \"(())\", \"())\"]", "assert separate_paren_groups(\"(())\") == [\"()\", \"(())\"]", "assert separate_paren_groups(\"(())\") == [\"()\"]", "assert separate_paren_groups(\"())\") == [\"()\"]", "assert separate_paren_groups(\"( )\") == [\"()\"]", "assert separate_paren_groups(\")()\") == [\"()\"]", "assert separate_paren_groups(\"()()\") == [\"()\"]", "assert separate_paren_groups('((()))') == ['(', '(', ')', ')' ]", "assert separate_paren_groups('(())') == ['(', '(', ')', ')' ]", "assert separate_paren_groups('((( ) ) )') == ['(', '(', ')', ')(', '(', ')', ')' ]", "assert separate_paren_groups('(((( )))))') == ['(', '(', ')', ')(', '(', ')', ')(', '(', ')', ')' ]", "assert separate_paren_groups('(a)b(c)d') == ['a', 'b', 'c', 'd']", "assert separate_paren_groups('((())))') == ['(', '(', ')', '(', ')', ')' ]", "assert separate_paren_groups('(((())())())') == ['(', '(', ')', '(', ')', '(', ')', '(', ')', ')']", "assert separate_paren_groups('((()))') == ['(', ')' ]", "assert separate_paren_groups('(( )) ') == ['(', ')' ]", "assert separate_paren_groups('((()())())') == ['((()))', '((()))']", "assert separate_paren_groups('((( () )) )') == ['(', ')' ]", "assert separate_paren_groups('((((())))())') == ['(((()()))', '(((()()))' ]", "assert separate_paren_groups(')()') == []", "assert separate_paren_groups(')()()') == []", "assert separate_paren_groups('(a(b))') == ['']", "assert separate_paren_groups('(a(b(c)))') == ['']", "assert separate_paren_groups('((a(b(c))))') == ['']", "assert separate_paren_groups('(a(b(c))(d))') == ['']", "assert separate_paren_groups('((a(b(c))(d))(e))') == ['']", "assert separate_paren_groups('((a(b(c))(d)(e))(f))') == ['']", "assert separate_paren_groups('((a(b(c))(d)(e))(f))(g))') == ['']", "assert separate_paren_groups(\"((()))\") == ['(())']", "assert separate_paren_groups('((( () )))') == ['(', ')', '(', ')', '(', ')']", "assert separate_paren_groups('((((() )))))') == ['(', ')', '(', ')', '(', ')', '(', ')']", "assert separate_paren_groups('((((((()))))))') == ['(', ')', '(', ')', '(', ')', '(', ')', '(', ')']", "assert separate_paren_groups('((((((((())))))))))') == ['(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')']", "assert separate_paren_groups('((((((((((()))))) )))))') == ['(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')']", "assert separate_paren_groups('((((((((((((()))) ))))) )))))') == ['(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')']", "assert separate_paren_groups('((()))') == [['(', ')'], ['(', ')']]", "assert separate_paren_groups('(())') == ['']", "assert separate_paren_groups('(()) ') == ['(', ')']", "assert separate_paren_groups('(())( )') == ['(', ')', '(']", "assert separate_paren_groups('(())(())') == ['(', ')', '(']", "assert separate_paren_groups(\"((()))\") == ['(', ')', '()']", "assert separate_paren_groups(\"((())())\") == ['(', ')', '()', '()']", "assert separate_paren_groups(\"(((())())\") == ['(', ')', '()', '()']", "assert separate_paren_groups(\"(((())(())())\") == ['(', ')', '()', '()']", "assert separate_paren_groups(\"((((())))))\") == ['(', ')', '()']", "assert separate_paren_groups(\"((((()))()))\") == ['(', ')', '()']", "assert separate_paren_groups(\"((((((())))))\") == ['(', ')', '()']", "assert separate_paren_groups('((()))') == ['(', '(', ')', ')']", "assert separate_paren_groups('(a))') == ['(', 'a', ')']", "assert separate_paren_groups('((a))') == ['(', 'a', ')']", "assert separate_paren_groups('(((a)))') == ['a', '(', ')']", "assert separate_paren_groups('(((a))(b))') == ['a', '(', ')', 'b']", "assert separate_paren_groups('(((a))((b))c)') == ['a', '(', ')', '(', ')', 'b', 'c']", "assert separate_paren_groups('(((a))((b))((c))d)') == ['a', '(', ')', '(', ')', '(', ')', 'b', '(', ')', 'c', 'd']", "assert separate_paren_groups(\"()\") == []", "assert separate_paren_groups(\"((()()))\") == [\"()\", \"(())\"]", "assert separate_paren_groups(\"((()())())\") == [\"()\", \"(())\", \"()\"]", "assert separate_paren_groups(\"( () )\") == [\"\", \"()\"]", "assert separate_paren_groups(\"((())))\") == [\"()\", \"()\"]", "assert separate_paren_groups(\"((()()))()\") == [\"()\", \"(())\"]", "assert separate_paren_groups(\"(   )   \") == [\"\"]", "assert separate_paren_groups(\"((()()))\") == [\"(()())\"]", "assert separate_paren_groups(\"( ( () ) ) \") == [\"\", \"()\"]", "assert separate_paren_groups(\"((())())\") == [\"()\", \"(())\"]", "assert separate_paren_groups('((()))') == ['(', ')']", "assert separate_paren_groups('(())(())') == ['']", "assert separate_paren_groups('( )(( ))(( ))') == ['(', '(', ')', ')', '(', '(', ')', ')']", "assert separate_paren_groups('((a))(b)c') == ['a', ')', 'b', 'c']", "assert separate_paren_groups('(a)(b)c') == ['a', 'b', 'c']", "assert separate_paren_groups('(a)(b))') == ['a', ')']", "assert separate_paren_groups('(a)(b)(c)') == ['a', 'b', 'c']", "assert separate_paren_groups('(a)(b)(c)d') == ['a', 'b', 'c', 'd']", "assert separate_paren_groups('(a)b') == ['a', 'b']", "assert separate_paren_groups('(a)b(c)') == ['a', 'b', 'c']", "assert separate_paren_groups('((())))') == ['(', ')', '(', ')']", "assert separate_paren_groups('((())())') == ['(', ')', '(', ')', '(', ')']", "assert separate_paren_groups('((()()))') == ['(', ')', '(', ')']", "assert separate_paren_groups('((()))()())') == ['(', ')', '(', ')', '(', ')', '(', ')']", "assert separate_paren_groups('((())())())') == ['(', ')', '(', ')', '(', ')', '(', ')']", "assert separate_paren_groups('(((()))())') == ['(', ')', '(', ')', '(', ')']", "assert separate_paren_groups('(((()()))())') == ['(', ')', '(', ')', '(', ')', '(', ')']", "assert separate_paren_groups('((((())))())') == ['(', ')', '(', ')', '(', ')', '(', ')', '(', ')']", "assert separate_paren_groups('(a))') == ['']", "assert separate_paren_groups('((a))((b))') == ['']", "assert separate_paren_groups('(a))(b)') == ['']", "assert separate_paren_groups('((a))((b))(c)') == ['']", "assert separate_paren_groups('((a))((b))((c))') == ['']", "assert separate_paren_groups('((a))((b))((c))((d))') == ['']", "assert separate_paren_groups('((a))((b))((c))((d))((e))') == ['']", "assert separate_paren_groups('( ) ') == ['']", "assert separate_paren_groups('((  ))') == ['']", "assert separate_paren_groups('((a,b),c)') == ['(', 'a,', ',', 'b,', ',', ')', 'c']"]}
{"HumanEval/2": ["assert truncate_number(1.2) == 1.0", "assert truncate_number(0.8) == 0.0", "assert truncate_number(-1.2) == -1.0", "assert truncate_number(-0.8) == -0.0", "assert truncate_number(12.5) == 12.0", "assert truncate_number(0.5) == 0.5", "assert truncate_number(-5.2) == -5.0", "assert truncate_number(3.5) == 0.5", "assert truncate_number(2.9) == 2.0", "assert truncate_number(2.8) == 2.0", "assert truncate_number(2.0) == 2.0", "assert truncate_number(1.9) == 1.0", "assert truncate_number(1.8) == 1.0", "assert truncate_number(1.0) == 1.0", "assert truncate_number(0.9) == 0.0", "assert truncate_number(-1.5) == -0.5", "assert truncate_number(3.0) == 3.0", "assert truncate_number(3.01) == 0.01", "assert truncate_number(3.55) == 0.55", "assert truncate_number(-3.5) == -0.5", "assert truncate_number(-3.0) == -3.0", "assert truncate_number(-2.9) == -2.0", "assert truncate_number(-3.01) == -0.01", "assert truncate_number(-3.55) == -0.55", "assert truncate_number(1.5) == 1.0", "assert truncate_number(2.5) == 2.0", "assert truncate_number(4.5) == 4.0", "assert truncate_number(5.5) == 5.0", "assert truncate_number(6.5) == 6.0", "assert truncate_number(7.5) == 7.0", "assert truncate_number(8.5) == 8.0", "assert truncate_number(9.5) == 9.0", "assert truncate_number(-0.5) == 0.0", "assert truncate_number(-2.0) == -2.0", "assert truncate_number(1.5) == 0.5", "assert truncate_number(0.5) == 0.0", "assert truncate_number(-2.5) == -2.0", "assert truncate_number(-3.5) == -3.0", "assert truncate_number(-1.5) == -1.0", "assert truncate_number(1.7) == 1.0", "assert truncate_number(4.2) == 4.0", "assert truncate_number(5.9) == 5.0", "assert truncate_number(6.8) == 6.0", "assert truncate_number(8.2) == 8.0", "assert truncate_number(1.5) == 1.5", "assert truncate_number(-1.5) == -1.5", "assert truncate_number(-3.5) == -3.5", "assert truncate_number(0.1) == 0.0", "assert truncate_number(-0.1) == 0.0", "assert truncate_number(-1.0) == -1.0", "assert truncate_number(10.0) == 10.0", "assert truncate_number(3.14) == 3.0", "assert truncate_number(1.79769313486231E+308) == 0.0", "assert truncate_number(-1.9) == -1.0", "assert truncate_number(-0.5) == -0.5", "assert truncate_number(-2.8) == -2.0", "assert truncate_number(-3.14) == -3.0", "assert truncate_number(0.01) == 0.0", "assert truncate_number(3.2) == 3.0", "assert truncate_number(3.3) == 3.0", "assert truncate_number(3.5) == 3.5", "assert truncate_number(3.7) == 3.5", "assert truncate_number(4.0) == 4.0", "assert truncate_number(4.5) == 4.5", "assert truncate_number(4.1) == 4.0", "assert truncate_number(3.9) == 3.0", "assert truncate_number(-4.1) == -4.0", "assert truncate_number(10.5) == 10.0", "assert truncate_number(6.9) == 6.0", "assert truncate_number(7.2) == 7.0", "assert truncate_number(9.8) == 9.0", "assert truncate_number(10.3) == 10.0", "assert truncate_number(-10.0) == -10.0", "assert truncate_number(3.8) == 3.0", "assert truncate_number(3.7) == 3.0", "assert truncate_number(-0.2) == -0.0", "assert truncate_number(3.2) == 0.0", "assert truncate_number(-3.2) == -0.0", "assert truncate_number(10.8) == 0.0", "assert truncate_number(-10.8) == -0.0", "assert truncate_number(-0.9) == -0.0", "assert truncate_number(10.5) == 0.5", "assert truncate_number(1.23456789) == 1.0", "assert truncate_number(-4.2) == -4.0", "assert truncate_number(1.23456789) == 1.2", "assert truncate_number(-1.23456789) == -1.2", "assert truncate_number(-1.5) == 0.0", "assert truncate_number(-2.5) == 0.0", "assert truncate_number(-3.5) == 0.0", "assert truncate_number(13.5) == 13.0", "assert truncate_number(3.2) == 0.2", "assert truncate_number(3.14) == 0.14", "assert truncate_number(4.6) == 4.0", "assert truncate_number(5.3) == 5.0", "assert truncate_number(6.0) == 6.0", "assert truncate_number(2.999999999) == 2.0", "assert truncate_number(2.000000001) == 2.0", "assert truncate_number(5.0) == 5.0", "assert truncate_number(3.1) == 3.0", "assert truncate_number(3.4) == 3.0", "assert truncate_number(5.2) == 5.0", "assert truncate_number(2.9) == 2.9", "assert truncate_number(3.14159) == 3.14", "assert truncate_number(-3.1) == -3.1", "assert truncate_number(0.0) == 0.0", "assert truncate_number(-0.5) == -0.0", "assert truncate_number(-3.5) == -2.0", "assert truncate_number(-2.999999999) == -2.0", "assert truncate_number(3.6) == 3.0", "assert truncate_number(-3.6) == -3.0", "assert truncate_number(-3.7) == -3.0"]}
{"HumanEval/3": ["assert below_zero([1, 2, 3]) == False", "assert below_zero([1, 2, -4, 5]) == True", "assert below_zero([-1, -2, -3, -4, -5]) == True", "assert below_zero([1, 2, 3, 4, 5]) == False", "assert below_zero([-1, 2, 3]) == False", "assert below_zero([-1, 2, -4, 5]) == True", "assert below_zero([0, 0, 0]) == False", "assert below_zero([5, 23, -11]) == False", "assert below_zero([-12, 0, 1]) == True", "assert below_zero([12, -3, 1]) == False", "assert below_zero([-3, -2, -1, 0, 1]) == True", "assert below_zero([-1, -2, -3, -4]) == True", "assert below_zero([0, 0, 0, 0]) == False", "assert below_zero([-1, -2, 3]) == True", "assert below_zero([1, 2, 3, 4]) == False", "assert below_zero([1, 2, 3, -4]) == True", "assert below_zero([-1, -2, -3, -4, -5, -6]) == True", "assert below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == False", "assert below_zero([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]) == True", "assert below_zero([-2, 1, 0, 1, 2]) == False", "assert below_zero([0, 0, 0, 0, 0]) == False", "assert below_zero([-1, -2, -3, 4]) == True", "assert below_zero([5, -2, -3, 4]) == True", "assert below_zero([-1000, 0, 1, 2, 3]) == True", "assert below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == False", "assert below_zero([-1, -2, -3, 0, 1, 2]) == True", "assert below_zero([-1, -2, -3, 0, 1, 2, 3]) == True", "assert below_zero([-1, -2, -3, 0, 1, 2, 3, 4]) == True", "assert below_zero([-1, -2, -3, 0, 1, 2, 3, 4, 5]) == True", "assert below_zero([-3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == False", "assert below_zero([-1, 2, 3, 4, 5]) == False", "assert below_zero([1, 2, 3, 4, 5, 6]) == False", "assert below_zero([-3, 2, 1, -1]) == True", "assert below_zero([-2, -1, 0, 1]) == False", "assert below_zero([-1000, 1000, 0, 0]) == False", "assert below_zero([-1000, 200, -100]) == True", "assert below_zero([1, -2, 3, -1]) == True", "assert below_zero([-2, -1, 1, 1]) == False", "assert below_zero([-1, -2, -3, -4, -5, -6, -7]) == False", "assert below_zero([-3, 2, 1, 0]) == False", "assert below_zero([-2, 1, -1, 0]) == True", "assert below_zero([1000, 1000, 1000, 1000]) == False", "assert below_zero([-3, 2, 1, 0]) == True", "assert below_zero([-1000, 1000, -1000, 1000]) == False", "assert below_zero([-1, 0, 1, 2, 3]) == False", "assert below_zero([-1, -2, 3]) == False", "assert below_zero([-3, -2, -1]) == False", "assert below_zero([-1, -2, -3, -4, -5, -6, -7, -8]) == False", "assert below_zero([-3, -2, 0]) == False", "assert below_zero([-2, 1, 0]) == True", "assert below_zero([1, -2, 3]) == False", "assert below_zero([1, 2, 0]) == False", "assert below_zero([-1, -2, -3, -4, -5, -6, -7]) == True", "assert below_zero([5, 23, -11, 12]) == True", "assert below_zero([-1, -2, -3, 0, 1, 2, 3]) == False", "assert below_zero([-1, 0, 1, 2]) == True", "assert below_zero([1, -2, 1, -1]) == True", "assert below_zero([-2, 1, -1, -1]) == True", "assert below_zero([1, 2, 1, -1]) == True", "assert below_zero([-1, 1, -1, -1]) == True", "assert below_zero([-1, -2, 1, 2]) == False", "assert below_zero([-5, -3, 2, -1]) == True", "assert below_zero([1, -2, 1, -3]) == True", "assert below_zero([-2, 1, -1, -2]) == True", "assert below_zero([-10, -5, -2, 0]) == True", "assert below_zero([5, 23, -11, -5]) == True"]}
{"HumanEval/4": ["assert mean_absolute_deviation([-1.0, -2.0, -3.0, -4.0]) == 4.0", "assert mean_absolute_deviation([1.0, 2.0, 3.0, 4.0]) == 1.0", "assert mean_absolute_deviation([0.0, 0.0, 0.0, 0.0]) == 0.0", "assert mean_absolute_deviation([1.0, 2.0, 3.0, 4.0, 5.0]) == 2.5", "assert mean_absolute_deviation([-1.0, -2.0, -3.0, -4.0]) == 1.0", "assert mean_absolute_deviation([-1.0, 2.0, 3.0, 4.0]) == 1.0", "assert mean_absolute_deviation([5.0, 6.0, 7.0, 8.0]) == 2.0", "assert mean_absolute_deviation([-12.0, -11.0, -10.0, -9.0]) == -9.0", "assert mean_absolute_deviation([12.0, 11.0, 10.0, 9.0]) == 10.0", "assert mean_absolute_deviation([3.0, 2.0, 1.0, 0.0]) == 2.0", "assert mean_absolute_deviation([-3.0, -2.0, -1.0, 0.0]) == -1.0", "assert mean_absolute_deviation([-10.0, -9.0, -8.0, -7.0]) == 10.0", "assert mean_absolute_deviation([10.0, 9.0, 8.0, 7.0]) == 2.0", "assert mean_absolute_deviation([-100.0, -90.0, -80.0, -70.0]) == 100.0", "assert mean_absolute_deviation([100.0, 90.0, 80.0, 70.0]) == 200.0", "assert mean_absolute_deviation([-1.0, 2.0, 3.0, 4.0]) == 2.0", "assert mean_absolute_deviation([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.0", "assert mean_absolute_deviation([-1.0, -2.0, -3.0, -4.0, -5.0]) == 1.0", "assert mean_absolute_deviation([1.0, 2.0, 3.0, 4.0, 5.0, 6.0]) == 1.0", "assert mean_absolute_deviation([-1.0, -2.0, -3.0, -4.0, -5.0, -6.0]) == 1.0", "assert mean_absolute_deviation([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0]) == 1.0", "assert mean_absolute_deviation([-1.0, -2.0, -3.0, -4.0, -5.0, -6.0, -7.0]) == 1.0", "assert mean_absolute_deviation([-10.0, -20.0, -30.0, -40.0]) == 40.0", "assert mean_absolute_deviation([10.0, 20.0, 30.0, 40.0]) == 10.0", "assert mean_absolute_deviation([-1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0]) == 1.0", "assert mean_absolute_deviation([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0]) == 1.0", "assert mean_absolute_deviation([-1.0, -2.0, -3.0, -4.0, -5.0, -6.0, -7.0, -8.0]) == 1.0", "assert mean_absolute_deviation([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0]) == 1.0", "assert mean_absolute_deviation([5.0, 6.0, 7.0, 8.0]) == 5.0", "assert mean_absolute_deviation([-12.0, -11.0, -10.0, -9.0]) == 11.0", "assert mean_absolute_deviation([-3.0, -2.0, -1.0, -0.0]) == 4.0", "assert mean_absolute_deviation([10.0, 20.0, 30.0, 40.0]) == 40.0", "assert mean_absolute_deviation([1.0, 2.0, 3.0, 4.0]) == 1.", "assert mean_absolute_deviation([-1.0, -2.0, -3.0, -4.0]) == 0.0", "assert mean_absolute_deviation([-10.0, -9.0, -8.0, -7.0]) == 8.0", "assert mean_absolute_deviation([-100.0, -90.0, -80.0, -70.0]) == 90.0", "assert mean_absolute_deviation([100.0, 90.0, 80.0, 70.0]) == 30.0", "assert mean_absolute_deviation([-12.0, -11.0, -10.0, -9.0]) == -11.0", "assert mean_absolute_deviation([-3.0, -2.0, -1.0, 0.0]) == 1.0", "assert mean_absolute_deviation([5.0, 6.0, 7.0, 8.0]) == 5.5", "assert mean_absolute_deviation([-10.0, -9.0, -8.0, -7.0]) == -1.0", "assert mean_absolute_deviation([10.0, 11.0, 12.0, 13.0]) == 11.0", "assert mean_absolute_deviation([-100.0, -90.0, -80.0, -70.0]) == -90.0", "assert mean_absolute_deviation([100.0, 110.0, 120.0, 130.0]) == 115.0", "assert mean_absolute_deviation([-100.0, -200.0, -300.0, -400.0]) == 400.0", "assert mean_absolute_deviation([100.0, 200.0, 300.0, 400.0]) == 100.0", "assert mean_absolute_deviation([50.0, 50.0, 50.0, 50.0]) == 50.0", "assert mean_absolute_deviation([100.0, 200.0, 300.0, 400.0]) == 250.0", "assert mean_absolute_deviation([-10.0, -20.0, -30.0, -40.0]) == 10.0", "assert mean_absolute_deviation([10.0, 11.0, 12.0, 13.0]) == 3.0", "assert mean_absolute_deviation([-100.0, -90.0, -80.0, -70.0]) == -140.0", "assert mean_absolute_deviation([100.0, 110.0, 120.0, 130.0]) == 30.0", "assert mean_absolute_deviation([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0]) == 1.0", "assert mean_absolute_deviation([-1000, -999, -983, -975]) == -983", "assert mean_absolute_deviation([1000, 999, 995, 987]) == 995", "assert mean_absolute_deviation([-1000, -1001, -1002, -1003]) == -1002", "assert mean_absolute_deviation([1000, 1001, 1002, 1003]) == 1002", "assert mean_absolute_deviation([1, 2, 3, 4]) == 2", "assert mean_absolute_deviation([-1, -2, -3, -4]) == -2", "assert mean_absolute_deviation([10.0, 9.0, 8.0, 7.0]) == 5.0", "assert mean_absolute_deviation([-12.0, -11.0, -10.0, -9.0]) == 10.0", "assert mean_absolute_deviation([12.0, 11.0, 10.0, 9.0]) == 9.5", "assert mean_absolute_deviation([-1000.0, -2000.0, -3000.0, -4000.0]) == 4000.0"]}
{"HumanEval/5": ["assert intersperse([1, 2, 3], 4) == [1, 4, 2, 4, 3]", "assert intersperse([1, 2, 3], 5) == [1, 2, 3, 5, 3, 2]", "assert intersperse([1, 2, 3], 6) == [1, 2, 3, 6, 6, 3, 2]", "assert intersperse([1, 2, 3], 7) == [1, 2, 3, 7, 7, 3, 2]", "assert intersperse([1, 2, 3], 8) == [1, 2, 3, 8, 8, 3, 2]", "assert intersperse([1, 2, 3], 9) == [1, 2, 3, 9, 9, 3, 2]", "assert intersperse([1, 2, 3], 10) == [1, 2, 3, 10, 10, 3, 2]", "assert intersperse([1, 2, 3], 11) == [1, 2, 3, 11, 11, 3, 2]", "assert intersperse([1, 2, 3], 12) == [1, 2, 3, 12, 12, 3, 2]", "assert intersperse([1, 2, 3], 6) == [1, 2, 3, 6, 3, 2, 6]", "assert intersperse([1, 2, 3], 7) == [1, 2, 3, 7, 3, 2, 7, 3]", "assert intersperse([1, 2, 3], 8) == [1, 2, 3, 8, 3, 2, 8, 3]", "assert intersperse([1, 2, 3], 9) == [1, 2, 3, 9, 3, 2, 9, 3]", "assert intersperse([1, 2, 3], 10) == [1, 2, 3, 10, 3, 2, 10, 3]", "assert intersperse([1, 2, 3], 5) == [1, 2, 3, 5, 2, 3]", "assert intersperse([1, 2, 3], 0) == [1, 2, 3]", "assert intersperse([1, 2, 3], -1) == [1, 2, 3]", "assert intersperse([1, 2, 3], -5) == [1, 2, 3, 5]", "assert intersperse([1, 2, 3], 10) == [1, 2, 3, 10]", "assert intersperse([1, 2, 3], 100) == [1, 2, 3, 100]", "assert intersperse([1, 2, 3], 1000) == [1, 2, 3, 1000]", "assert intersperse([1, 2, 3], 5) == [1, 2, 3, 5, 3]", "assert intersperse([1, 2, 3], 1) == [1, 2, 3, 1]", "assert intersperse([1, 2, 3], 2) == [1, 2, 3, 2, 3]", "assert intersperse([1, 2, 3], 3) == [1, 2, 3, 3, 3]", "assert intersperse([1, 2, 3], 3) == [1, 2, 3, 3, 2, 3]", "assert intersperse([1, 2, 3], -1) == [1, 2, 3, -1, 2, 3]", "assert intersperse([1, 2, 3], 1) == [1, 2, 3, 1, 2, 3]", "assert intersperse([1, 2, 3], -1000) == [1, 2, 3, -1000, 2, 3]", "assert intersperse([1, 2, 3], 1000) == [1, 2, 3, 1000, 2, 3]", "assert intersperse([1, 2, 3], 2) == [1, 2, 3, 2, 1]", "assert intersperse([1, 2, 3], 3) == [1, 2, 3, 3, 2, 1]", "assert intersperse([1, 2, 3], 4) == [1, 2, 3, 4, 2, 1]", "assert intersperse([1, 2, 3], 5) == [1, 2, 3, 5, 2, 1]", "assert intersperse([1, 2, 3], 6) == [1, 2, 3, 6, 3]", "assert intersperse([1, 2, 3], 7) == [1, 2, 3, 7, 3]", "assert intersperse([1, 2, 3], 8) == [1, 2, 3, 8, 3]", "assert intersperse([1, 2, 3], 9) == [1, 2, 3, 9, 3]", "assert intersperse([1, 2, 3], 10) == [1, 2, 3, 10, 3]", "assert intersperse([1, 2, 3], 11) == [1, 2, 3, 11, 3]", "assert intersperse([1, 2, 3], 12) == [1, 2, 3, 12, 3]", "assert intersperse([1, 2, 3], 3) == [1, 2, 3, 2, 3]", "assert intersperse([1, 2, 3], 5) == [1, 2, 3, 2, 3, 2, 3]", "assert intersperse([1, 2, 3], -1) == [1, 2, 3, 2, 3]", "assert intersperse([1, 2, 3], 10) == [1, 2, 3, 2, 3, 2, 3, 2, 3]", "assert intersperse([1, 2, 3], 6) == [1, 6, 2, 6, 3]", "assert intersperse([1, 2, 3], -7) == [1, 2, 3, -7, 3]", "assert intersperse([1, 2, 3], 5) == [1, 2, 3, 5, 3, 2, 4]", "assert intersperse([1, 2, 3], -3) == [1, 2, 3, -3]", "assert intersperse([1, 2, 3], 3) == [1, 2, 3, 3]", "assert intersperse([1, 2, 3], 6) == [1, 2, 3, 6, 2, 3]", "assert intersperse([1, 2, 3], 2) == [1, 2, 3, 2, 2, 3]", "assert intersperse([1, 2, 3], 0) == [1, 2, 3, 0, 2, 3]", "assert intersperse([1, 2, 3], -5) == [-1, 2, 3, -2, 3]", "assert intersperse([1, 2, 3], float('inf')) == [1, float('inf'), 2, float('inf'), 3]", "assert intersperse([1, 2, 3], float('-inf')) == [1, -2, -3, -2, -3]", "assert intersperse([1, 2, 3], 5) == [1, 2, 3, 5, 5, 3]", "assert intersperse([1, 2, 3], 0) == [1, 2, 3, 0, 3]", "assert intersperse([1, 2, 3], -1) == [1, 2, 3, -1, 3]", "assert intersperse([1, 2, 3], 4.5) == [1, 2, 3, 4.5, 4.5, 3]", "assert intersperse([1, 2, 3], [4]) == [1, 2, 3, 4, 4, 3]", "assert intersperse([1, 2, 3], 1) == [1, 2, 3, 1, 3]", "assert intersperse([1, 2, 3], -3) == [1, 2, 3, -3, 3]", "assert intersperse([1, 2, 3], -5) == [1, 2, 3, -3, 2, 4]", "assert intersperse([1, 2, 3], 10) == [1, 2, 3, 10, 3, 2, 4]", "assert intersperse([1, 2, 3], -10) == [1, 2, 3, -3, 2, 4, -3]", "assert intersperse([1, 2, 3], 0) == [1, 2, 3, 2, 3, 2, 3, 2, 3]", "assert intersperse([1, 2, 3], -1) == [1, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3]", "assert intersperse([1, 2, 3], None) == [1, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3]", "assert intersperse([1, 2, 3], 4.5) == [1, 4.5, 2, 4.5, 3]", "assert intersperse([1, 2, 3], 4.5 * 2) == [1, 4.5, 2, 8, 3]", "assert intersperse([1, 2, 3], -5) == [1, 2, 3, -2, 3]", "assert intersperse([1, 2, 3], float('-inf')) == [1, float('-inf'), 2, float('-inf'), 3]", "assert intersperse([1, 2, 3], [4]) == [1, 2, 3, 4]", "assert intersperse([1, 2, 3], [4, 5]) == [1, 2, 3, 4, 5]", "assert intersperse([1, 2, 3], [4, 5, 6]) == [1, 2, 3, 4, 5, 6]", "assert intersperse([1, 2, 3], -5) == [-1, -2, -3, 1, 2, 3]", "assert intersperse([1, 2, 3], [4, 5]) == [1, 4, 2, 4, 3, 5, 2, 3, 4, 5]", "assert intersperse([1, 2, 3], -5) == [1, 2, 3, -3, 2]", "assert intersperse([1, 2, 3], -5) == [1, 2, 3, -3, 2, 3]", "assert intersperse([1, 2, 3], 1) == [1, 2, 3]", "assert intersperse([1, 2, 3], -5) == [-1, -2, -3, 2, 3]", "assert intersperse([1, 2, 3], 10) == [1, 2, 3, 10, 2, 3]", "assert intersperse([1, 2, 3], -10) == [1, 2, 3, -10, 2, 3]", "assert intersperse([1, 2, 3], 6) == [1, 2, 3, 2, 3, 2, 3]", "assert intersperse([1, 2, 3], -4) == [1, 2, 3, 2, 3, 2, 3]", "assert intersperse([1, 2, 3], 5) == [1, 2, 3, 2, 3, 2, 3, 2, 3]", "assert intersperse([1, 2, 3], 4) == [1, 2, 3, 4, 2, 3]", "assert intersperse([1, 2, 3], -10) == [1, 2, 3, -3, 2, 3]", "assert intersperse([1, 2, 3], -1000) == [1, 2, 3]", "assert intersperse([1, 2, 3], -5) == [1, 2, 3, -5, 2, 3]", "assert intersperse([1, 2, 3], 100) == [1, 2, 3, 100, 2, 3]", "assert intersperse([1, 2, 3], float('inf')) == [1, 2, 3, float('inf'), 2, 3]", "assert intersperse([1, 2, 3], float('-inf')) == [1, 2, 3, -float('inf'), 2, 3]"]}
{"HumanEval/6": ["assert parse_nested_parens('((()))') == [2, 1]", "assert parse_nested_parens('(()())') == [2, 1]", "assert parse_nested_parens('(()()) ((())) () ((())()())') == [2, 3, 1, 3]", "assert parse_nested_parens('(())') == [1, 1]", "assert parse_nested_parens('((()))') == []", "assert parse_nested_parens('(a))') == [1]", "assert parse_nested_parens('(a(b(c)))') == [2, 3]", "assert parse_nested_parens(\"()\") == []", "assert parse_nested_parens(\"(())\") == [1]", "assert parse_nested_parens(\"((()))\") == [2, 1]", "assert parse_nested_parens(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3]", "assert parse_nested_parens(\"(()())\") == [2]", "assert parse_nested_parens(\"((()))\") == [1, 2]", "assert parse_nested_parens(\"(()()) (\\\\*\\\\*) \\\\*\\\\*\\\\*\") == [2, 3, 3, 3]", "assert parse_nested_parens('(())') == [1]", "assert parse_nested_parens('()') == [1]", "assert parse_nested_parens('') == []", "assert parse_nested_parens('((()))') == [2]", "assert parse_nested_parens('( ) ') == []", "assert parse_nested_parens('( ( ) ) ' ) == [2]", "assert parse_nested_parens(\"(()()) (\\\\*\\\\*) (\\\\*\\\\*) ()\") == [2, 3, 1, 3]", "assert parse_nested_parens('(()()) ((()))') == [2, 3]", "assert parse_nested_parens(\"(()()) (\\\"\\\"(())\\\"))\") == [2, 3, 1, 3]", "assert parse_nested_parens(\"((()))(\\\"\\\"((()))\\\"))\") == [1, 2, 3, 1, 3]", "assert parse_nested_parens(\"(()))\") == [2]", "assert parse_nested_parens(\"(()()())\") == [2, 2]", "assert parse_nested_parens(\"(()()()())\") == [2, 3]", "assert parse_nested_parens('((()))') == [1, 2]", "assert parse_nested_parens('((())) ((()))') == [3, 1, 1]", "assert parse_nested_parens('((())) () ((()))') == [3, 1, 1, 1]", "assert parse_nested_parens('((())) () ((())) ()') == [3, 1, 1, 1, 1]", "assert parse_nested_parens('((())()())') == [2, 1, 1]", "assert parse_nested_parens('((())()()) () ((())()())') == [3, 1, 1, 1, 1, 1]", "assert parse_nested_parens('(a) (b (c))') == [2, 3, 1, 3]", "assert parse_nested_parens('((a))') == [2, 3, 1, 3]", "assert parse_nested_parens('(a (b c))') == [2, 3, 1, 3]", "assert parse_nested_parens('(a)') == [2, 3, 1, 3]", "assert parse_nested_parens('(a b c d e f g h i j k l m n o p q r s t u v w x y z)') == [2, 3, 1, 3]", "assert parse_nested_parens(\"((())) () ((())())\") == [2, 3, 1, 3]", "assert parse_nested_parens(\"((((())))())\") == [3, 2, 1]", "assert parse_nested_parens(\"((((((())))))())\") == [3, 2, 1, 3]", "assert parse_nested_parens(\"(()))\") == [1]", "assert parse_nested_parens(\"((((((()))))))((()))\") == [2, 3, 1, 3]", "assert parse_nested_parens(\"(((())())())\") == [3, 1, 3]", "assert parse_nested_parens('(()())') == [2, 3]", "assert parse_nested_parens('((())) ((()))') == [2, 3, 1]", "assert parse_nested_parens('((())) ((())) ((()))') == [2, 3, 1, 3]", "assert parse_nested_parens('(()))') == [2]", "assert parse_nested_parens('(()())()') == [2, 3]", "assert parse_nested_parens('((())))') == [2, 2]", "assert parse_nested_parens('((((())))))') == [3, 2]", "assert parse_nested_parens('(a)((b))c') == [1, 2, 1, 2]", "assert parse_nested_parens('(a)b') == [1, 1, 1, 1]", "assert parse_nested_parens('((a))b') == [1, 1, 1, 1]", "assert parse_nested_parens('(a))b') == [1, 1, 1, 1]", "assert parse_nested_parens('(((())())))') == [2, 1, 1, 1]", "assert parse_nested_parens(\"(((())())())\") == [3, 2, 1]", "assert parse_nested_parens(\"((((())))())\") == [4, 3, 2, 1]", "assert parse_nested_parens(\"((((((())))())())\") == [5, 4, 3, 2, 1]", "assert parse_nested_parens(\"((((((((())))())())())\") == [6, 5, 4, 3, 2, 1]", "assert parse_nested_parens(\"((((((((((((()))))))())())())\") == [7, 6, 5, 4, 3, 2, 1]", "assert parse_nested_parens(\"((())) () ((())()())\") == [2, 3, 1, 3]", "assert parse_nested_parens(\"((((())))\") == [3, 2]", "assert parse_nested_parens(\"((((((())))\") == [3, 2, 2]", "assert parse_nested_parens(\"((((((((())))\") == [3, 2, 2, 2]", "assert parse_nested_parens(\"((((((((((())))\") == [3, 2, 2, 2, 2]", "assert parse_nested_parens(\"((((((((((((())))\") == [3, 2, 2, 2, 2, 2]", "assert parse_nested_parens(\"())\") == [1]", "assert parse_nested_parens(\"()\") == [1]", "assert parse_nested_parens(\"\") == [0]", "assert parse_nested_parens(\"(()())\") == [2, 2]", "assert parse_nested_parens(\"((()))\") == [1, 1]", "assert parse_nested_parens(\"((())) ((()))\") == [2, 2, 1]", "assert parse_nested_parens('(a)((b))c') == [2, 1, 2]", "assert parse_nested_parens('((a))') == [2]", "assert parse_nested_parens('((((a))))') == [3]", "assert parse_nested_parens('(((a))b)') == [2, 1]", "assert parse_nested_parens('((((((a)))))())') == [3, 2]", "assert parse_nested_parens('((((((((a))))))))') == [4, 3]", "assert parse_nested_parens('((((((((((a)))))))))))') == [5, 4]", "assert parse_nested_parens(\"(()())\") == [2, 3]", "assert parse_nested_parens(\"((()))\") == [1, 3]", "assert parse_nested_parens(\"(()()) (\\((())))\") == [2, 3, 1, 3]", "assert parse_nested_parens(\"(()))\") == [2, 3]", "assert parse_nested_parens(\"(())()()\") == [1, 3]", "assert parse_nested_parens(\"((()))()\") == [1, 3]", "assert parse_nested_parens(\"(()())()()\") == [2, 3, 1, 3]", "assert parse_nested_parens(\"()()()()()\") == [3, 3, 3, 3]", "assert parse_nested_parens(\"((()))()\") == [2, 1, 1]", "assert parse_nested_parens(\"((())())()\") == [3, 2, 1]", "assert parse_nested_parens(\"((()))()())\") == [3, 3, 2]", "assert parse_nested_parens(\"((())())()()\") == [4, 3, 2]", "assert parse_nested_parens(\"((())())()()()\") == [5, 4, 3]", "assert parse_nested_parens(\"(()())\") == [2, 1]", "assert parse_nested_parens(\"((())) () ((())()())\") == [3, 1, 3]", "assert parse_nested_parens(\"(())()()\") == [2, 2, 2]", "assert parse_nested_parens(\"((()))()()\") == [1, 1, 1]", "assert parse_nested_parens(\"()()()()\") == [1, 1, 1]", "assert parse_nested_parens(\"()()()()()\") == [1, 1, 1]", "assert parse_nested_parens(\"())()()()\") == [2, 2, 2]", "assert parse_nested_parens(\"(()()) (\\\\*\\\\*) (\\\\*) \\\\*\\\\*\\\\*\") == [2, 3, 1, 3]", "assert parse_nested_parens(\"((()))\") == [2]"]}
{"HumanEval/7": ["assert filter_by_substring([\"hello\", \"world\"], \"l\") == [\"hello\"]", "assert filter_by_substring([\"hello\", \"world\", \"world\"], \"o\") == [\"world\"]", "assert filter_by_substring([\"hello\", \"world\", \"world\", \"array\"], \"a\") == [\"hello\", \"world\", \"world\"]", "assert filter_by_substring([\"hello\", \"world\", \"world\", \"array\"], \"r\") == [\"array\"]", "assert filter_by_substring([\"hello\", \"world\", \"world\", \"array\", \"array\"], \"a\") == [\"hello\", \"world\", \"world\"]", "assert filter_by_substring([\"hello\", \"world\", \"world\", \"array\", \"array\", \"array\"], \"a\") == [\"hello\", \"world\", \"world\"]", "assert filter_by_substring([\"hello\", \"world\", \"world\", \"array\", \"array\", \"array\", \"array\"], \"a\") == [\"hello\", \"world\", \"world\"]", "assert filter_by_substring([\"hello\", \"world\", \"python\"], \"l\") == [\"hello\"]", "assert filter_by_substring([\"hello\", \"world\", \"python\"], \"p\") == [\"python\"]", "assert filter_by_substring([\"hello\", \"world\", \"python\"], \"o\") == [\"world\"]", "assert filter_by_substring([\"hello\", \"world\", \"python\"], \"\") == [\"hello\", \"world\", \"python\"]", "assert filter_by_substring([\"hello\", \"world\", \"python\"], \"xyz\") == []", "assert filter_by_substring([\"hello\", \"world\", \"python\"], \"abc\") == [\"hello\", \"world\"]", "assert filter_by_substring([\"hello\", \"world\", \"python\"], \"ab\") == [\"hello\", \"world\"]", "assert filter_by_substring([\"hello\", \"world\", \"python\"], \"lo\") == [\"hello\"]", "assert filter_by_substring([\"hello\", \"world\", \"python\"], \"worl\") == [\"world\", \"python\"]", "assert filter_by_substring([\"hello\", \"world\", \"python\"], \"pytho\") == [\"python\"]", "assert filter_by_substring([\"hello\", \"world\", \"python\"], \"world\") == [\"world\", \"python\"]", "assert filter_by_substring([\"hello\", \"world\", \"python\"], \"h\") == [\"hello\", \"world\", \"python\"]", "assert filter_by_substring([\"hello\", \"world\"], \"o\") == [\"world\"]", "assert filter_by_substring([\"hello\", \"world\"], \"\") == [\"hello\", \"world\"]", "assert filter_by_substring([\"hello\", \"world\"], \"a\") == [\"hello\", \"world\"]", "assert filter_by_substring([\"hello\", \"world\"], \"h\") == [\"world\"]", "assert filter_by_substring([\"hello\", \"world\"], \"e\") == [\"llo\", \"rld\"]", "assert filter_by_substring([\"hello\", \"world\"], \" \") == [\"hello\", \"world\"]", "assert filter_by_substring([\"hello\", \"world\", \"world\"], \"w\") == [\"world\"]", "assert filter_by_substring([\"hello\", \"world\", \"python\"], \"o\") == [\"world\", \"python\"]", "assert filter_by_substring([\"hello\", \"world\", \"python\"], \"ar\") == [\"array\"]", "assert filter_by_substring([\"hello\", \"world\", \"python\"], \"lo\") == [\"world\", \"python\"]", "assert filter_by_substring([\"hello\", \"world\", \"llo\"], \"o\") == [\"world\", \"llo\"]", "assert filter_by_substring([\"hello\", \"world\", \"llo\", \"world\"], \"w\") == [\"hello\", \"world\", \"llo\"]", "assert filter_by_substring([\"hello\", \"world\", \"llo\", \"world\", \"hello\"], \"h\") == [\"hello\", \"world\", \"llo\", \"world\"]", "assert filter_by_substring([\"hello\", \"world\", \"llo\", \"world\", \"hello\", \"world\", \"llo\"], \"h\") == [\"hello\", \"world\", \"llo\", \"world\"]", "assert filter_by_substring([\"hello\", \"world\", \"llo\", \"world\", \"hello\", \"world\", \"llo\", \"world\", \"hello\"], \"h\") == [\"hello\", \"world\", \"llo\", \"world\"]", "assert filter_by_substring([\"hello\", \"world\", \"python\"], \"ol\") == [\"world\", \"python\"]", "assert filter_by_substring([\"hello\", \"world\", \"python\"], \"a\") == [\"hello\", \"world\", \"python\"]", "assert filter_by_substring([\"hello\", \"world\", \"python\"], \"hello\") == [\"hello\", \"world\", \"python\"]", "assert filter_by_substring([\"hello\", \"world\", \"world\", \"array\", \"hello\"], \"r\") == [\"array\", \"hello\"]", "assert filter_by_substring([\"hello\", \"world\", \"world\", \"array\", \"hello\", \"world\"], \"r\") == [\"array\", \"hello\", \"world\"]", "assert filter_by_substring([\"hello\", \"world\", \"world\", \"array\", \"hello\", \"world\", \"world\"], \"r\") == [\"array\", \"hello\", \"world\", \"world\"]", "assert filter_by_substring([\"hello\", \"world\", \"goodbye\"], \"lo\") == [\"hello\", \"world\"]", "assert filter_by_substring([\"hello\", \"world\", \"goodbye\", \"how\"], \"wo\") == [\"hello\", \"world\"]", "assert filter_by_substring([\"hello\", \"world\", \"goodbye\", \"how\", \"are\"], \"you\") == [\"hello\", \"world\"]", "assert filter_by_substring([\"hello\", \"world\", \"goodbye\", \"how\", \"are\", \"you\", \"okay\"], \"ok\") == [\"hello\", \"world\"]", "assert filter_by_substring([\"hello\", \"world\"], \"w\") == [\"world\"]", "assert filter_by_substring([\"hello\", \"world\"], \"xyz\") == [\"hello\", \"world\"]", "assert filter_by_substring([\"hello\", \"world\", \"hello\", \"world\"], \"o\") == [\"hello\", \"world\"]", "assert filter_by_substring([\"hello\", \"world\", \"hello\", \"world\"], \"a\") == [\"hello\", \"world\"]", "assert filter_by_substring([\"hello\", \"world\", \"world\", \"array\", \"hello\"], \"h\") == [\"hello\", \"world\", \"world\"]", "assert filter_by_substring([\"hello\", \"world\", \"world\", \"array\", \"hello\", \"world\"], \"h\") == [\"hello\", \"world\", \"world\"]", "assert filter_by_substring([\"hello\", \"world\", \"world\", \"array\", \"hello\", \"world\", \"world\"], \"h\") == [\"hello\", \"world\", \"world\"]", "assert filter_by_substring([\"hello\", \"world\", \"world\", \"array\", \"hello\", \"world\", \"world\", \"world\"], \"h\") == [\"hello\", \"world\", \"world\"]", "assert filter_by_substring([\"hello\", \"world\", \"python\"], \"wor\") == [\"world\", \"python\"]", "assert filter_by_substring([\"hello\", \"world\", \"python\"], \"py\") == [\"python\"]", "assert filter_by_substring([\"hello\", \"world\", \"python\"], \"array\") == []", "assert filter_by_substring([\"hello\", \"world\", \"python\", \"array\"], \"a\") == [\"hello\", \"world\", \"python\"]", "assert filter_by_substring([\"hello\", \"world\", \"python\"], \"lo\") == [\"hello\", \"world\"]", "assert filter_by_substring([\"hello\", \"world\", \"python\"], \"la\") == [\"hello\", \"world\"]", "assert filter_by_substring([\"hello\", \"world\", \"python\"], \"lol\") == []", "assert filter_by_substring([\"hello\", \"world\", \"python\"], \"\") == []", "assert filter_by_substring([\"hello\", \"world\", \"python\"], \"pytho\") == []", "assert filter_by_substring([\"hello\", \"world\", \"python\"], \"py\") == []", "assert filter_by_substring([\"hello\", \"world\", \"python\"], \"p\") == [\"pytho\"]", "assert filter_by_substring([\"hello\", \"world\", \"python\"], \"python\") == [\"hello\", \"world\", \"python\"]", "assert filter_by_substring([\"hello\", \"world\", \"python\"], \"pytho\") == [\"world\", \"python\"]", "assert filter_by_substring([\"hello\", \"world\", \"python\"], \"ar\") == [\"hello\", \"world\", \"python\"]", "assert filter_by_substring([\"hello\", \"world\", \"world\", \"array\"], \"w\") == [\"world\", \"world\", \"array\"]", "assert filter_by_substring([\"hello\", \"world\", \"world\", \"array\", \"array\"], \"w\") == [\"world\", \"world\", \"array\"]", "assert filter_by_substring([\"hello\", \"world\", \"world\", \"array\", \"array\", \"array\", \"array\"], \"w\") == [\"world\", \"world\", \"array\"]", "assert filter_by_substring([\"hello\", \"world\", \"world\", \"array\", \"array\", \"array\", \"array\", \"array\", \"array\"], \"w\") == [\"world\", \"world\", \"array\"]", "assert filter_by_substring([\"hello\", \"world\", \"python\"], \"world\") == [\"hello\", \"world\", \"python\"]", "assert filter_by_substring([\"hello\", \"world\", \"python\"], \"xy\") == []", "assert filter_by_substring([\"hello\", \"world\", \"python\"], \"hello\") == [\"hello\"]", "assert filter_by_substring([\"hello\", \"world\", \"python\"], \"p\") == [\"world\", \"python\"]", "assert filter_by_substring([\"hello\", \"world\", \"python\"], \"lol\") == [\"hello\", \"world\"]", "assert filter_by_substring([\"hello\", \"world\", \"python\"], \"love\") == [\"hello\", \"world\"]", "assert filter_by_substring([\"hello\", \"world\", \"python\"], \"pytho\") == [\"hello\", \"world\", \"python\"]", "assert filter_by_substring([\"hello\", \"world\", \"python\"], \"py\") == [\"hello\", \"world\", \"python\"]", "assert filter_by_substring([\"hello\", \"world\", \"world\", \"array\"], \"w\") == [\"world\", \"array\"]", "assert filter_by_substring([\"hello\", \"world\", \"world\", \"array\", \"hello\"], \"h\") == [\"hello\"]", "assert filter_by_substring([\"hello\", \"world\", \"world\", \"array\", \"hello\", \"world\"], \"o\") == [\"world\", \"array\"]", "assert filter_by_substring([\"hello\", \"world\", \"python\"], \"w\") == [\"world\", \"python\"]", "assert filter_by_substring([\"hello\", \"world\", \"python\"], \"o\") == []", "assert filter_by_substring([\"hello\", \"world\", \"python\"], \"abc\") == [\"hello\", \"world\", \"python\"]", "assert filter_by_substring([\"hello\", \"world\", \"python\"], \"python\") == [\"python\"]", "assert filter_by_substring([\"hello\", \"world\", \"python\"], \"l\") == [\"hello\", \"world\"]", "assert filter_by_substring([\"hello\", \"world\", \"python\"], \"h\") == [\"hello\"]", "assert filter_by_substring([\"hello\", \"world\"], \"xyz\") == []", "assert filter_by_substring([\"hello\", \"world\", \"abc\", \"xyz\"], \"abc\") == [\"abc\"]", "assert filter_by_substring([\"hello\", \"world\", \"abc\", \"xyz\"], \"xyz\") == [\"abc\", \"xyz\"]", "assert filter_by_substring([\"hello\", \"world\", \"python\"], \"ll\") == [\"hello\", \"world\"]", "assert filter_by_substring([\"hello\", \"world\", \"array\"], \"r\") == [\"array\"]", "assert filter_by_substring([\"hello\", \"world\", \"array\"], \"o\") == [\"world\", \"array\"]", "assert filter_by_substring([\"hello\", \"world\", \"world\"], \"l\") == [\"hello\"]", "assert filter_by_substring([\"hello\", \"world\", \"world\", \"array\"], \"r\") == [\"world\", \"array\"]", "assert filter_by_substring([\"hello\", \"world\", \"world\", \"array\"], \"\") == [\"world\", \"array\"]", "assert filter_by_substring([\"hello\", \"world\", \"world\", \"array\"], \"a\") == [\"array\"]", "assert filter_by_substring([\"hello\", \"world\", \"python\"], \"pyt\") == [\"python\"]", "assert filter_by_substring([\"hello\", \"world\"], \"lo\") == [\"hello\"]", "assert filter_by_substring([\"hello\", \"world\"], \"wor\") == [\"world\"]", "assert filter_by_substring([\"hello\", \"world\"], \"\") == [\"hello\"]", "assert filter_by_substring([\"hello\", \"world\"], \"ar\") == [\"array\"]", "assert filter_by_substring([\"hello\", \"world\", \"array\"], \"a\") == [\"hello\", \"world\"]", "assert filter_by_substring([\"hello\", \"world\", \"array\"], \"wo\") == [\"world\"]", "assert filter_by_substring([\"hello\", \"world\", \"array\"], \"re\") == [\"array\"]", "assert filter_by_substring([\"hello\", \"world\", \"goodbye\", \"array\"], \"wo\") == [\"hello\", \"world\"]", "assert filter_by_substring([\"hello\", \"world\", \"goodbye\", \"array\", \"data\"], \"wo\") == [\"hello\", \"world\"]", "assert filter_by_substring([\"hello\", \"world\", \"goodbye\", \"array\", \"data\", \"more data\"], \"wo\") == [\"hello\", \"world\"]", "assert filter_by_substring([\"hello\", \"world\", \"goodbye\", \"array\", \"data\", \"more data\", \"even more data\"], \"wo\") == [\"hello\", \"world\"]", "assert filter_by_substring([\"hello\", \"world\", \"goodbye\", \"array\", \"data\", \"more data\", \"even more data\", \"extra data\"], \"wo\") == [\"hello\", \"world\"]", "assert filter_by_substring([\"hello\", \"world\", \"goodbye\", \"array\", \"data\", \"more data\", \"even more data\", \"extra data\", \"data extra\"], \"wo\") == [\"hello\", \"world\"]", "assert filter_by_substring([\"hello\", \"world\", \"world\", \"array\", \"array\", \"array\", \"array\", \"array\"], \"w\") == [\"world\", \"world\", \"array\"]"]}
{"HumanEval/8": ["assert sum_product([]) == (0, 1)", "assert sum_product([1]) == (1, 1)", "assert sum_product([2, 3, 4]) == (10, 24)", "assert sum_product([-1, 2, 3, 4]) == (9, 24)", "assert sum_product([1, 2, 3, 4, 5]) == (15, 120)", "assert sum_product([-1, -2, -3, -4, -5]) == (-14, 8)", "assert sum_product([-1, -2, -3, -4]) == (-10, 8)", "assert sum_product([1, 2, 3, 4, 5, 6]) == (21, 196)", "assert sum_product([-1, 2, 3, 4]) == (9, 84)", "assert sum_product([1, 2, 3, 4, 5]) == (21, 120)", "assert sum_product([-1, -2, -3, -4]) == (-14, 8)", "assert sum_product([1, 2, 3, 4, 5]) == (30, 120)", "assert sum_product([-10, -20, -30, -40, -50]) == (-100, 100)", "assert sum_product([-1, 2, 3, 4]) == (8, 24)", "assert sum_product([1, 2, 3, 4, 5, 6]) == (21, 360)", "assert sum_product([1, 2, 3, 4, 5, 6]) == (21, 720)", "assert sum_product([-1, 2, 3, 4]) == (8, 60)", "assert sum_product([5, 23, -11]) == (39, 1611)", "assert sum_product([12, -3, 1]) == (16, 10)", "assert sum_product([3, -2, 0]) == (1, 2)", "assert sum_product([-1, -2, -3, -4, -5]) == (-10, -24)", "assert sum_product([1, 2, 3, 4, 5, 6]) == (15, 360)", "assert sum_product([1, 2, 3, 4, 5, 6]) == (21, 180)", "assert sum_product([1, 2, 3, 4, 5, 6]) == (15, 216)", "assert sum_product([1, 2, 3, 4, 5, 6]) == (21, 240)", "assert sum_product([-1, -2, -3, -4, -5]) == (-10, 10)", "assert sum_product([-1, -2, -3, -4]) == (-9, 8)", "assert sum_product([5, 23, -11]) == (39, 110)", "assert sum_product([12, -3, 1]) == (36, 12)", "assert sum_product([3, -2, 0]) == (6, 2)", "assert sum_product([-12, 0, 1]) == (-13, 1)", "assert sum_product([-1, -2, -3, -4, -5]) == (-10, 6)", "assert sum_product([5, 23, -11]) == (39, 327)", "assert sum_product([-12, 0, 1]) == (13, 1)", "assert sum_product([12, -3, 1]) == (10, 1)", "assert sum_product([5, 23, -11]) == (49, 121)", "assert sum_product([5, 23, -11]) == (44, 342)", "assert sum_product([5, 23, -11]) == (39, 1199)", "assert sum_product([5, 6, 7, 8]) == (30, 240)", "assert sum_product([5, 23, -11]) == (39, 137)", "assert sum_product([12, -3, 1]) == (36, 10)", "assert sum_product([12, -3, 1]) == (27, 12)", "assert sum_product([-1, -2, -3, -4, -5]) == (-11, -24)", "assert sum_product([1, 2, 3, 4, 5, 0]) == (15, 120)", "assert sum_product([1, 2, 3, 4, 5, 6]) == (21, 72)", "assert sum_product([5, 23, -11]) == (49, 327)", "assert sum_product([5, 23, -11]) == (39, 367)", "assert sum_product([1, 2, 3, 4, 5, 6]) == (21, 216)", "assert sum_product([5, 23, -11]) == (39, 1319)", "assert sum_product([12, -3, 1]) == (10, 24)", "assert sum_product([-2, 1, 2, 3]) == (2, 8)", "assert sum_product([0, 0, 0, 0, 0]) == (0, 1)", "assert sum_product([1, 2, 3, 4, 5]) == (20, 120)", "assert sum_product([-1, -2, -3, -4, -5]) == (-15, -60)", "assert sum_product([5, 6, 7, 8]) == (30, 360)", "assert sum_product([5, 6, 7, 8]) == (30, 362)", "assert sum_product([9, 8, 7, 6]) == (45, 504)", "assert sum_product([1, 2, 3, 4, 5]) == (15, 200)", "assert sum_product([5, 23, -11]) == (39, 322)", "assert sum_product([5, 6, 7, 8]) == (30, 36)", "assert sum_product([1, 2, 3, 4, 5, 6]) == (30, 360)", "assert sum_product([1, 2, 3, 4, 5, 6]) == (20, 180)", "assert sum_product([-1, -2, -3, -4, -5]) == (-9, 8)", "assert sum_product([5, 23, -11]) == (39, 323)", "assert sum_product([12, -3, 1]) == (36, 13)", "assert sum_product([1, 2, 3, 4, 5]) == (25, 120)", "assert sum_product([-1, -2, -3, -4, -5]) == (-14, -60)", "assert sum_product([5, 23, -11]) == (39, 121)", "assert sum_product([12, -3, 1]) == (36, 36)", "assert sum_product([3, -2, 0]) == (6, 6)", "assert sum_product([5, 23, -11]) == (39, 349)", "assert sum_product([-1, -2, -3, -4, -5]) == (-14, 10)", "assert sum_product([1, 2, 3, 4, 5, 6]) == (30, 180)", "assert sum_product([-1, -2, -3, -4, -5]) == (-11, -120)", "assert sum_product([-1, -2, -3, -4, -5, -6]) == (-16, -360)", "assert sum_product([9, 10, 11, 12]) == (90, 1080)", "assert sum_product([-12, 0, 1]) == (-39, 1)", "assert sum_product([9, 8, 7, 6]) == (54, 729)", "assert sum_product([1, 2, 3, 4, 5]) == (15, 240)", "assert sum_product([1, 2, 3, 4, 5, 6]) == (30, 720)", "assert sum_product([5, 23, -11, 3, -2]) == (41, 312)", "assert sum_product([1, 2, 3, 4, 5, 6]) == (30, 216)", "assert sum_product([9, 10, 11, 12]) == (90, 1200)", "assert sum_product([12, -3, 1]) == (15, 10)", "assert sum_product([3, -2, 0]) == (1, 1)", "assert sum_product([-1, -2, -3, -4, -5]) == (-11, 6)", "assert sum_product([12, -3, 1]) == (15, 6)", "assert sum_product([-1, -2, -3, -4, -5]) == (-15, 8)", "assert sum_product([5, 23, -11]) == (39, 133)", "assert sum_product([12, -3, 1]) == (17, 1)", "assert sum_product([5, 23, -11]) == (49, 137)", "assert sum_product([5, 23, -11]) == (49, 1373)", "assert sum_product([12, -3, 1]) == (37, 12)", "assert sum_product([5, 23, -11]) == (39, 1231)", "assert sum_product([12, -3, 1]) == (10, 12)", "assert sum_product([5, 23, -11]) == (39, 369)", "assert sum_product([12, -3, 1]) == (17, 12)", "assert sum_product([5, 23, -11]) == (49, 1321)", "assert sum_product([12, -3, 1]) == (15, 12)", "assert sum_product([5, 23, -11]) == (39, 3129)", "assert sum_product([-12, 0, 1]) == (13, 12)", "assert sum_product([12, -3, 1]) == (16, 6)", "assert sum_product([5, 23, -11]) == (49, 369)", "assert sum_product([12, -3, 1]) == (36, 18)", "assert sum_product([3, -2, 0]) == (6, 12)", "assert sum_product([-12, 0, 1]) == (-42, 1)", "assert sum_product([5, 23, -11]) == (49, 2101)"]}
{"HumanEval/9": ["assert rolling_max([1, 2, 3, 2, 3, 4, 2]) == [1, 2, 3, 3, 3, 4, 4]", "assert rolling_max([-1, 2, 3, 2, 3, 4, 2]) == [-1, 2, 3, 3, 3, 4, 4]", "assert rolling_max([-1, -2, -3, -2, -3, -4, -2]) == [-1, -2, -3, -2, -3, -4, -2]", "assert rolling_max([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "assert rolling_max([-1000, -1001, -1002, -1003, -1004, -1005, -1006, -1007, -1008, -1009]) == [-1000, -1001, -1002, -1003, -1004, -1005, -1006, -1007, -1008, -1009]", "assert rolling_max([1.1, 2.2, 3.3, 2.2, 3.3, 4.4, 2.2]) == [1.1, 2.2, 3.3, 3.3, 3.3, 4.4, 4.4]", "assert rolling_max([-1.1, -2.2, -3.3, -2.2, -3.3, -4.4, -2.2]) == [-1.1, -2.2, -3.3, -2.2, -3.3, -4.4, -2.2]", "assert rolling_max([1.0, 2.0, 3.0, 2.0, 3.0, 4.0, 2.0]) == [1.0, 2.0, 3.0, 3.0, 3.0, 4.0, 4.0]", "assert rolling_max([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]) == [-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]", "assert rolling_max([-1000, -900, -800, -700, -600, -500, -400, -300, -200, -100]) == [-1000, -900, -800, -700, -600, -500, -400, -300, -200, -100]", "assert rolling_max([1.1, 2.2, 3.3, 2.2, 3.3, 4.4, 2.2]) == [1.1, 2.2, 3.3, 3.3, 4.4, 4.4]", "assert rolling_max([-1000, -999, -998, -997, -996, -995, -994, -993, -992, -991]) == [-1000, -999, -998, -997, -996, -995, -994, -993, -992, -991]", "assert rolling_max([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]", "assert rolling_max([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]", "assert rolling_max([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]", "assert rolling_max([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]", "assert rolling_max([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]", "assert rolling_max([1.0, 2.0, 3.0, 2.0, 3.0, 4.0, 2.0]) == [1.0, 2.0, 3.0, 2.0, 3.0, 4.0, 2.0]", "assert rolling_max([-1.0, -2.0, -3.0, -2.0, -3.0, -4.0, -2.0]) == [-1.0, -2.0, -3.0, -2.0, -3.0, -4.0, -2.0]", "assert rolling_max([-100.0, -99.0, -98.0, -97.0, -96.0, -95.0, -94.0, -93.0, -92.0, -91.0]) == [-100.0, -99.0, -98.0, -97.0, -96.0, -95.0, -94.0, -93.0, -92.0, -91.0]", "assert rolling_max([-1000.1, -999.2, -998.3, -997.2, -996.3, -995.2, -994.3, -993.2, -992.3, -991.2]) == [-1000.1, -999.2, -998.3, -997.2, -996.3, -995.2, -994.3, -993.2, -992.3, -991.2]", "assert rolling_max([1.0, 2.0, 3.0, 2.0, 3.0, 4.0, 2.0]) == [1.0, 2.0, 3.0, 3.0, 3.0, 4.0]", "assert rolling_max([-100.0, -90.0, -80.0, -70.0, -60.0, -50.0, -40.0, -30.0, -20.0, -10.0]) == [-100.0, -90.0, -80.0, -70.0, -60.0, -50.0, -40.0, -30.0, -20.0, -10.0]", "assert rolling_max([-1.0, -2.0, -3.0, -2.0, -3.0, -4.0, -2.0]) == [-1.0, -2.0, -3.0, -2.0, -3.0, -4.0]"]}
{"HumanEval/10": []}
{"HumanEval/11": ["assert string_xor('010', '110') == '100'", "assert string_xor('010', '010') == '000'", "assert string_xor('110', '110') == '110'", "assert string_xor('010', '101') == '111'", "assert string_xor('101', '010') == '111'", "assert string_xor('110', '010') == '001'", "assert string_xor('110', '101') == '111'", "assert string_xor('101', '110') == '011'", "assert string_xor('101', '101') == '111'", "assert string_xor('101', '011') == '110'", "assert string_xor('110', '001') == '110'", "assert string_xor('000', '111') == '000'", "assert string_xor('111', '000') == '111'", "assert string_xor('010', '') == '000'", "assert string_xor('', '110') == ''", "assert string_xor('', '') == ''", "assert string_xor('110', '110') == '111'", "assert string_xor('010', '101') == '011'", "assert string_xor('110', '011') == '111'", "assert string_xor('111', '111') == '111'", "assert string_xor('011', '101') == '111'", "assert string_xor('100', '101') == '111'", "assert string_xor('111', '110') == '010'", "assert string_xor('111', '100') == '001'", "assert string_xor('001', '110') == '111'", "assert string_xor('111', '001') == '110'", "assert string_xor('000', '110') == '001'", "assert string_xor('110', '001') == '111'", "assert string_xor('101', '101') == '101'", "assert string_xor('101', '010') == '011'", "assert string_xor('010', '001') == '111'", "assert string_xor('001', '001') == '000'", "assert string_xor('010', '101') == '101'", "assert string_xor('110', '010') == '011'", "assert string_xor('110', '101') == '101'", "assert string_xor('010', '') == ''", "assert string_xor('', '010') == ''", "assert string_xor('101', '011') == ''", "assert string_xor('110', '001') == ''", "assert string_xor('110', '010') == '101'", "assert string_xor('000', '110') == '111'", "assert string_xor('110', '000') == '111'", "assert string_xor('110', '') == '111'", "assert string_xor('011', '111') == '000'", "assert string_xor('101', '111') == '100'", "assert string_xor('110', '110') == '000'", "assert string_xor('111', '110') == '110'", "assert string_xor('011', '111') == '111'", "assert string_xor('101', '111') == '010'", "assert string_xor('111', '110') == '100'", "assert string_xor('000', '110') == '000'", "assert string_xor('110', '000') == '110'", "assert string_xor('110', '010') == '010'", "assert string_xor('110', '001') == '011'", "assert string_xor('010', '100') == '101'", "assert string_xor('100', '100') == '101'", "assert string_xor('000', '000') == '000'", "assert string_xor('010', '000') == '010'", "assert string_xor('010', '010') == '100'", "assert string_xor('100', '000') == '100'", "assert string_xor('100', '100') == '100'", "assert string_xor('100', '101') == '011'", "assert string_xor('101', '110') == '110'", "assert string_xor('110', '100') == '101'", "assert string_xor('111', '010') == '011'", "assert string_xor('111', '011') == '111'", "assert string_xor('010', '011') == '101'", "assert string_xor('011', '011') == '111'", "assert string_xor('010', '001') == '101'", "assert string_xor('101', '110') == '010'", "assert string_xor('110', '100') == '110'", "assert string_xor('110', '010') == '110'", "assert string_xor('101', '101') == '110'", "assert string_xor('110', '101') == '110'", "assert string_xor('011', '101') == '110'", "assert string_xor('010', '001') == '110'", "assert string_xor('100', '101') == '110'", "assert string_xor('110', '111') == '100'", "assert string_xor('000', '010') == '000'", "assert string_xor('010', '101') == '110'", "assert string_xor('100', '111') == '001'", "assert string_xor('111', '010') == '101'", "assert string_xor('111', '') == '111'", "assert string_xor('111', '001') == '111'", "assert string_xor('001', '001') == '001'", "assert string_xor('100', '010') == '111'", "assert string_xor('010', '001') == '011'", "assert string_xor('101', '001') == '010'", "assert string_xor('001', '101') == '000'", "assert string_xor('110', '111') == '111'", "assert string_xor('001', '111') == '011'", "assert string_xor('110', '101') == '000'", "assert string_xor('001', '111') == '000'", "assert string_xor('101', '110') == '101'", "assert string_xor('110', '111') == '101'", "assert string_xor('001', '010') == '011'", "assert string_xor('011', '001') == '110'", "assert string_xor('101', '010') == '010'", "assert string_xor('010', '001') == '010'", "assert string_xor('101', '001') == '101'", "assert string_xor('100', '001') == '111'", "assert string_xor('101', '010') == '000'", "assert string_xor('111', '011') == '000'", "assert string_xor('000', '111') == '111'", "assert string_xor('111', '111') == '000'", "assert string_xor('101', '110') == '100'", "assert string_xor('111', '111') == '100'", "assert string_xor('100', '010') == '100'", "assert string_xor('101', '001') == '110'", "assert string_xor('110', '010') == '100'", "assert string_xor('110', '110') == '100'", "assert string_xor('000', '') == ''", "assert string_xor('', '000') == ''", "assert string_xor('101', '111') == '000'", "assert string_xor('110', '111') == '000'", "assert string_xor('111', '110') == '000'"]}
{"HumanEval/12": ["assert longest([\"hello\", \"world\"]) == \"hello\"", "assert longest([\"hello\", \"world\", \"world\"]) == \"world\"", "assert longest([\"hello\", \"world\", \"world\", \"world\"]) == \"world\"", "assert longest([\"hello\", \"world\", \"world\", \"world\", \"world\"]) == \"world\"", "assert longest([\"hello\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\"]) == \"world\"", "assert longest([\"hello\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\"]) == \"world\"", "assert longest([\"hello\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\"]) == \"world\"", "assert longest([\"hello\", \"world\", \"world\"]) == \"hello\"", "assert longest([\"hello\", \"world\", \"world\", \"world\"]) == \"hello\"", "assert longest([\"hello\", \"world\", \"world\", \"world\", \"world\"]) == \"hello\"", "assert longest([\"hello\", \"world\", \"world\", \"world\", \"world\", \"world\"]) == \"hello\"", "assert longest([\"hello\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\"]) == \"hello\"", "assert longest([\"hello\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\"]) == \"hello\"", "assert longest([\"hello\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\"]) == \"hello\"", "assert longest([\"hello\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\"]) == \"hello\"", "assert longest([\"hello\", \"world\", \"world\", \"world\", \"world\", \"world\"]) == \"world\"", "assert longest([\"hello\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\"]) == \"world\"", "assert longest([\"hello\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\"]) == \"world\"", "assert longest([\"hello\", \"world\", \"goodbye\"]) == \"hello\"", "assert longest([\"hello\", \"world\", \"goodbye\", \"hi\"]) == \"hello\"", "assert longest([\"hello\", \"world\", \"goodbye\", \"hi\", \"how\"]) == \"hello\"", "assert longest([\"hello\", \"world\", \"goodbye\", \"hi\", \"how\", \"are you\"]) == \"hello\"", "assert longest([\"hello\", \"world\", \"goodbye\", \"hi\", \"how\", \"are you\", \"?\"]) == \"hello\"", "assert longest([\"hello\", \"world\", \"goodbye\", \"hi\", \"how\", \"hey\"]) == \"hello\"", "assert longest([\"hello\", \"world\", \"goodbye\", \"hi\", \"how\", \"hey\", \"heyyy\"]) == \"hello\"", "assert longest([\"hello\", \"world\", \"goodbye\", \"hi\", \"how\", \"hey\", \"heyyy\", \"hello\"]) == \"hello\"", "assert longest([\"hello\", \"world\", \"goodbye\", \"hi\", \"how\", \"hey\", \"heyyy\", \"hello\", \"world\"]) == \"hello\"", "assert longest([\"hello\", \"world\", \"goodbye\", \"hi\", \"how\", \"hey\", \"heyyy\", \"hello\", \"world\", \"hello\"]) == \"hello\"", "assert longest([\"hello\", \"world\", \"goodbye\", \"hi\", \"how\", \"hey\", \"heyyy\", \"hello\", \"world\", \"hello\", \"world\"]) == \"hello\"", "assert longest([\"hello\", \"world\", \"goodbye\", \"hi\", \"how\", \"are you\", \"i am fine\"]) == \"hello\"", "assert longest([\"hello\", \"world\", \"goodbye\", \"hi\", \"how\", \"are you\", \"i am fine\", \"thank you\"]) == \"hello\"", "assert longest([\"hello\", \"world\", \"goodbye\", \"hi\", \"how\", \"are you\", \"i am fine\", \"thank you\", \"what's up\"]) == \"hello\"", "assert longest([\"hello\", \"world\", \"goodbye\", \"hi\", \"how\", \"are you\", \"i am fine\", \"thank you\", \"what's up\", \"nothing much\"]) == \"hello\"", "assert longest([\"hello\", \"world\", \"goodbye\", \"hi\", \"how\", \"are you\", \"i am fine\", \"thank you\", \"what's up\", \"nothing much\", \"just hanging out\"]) == \"hello\"", "assert longest([\"hello\", \"world\", \"goodbye\", \"hi\", \"how\", \"are you\", \"i am fine\", \"thank you\", \"what's up\", \"nothing much\", \"just hanging out\", \"and watching TV\"]) == \"hello\"", "assert longest([\"hello\", \"world\", \"goodbye\", \"hi\", \"how\", \"hey\", \"heyyy\", \"heyyyyy\"]) == \"hello\"", "assert longest([\"hello\", \"world\", \"goodbye\", \"hi\", \"how\", \"hey\", \"heyyy\", \"heyyyyy\", \"heyyyyyyy\"]) == \"hello\"", "assert longest([\"hello\", \"world\", \"goodbye\", \"hi\", \"how\", \"hey\", \"heyyy\", \"heyyyyy\", \"heyyyyy\"]) == \"hello\"", "assert longest([\"hello\", \"world\", \"goodbye\", \"hi\", \"how\", \"hey\", \"heyyy\", \"heyyyyy\", \"heyyyyy\", \"heyyyyy\", \"hello\"]) == \"hello\"", "assert longest([\"hello\", \"world\", \"goodbye\", \"hi\", \"how\", \"hey\", \"heyyy\", \"heyyyyy\", \"heyyyyy\", \"heyyyyy\", \"hello\", \"world\"]) == \"hello\"", "assert longest([\"hello\", \"world\", \"goodbye\", \"hi\", \"how\", \"are\"]) == \"hello\"", "assert longest([\"hello\", \"world\", \"goodbye\", \"hi\", \"how\", \"are\", \"you\"]) == \"hello\"", "assert longest([\"hello\", \"world\", \"goodbye\", \"hi\", \"how\", \"are\", \"you\", \"?\"]) == \"hello\"", "assert longest([\"hello\", \"world\", \"goodbye\", \"how\"]) == \"hello\"", "assert longest([\"hello\", \"world\", \"goodbye\", \"how\", \"are you\"]) == \"hello\"", "assert longest([\"hello\", \"world\", \"goodbye\", \"how\", \"are you\", \"nice\"]) == \"hello\"", "assert longest([\"hello\", \"world\", \"goodbye\", \"how\", \"are you\", \"nice\", \"?\"]) == \"hello\"", "assert longest([\"hello\", \"world\", \"goodbye\", \"how\", \"are\"]) == \"you?\"", "assert longest([\"hello\", \"world\", \"goodbye\", \"how\", \"are\", \"today\"]) == \"hello\"", "assert longest([\"hello\", \"world\", \"goodbye\", \"how\", \"are\", \"today\", \"tomorrow\"]) == \"hello\"", "assert longest([\"hello\", \"world\", \"goodbye\", \"how\", \"are\", \"today\", \"tomorrow\", \"yesterday\"]) == \"hello\"", "assert longest([\"hello\", \"world\", \"goodbye\", \"how\", \"are\", \"today\", \"tomorrow\", \"yesterday\", \"last\"]) == \"hello\"", "assert longest([\"hello\", \"world\", \"goodbye\", \"how\", \"are\", \"today\", \"tomorrow\", \"yesterday\", \"last\", \"week\"]) == \"hello\"", "assert longest([\"hello\", \"world\", \"goodbye\", \"how\", \"are\", \"today\", \"tomorrow\", \"yesterday\", \"last\", \"week\", \"month\"]) == \"hello\"", "assert longest([\"hello\", \"world\", \"goodbye\", \"hi\", \"hey\"]) == \"hello\"", "assert longest([\"hello\", \"world\", \"goodbye\", \"hi\", \"hey\", \"how\"]) == \"hello\"", "assert longest([\"hello\", \"world\", \"goodbye\", \"hi\", \"hey\", \"how\", \"what\"]) == \"hello\"", "assert longest([\"hello\", \"world\", \"goodbye\", \"hi\", \"hey\", \"how\", \"what\", \"why\"]) == \"hello\"", "assert longest([\"hello\", \"world\", \"goodbye\", \"hi\", \"hey\", \"how\", \"what\", \"why\", \"who\"]) == \"hello\"", "assert longest([\"hello\", \"world\", \"goodbye\", \"hi\", \"hey\", \"how\", \"what\", \"why\", \"who\", \"where\"]) == \"hello\"", "assert longest([\"hello\", \"world\", \"goodbye\", \"hi\", \"hey\", \"how\", \"what\", \"why\", \"who\", \"where\", \"when\"]) == \"hello\"", "assert longest([\"hello\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\"]) == \"world\"", "assert longest([\"hello\", \"world\", \"goodbye\", \"hi\", \"how\", \"hey\", \"what\"]) == \"hello\"", "assert longest([\"hello\", \"world\", \"goodbye\", \"hi\", \"how\", \"hey\", \"what\", \"why\"]) == \"hello\"", "assert longest([\"hello\", \"world\", \"goodbye\", \"hi\", \"how\", \"hey\", \"what\", \"why\", \"who\"]) == \"hello\"", "assert longest([\"hello\", \"world\", \"goodbye\", \"hi\", \"how\", \"hey\", \"what\", \"why\", \"who\", \"whom\"]) == \"hello\"", "assert longest([\"hello\", \"world\", \"goodbye\", \"hi\", \"how\", \"hey\", \"what\", \"why\", \"who\", \"whom\", \"which\"]) == \"hello\"", "assert longest([\"hello\", \"world\", \"goodbye\", \"hi\", \"how\", \"hey\", \"what\", \"why\", \"who\", \"you\"]) == \"hello\"", "assert longest([\"hello\", \"world\", \"goodbye\", \"hi\", \"how\", \"hey\", \"what\", \"why\", \"who\", \"you\", \"me\"]) == \"hello\"", "assert longest([\"hello\", \"world\", \"goodbye\", \"hi\", \"hey\", \"how\", \"what\", \"why\", \"wow\"]) == \"hello\"", "assert longest([\"hello\", \"world\", \"goodbye\", \"hi\", \"hey\", \"how\", \"what\", \"why\", \"wow\", \"woah\"]) == \"hello\"", "assert longest([\"hello\", \"world\", \"goodbye\", \"hi\", \"hey\", \"how\", \"what\", \"why\", \"wow\", \"woah\", \"whoa\"]) == \"hello\"", "assert longest([\"hello\", \"world\", \"goodbye\", \"how are you\"]) == \"hello\"", "assert longest([\"hello\", \"world\", \"goodbye\", \"how are you\", \"i am fine\"]) == \"hello\"", "assert longest([\"hello\", \"world\", \"goodbye\", \"how are you\", \"i am fine\", \"i am great\"]) == \"hello\"", "assert longest([\"hello\", \"world\", \"goodbye\", \"how are you\", \"i am fine\", \"i am great\", \"i am fantastic\"]) == \"hello\"", "assert longest([\"hello\", \"world\", \"goodbye\", \"how are you\", \"i am fine\", \"i am great\", \"i am fantastic\", \"i am amazing\"]) == \"hello\"", "assert longest([\"hello\", \"world\", \"goodbye\", \"how are you\", \"i am fine\", \"i am great\", \"i am fantastic\", \"i am amazing\", \"i am wonderful\"]) == \"hello\"", "assert longest([\"hello\", \"world\", \"goodbye\", \"how are you\", \"i am fine\", \"i am great\", \"i am fantastic\", \"i am amazing\", \"i am wonderful\", \"i am incredible\"]) == \"hello\"", "assert longest([\"hello\", \"world\", \"goodbye\", \"how are you\", \"i am fine\", \"i am great\", \"i am fantastic\", \"i am amazing\", \"i am wonderful\", \"i am incredible\", \"i am unbelievable\"]) == \"hello\"", "assert longest([\"hello\", \"world\", \"goodbye\", \"hi\", \"how\", \"hey\", \"heyyy\", \"heyyyy\"]) == \"hello\"", "assert longest([\"hello\", \"world\", \"goodbye\", \"hi\", \"how\", \"hey\", \"heyyy\", \"heyyyy\", \"heyyyyy\"]) == \"hello\"", "assert longest([\"hello\", \"world\", \"goodbye\", \"hi\", \"how\", \"hey\", \"heyyy\", \"heyyyy\", \"heyyyyy\", \"heyyyyy\"]) == \"hello\"", "assert longest([\"hello\", \"world\", \"goodbye\", \"hi\", \"how\", \"hey\", \"what\", \"why\", \"wow\"]) == \"hello\"", "assert longest([\"hello\", \"world\", \"goodbye\", \"hi\", \"how\", \"hey\", \"what\", \"why\", \"wow\", \"woof\"]) == \"hello\"", "assert longest([\"hello\", \"world\", \"goodbye\", \"hi\", \"how\", \"hey\", \"what\", \"why\", \"wow\", \"woof\", \"yip\"]) == \"hello\"", "assert longest([\"hello\", \"world\", \"goodbye\", \"how are you\", \"i am fine thank you\"]) == \"hello\"", "assert longest([\"hello\", \"world\", \"goodbye\", \"how are you\", \"i am fine thank you\", \"what about you\"]) == \"hello\"", "assert longest([\"hello\", \"world\", \"goodbye\", \"how are you\", \"i am fine thank you\", \"what about you\", \"i am good too\"]) == \"hello\"", "assert longest([\"hello\", \"world\", \"goodbye\", \"how are you\", \"i am fine thank you\", \"what about you\", \"i am good too\", \"i am also fine\"]) == \"hello\"", "assert longest([\"hello\", \"world\", \"goodbye\", \"how are you\", \"i am fine thank you\", \"what about you\", \"i am good too\", \"i am also fine\", \"i am great\"]) == \"hello\"", "assert longest([\"hello\", \"world\", \"goodbye\", \"how are you\", \"i am fine thank you\", \"what about you\", \"i am good too\", \"i am also fine\", \"i am great\", \"i am fantastic\"]) == \"hello\"", "assert longest([\"hello\", \"world\", \"goodbye\", \"how are you\", \"i am fine thank you\", \"what about you\", \"i am good too\", \"i am also fine\", \"i am great\", \"i am fantastic\", \"i am super\"]) == \"hello\"", "assert longest([\"hello\", \"world\", \"goodbye\", \"how are you\", \"i am fine thank you\", \"what about you\", \"i am good too\", \"i am also fine\", \"i am great\", \"i am fantastic\", \"i am super\", \"i am awesome\"]) == \"hello\"", "assert longest([\"hello\", \"world\", \"goodbye\", \"how are you\", \"what's up\"]) == \"hello\"", "assert longest([\"hello\", \"world\", \"goodbye\", \"how are you\", \"what's up\", \"i am fine\"]) == \"hello\"", "assert longest([\"hello\", \"world\", \"goodbye\", \"how are you\", \"what's up\", \"i am fine\", \"thank you\"]) == \"hello\"", "assert longest([\"hello\", \"world\", \"goodbye\", \"how are you\", \"what's up\", \"i am fine\", \"thank you\", \"you too\"]) == \"hello\"", "assert longest([\"hello\", \"world\", \"goodbye\", \"how are you\", \"what's up\", \"i am fine\", \"thank you\", \"you too\", \"it was nice talking to you\"]) == \"hello\"", "assert longest([\"hello\", \"world\", \"goodbye\", \"how are you\", \"what's up\", \"i am fine\", \"thank you\", \"you too\", \"it was nice talking to you\", \"thanks for asking\"]) == \"hello\"", "assert longest([\"hello\", \"world\", \"goodbye\", \"how are you\", \"what's up\", \"i am fine\", \"thank you\", \"you too\", \"it was nice talking to you\", \"thanks for asking\", \"thanks for asking again\"]) == \"hello\"", "assert longest([\"hello\", \"world\", \"goodbye\", \"how are you\", \"what's up\", \"i am fine\", \"thank you\", \"you too\", \"it was nice talking to you\", \"thanks for asking again\", \"thanks for asking again again\"]) == \"hello\"", "assert longest([\"hello\", \"world\", \"goodbye\", \"how are you\", \"what's up\", \"i am fine\", \"thank you\", \"you too\", \"it was nice talking to you\", \"thanks for asking again\", \"thanks for asking again again\", \"thanks for asking again again again\"]) == \"hello\""]}
{"HumanEval/13": ["assert greatest_common_divisor(10, 20) == 5", "assert greatest_common_divisor(1, 2) == 1", "assert greatest_common_divisor(10, 1) == 10", "assert greatest_common_divisor(10, 0) == 0", "assert greatest_common_divisor(0, 10) == 0", "assert greatest_common_divisor(10, -10) == 10", "assert greatest_common_divisor(2, -2) == 1", "assert greatest_common_divisor(2, 0) == 1", "assert greatest_common_divisor(2, 1) == 1", "assert greatest_common_divisor(10, 5) == 5", "assert greatest_common_divisor(2, 4) == 2", "assert greatest_common_divisor(8, 16) == 4", "assert greatest_common_divisor(1, 9) == 1", "assert greatest_common_divisor(10, 10) == 10", "assert greatest_common_divisor(1, 1) == 1", "assert greatest_common_divisor(10, 20) == 1", "assert greatest_common_divisor(10, 18) == 1", "assert greatest_common_divisor(2, 3) == 1", "assert greatest_common_divisor(10, 15) == 5", "assert greatest_common_divisor(10, 25) == 1", "assert greatest_common_divisor(2, 17) == 1", "assert greatest_common_divisor(25, 25) == 1", "assert greatest_common_divisor(10, 1) == 1", "assert greatest_common_divisor(10, 9) == 1", "assert greatest_common_divisor(10, 11) == 1", "assert greatest_common_divisor(10, 0) == 10", "assert greatest_common_divisor(0, 0) == 0", "assert greatest_common_divisor(20, 18) == 2", "assert greatest_common_divisor(1, 0) == 0", "assert greatest_common_divisor(10, -10) == 0", "assert greatest_common_divisor(10, 100) == 10", "assert greatest_common_divisor(10, 8) == 2", "assert greatest_common_divisor(5, 5) == 5", "assert greatest_common_divisor(10, 2) == 1", "assert greatest_common_divisor(2, 10) == 1", "assert greatest_common_divisor(5, 2) == 1", "assert greatest_common_divisor(20, 10) == 2", "assert greatest_common_divisor(10, 18) == 2", "assert greatest_common_divisor(18, 10) == 2", "assert greatest_common_divisor(10, 12) == 2", "assert greatest_common_divisor(12, 10) == 2", "assert greatest_common_divisor(18, 12) == 2", "assert greatest_common_divisor(8, 16) == 8", "assert greatest_common_divisor(5, 0) == 0", "assert greatest_common_divisor(10, -10) == 1", "assert greatest_common_divisor(-10, 10) == -1", "assert greatest_common_divisor(5, 10) == 5", "assert greatest_common_divisor(25, 15) == 5", "assert greatest_common_divisor(25, 25) == 5", "assert greatest_common_divisor(10, 20) == 2", "assert greatest_common_divisor(1, 10) == 1", "assert greatest_common_divisor(2, 2) == 2", "assert greatest_common_divisor(1, 3) == 1", "assert greatest_common_divisor(1, 4) == 2", "assert greatest_common_divisor(1, 5) == 5", "assert greatest_common_divisor(2, 5) == 5", "assert greatest_common_divisor(3, 4) == 1", "assert greatest_common_divisor(3, 5) == 5", "assert greatest_common_divisor(4, 5) == 1", "assert greatest_common_divisor(1, 10) == 0", "assert greatest_common_divisor(10, 1) == 0", "assert greatest_common_divisor(25, 10) == 5", "assert greatest_common_divisor(25, 25) == 25", "assert greatest_common_divisor(2, 1) == 2", "assert greatest_common_divisor(5, 15) == 5", "assert greatest_common_divisor(5, 10) == 1", "assert greatest_common_divisor(15, 25) == 5", "assert greatest_common_divisor(15, 15) == 15", "assert greatest_common_divisor(10, 20) == 10", "assert greatest_common_divisor(25, 35) == 1", "assert greatest_common_divisor(25, 12) == 1", "assert greatest_common_divisor(23, 25) == 1", "assert greatest_common_divisor(12, 15) == 3", "assert greatest_common_divisor(25, 18) == 1", "assert greatest_common_divisor(23, 22) == 1", "assert greatest_common_divisor(10, 17) == 3", "assert greatest_common_divisor(1, 0) == 1", "assert greatest_common_divisor(0, 1) == 1", "assert greatest_common_divisor(15, 0) == 0", "assert greatest_common_divisor(9, 10) == 1", "assert greatest_common_divisor(1, 6) == 6", "assert greatest_common_divisor(2, 6) == 6", "assert greatest_common_divisor(3, 6) == 6", "assert greatest_common_divisor(4, 6) == 2", "assert greatest_common_divisor(5, 6) == 2", "assert greatest_common_divisor(10, 25) == 5", "assert greatest_common_divisor(3, 4) == 2", "assert greatest_common_divisor(20, 30) == 1", "assert greatest_common_divisor(1, 20) == 1", "assert greatest_common_divisor(20, 10) == 5", "assert greatest_common_divisor(0, 1) == 0", "assert greatest_common_divisor(5, 3) == 1", "assert greatest_common_divisor(15, 7) == 1", "assert greatest_common_divisor(1, -1) == 1", "assert greatest_common_divisor(9, 7) == 1", "assert greatest_common_divisor(20, 16) == 4", "assert greatest_common_divisor(15, 10) == 5", "assert greatest_common_divisor(12, 8) == 4", "assert greatest_common_divisor(100, 100) == 1", "assert greatest_common_divisor(10, -5) == 5", "assert greatest_common_divisor(-5, 10) == 5"]}
{"HumanEval/14": ["assert all_prefixes(\"abc\") == [\"a\", \"ab\", \"abc\"]", "assert all_prefixes(\"xyz\") == [\"x\", \"xy\", \"xz\", \"y\", \"yz\", \"z\"]", "assert all_prefixes(\"hello world\") == [\"h\", \"he\", \"hel\", \"hell\", \"wor\", \"wos\", \"worl\", \"world\"]", "assert all_prefixes('abc') == ['a', 'ab', 'abc']", "assert all_prefixes('bcde') == ['b', 'c', 'd']", "assert all_prefixes('abcdefg') == ['a', 'ab', 'abc', 'ac', 'ad', 'ae', 'af', 'ag', 'b', 'bc', 'bd', 'be', 'c', 'cd', 'ce', 'd', 'e']", "assert all_prefixes('') == []", "assert all_prefixes('123') == ['1', '2', '3']", "assert all_prefixes('12345') == ['1', '2', '3', '4', '5']", "assert all_prefixes('123456789') == ['1', '2', '3', '4', '5', '6', '7', '8', '9']", "assert all_prefixes(\"xyz\") == [\"x\", \"xy\", \"xz\", \"y\", \"yy\", \"yz\"]", "assert all_prefixes(\"hello world\") == [\"h\", \"he\", \"hel\", \"ello\", \"olle\", \"llo\", \"woo\", \"wor\", \"wdl\", \"dld\", \"dlr\", \"ldr\", \"rld\", \"ldl\", \"ld\", \"l\", \"r\", \"w\", \"o\", \"e\", \"ll\", \"woo\", \"wrld\"]", "assert all_prefixes('bc') == ['b', 'bc']", "assert all_prefixes('aabbcc') == ['a', 'ab', 'abc']", "assert all_prefixes(\"\") == []", "assert all_prefixes(\"abcde\") == [\"a\", \"ab\", \"abc\", \"abd\", \"abcde\"]", "assert all_prefixes(\"aaaaaaa\") == [\"\", \"a\", \"aa\", \"aaa\", \"aaaaa\"]", "assert all_prefixes(\"123\") == [\"1\", \"2\", \"3\"]", "assert all_prefixes(\"12345\") == [\"1\", \"2\", \"3\", \"4\", \"5\"]", "assert all_prefixes(\"123456789\") == [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"]", "assert all_prefixes(\"1234567890\") == [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\"]", "assert all_prefixes('cba') == ['c', 'cb', 'cba']", "assert all_prefixes('xyz') == []", "assert all_prefixes('xyzabc') == ['xyz', 'xyzabc']", "assert all_prefixes('abcdefg') == ['abc', 'abcdefg']", "assert all_prefixes(\"bc\") == [\"b\", \"bc\"]", "assert all_prefixes(\"ac\") == [\"a\", \"ac\"]", "assert all_prefixes(\"aaa\") == [\"aaa\"]", "assert all_prefixes(\"aaaa\") == [\"aaaa\"]", "assert all_prefixes(\"bbbb\") == [\"bbbb\"]", "assert all_prefixes(\"ccc\") == [\"cc\", \"ccc\"]", "assert all_prefixes(\"aaaaa\") == [\"aaaaa\"]", "assert all_prefixes(\"Abc\") == [\"A\", \"Ab\", \"ABC\"]", "assert all_prefixes(\"123\") == [\"123\"]", "assert all_prefixes(\"1a2b3c\") == [\"1a2b3c\"]", "assert all_prefixes(\"123456789\") == [\"123456789\"]", "assert all_prefixes(\"1234567890123456789\") == [\"1234567890123456789\"]", "assert all_prefixes(\"12345678901234567890123456789\") == [\"12345678901234567890123456789\"]", "assert all_prefixes(\"hello world\") == [\"h\", \"he\", \"hel\", \"hell\", \"wor\", \"wrl\", \"world\"]", "assert all_prefixes(\"a\") == [\"a\"]", "assert all_prefixes(\"12345\") == [\"12345\"]", "assert all_prefixes(\"cba\") == [\"c\", \"cb\", \"cba\"]", "assert all_prefixes(\"abcde\") == [\"a\", \"ab\", \"ac\", \"b\", \"bc\", \"cd\", \"ce\", \"cba\"]", "assert all_prefixes(\"abcdefg\") == [\"a\", \"ab\", \"ac\", \"ad\", \"bc\", \"bd\", \"be\", \"cg\"]", "assert all_prefixes('abcde') == ['abc', 'abcde']", "assert all_prefixes('123') == []", "assert all_prefixes('hello world') == []", "assert all_prefixes('hello') == ['h', 'hel', 'hell', 'hello']", "assert all_prefixes('world') == ['w', 'wor', 'worl']", "assert all_prefixes('hello world') == ['h', 'hel', 'hell', 'world']", "assert all_prefixes('hello world') == ['h', 'hel', 'hell', 'worl']", "assert all_prefixes('hello world') == ['h', 'hel', 'hello', 'worl']", "assert all_prefixes('hello world') == ['h', 'hel', 'hello', 'world']", "assert all_prefixes('cba') == []", "assert all_prefixes('xyz') == ['x', 'y', 'z']", "assert all_prefixes('abcde') == ['a', 'ac', 'ad', 'ae', 'bc', 'bd', 'be', 'cd', 'ce']", "assert all_prefixes('hello world') == ['h', 'he', 'hel', 'ello', 'wor', 'world']", "assert all_prefixes(\"bcd\") == [\"b\", \"bc\", \"bd\"]", "assert all_prefixes(\"abcde\") == [\"a\", \"ab\", \"abc\", \"acd\", \"ad\", \"ae\", \"bcd\"]", "assert all_prefixes(\"xyz\") == [\"x\", \"xy\", \"xz\"]", "assert all_prefixes('bcde') == ['b', 'bc', 'c', 'd']", "assert all_prefixes('hello world') == ['h', 'he', 'hel', 'w', 'or', 'ld']", "assert all_prefixes('abcde') == ['a', 'ab', 'abc', 'acd', 'ace', 'ad']", "assert all_prefixes('a') == ['a']", "assert all_prefixes('b') == ['b']", "assert all_prefixes('aabbc') == ['a', 'ab', 'abc']", "assert all_prefixes('abcdeff') == ['a', 'ab', 'abc', 'acd', 'ace', 'ad', 'aff']", "assert all_prefixes('hello world') == ['h', 'he', 'hel', 'hell', 'wor', 'world']", "assert all_prefixes('hello') == ['h', 'hel']", "assert all_prefixes(\"xyz\") == []", "assert all_prefixes(\"abcde\") == [\"a\", \"ab\", \"abc\", \"ac\", \"ad\", \"ae\", \"bc\", \"bd\", \"be\", \"c\", \"cd\", \"ce\"]", "assert all_prefixes(\"abcdefghijklmnopqrstuvwxyz\") == [\"\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\"]", "assert all_prefixes(\"aaa\") == [\"a\", \"aa\", \"aaaa\"]", "assert all_prefixes(\"123\") == [\"1\", \"12\", \"123\"]", "assert all_prefixes(\"-123\") == [\"-1\", \"-12\", \"-123\"]", "assert all_prefixes(\"   \") == [\"\", \" \", \"\\t\", \"\\n\"]", "assert all_prefixes(\"  abc  \") == [\"\", \"  \", \"  \", \"abc\"]", "assert all_prefixes('hello') == ['h', 'he', 'hel']", "assert all_prefixes('hello world') == ['h', 'he', 'hel', 'ho', 'wor']", "assert all_prefixes(\"hello world\") == [\"h\", \"he\", \"hel\", \"hell\", \"wor\", \"wom\", \"worl\", \"world\"]", "assert all_prefixes('abcde') == ['a', 'ab', 'abc', 'ac', 'ad', 'ae', 'bc', 'bd', 'be', 'cd', 'ce', 'c']", "assert all_prefixes('123') == ['123']", "assert all_prefixes('123456789') == ['123456789']", "assert all_prefixes(\"abcd\") == [\"a\", \"ab\", \"abc\", \"abd\", \"abc\"]", "assert all_prefixes(\"abcde\") == [\"a\", \"ab\", \"abc\", \"abcd\", \"abcde\"]", "assert all_prefixes(\"abcdefg\") == [\"a\", \"ab\", \"abc\", \"abcd\", \"abcdefg\"]", "assert all_prefixes(\"abcdefghijklmnopqrstuvwxyz\") == [\"a\", \"ab\", \"abc\", \"abcd\", \"abcdefghijklmnopqrstuvwxyz\"]", "assert all_prefixes('abcde') == ['a', 'ab', 'abc', 'ac', 'ad', 'ae', 'bc', 'bd', 'be', 'c', 'd']", "assert all_prefixes(\"abcde\") == [\"a\", \"ab\", \"abc\", \"abe\", \"abcde\"]", "assert all_prefixes('abcde') == ['a', 'ab', 'abc', 'acd', 'ace', 'ad', 'ae', 'b', 'bc', 'bd', 'be', 'c', 'cd', 'ce', 'd', 'e']", "assert all_prefixes('xyz') == ['x', 'xy', 'xz']", "assert all_prefixes('abcde') == ['a', 'ab', 'abc', 'acd', 'bcd', 'cde']", "assert all_prefixes(\"aabbcc\") == [\"a\", \"ab\", \"acc\"]", "assert all_prefixes(\"aabaaaa\") == [\"a\", \"aab\", \"aaaa\"]", "assert all_prefixes(\"aaaabbbc\") == [\"aaa\", \"aab\", \"abc\"]", "assert all_prefixes(\"aaaabbbcc\") == [\"aaa\", \"aab\", \"acc\"]", "assert all_prefixes(\"aaaaaa\") == [\"a\", \"aa\", \"aaa\", \"aaaaa\"]", "assert all_prefixes(\"abcdefg\") == [\"a\", \"ab\", \"abc\", \"abd\", \"acd\", \"adc\", \"bc\", \"bcd\", \"bdc\", \"cdc\", \"dc\"]", "assert all_prefixes(\"bcda\") == [\"b\", \"c\", \"d\"]", "assert all_prefixes(\"aabbccdd\") == [\"a\", \"ab\", \"acc\", \"add\"]", "assert all_prefixes(\"abcde\") == [\"a\", \"ab\", \"ac\", \"ad\"]", "assert all_prefixes(\"abcdeff\") == [\"a\", \"ab\", \"ac\", \"ad\", \"ae\"]", "assert all_prefixes(\"abcdefghi\") == [\"a\", \"ab\", \"ac\", \"ad\", \"ae\", \"af\", \"ag\", \"ah\"]", "assert all_prefixes('world') == ['wor', 'worl']", "assert all_prefixes('hello world') == ['h', 'hel', 'wor', 'worl']", "assert all_prefixes(\"abcde\") == [\"a\", \"ab\", \"abc\", \"ade\", \"ace\", \"aco\", \"acd\", \"adc\", \"ae\", \"af\", \"ag\", \"ah\", \"ai\", \"aj\", \"ak\", \"al\", \"am\", \"an\", \"ao\", \"ap\", \"aq\", \"ar\", \"as\", \"at\", \"au\", \"av\", \"aw\", \"ax\", \"ay\", \"az\"]", "assert all_prefixes(\"A\") == [\"A\"]", "assert all_prefixes(\"B\") == [\"B\"]", "assert all_prefixes(\"ABC\") == [\"ABC\"]", "assert all_prefixes('abcde') == ['abc', 'abcd', 'abcde']", "assert all_prefixes('abcdefg') == ['abc', 'abcd', 'abcdefg']", "assert all_prefixes('hello world') == ['hello', 'hellow', 'hello world']", "assert all_prefixes('   ') == []", "assert all_prefixes(\"abcdefg\") == [\"a\", \"ab\", \"abc\", \"abd\", \"acd\", \"adc\", \"bc\", \"bcd\", \"cde\", \"cdc\", \"cdefg\"]", "assert all_prefixes(\"hello world\") == [\"h\", \"he\", \"hel\", \"hell\", \"hol\", \"w\", \"we\", \"wor\", \"world\"]"]}
{"HumanEval/15": ["assert string_sequence(0) == '0'", "assert string_sequence(1) == '0'", "assert string_sequence(2) == '0 1'", "assert string_sequence(3) == '0 1 2'", "assert string_sequence(4) == '0 1 2 3'", "assert string_sequence(5) == '0 1 2 3 4 5'", "assert string_sequence(6) == '0 1 2 3 4 5 6'", "assert string_sequence(7) == '0 1 2 3 4 5 6 7'", "assert string_sequence(8) == '0 1 2 3 4 5 6 7 8'", "assert string_sequence(9) == '0 1 2 3 4 5 6 7 8 9'", "assert string_sequence(10) == '0 1 2 3 4 5 6 7 8 9 10'", "assert string_sequence(11) == '0 1 2 3 4 5 6 7 8 9 10 11'", "assert string_sequence(12) == '0 1 2 3 4 5 6 7 8 9 10 11 12'"]}
{"HumanEval/16": ["assert count_distinct_characters(\"hello\") == 3", "assert count_distinct_characters(\"Hello\") == 3", "assert count_distinct_characters(\"World\") == 3", "assert count_distinct_characters(\"jERRY\") == 3", "assert count_distinct_characters(\"Jerry\") == 4", "assert count_distinct_characters(\"Jerry123\") == 4", "assert count_distinct_characters(\"hello world\") == 4", "assert count_distinct_characters(\"hello   world\") == 4", "assert count_distinct_characters(\"hello   world   \") == 4", "assert count_distinct_characters(\"abc\") == 3", "assert count_distinct_characters(\"xyzXYZ\") == 3", "assert count_distinct_characters(\"jERRY\") == 4", "assert count_distinct_characters(\"aBcD\") == 4", "assert count_distinct_characters(\"12345\") == 5", "assert count_distinct_characters(\"AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\") == 26", "assert count_distinct_characters(\"hello world\") == 5", "assert count_distinct_characters(\"hello\") == 2", "assert count_distinct_characters(\"world\") == 2", "assert count_distinct_characters(\"ABC\") == 3", "assert count_distinct_characters(\"aBc\") == 3", "assert count_distinct_characters(\"AbC\") == 3", "assert count_distinct_characters(\"abcde\") == 4", "assert count_distinct_characters(\"AaBbCcDdEe\") == 5", "assert count_distinct_characters(\"jERRY\") == 1", "assert count_distinct_characters(\"   \") == 0", "assert count_distinct_characters(\"abcde\") == 5", "assert count_distinct_characters(\"\") == 0", "assert count_distinct_characters(\"   abc\") == 2", "assert count_distinct_characters(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") == 26", "assert count_distinct_characters(\"Abbcc\") == 4", "assert count_distinct_characters(\"jErY\") == 4", "assert count_distinct_characters(\"Xyz\") == 3", "assert count_distinct_characters(\"XyZ\") == 3", "assert count_distinct_characters(\"XYZ\") == 3", "assert count_distinct_characters(\"aBcDfGhIjKlMnOpQrStUvWxYz\") == 26", "assert count_distinct_characters(\"hello world\") == 6", "assert count_distinct_characters(\"aaabbbc\") == 3", "assert count_distinct_characters(\"abcdefghijklmnopqrstuvwxyz\") == 26", "assert count_distinct_characters(\"123\") == 1", "assert count_distinct_characters(\"12345\") == 1", "assert count_distinct_characters(\"1234567890\") == 1", "assert count_distinct_characters(\"12345678901234567890\") == 1", "assert count_distinct_characters('abcxyzXYZ') == 5", "assert count_distinct_characters('abcdeFGHiJ') == 8", "assert count_distinct_characters('abcxyzXYZ') == 3", "assert count_distinct_characters('AbcDeFGhiJKLmN') == 10", "assert count_distinct_characters('hello world') == 5", "assert count_distinct_characters('Jerry') == 4", "assert count_distinct_characters('abcxyzXYZ123') == 5", "assert count_distinct_characters('ABCDEFGHIJklmnopqrstuvwxyz') == 26", "assert count_distinct_characters('hello') == 2", "assert count_distinct_characters('world') == 2", "assert count_distinct_characters('Jerry') == 3", "assert count_distinct_characters('XYZ') == 2", "assert count_distinct_characters('jERRY') == 2", "assert count_distinct_characters('abcdefghijklmnopqrstuvwxyz') == 26", "assert count_distinct_characters('') == 0", "assert count_distinct_characters('Hello World') == 5", "assert count_distinct_characters('World') == 3", "assert count_distinct_characters('Hello') == 2", "assert count_distinct_characters('hello   world') == 5", "assert count_distinct_characters('XYZ') == 1", "assert count_distinct_characters('abcdefg') == 7", "assert count_distinct_characters('abcxyzXYZ') == 4", "assert count_distinct_characters('jERRY') == 4", "assert count_distinct_characters('AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz') == 26", "assert count_distinct_characters('   ') == 0", "assert count_distinct_characters('\\n\\t') == 2", "assert count_distinct_characters(\"hello   world\") == 5", "assert count_distinct_characters(\"hello   \") == 2", "assert count_distinct_characters(\"world   \") == 2", "assert count_distinct_characters('hello world') == 4", "assert count_distinct_characters('Hello World') == 4", "assert count_distinct_characters('World') == 2", "assert count_distinct_characters('abcde') == 5", "assert count_distinct_characters('AbcDe') == 5", "assert count_distinct_characters('12345') == 5", "assert count_distinct_characters('123456') == 6", "assert count_distinct_characters('123456789') == 9", "assert count_distinct_characters(\"hello world\") == 7", "assert count_distinct_characters(\"Hello World\") == 7", "assert count_distinct_characters(\"helloWorld\") == 7", "assert count_distinct_characters(\"world\") == 3", "assert count_distinct_characters(\"   \") == 9", "assert count_distinct_characters('hello world') == 8", "assert count_distinct_characters('Hello World') == 8", "assert count_distinct_characters('aAaA') == 3", "assert count_distinct_characters('123456789') == 6", "assert count_distinct_characters('ABCDE') == 5", "assert count_distinct_characters('AaBbCcDdEe') == 5", "assert count_distinct_characters('hello world') == 7", "assert count_distinct_characters('aBcDe') == 5", "assert count_distinct_characters('abcdefg') == 6", "assert count_distinct_characters(\"abcdefg\") == 6", "assert count_distinct_characters(\"aaabbbcccddddeeeeffffgggghhiiiijjjkkllmmnnnooooppppqqqqrrssttuuvvwwxyyyzzzz\") == 18", "assert count_distinct_characters('aBcD') == 4", "assert count_distinct_characters('AaBbCcDdEe') == 6", "assert count_distinct_characters('hello world') == 6", "assert count_distinct_characters('Hello World') == 6", "assert count_distinct_characters('hello   world') == 6", "assert count_distinct_characters('HelloWorld') == 6", "assert count_distinct_characters('helloWorLd') == 6", "assert count_distinct_characters('HelloWorD') == 6", "assert count_distinct_characters('aBcDeF') == 4", "assert count_distinct_characters('XyZ') == 2", "assert count_distinct_characters('12345') == 1", "assert count_distinct_characters(\"ABCDE\") == 5", "assert count_distinct_characters(\"AbcDe\") == 4", "assert count_distinct_characters(\"aBcD\") == 3", "assert count_distinct_characters(\"AaBbCcDdEe\") == 6", "assert count_distinct_characters(\"hello world\") == 8", "assert count_distinct_characters(\"Hello World\") == 8", "assert count_distinct_characters(\"HElLo WOrLd\") == 8", "assert count_distinct_characters(\"world\") == 4", "assert count_distinct_characters(\"XyL\") == 3", "assert count_distinct_characters(\"aBcDeF\") == 6", "assert count_distinct_characters(\"ABC\") == 1", "assert count_distinct_characters(\"hello      world\") == 5"]}
{"HumanEval/17": ["assert parse_music(\"o o| .| o| o| .| .| .| o o\") == [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]", "assert parse_music('o o| .| o| o| .| .| .| o o') == [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]", "assert parse_music('o o| .| o| o| .| .| o o') == [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]", "assert parse_music(\"o o| .| o| o| .| .| o o\") == [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]", "assert parse_music(\".| o| .| o| .| o| .| .| o o\") == [1, 2, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1]", "assert parse_music(\"o o| .| o| o| .| o| .| o o\") == [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]", "assert parse_music(\".| o o| o| o| .| o o\") == [1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]", "assert parse_music(\"o o| o o| o o| o o| o o\") == [8, 4, 2, 2, 2, 2, 2, 2, 2, 8, 8]", "assert parse_music(\".| o o| .| o| o| .| .| o o\") == [1, 2, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1]", "assert parse_music(\"o o| .| o| o| .| o o| .| o o\") == [4, 2, 1, 2, 2, 1, 1, 1, 1, 1, 4, 4]", "assert parse_music(\"o o| o| .| o| o| .| o o\") == [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]", "assert parse_music(\"o o| .| o| o| .| o o\") == [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]", "assert parse_music(\"o o| .| o| o| .| o| o| .| o o\") == [4, 2, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1]", "assert parse_music(\"o o| o| .| o| o| .| .| o o\") == [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]", "assert parse_music(\".| o o| o| o| .| o o\") == [1, 2, 1, 2, 2, 1, 1, 1, 1, 2, 2]", "assert parse_music(\".| o| .| o| .| .| o o\") == [1, 2, 1, 2, 2, 1, 1, 1, 1, 1, 1]", "assert parse_music(\".| o| .| o| .| o| .| o o\") == [1, 2, 1, 2, 2, 1, 1, 1, 1, 1, 1]", "assert parse_music(\"o| o| .| o| o| .| o o\") == [2, 4, 2, 4, 2, 1, 1, 1, 1, 1, 1]", "assert parse_music(\"o o| o| o| o| o| o o\") == [4, 4, 4, 4, 4, 4, 4, 4, 4, 4]", "assert parse_music(\".| o o| .| o| o| .| .| o o\") == [1, 2, 1, 2, 2, 1, 1, 1, 1, 1, 1]", "assert parse_music(\"o o| o o| o o| o o| o o\") == [4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2]", "assert parse_music(\".| o| .| o| .| o| .| o o\") == [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]", "assert parse_music(\".| o| .| o| .| .| .| o o\") == [1, 2, 1, 2, 2, 1, 1, 1, 1, 1, 1]", "assert parse_music(\".| o| .| o| .| o| .| o o\") == [1, 2, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1]", "assert parse_music(\"o o| o| o| .| o| o o\") == [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]", "assert parse_music(\"o o| o| o| o| o| o o\") == [8, 4, 2, 2, 2, 2, 1, 1, 1, 8, 8]", "assert parse_music(\".| o| o| .| o| o| .| o o\") == [1, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1]", "assert parse_music(\".| o o| o| o| .| o o\") == [1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]"]}
{"HumanEval/18": ["assert how_many_times('hello', 'llo') == 1", "assert how_many_times('hello', 'ello') == 1", "assert how_many_times('hello', 'olle') == 1", "assert how_many_times('hello', 'll') == 1", "assert how_many_times('hello', 'l') == 1", "assert how_many_times('hello', '') == 0", "assert how_many_times('hello', 'h') == 0", "assert how_many_times('hello', 'he') == 0", "assert how_many_times('hello', 'hel') == 0", "assert how_many_times('hello', 'hell') == 0", "assert how_many_times('hello', 'hello') == 1", "assert how_many_times('hello', 'heeeeello') == 1", "assert how_many_times('hello', 'heeeelllo') == 1", "assert how_many_times('abc', 'b') == 1", "assert how_many_times('abc', 'abba') == 2", "assert how_many_times('abc', 'bbc') == 1", "assert how_many_times('abc', 'aa') == 0", "assert how_many_times('abc', 'aabbcc') == 2", "assert how_many_times('abc', 'aabbbcc') == 2", "assert how_many_times('abc', 'aaabbbcc') == 2", "assert how_many_times('abc', 'aaaabbbcc') == 1", "assert how_many_times('abc', 'c') == 0", "assert how_many_times('abc', 'a') == 2", "assert how_many_times('abc', 'xyz') == 0", "assert how_many_times('abba', 'bb') == 2", "assert how_many_times('abcde', 'bc') == 1", "assert how_many_times('abcde', 'a') == 2", "assert how_many_times('abcde', '') == 0", "assert how_many_times('hello', 'lo') == 0", "assert how_many_times('hello', 'ol') == 0", "assert how_many_times('hello', 'o') == 0", "assert how_many_times('hello', 'h') == 1", "assert how_many_times('hello', 'he') == 1", "assert how_many_times('hello', 'hell') == 1", "assert how_many_times('hello', 'hellooo') == 1", "assert how_many_times('hello', 'helloooo') == 1", "assert how_many_times('hello', 'll') == 2", "assert how_many_times('hello', 'ho') == 0", "assert how_many_times('hello', 'el') == 1", "assert how_many_times('hello', 'ell') == 1", "assert how_many_times('hello', 'e') == 0", "assert how_many_times('abc', 'ab') == 1", "assert how_many_times('abc', 'abc') == 3", "assert how_many_times('abc', 'bac') == 2", "assert how_many_times('abc', 'baaa') == 2", "assert how_many_times('abc', 'bada') == 2", "assert how_many_times('abc', 'badc') == 1", "assert how_many_times('abc', 'xyzabc') == 1", "assert how_many_times('abc', 'xyzabcde') == 1", "assert how_many_times('hello', 'lo') == 1", "assert how_many_times('hello', 'ol') == 1", "assert how_many_times('hello', 'hel') == 1", "assert how_many_times('hello', 'ello') == 0", "assert how_many_times('hello', 'llo') == 0", "assert how_many_times('hello', 'ho') == 1", "assert how_many_times('hello', 'hlo') == 1", "assert how_many_times('hello', 'lol') == 1", "assert how_many_times('hello', 'lll') == 0", "assert how_many_times('hello', 'heeeello') == 1", "assert how_many_times('hello', 'hello world') == 1", "assert how_many_times('hello', 'hello world again') == 1", "assert how_many_times('hello', 'hello world again again') == 0", "assert how_many_times('abc', 'ab') == 2", "assert how_many_times('abc', 'ac') == 1", "assert how_many_times('abc', 'a') == 0", "assert how_many_times('aaabbbcccaaa', 'abbc') == 2", "assert how_many_times('aaabbbcccaaa', 'abbccc') == 1", "assert how_many_times('aaabbbcccaaa', 'abbbcca') == 2", "assert how_many_times('aaabbbcccaaa', 'aabbccca') == 1", "assert how_many_times('aaabbbcccaaa', 'aaabbbccca') == 1", "assert how_many_times('aaabbbcccaaa', 'aaa') == 0", "assert how_many_times('hello', 'lll') == 2", "assert how_many_times('hello', 'world') == 0", "assert how_many_times('hello', 'hhh') == 0", "assert how_many_times('abc', 'aabbcc') == 4", "assert how_many_times('abc', 'aabbbccc') == 6", "assert how_many_times('abc', 'aaabbbcc') == 4", "assert how_many_times('abc', 'aaabbbccc') == 6", "assert how_many_times('abc', 'ac') == 0", "assert how_many_times('abc', 'bc') == 0", "assert how_many_times('abc', 'a') == 3", "assert how_many_times('abc', 'b') == 0", "assert how_many_times('abc', '') == 0", "assert how_many_times('abc', 'cba') == 0", "assert how_many_times('abc', 'bca') == 1", "assert how_many_times('abc', 'cbc') == 0", "assert how_many_times('abc', 'aabbcc') == 3", "assert how_many_times('abc', 'bbccc') == 0", "assert how_many_times('abc', 'ccbaaa') == 0", "assert how_many_times('abc', 'aaabaa') == 1", "assert how_many_times('abc', 'aabbbc') == 1", "assert how_many_times('hello', 'lll') == 1", "assert how_many_times('hello', 'llll') == 1", "assert how_many_times('hello', 'lllll') == 1", "assert how_many_times('hello', 'llllll') == 1", "assert how_many_times('hello', 'llooo') == 1", "assert how_many_times('hello', 'lllllll') == 1", "assert how_many_times('hello', 'llllllll') == 1", "assert how_many_times('hello', 'lloooo') == 1", "assert how_many_times('hello', 'lllllllll') == 1", "assert how_many_times('hello', 'llllllllll') == 1", "assert how_many_times('hello', 'llooooo') == 1", "assert how_many_times('hello', 'lllllllllll') == 1", "assert how_many_times('hello', 'llllllllllll') == 1", "assert how_many_times('hello', 'lloooooo') == 1", "assert how_many_times('hello', 'lllllllllllll') == 1", "assert how_many_times('hello', 'llllllllllllll') == 1", "assert how_many_times('hello', 'llooooooo') == 1", "assert how_many_times('hello', 'lllllllllllllll') == 1", "assert how_many_times('hello', 'lloooooooo') == 1"]}
{"HumanEval/19": ["assert sort_numbers(\"\") == \"\"", "assert sort_numbers(\"one\") == \"one\"", "assert sort_numbers(\"one two\") == \"one two\"", "assert sort_numbers(\"one two three\") == \"one two three\"", "assert sort_numbers(\"one two three four\") == \"one two three four\"", "assert sort_numbers(\"one two three four five\") == \"one two three four five\"", "assert sort_numbers(\"one two three four five six\") == \"one two three four five six\"", "assert sort_numbers(\"one two three four five six seven\") == \"one two three four five six seven\"", "assert sort_numbers(\"one two three four five six seven eight\") == \"one two three four five six seven eight\"", "assert sort_numbers(\"one two three four five six seven eight nine\") == \"one two three four five six seven eight nine\"", "assert sort_numbers(\"one two three four five six seven eight nine zero\") == \"one two three four five six seven eight nine zero\"", "assert sort_numbers(\"zero\") == \"zero\"", "assert sort_numbers(\"one zero five three four six seven eight nine\") == \"one zero five three four six seven eight nine\"", "assert sort_numbers(\"zero two\") == \"zero two\"", "assert sort_numbers(\"one zero\") == \"one zero\"", "assert sort_numbers(\"two one\") == \"two one\"", "assert sort_numbers(\"zero one two three four five six seven eight nine\") == \"one two three four five six seven eight nine\"", "assert sort_numbers('one two four five') == 'one two four five'", "assert sort_numbers('three five seven eight nine') == 'three five seven eight nine'", "assert sort_numbers('zero') == 'zero'", "assert sort_numbers('one two three') == 'one two three'", "assert sort_numbers('four five six seven eight nine') == 'four five six seven eight nine'", "assert sort_numbers('zero one two') == 'one zero two'", "assert sort_numbers('one two three four five six seven eight nine') == 'four six seven eight nine one ten twelve three'", "assert sort_numbers('zero four eight') == 'zero four eight'", "assert sort_numbers('one two three four five six seven eight nine') == 'four five six seven eight nine one two three'", "assert sort_numbers('one two three four five six seven eight nine') == 'one two three four five six seven eight nine'", "assert sort_numbers('zero one two three four five six seven eight nine') == 'zero one two three four five six seven eight nine'", "assert sort_numbers(\"one three two four five six seven eight nine\") == \"one three two four five six seven eight nine\"", "assert sort_numbers(\"zero one two three four five six seven eight nine\") == \"zero one two three four five six seven eight nine\"", "assert sort_numbers(\"zero two three four\") == \"zero two three four\"", "assert sort_numbers(\"four two three four\") == \"four two three four\"", "assert sort_numbers(\"three four two one\") == \"three four two one\"", "assert sort_numbers(\"three one five\") == \"one three five\"", "assert sort_numbers('seven five three two one zero') == 'zero one two three four five six seven eight nine'", "assert sort_numbers('eight seven six five four three two one') == 'zero one two three four five six seven eight nine'", "assert sort_numbers('nine eight seven six five four three two one') == 'zero one two three four five six seven eight nine'", "assert sort_numbers('five four three two one zero seven six eight nine') == 'zero one two three four five six seven eight nine'", "assert sort_numbers('three two one zero seven six eight nine five four') == 'zero one two three four five six seven eight nine'", "assert sort_numbers('zero two four') == 'zero two four'", "assert sort_numbers('one seven eight nine') == 'one seven eight nine'", "assert sort_numbers('three two four five six seven eight nine') == 'three two four five six seven eight nine'", "assert sort_numbers('one zero two three four five six seven eight nine') == 'one zero two three four five six seven eight nine'", "assert sort_numbers('five four three two') == 'three four five two'", "assert sort_numbers('five six seven eight nine') == 'five six seven eight nine'", "assert sort_numbers('one zero two three') == 'one zero two three'", "assert sort_numbers('five one seven eight nine') == 'five one seven eight nine'", "assert sort_numbers('one two three four five') == 'one two three four five'", "assert sort_numbers('three one five') == 'one three five'", "assert sort_numbers('two four five six seven eight nine') == 'two four five six seven eight nine'", "assert sort_numbers('one two four') == 'one two four'", "assert sort_numbers('one two four five') == 'one two five four'", "assert sort_numbers('one two four five six') == 'one two five six four'", "assert sort_numbers('one two four five six seven') == 'one two six five four'", "assert sort_numbers('one two four five six seven eight') == 'one two seven six five four'", "assert sort_numbers('one two four five six seven eight nine') == 'one seven six five four three two'", "assert sort_numbers('three one five') == 'one five three'", "assert sort_numbers('seven eight nine') == 'eight seven nine'", "assert sort_numbers('three four five six') == 'four five six three'", "assert sort_numbers('one two three four five six') == 'one two three four five six'", "assert sort_numbers('one two three four five six seven') == 'one two three four five six seven'", "assert sort_numbers(\"one two four\") == \"one two four\"", "assert sort_numbers(\"four two one\") == \"four two one\"", "assert sort_numbers(\"one zero nine\") == \"one zero nine\"", "assert sort_numbers(\"nine eight seven\") == \"nine eight seven\"", "assert sort_numbers(\"six five four\") == \"six five four\"", "assert sort_numbers(\"four three two\") == \"four three two\"", "assert sort_numbers(\"two one one\") == \"one two one\"", "assert sort_numbers(\"one nine eight\") == \"one nine eight\"", "assert sort_numbers(\"one seven six\") == \"one seven six\"", "assert sort_numbers(\"five three two one seven eight nine four six\") == \"four six seven eight nine five three two one\"", "assert sort_numbers(\"five one two three seven eight nine four six\") == \"four six seven eight nine five three two one\"", "assert sort_numbers(\"three one five seven eight nine four six two\") == \"three one five seven eight nine four six two\"", "assert sort_numbers(\"one zero three five\") == \"one zero three five\"", "assert sort_numbers(\"two one three four five\") == \"two one three four five\"", "assert sort_numbers(\"three two one four five\") == \"three two one four five\"", "assert sort_numbers(\"five three two one four\") == \"five three two one four\"", "assert sort_numbers(\"four five three two one\") == \"four five three two one\"", "assert sort_numbers(\"six seven eight nine\") == \"six seven eight nine\""]}
{"HumanEval/20": ["assert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)", "assert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0)", "assert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.1]) == (2.0, 2.1)", "assert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 1.0]) == (2.0, 3.0)", "assert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 0.0]) == (2.0, 1.0)", "assert find_closest_elements([-1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)", "assert find_closest_elements([-1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0)", "assert find_closest_elements([-1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (-1.0, 2.0)", "assert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 1.9]) == (2.0, 3.0)", "assert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 1.8]) == (2.0, 2.0)", "assert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 1.7]) == (2.0, 2.0)", "assert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 1.6]) == (2.0, 2.0)", "assert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 1.5]) == (2.0, 2.0)", "assert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 1.4]) == (2.0, 2.0)", "assert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 1.3]) == (2.0, 2.0)", "assert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 1.2]) == (2.0, 2.0)", "assert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.01]) == (2.0, 2.01)", "assert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.1]) == (2.0, 3.0)", "assert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 1.0]) == (1.0, 2.0)", "assert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 3.0]) == (3.0, 4.0)", "assert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 5.0]) == (5.0, 5.0)", "assert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0, 3.0]) == (2.0, 3.0)", "assert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0, 3.0, 4.0]) == (2.0, 3.0)", "assert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0, 3.0, 4.0, 5.0]) == (2.0, 3.0)", "assert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0, 3.0, 4.0, 5.0, 6.0]) == (2.0, 3.0)", "assert find_closest_elements([-1.0, -2.0, -3.0, -4.0, -5.0, -2.0, -3.0, -4.0, -5.0, -6.0]) == (-2.0, -3.0)", "assert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 1.0]) == (2.0, 1.0)", "assert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.1]) == (2.1, 2.1)", "assert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.2, 2.2)", "assert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.001]) == (2.0, 2.001)", "assert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0001]) == (2.0, 2.0001)", "assert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.00001]) == (2.0, 2.00001)", "assert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.000001]) == (2.0, 2.000001)", "assert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0000001]) == (2.0, 2.0000001)", "assert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.1]) == (2.0, 4.0)", "assert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 3.0]) == (3.0, 2.0)", "assert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 4.0]) == (4.0, 3.0)", "assert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 5.0]) == (5.0, 4.0)", "assert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 6.0]) == (6.0, 5.0)", "assert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 7.0]) == (7.0, 6.0)", "assert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 8.0]) == (8.0, 7.0)", "assert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.2, 2.0)", "assert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.2)", "assert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0, 2.0]) == (2.0, 2.0)", "assert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0, 1.0]) == (1.0, 2.0)", "assert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0, 1.0, 2.0]) == (1.0, 2.0)", "assert find_closest_elements([-1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (-1.0, 2.2)", "assert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 0.0]) == (1.0, 2.0)", "assert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 0.0]) == (2.0, 3.0)", "assert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 1.8]) == (1.8, 2.0)", "assert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.3]) == (2.0, 3.0)", "assert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 1.7]) == (1.7, 2.0)", "assert find_closest_elements([-1.0, -2.0, -3.0, -4.0, -5.0, -2.2]) == (-2.0, -2.2)", "assert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.1]) == (2.1, 3.0)"]}
{"HumanEval/21": ["assert rescale_to_unit([-1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]", "assert rescale_to_unit([-100.0, -50.0, 0.0, 50.0, 100.0]) == [-100.0, -50.0, 0.0, 50.0, 100.0]", "assert rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]", "assert rescale_to_unit([-1000.0, -999.9, -998.9, -997.8, -996.7]) == [-1.0, -0.25, -0.5, -0.75, -1.0]", "assert rescale_to_unit([-1.0, 2.0, 3.0, 4.0, 5.0]) == [-1.0, 0.25, 0.5, 0.75, 1.0]", "assert rescale_to_unit([-100.0, 200.0, 300.0, 400.0, 500.0]) == [-1.0, 0.25, 0.5, 0.75, 1.0]", "assert rescale_to_unit([-1000.0, -900.0, -800.0, -700.0, -600.0]) == [-1.0, 0.125, 0.25, 0.375, 1.0]", "assert rescale_to_unit([1000.0, 900.0, 800.0, 700.0, 600.0]) == [1.0, 0.125, 0.25, 0.375, 1.0]", "assert rescale_to_unit([-1000.0, 1000.0, -500.0, 500.0, -100.0]) == [0.0, 1.0, 0.5, 0.75, 1.0]", "assert rescale_to_unit([-100.0, -50.0, 25.0, 75.0, 100.0]) == [-0.25, -0.5, 0.75, 1.0, 1.25]", "assert rescale_to_unit([-100.0, 200.0, 300.0, 400.0, 500.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]", "assert rescale_to_unit([-1.0, -2.0, -3.0, -4.0, -5.0]) == [-0.5, -1.0, -1.5, -2.0, -2.5]", "assert rescale_to_unit([-1000.0, -500.0, 0.0, 500.0, 1000.0]) == [-0.2, -0.4, 0.4, 0.8, 1.0]", "assert rescale_to_unit([-100.0, -99.0, -98.0, -97.0, -96.0]) == [-1.0, 0.25, 0.5, 0.75, 1.0]", "assert rescale_to_unit([100.0, 99.0, 98.0, 97.0, 96.0]) == [1.0, 0.25, 0.5, 0.75, 1.0]", "assert rescale_to_unit([-1000.0, 2.0, 3.0, 4.0, 5.0]) == [-1000.0, 0.25, 0.5, 0.75, 1.0]", "assert rescale_to_unit([-1.0, -2.0, -3.0, -4.0, -5.0]) == [-1.0, -0.5, -0.75, -0.875, -1.0]", "assert rescale_to_unit([-100.0, 99.0, 98.0, 97.0, 96.0]) == [-1.0, 0.25, 0.5, 0.75, 1.0]", "assert rescale_to_unit([-1.0, -2.0, -3.0, -4.0, -5.0]) == [-1.0, -0.5, -0.25, -0.125, -0.0625]", "assert rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0]) == [1.0, 0.5, 0.25, 0.125, 0.0625]", "assert rescale_to_unit([-100.0, -50.0, 0.0, 50.0, 100.0]) == [0.0, 0.0, 0.5, 0.75, 1.0]", "assert rescale_to_unit([100.0, 50.0, 0.0, 0.0, 0.0]) == [0.0, 0.5, 1.0, 1.0, 1.0]", "assert rescale_to_unit([-1.0, -2.0, -3.0, -4.0, -5.0]) == [-1.0, -0.25, -0.5, -0.75, -1.0]", "assert rescale_to_unit([-500.0, -400.0, -300.0, -200.0, -100.0]) == [-0.5, -0.4, -0.3, -0.2, -0.1]", "assert rescale_to_unit([500.0, 400.0, 300.0, 200.0, 100.0]) == [0.5, 0.4, 0.3, 0.2, 1.0]", "assert rescale_to_unit([100.0, 200.0, 300.0, 400.0, 500.0]) == [0.1, 0.2, 0.3, 0.4, 1.0]", "assert rescale_to_unit([-100.0, -200.0, -300.0, -400.0, -500.0]) == [-0.1, -0.2, -0.3, -0.4, -0.5]", "assert rescale_to_unit([-100.0, -99.0, -98.0, -97.0, -96.0]) == [-0.01, -0.02, -0.03, -0.04, -0.05]", "assert rescale_to_unit([-1000.0, -900.0, -800.0, -700.0, -600.0]) == [-1.0, 0.25, 0.5, 0.75, 1.0]", "assert rescale_to_unit([-1000.0, -500.0, 1000.0, 500.0, 1000.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]", "assert rescale_to_unit([10.0, 20.0, 30.0, 40.0, 50.0]) == [0.1, 0.25, 0.375, 0.5, 0.625]", "assert rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.5, 1.0, 1.5, 2.0, 2.5]", "assert rescale_to_unit([-1000.0, -500.0, 1000.0, 500.0, 1500.0]) == [-0.2, 0.25, 0.5, 0.75, 1.0]", "assert rescale_to_unit([-1000.0, -500.0, 1000.0, 500.0, 1500.0, 2500.0]) == [-0.2, 0.25, 0.5, 0.75, 1.0]", "assert rescale_to_unit([-1000.0, -500.0, 1000.0, 500.0, 1500.0, 2500.0, 3500.0]) == [-0.2, 0.25, 0.5, 0.75, 1.0]", "assert rescale_to_unit([1000.0, 500.0, 1000.0, 500.0, 1500.0, 2500.0, 3500.0]) == [1.0, 0.25, 0.5, 0.75, 1.0]", "assert rescale_to_unit([1000.0, 500.0, 1000.0, 500.0, 1500.0, 2500.0, 3500.0, 4500.0]) == [1.0, 0.25, 0.5, 0.75, 1.0]", "assert rescale_to_unit([-100.0, -99.0, -98.0, -97.0, -96.0]) == [-1.0, -0.25, -0.5, -0.75, -1.0]", "assert rescale_to_unit([100.0, 200.0, 300.0, 400.0, 500.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]", "assert rescale_to_unit([-100.0, -200.0, -300.0, -400.0, -500.0]) == [-1.0, -0.5, -0.25, -0.125, 0.0]", "assert rescale_to_unit([-1000.0, -999.0, -998.0, -997.0, -996.0]) == [-1.0, 0.0, 0.25, 0.5, 0.75]", "assert rescale_to_unit([1000.0, 999.0, 998.0, 997.0, 996.0]) == [1.0, 0.5, 0.75, 1.0, 1.0]", "assert rescale_to_unit([-100.0, -99.0, -98.0, -97.0, -96.0]) == [-1.0, 0.0, 0.25, 0.5, 0.75]", "assert rescale_to_unit([-100.0, 100.0, -99.0, 99.0, 100.0]) == [-1.0, 1.0, 0.25, 0.5, 0.75]", "assert rescale_to_unit([-10.0, -5.0, -2.0, 1.0, 5.0]) == [-0.6, -0.3, -0.15, 0.6, 2.5]", "assert rescale_to_unit([10.0, 5.0, 2.0, 1.0, 5.0]) == [0.6, 0.3, 0.15, 0.6, 2.5]", "assert rescale_to_unit([-1000.0, -500.0, -250.0, -125.0, -62.5]) == [-1.0, 0.25, 0.5, 0.75, 1.0]", "assert rescale_to_unit([1000.0, 500.0, 250.0, 125.0, 62.5]) == [1.0, 0.25, 0.5, 0.75, 1.0]", "assert rescale_to_unit([1000.0, 900.0, 800.0, 700.0, 600.0]) == [0.0, 0.125, 0.25, 0.375, 1.0]", "assert rescale_to_unit([-1000.0, 1000.0, -500.0, 500.0, 1000.0]) == [0.0, 0.5, 0.75, 1.0, 1.0]", "assert rescale_to_unit([1000.0, -1000.0, 500.0, -500.0, 1000.0]) == [0.0, 0.5, 0.75, 1.0, 1.0]", "assert rescale_to_unit([-1000.0, 1000.0, -500.0, 500.0, -500.0]) == [0.0, 0.5, 0.75, 1.0, 1.0]", "assert rescale_to_unit([1000.0, -1000.0, 500.0, -500.0, -500.0]) == [0.0, 0.5, 0.75, 1.0, 1.0]", "assert rescale_to_unit([-1000.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]", "assert rescale_to_unit([1000.0, 2.0, 3.0, 4.0, 5.0]) == [1.0, 0.25, 0.5, 0.75, 1.0]", "assert rescale_to_unit([-100.0, -50.0, 25.0, 75.0, 100.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]", "assert rescale_to_unit([100.0, 50.0, 25.0, 75.0, 100.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]", "assert rescale_to_unit([-1000.0, 2000.0, 3000.0, 4000.0, 5000.0]) == [-1.0, 0.25, 0.5, 0.75, 1.0]", "assert rescale_to_unit([-100.0, -50.0, 0.0, 50.0, 100.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]", "assert rescale_to_unit([-1000.0, -999.9, -998.0, -997.0, -996.0]) == [-1.0, 0.0, 0.25, 0.5, 0.75]", "assert rescale_to_unit([-1.0, 2.0, 3.0, 4.0, 5.0]) == [-1.0, 0.5, 1.0, 1.5, 2.0]", "assert rescale_to_unit([-100.0, -50.0, 0.0, 50.0, 100.0]) == [0.0, 0.0, 0.0, 0.5, 1.0]", "assert rescale_to_unit([-1000.0, -999.0, -998.0, -997.0, -996.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]", "assert rescale_to_unit([-1000.0, -999.9, -998.0, -997.0, -996.0]) == [-1.0, 0.0, 0.0, 0.0, 0.0]", "assert rescale_to_unit([-1000.0, -999.9, -998.0, -997.0, -996.0, -995.0]) == [-1.0, 0.0, 0.0, 0.0, 0.0, 0.0]", "assert rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0, 6.0]) == [0.0, 0.25, 0.5, 0.75, 1.0, 1.25]", "assert rescale_to_unit([-1000.0, -999.9, -998.0, -997.0, -996.0, -995.0, -994.0]) == [-1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]", "assert rescale_to_unit([-1000.0, -999.0, -998.0, -997.0, -996.0]) == [-1.0, 0.0, 0.0, 0.0, 0.0]", "assert rescale_to_unit([-1000.0, -999.0, -998.0, -997.0, -996.0, -995.0]) == [-1.0, 0.0, 0.0, 0.0, 0.0, 0.0]", "assert rescale_to_unit([-1000.0, -999.0, -998.0, -997.0, -996.0, -995.0, -994.0]) == [-1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]", "assert rescale_to_unit([-1000.0, 2000.0, 3000.0, 4000.0, 5000.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]", "assert rescale_to_unit([1000.0, 2000.0, 3000.0, 4000.0, 5000.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]", "assert rescale_to_unit([-10.0, -5.0, 2.0, 8.0, 15.0]) == [-10.0, -5.0, 2.0, 8.0, 15.0]", "assert rescale_to_unit([10.0, 5.0, 2.0, 8.0, 15.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]", "assert rescale_to_unit([-1000.0, 1000.0, 0.0, 0.0, 0.0]) == [0.0, 1.0, 0.0, 0.0, 0.0]", "assert rescale_to_unit([-1000.0, 1000.0, -500.0, 500.0, 0.0]) == [0.0, 0.5, 0.75, 1.0, 1.0]", "assert rescale_to_unit([-100.0, -50.0, 25.0, 75.0, 100.0]) == [-1.0, 0.25, 0.5, 0.75, 1.0]", "assert rescale_to_unit([-100.0, -50.0, 20.0, 80.0, 150.0]) == [-100.0, -50.0, 20.0, 80.0, 150.0]", "assert rescale_to_unit([100.0, 50.0, 20.0, 80.0, 150.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]", "assert rescale_to_unit([1000.0, 999.0, 998.0, 997.0, 996.0]) == [1.0, 0.5, 0.25, 0.125, 0.0625]", "assert rescale_to_unit([-1000.0, 1000.0, 2000.0, 3000.0, 4000.0]) == [0.0, 1.0, 0.5, 0.25, 0.125]", "assert rescale_to_unit([-1000.0, -500.0, 1000.0, 500.0, 1500.0]) == [-0.2, 0.125, 0.25, 0.375, 1.0]", "assert rescale_to_unit([100.0, 50.0, 0.0, 0.0, -100.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]", "assert rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0]) == [0.0, 0.25, 0.5, 0.75, 1.0, 1.25, 1.5]", "assert rescale_to_unit([100.0, 99.0, 98.0, 97.0, 96.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]", "assert rescale_to_unit([-100.0, 100.0, 99.0, 98.0, 97.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]", "assert rescale_to_unit([100.0, 101.0, 102.0, 103.0, 104.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]", "assert rescale_to_unit([-100.0, -50.0, 25.0, 75.0, 100.0]) == [-0.0, -0.25, 0.25, 0.75, 1.0]", "assert rescale_to_unit([100.0, 50.0, 25.0, 75.0, 100.0]) == [1.0, 0.25, 0.5, 0.75, 1.0]", "assert rescale_to_unit([-10.0, 2.0, 3.0, 4.0, 5.0]) == [-0.5, 0.4, 0.6, 0.8, 1.0]", "assert rescale_to_unit([10.0, 20.0, 30.0, 40.0, 50.0]) == [0.0, 0.2, 0.4, 0.6, 0.8]", "assert rescale_to_unit([-100.0, -50.0, 25.0, 75.0, 100.0]) == [-100.0, 0.0, 0.25, 0.5, 0.75]", "assert rescale_to_unit([100.0, 50.0, 0.0, -50.0, -100.0]) == [-1.0, 0.5, 0.25, -0.5, -1.0]", "assert rescale_to_unit([100.0, 50.0, 0.0, -50.0, -100.0]) == [1.0, 0.5, 0.25, -0.5, -1.0]", "assert rescale_to_unit([-10.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]", "assert rescale_to_unit([10.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]", "assert rescale_to_unit([-100.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]", "assert rescale_to_unit([100.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]", "assert rescale_to_unit([1000.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]"]}
{"HumanEval/22": ["assert filter_integers([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]", "assert filter_integers([-1, 2, 3, 4, 5]) == [2, 3, 4, 5]", "assert filter_integers([1, 2, 3, 4, 5, 6]) == [1, 2, 3, 4, 5, 6]", "assert filter_integers([1, 2, 3, 4, 5, 6, 7]) == [1, 2, 3, 4, 5, 6, 7]", "assert filter_integers([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 2, 3, 4, 5, 6, 7, 8]", "assert filter_integers([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]", "assert filter_integers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "assert filter_integers([1.1, 2.2, 3.3, 4.4, 5.5]) == [1, 2, 3, 4, 5]", "assert filter_integers([True, False, None, 1, 2, 3]) == [1, 2, 3]", "assert filter_integers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]", "assert filter_integers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]", "assert filter_integers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]", "assert filter_integers([True, False, None, 'hello', {}]) == [True, False, None, 'hello']", "assert filter_integers([-1, 2, 3, 4, 5, -6, -7, -8, -9, -10]) == [-1, 2, 3, 4, 5, -6, -7, -8, -9, -10]", "assert filter_integers([1.1, 2.2, 3.3, 4.4, 5.5, 6.6, 7.7, 8.8, 9.9, 10.10]) == [1.1, 2.2, 3.3, 4.4, 5.5, 6.6, 7.7, 8.8, 9.9, 10.10]", "assert filter_integers([True, False, None, '', [], {}]) == [True, False, None, '', [], {}]", "assert filter_integers([-1000, 1000, -1000.5, 1000.5, 1000.0, -1000.0, 1000.0]) == [-1000, 1000, -1000.5, 1000.5, 1000.0, -1000.0, 1000.0]", "assert filter_integers([1.2, 2.3, 3.4, 4.5, 5.6]) == [1.2, 2.3, 3.4, 4.5, 5.6]", "assert filter_integers([True, False, None, 'hello', {}]) == [None, None, None, None, None]", "assert filter_integers([1.2, 2.3, 3.4, 4.5]) == [1.2, 2.3, 3.4, 4.5]", "assert filter_integers([0, 0, 0, 0, 0]) == [0]", "assert filter_integers([-1000, 1000, -1000, 1000, -1000]) == [-1000, 1000]", "assert filter_integers([-1, -2, -3, -4, -5]) == [-1, -2, -3, -4, -5]", "assert filter_integers([-1, -2, -3, -4, -5, -6]) == [-1, -2, -3, -4, -5, -6]", "assert filter_integers([True, False, None, 'hello']) == [True, False, None]", "assert filter_integers([1j, 2j, 3j, 4j, 5j]) == [1j, 2j, 3j, 4j, 5j]", "assert filter_integers([True, False, None, 'hello', [], {}]) == [True, False, None, 'hello']", "assert filter_integers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]", "assert filter_integers([1.2, 2.5, 3.8, 4.1, 5.4]) == [1.2, 2.5, 3.8, 4.1, 5.4]", "assert filter_integers([True, False, None, 'hello', 123]) == [123]", "assert filter_integers([-1, 2, 3, 4, 5]) == [-1, 2, 3, 4, 5]", "assert filter_integers([1.2, 2.3, 3.4, 4.5, 5.6]) == [1, 2, 3, 4, 5]", "assert filter_integers([True, False, None, '', {}]) == [True, False, None, '', {}]", "assert filter_integers([1.1, 2.2, 3.3, 4.4, 5.5, 6.6]) == [1, 2, 3, 4, 5, 6]", "assert filter_integers([3.14, 5.55, 8.98, 11.22, 13.44]) == [5.55, 8.98, 11.22, 13.44]", "assert filter_integers([True, False, True, False, True]) == [False, False, False, False, False]", "assert filter_integers([None, None, None, None, None]) == [None, None, None, None, None]", "assert filter_integers([1e-2, 2e-3, 3e-4, 4e-5]) == [1e-2, 2e-3, 3e-4, 4e-5]", "assert filter_integers([1.0, 2.0, 3.0, 4.0, 5.0]) == [1.0, 2.0, 3.0, 4.0, 5.0]", "assert filter_integers([1.1, 2.2, 3.3, 4.4, 5.5, 6.6]) == [1.1, 2.2, 3.3, 4.4, 5.5]", "assert filter_integers([1.0, 2.0, 3.0, 4.0, 5.0]) == [1, 2, 3, 4, 5]", "assert filter_integers([1e1, 2e1, 3e1, 4e1, 5e1]) == [1, 2, 3, 4, 5]", "assert filter_integers([-1e1, 2e1, 3e1, 4e1, 5e1]) == [-1, 2, 3, 4, 5]", "assert filter_integers([True, False, None, 'hello', 1, 2, 3]) == [1, 2, 3]", "assert filter_integers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]", "assert filter_integers([1e10, 2e10, 3e10, 4e10, 5e10]) == [1, 2, 3, 4, 5]", "assert filter_integers([1e-10, 2e-10, 3e-10, 4e-10, 5e-10]) == [1, 2, 3, 4, 5]", "assert filter_integers([True, False, True, False, True]) == [True, False, True, False, True]", "assert filter_integers([True, False, None, [], {}]) == [True, False, None, [], {}]", "assert filter_integers([10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]", "assert filter_integers([1e10, 2e-10, 3e-5, 4e+5, 5e+10]) == [1e10, 2e-10, 3e-5, 4e+5, 5e+10]", "assert filter_integers([True, False, None, 'hello', {}]) == [True, False, None, 'hello', {}]", "assert filter_integers([1j, 2j, 3j, 4j, 5j]) == [1, 2, 3, 4, 5]", "assert filter_integers([True, False, None, 'hello', 3.14, 5]) == [3.14, 5]", "assert filter_integers([0, 1, 2, 3, 4]) == [0, 1, 2, 3, 4]", "assert filter_integers([5, 10, 15, 20, 25]) == [15, 20, 25]", "assert filter_integers([-5, -10, -15, -20, -25]) == [-10, -15, -20, -25]", "assert filter_integers([-1000, 1000, 1, -1, 0, 1e100]) == [-1000, 1000, 1, -1, 0, 1e100]", "assert filter_integers([1.1, 2.2, 3.3, 4.4, 5.5, 6.6, 7.7, 8.8, 9.9, 10.10]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "assert filter_integers([-1, 0, 1, 2, 3]) == [-1, 0, 1, 2, 3]", "assert filter_integers([-1000, 0, 1, 2, 3]) == [1, 2, 3]", "assert filter_integers([1e10, 2e10, 3e10, 4e10, 5e10]) == [1e10, 2e10, 3e10, 4e10, 5e10]", "assert filter_integers([1.1, 2.2, 3.3, 4.4, 5.5, 6.6]) == [1.1, 2.2, 3.3, 4.4, 5.5, 6.6]", "assert filter_integers([3.14, 5.55, 6.66, 7.77, 8.88]) == [5.55, 6.66, 7.77]", "assert filter_integers([None, None, None, None, None, None, None, None, None, None]) == [None] * 10", "assert filter_integers([]) == []", "assert filter_integers([1.2, 2.3, 3.4, 4.5]) == [1, 2, 3, 4]", "assert filter_integers([-1, 2, 3, 4, 5]) == [3, 4, 5]", "assert filter_integers([1.0, 2.0, 3.0, 4.0, 5.0, 6.0]) == [1.0, 2.0, 3.0, 4.0, 5.0, 6.0]", "assert filter_integers([0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]", "assert filter_integers([5, 23, -11, 12, 3, 1]) == [5, 23, -11, 12, 3, 1]", "assert filter_integers([True, False, None, \"hello\", {\"name\": \"John\"}, [1, 2]]) == [1, 2]", "assert filter_integers([-1000, 1000, -1000.5, 1000.5, -1000.2, 1000.2]) == [-1000, 1000, -1000.5, 1000.5, -1000.2, 1000.2]", "assert filter_integers([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0]) == [1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0]", "assert filter_integers([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0]) == [1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0]", "assert filter_integers([True, False, None, 'hello']) == [None, None, None, None, None]", "assert filter_integers([-1000, 1000, -1000.5, 1000.5]) == [-1000, 1000, -1000.5, 1000.5]", "assert filter_integers([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]) == [-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]", "assert filter_integers([True, False, True, False, True, False]) == [True, False, True, False, True, False]", "assert filter_integers([1, 2, 3, 4, 5, {}]) == [1, 2, 3, 4, 5]", "assert filter_integers([1, 2, 3, 4, 5, []]) == [1, 2, 3, 4, 5]", "assert filter_integers([1e1, 2e2, 3e3, 4e4, 5e5]) == [1, 2, 3, 4, 5, 6]", "assert filter_integers([1j, 2j, 3j, 4j, 5j]) == [3j, 4j, 5j]", "assert filter_integers([True, False, None, 1, 2, 3]) == [2, 3]", "assert filter_integers([1, 2, 3, 4, 5, 'hello']) == [1, 2, 3, 4, 5]", "assert filter_integers([True, False, None, '', {}]) == [False, False, False, False]", "assert filter_integers([1e+1, 2e+2, 3e+3, 4e+4, 5e+5]) == [1, 2, 3, 4, 5]", "assert filter_integers([1.1e+1, 2.2e+2, 3.3e+3, 4.4e+4, 5.5e+5]) == [1.1, 2.2, 3.3, 4.4, 5.5]", "assert filter_integers([True, False, None, 'hello', {}]) == [None]", "assert filter_integers([1e10, 2e10, 3e10, 4e10]) == [1e10, 2e10, 3e10, 4e10]", "assert filter_integers([0, 0, 0, 0, 0, 0]) == [0]", "assert filter_integers([True, False, True, False, True, False, True, False, True, False, True, False]) == [True, False, True, False, True, False, True, False, True, False, True, False]", "assert filter_integers([-1000, 1000, -1000.5, 1000.5]) == [-1000, 1000]", "assert filter_integers([-1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [-1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "assert filter_integers([-1, 0, 1, 2, 3, 4]) == [-1, 0, 1, 2, 3, 4]", "assert filter_integers([1.1, 2.2, 3.3, 4.4, 5.5, 6.6]) == [1, 2, 3, 4, 5]", "assert filter_integers([1, 2.5, 3.7, 4.8, 5.9]) == [1, 2, 3, 4, 5]", "assert filter_integers([1e1, 2e2, 3e3, 4e4, 5e5]) == [1e1, 2e2, 3e3, 4e4, 5e5]", "assert filter_integers([3.14, 5.5, 8.9, 11.1]) == [5.5, 8.9, 11.1]", "assert filter_integers([-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == [-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9]", "assert filter_integers([True, False, None, 'hello', 123, [], {}]) == [123]"]}
{"HumanEval/23": ["assert strlen(\"\") == 0", "assert strlen(\"abc\") == 3", "assert strlen(\"hello world\") == 5", "assert strlen(\"hello\") == 4", "assert strlen(\"world\") == 4", "assert strlen(\"abcdefg\") == 5", "assert strlen(\"a\") == 1", "assert strlen(\"123\") == 3", "assert strlen(\"1234567890\") == 8", "assert strlen(\"12345678901234567890\") == 18", "assert strlen(\"123456789012345678901234567890\") == 20", "assert strlen(\"hello world\") == 9", "assert strlen(\"-123\") == 3", "assert strlen(\"hello\") == 5", "assert strlen(\"hello world\") == 8", "assert strlen(\"abcde\") == 5", "assert strlen(\"world\") == 5", "assert strlen(\"abcdefg\") == 8", "assert strlen(\"bcdefg\") == 6", "assert strlen(\"abcdefghijklmnopqrstuvwxyz\") == 32", "assert strlen(\"1234567890\") == 9", "assert strlen(\"0123\") == 4", "assert strlen(\" \") == 1", "assert strlen(\"ab\") == 2", "assert strlen(\"hello world\") == 11", "assert strlen(\"hello world\\n\") == 13", "assert strlen(\"hello world\\r\") == 13", "assert strlen(\"hello world\\t\") == 13", "assert strlen(\"hello world\\f\") == 13", "assert strlen(\"bcd\") == 2", "assert strlen(\"xyz\") == 3", "assert strlen(\"abcdefghijklmnopqrstuvwxyz\") == 26", "assert strlen(\"12345678901234567890\") == 19", "assert strlen(\"hello   world\") == 7", "assert strlen(\"hello   world    \") == 8", "assert strlen(\"abcd\") == 5", "assert strlen(\"123456789\") == 8", "assert strlen(\"worl\") == 5", "assert strlen(\"lo\") == 3", "assert strlen(\"loo\") == 3", "assert strlen(\"hello   world\") == 8", "assert strlen(\"hello   \") == 5", "assert strlen(\"hello   \") == 4", "assert strlen(\"   hello\") == 3", "assert strlen(\"aabbcc\") == 4", "assert strlen(\"hello\\nworld\") == 9", "assert strlen(\"hello\\rworld\") == 9", "assert strlen(\"hello\\nworld\\r\") == 10", "assert strlen(\"12345\") == 5", "assert strlen(\"123456\") == 6", "assert strlen(\"123456789\") == 9", "assert strlen(\"hello world\") == 10", "assert strlen(\"hello\\nworld\") == 8", "assert strlen(\"hello\\rworld\") == 8", "assert strlen(\"hello\\nworld\\r\\n\") == 9", "assert strlen(\"   hello world   \") == 6", "assert strlen(\"a\" * 1000) == 1000", "assert strlen(\"a\" * 1000 + \"b\") == 1001", "assert strlen(\"wor\") == 4", "assert strlen(\"123abc\") == 5", "assert strlen(\"123abcde\") == 7", "assert strlen(\"123abcdef\") == 8", "assert strlen(\"123abcdefg\") == 9", "assert strlen(\"hello world\") == 7", "assert strlen(\"hello\\nworld\") == 7", "assert strlen(\"hello\\rworld\") == 7", "assert strlen(\"hello\\n\\rworld\") == 8", "assert strlen(\"hello\") == 6", "assert strlen(\"hello\\nworld\") == 6", "assert strlen(\"hello\\rworld\") == 6", "assert strlen(\"aabbcc\") == 3", "assert strlen(\"1234567890\") == 6", "assert strlen(\"hello world!\") == 11", "assert strlen(\"12345678901234567890\") == 13", "assert strlen(\"hello world\\n\") == 11", "assert strlen(\"   hello world\") == 8", "assert strlen(\"a\" * 100) == 100", "assert strlen(\"hello world!\") == 9", "assert strlen(\"bcd\") == 3", "assert strlen(\"bc\") == 2", "assert strlen(\"world\") == 6", "assert strlen(\"hello world\\n\") == 8", "assert strlen(\"hello world\\r\\n\") == 9", "assert strlen(\"hello world\\t\") == 8", "assert strlen(\"hello world\\n\\r\\t\") == 10", "assert strlen(\"hello   world\") == 10", "assert strlen(\"hello   world   \") == 11", "assert strlen(\"hello   world   \") == 9", "assert strlen(\"b\") == 1", "assert strlen(\"c\") == 1", "assert strlen(\"d\") == 1", "assert strlen(\"e\") == 1", "assert strlen(\"f\") == 1", "assert strlen(\"g\") == 2", "assert strlen(\"h\") == 2", "assert strlen(\"i\") == 1", "assert strlen(\"j\") == 1", "assert strlen(\"k\") == 1", "assert strlen(\"l\") == 1", "assert strlen(\"m\") == 2", "assert strlen(\"n\") == 1", "assert strlen(\"o\") == 1", "assert strlen(\"p\") == 1", "assert strlen(\"q\") == 1", "assert strlen(\"r\") == 1", "assert strlen(\"s\") == 1", "assert strlen(\"t\") == 1", "assert strlen(\"u\") == 1", "assert strlen(\"v\") == 1", "assert strlen(\"w\") == 2", "assert strlen(\"x\") == 1", "assert strlen(\"y\") == 1", "assert strlen(\"z\") == 1", "assert strlen(\"-123.45\") == 5"]}
{"HumanEval/24": ["assert largest_divisor(15) == 5", "assert largest_divisor(8) == 2", "assert largest_divisor(10) == 5", "assert largest_divisor(100) == 100", "assert largest_divisor(101) == 101", "assert largest_divisor(0) == 0", "assert largest_divisor(9) == 3", "assert largest_divisor(100) == 10", "assert largest_divisor(-1) == -1", "assert largest_divisor(-10) == -5", "assert largest_divisor(1000) == 1000", "assert largest_divisor(12) == 4", "assert largest_divisor(17) == 2", "assert largest_divisor(6) == 2", "assert largest_divisor(11) == 2", "assert largest_divisor(4) == 2", "assert largest_divisor(11) == 5", "assert largest_divisor(12) == 6", "assert largest_divisor(13) == 4", "assert largest_divisor(14) == 4", "assert largest_divisor(16) == 4", "assert largest_divisor(0) == 1", "assert largest_divisor(21) == 3", "assert largest_divisor(10) == 10", "assert largest_divisor(18) == 2", "assert largest_divisor(12) == 1", "assert largest_divisor(10) == 2", "assert largest_divisor(100) == 2", "assert largest_divisor(1000) == 100", "assert largest_divisor(10000) == 1000", "assert largest_divisor(100000) == 10000", "assert largest_divisor(11) == 3", "assert largest_divisor(18) == 1", "assert largest_divisor(12) == 2", "assert largest_divisor(7) == 1", "assert largest_divisor(20) == 10", "assert largest_divisor(100) == 20", "assert largest_divisor(25) == 5", "assert largest_divisor(18) == 3", "assert largest_divisor(11) == 1", "assert largest_divisor(13) == 3", "assert largest_divisor(2) == 2", "assert largest_divisor(3) == 3", "assert largest_divisor(5) == 5", "assert largest_divisor(7) == 3", "assert largest_divisor(9) == 9", "assert largest_divisor(-10) == -1", "assert largest_divisor(-12) == -1", "assert largest_divisor(-8) == -2", "assert largest_divisor(18) == 6", "assert largest_divisor(20) == 20", "assert largest_divisor(26) == 6", "assert largest_divisor(17) == 3", "assert largest_divisor(11) == 11", "assert largest_divisor(6) == 3", "assert largest_divisor(100) == 5", "assert largest_divisor(101) == 1", "assert largest_divisor(-100) == -1", "assert largest_divisor(21) == 1", "assert largest_divisor(-1) == 1", "assert largest_divisor(1000) == 1", "assert largest_divisor(-1000) == 1", "assert largest_divisor(102) == 100", "assert largest_divisor(103) == 101", "assert largest_divisor(100) == 50", "assert largest_divisor(999) == 999", "assert largest_divisor(1001) == 1001", "assert largest_divisor(-15) == -15", "assert largest_divisor(-9) == -3", "assert largest_divisor(-21) == -3", "assert largest_divisor(19) == 19", "assert largest_divisor(18) == 18", "assert largest_divisor(17) == 17", "assert largest_divisor(30) == 15", "assert largest_divisor(35) == 5", "assert largest_divisor(40) == 20", "assert largest_divisor(-15) == -5", "assert largest_divisor(-25) == -5", "assert largest_divisor(14) == 2", "assert largest_divisor(4) == 4", "assert largest_divisor(13) == 13", "assert largest_divisor(14) == 14", "assert largest_divisor(20) == 4", "assert largest_divisor(30) == 6", "assert largest_divisor(45) == 9", "assert largest_divisor(101) == 10", "assert largest_divisor(102) == 10", "assert largest_divisor(7) == 7", "assert largest_divisor(-10) == -2", "assert largest_divisor(12) == 12", "assert largest_divisor(-5) == -5", "assert largest_divisor(200) == 20", "assert largest_divisor(102) == 102", "assert largest_divisor(99) == 99", "assert largest_divisor(101) == 100", "assert largest_divisor(102) == 101", "assert largest_divisor(22) == 2", "assert largest_divisor(28) == 7", "assert largest_divisor(-10) == -10", "assert largest_divisor(3) == 1", "assert largest_divisor(-3) == -1", "assert largest_divisor(49) == 7", "assert largest_divisor(50) == 5"]}
{"HumanEval/25": ["assert factorize(2) == [2]", "assert factorize(6) == [2, 3]", "assert factorize(10) == [2, 5]", "assert factorize(14) == [2, 7]", "assert factorize(20) == [2, 5, 5]", "assert factorize(24) == [2, 2, 3]", "assert factorize(30) == [2, 3, 5]", "assert factorize(42) == [2, 3, 7]", "assert factorize(49) == [3, 7]", "assert factorize(56) == [2, 2, 2, 7]", "assert factorize(4) == [2]", "assert factorize(8) == [2, 2, 2]", "assert factorize(12) == [2, 2, 3]", "assert factorize(15) == [3]", "assert factorize(16) == [2, 2, 2, 2]", "assert factorize(17) == [2, 2, 7]", "assert factorize(3) == [2]", "assert factorize(4) == [2, 2]", "assert factorize(5) == [5]", "assert factorize(7) == [3, 2]", "assert factorize(9) == [3, 3]", "assert factorize(11) == [7]", "assert factorize(15) == [3, 5]", "assert factorize(1) == []", "assert factorize(10) == []", "assert factorize(100) == []", "assert factorize(101) == []", "assert factorize(12) == [2]", "assert factorize(24) == [2, 2]", "assert factorize(30) == [2, 3]", "assert factorize(720) == [2, 2, 2, 3]", "assert factorize(144) == [2, 2, 3]", "assert factorize(28) == [3]", "assert factorize(100) == [7, 13]", "assert factorize(144) == [2, 2, 2, 3]", "assert factorize(288) == [2, 2, 2, 3]", "assert factorize(1000) == [5, 2]", "assert factorize(2) == []", "assert factorize(3) == []", "assert factorize(4) == []", "assert factorize(5) == []", "assert factorize(6) == []", "assert factorize(7) == []", "assert factorize(13) == [3, 3]", "assert factorize(18) == [2, 3, 3]", "assert factorize(121) == [3, 3]", "assert factorize(100) == [1, 13]", "assert factorize(1200) == [2, 2, 5, 5, 10]", "assert factorize(1000) == [5, 100]", "assert factorize(25) == [5, 5]", "assert factorize(3) == [2, 3]", "assert factorize(12) == [2, 2, 2]", "assert factorize(24) == [2, 3, 3]", "assert factorize(90) == [2, 3, 5]", "assert factorize(100) == [2, 5]", "assert factorize(101) == [2, 3, 7]", "assert factorize(121) == [3, 7, 11]", "assert factorize(144) == [2, 2, 3, 3]", "assert factorize(180) == [2, 3, 3, 3]", "assert factorize(7) == [2, 3, 1]", "assert factorize(10) == [1, 2, 5]", "assert factorize(11) == [11]", "assert factorize(11) == []", "assert factorize(12) == []", "assert factorize(13) == []", "assert factorize(14) == []", "assert factorize(15) == []", "assert factorize(16) == []", "assert factorize(17) == []", "assert factorize(18) == []", "assert factorize(19) == []", "assert factorize(20) == []", "assert factorize(21) == []", "assert factorize(22) == []", "assert factorize(23) == []", "assert factorize(24) == []", "assert factorize(25) == [5]", "assert factorize(26) == [2, 3]", "assert factorize(27) == [3, 3]", "assert factorize(28) == [2, 7]", "assert factorize(29) == [7, 3]", "assert factorize(30) == [2, 5, 5]", "assert factorize(31) == [7, 11]", "assert factorize(32) == [2, 2, 2]", "assert factorize(33) == [3, 11]", "assert factorize(34) == [2, 29]", "assert factorize(35) == [5, 7]", "assert factorize(36) == [2, 2, 3]", "assert factorize(37) == [3, 3, 3]", "assert factorize(38) == [2, 13]", "assert factorize(39) == [7, 13]", "assert factorize(40) == [2, 5, 17]", "assert factorize(41) == [7, 17]", "assert factorize(42) == [2, 2, 29]", "assert factorize(43) == [3, 29]", "assert factorize(44) == [2, 2, 13]", "assert factorize(45) == [5, 17]", "assert factorize(16) == [2, 2, 2]", "assert factorize(24) == [2, 2, 2, 2]", "assert factorize(18) == [2, 2, 3]", "assert factorize(20) == [2, 5]", "assert factorize(1000) == []", "assert factorize(12) == [2, 2]", "assert factorize(120) == [2, 2, 3]", "assert factorize(700) == [2, 2, 3, 5, 7]", "assert factorize(120) == [2, 2, 3, 3]", "assert factorize(121) == [2, 3, 3, 1]", "assert factorize(100) == [5, 2]", "assert factorize(101) == [3, 11]", "assert factorize(102) == [2, 5, 2]", "assert factorize(103) == [3, 13]", "assert factorize(100) == [2, 5, 2]", "assert factorize(24) == [2, 3]", "assert factorize(10) == [1, 2, 2, 5]", "assert factorize(12) == [2, 2, 2, 3]", "assert factorize(15) == [3, 3, 3]", "assert factorize(20) == [2, 2, 5]"]}
{"HumanEval/26": ["assert remove_duplicates([1, 2, 3, 2, 4]) == [1, 3, 4]", "assert remove_duplicates([1, 2, 3, 3, 4]) == [1, 2, 3, 4]", "assert remove_duplicates([1, 2, 3, 2, 4]) == [1, 2, 3, 4]", "assert remove_duplicates([1, 2, 3, 3, 3]) == [1, 2, 3, 3]", "assert remove_duplicates([1, 2, 3, 2, 2]) == [1, 2, 3]", "assert remove_duplicates([1, 2, 3, 2, 2, 2]) == [1, 2, 3]", "assert remove_duplicates([1, 2, 3, 2, 2, 2, 2]) == [1, 2, 3]", "assert remove_duplicates([1, 2, 3, 3, 2, 4]) == [1, 2, 3, 4]", "assert remove_duplicates([1, 2, 3, 2, 3, 2, 4]) == [1, 2, 3, 4]", "assert remove_duplicates([1, 2, 3, 3, 2, 3, 2, 4]) == [1, 2, 3, 4]", "assert remove_duplicates([1, 2, 3, 2, 3, 2, 3, 2, 4]) == [1, 2, 3, 4]", "assert remove_duplicates([1, 2, 3, 2, 3, 4]) == [1, 2, 3, 4]", "assert remove_duplicates([1, 2, 3, 3, 3, 2, 4]) == [1, 2, 3, 4]", "assert remove_duplicates([1, 2, 3, 3, 3, 3, 2, 4]) == [1, 2, 3, 4]", "assert remove_duplicates([1, 2, 3, 3, 3, 3, 3, 2, 4]) == [1, 2, 3, 4]", "assert remove_duplicates([1, 2, 3, 3, 3, 3, 3, 3, 2, 4]) == [1, 2, 3, 4]", "assert remove_duplicates([1, 2, 3, 3, 3, 3, 3, 3, 3, 2, 4]) == [1, 2, 3, 4]", "assert remove_duplicates([1, 2, 3, 3, 3, 3]) == [1, 2, 3, 3]", "assert remove_duplicates([1, 2, 3, 3, 3, 3, 3]) == [1, 2, 3, 3]", "assert remove_duplicates([1, 2, 3, 3, 3, 3, 3, 3]) == [1, 2, 3, 3]", "assert remove_duplicates([1, 2, 3, 3, 3, 3, 3, 3, 3]) == [1, 2, 3, 3]", "assert remove_duplicates([1, 2, 3, 3, 3, 4]) == [1, 2, 3, 4]", "assert remove_duplicates([1, 2, 3, 3, 3, 3, 4]) == [1, 2, 3, 4]", "assert remove_duplicates([1, 2, 3, 2, 2, 4]) == [1, 2, 3, 4]", "assert remove_duplicates([1, 2, 3, 2, 2, 2, 4]) == [1, 2, 3, 4]", "assert remove_duplicates([1, 2, 3, 2, 2, 2, 2, 4]) == [1, 2, 3, 4]", "assert remove_duplicates([1, 2, 3, 2, 2, 2, 2, 2, 4]) == [1, 2, 3, 4]", "assert remove_duplicates([1, 2, 3, 2, 3, 3, 2, 4]) == [1, 2, 3, 4]", "assert remove_duplicates([1, 2, 3, 2, 3, 3, 3, 2, 4]) == [1, 2, 3, 4]", "assert remove_duplicates([1, 2, 3, 2, 3, 3, 3, 3, 2, 4]) == [1, 2, 3, 4]", "assert remove_duplicates([1, 2, 3, 3, 3, 3]) == [1, 2, 3]", "assert remove_duplicates([1, 2, 3, 3, 3, 3, 3]) == []", "assert remove_duplicates([1, 2, 3, 3, 3, 3, 3, 3]) == []", "assert remove_duplicates([1, 2, 3, 3, 3, 3, 3, 4]) == [1, 2, 3, 4]", "assert remove_duplicates([1, 2, 3, 2, 3]) == [1, 2, 3]", "assert remove_duplicates([1, 2, 3, 3, 3]) == [1, 2, 3]", "assert remove_duplicates([1, 2, 3, 2, 4, 4]) == [1, 2, 3, 4]", "assert remove_duplicates([1, 2, 3, 2, 4, 4, 4]) == [1, 2, 3, 4]", "assert remove_duplicates([1, 2, 3, 2, 3, 2]) == [1, 2, 3]", "assert remove_duplicates([1, 2, 3, 2, 3, 3]) == [1, 2, 3]", "assert remove_duplicates([1, 2, 3, 2, 3, 3, 3]) == [1, 2, 3]", "assert remove_duplicates([1, 2, 3, 2, 3, 3, 3, 3]) == [1, 2, 3]", "assert remove_duplicates([1, 2, 3, 2, 2, 2, 2, 2, 2, 4]) == [1, 2, 3, 4]", "assert remove_duplicates([1, 2, 3, 2, 2, 2]) == [1, 2, 3, 2]", "assert remove_duplicates([1, 2, 3, 2, 2, 2, 2]) == [1, 2, 3, 2]", "assert remove_duplicates([1, 2, 3, 3, 3, 3, 3, 3, 3, 3, 2, 4]) == [1, 2, 3, 4]", "assert remove_duplicates([1, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 4]) == [1, 2, 3, 4]", "assert remove_duplicates([1, 2, 3, 4, 3]) == [1, 2, 3, 4]", "assert remove_duplicates([1, 2, 3, 4, 4]) == [1, 2, 3, 4]", "assert remove_duplicates([1, 2, 3, 2, 3, 3, 3, 3, 3, 2, 4]) == [1, 2, 3, 4]", "assert remove_duplicates([1, 2, 3, 2, 3, 3, 3, 3, 3, 3, 2, 4]) == [1, 2, 3, 4]", "assert remove_duplicates([1, 2, 3, 3, 3, 3, 3]) == [1, 2, 3]", "assert remove_duplicates([1, 2, 3, 3, 3, 3, 3, 3]) == [1, 2, 3]"]}
{"HumanEval/27": ["assert flip_case('hello') == 'HELLO'", "assert flip_case('Hello World') == 'heLlO wORld'", "assert flip_case(\"hello\") == \"HELLO\"", "assert flip_case(\"HeLlO\") == \"HElLo\"", "assert flip_case(\"hello world\") == \"HELLO WORLD\"", "assert flip_case(\"HELLO WORLD\") == \"hello world\"", "assert flip_case(\"HELLO\") == \"hELLO\"", "assert flip_case(\"HELLO WORLD\") == \"hELLO WORLD\"", "assert flip_case(\"HELLO   \") == \"hELLO   \"", "assert flip_case(\"HELLO     \") == \"hELLO     \"", "assert flip_case(\"HELLO       \") == \"hELLO       \"", "assert flip_case(\"hello     \") == \"hELLo     \"", "assert flip_case(\"hello       \") == \"hEllO       \"", "assert flip_case('Hello') == 'hELLO'", "assert flip_case('HeLlO') == 'HElLo'", "assert flip_case('hello world') == 'HELLO WORLD'", "assert flip_case('Hello World') == 'hELLo WoRld'", "assert flip_case('HELLO WORLD') == 'Hello World'", "assert flip_case('hello   world') == 'HELLO WORLD'", "assert flip_case('hello     world') == 'HELLO WORLD'", "assert flip_case('HeLlO') == 'hELLo'", "assert flip_case('hello world') == 'heLLo wORld'", "assert flip_case('hello World') == 'HellO WOrLD'", "assert flip_case('HELLO') == 'hello'", "assert flip_case('hello World') == 'HELLO WOrLD'", "assert flip_case('hello world') == 'HELLO WOrLD'", "assert flip_case('hello') == 'heLLo'", "assert flip_case('Hello') == 'hELLo'", "assert flip_case(\"HeLlO\") == \"hELLo\"", "assert flip_case(\"Hello World!\") == \"hElLo WORLD!\"", "assert flip_case(\"HELLO WORLD\") == \"hElLo WoRld\"", "assert flip_case(\"hello world\") == \"heLLo wOrLd\"", "assert flip_case(\"Hello World!!\") == \"HEllo WOrLd!!!\"", "assert flip_case(\"HELLO WORLD!!!\") == \"hElLo WOrLd!!!!\"", "assert flip_case(\"Hello\") == \"hELLO\"", "assert flip_case(\"hello world\") == \"heLLo WoRld\"", "assert flip_case(\"Hello World\") == \"HEllo WORLD\"", "assert flip_case(\"HELLO\") == \"hello\"", "assert flip_case(\"HeLlO wOrLd\") == \"hElLo WoRlD\"", "assert flip_case('HELLO WORLD') == 'hello world'", "assert flip_case('hello   world') == 'HELLO   WORLD'", "assert flip_case('hello    world') == 'HELLO    WORLD'", "assert flip_case('hello     world') == 'HELLO     WORLD'", "assert flip_case('hello       world') == 'HELLO       WORLD'", "assert flip_case('hello        world') == 'HELLO        WORLD'", "assert flip_case('hello      world') == 'HELLO      WORLD'", "assert flip_case('helloooo   world') == 'HELLOOOOO   WORLD'", "assert flip_case(\"Hello World!\") == \"HElLo WoRld!\"", "assert flip_case(\"hello world\") == \"heLLo wORLD!\"", "assert flip_case(\"hello world\") == \"heLLo WOrLd!\"", "assert flip_case(\"Hello world\") == \"HElLo WoRlD!\"", "assert flip_case(\"hello world\") == \"heLLo wOrLd!\"", "assert flip_case('Hello World!') == 'HELLO WORLD!'", "assert flip_case('hello world') == 'HELLOWORLD'", "assert flip_case('HELLO') == 'hELLO'", "assert flip_case(\"\") == \"\"", "assert flip_case(\"Hello World!\") == \"HOWDY WORLD!\"", "assert flip_case(\"Flip Case\") == \"fLIP cASE\"", "assert flip_case(\"hello world\") == \"hello world\"", "assert flip_case(\"hello   world\") == \"hello   world\"", "assert flip_case(\"HELLO   WORLD\") == \"hello   world\"", "assert flip_case(\"Hello World!\") == \"HeLLo WoRld!\"", "assert flip_case(\"FLIP CASE IS FUN\") == \"fLiP cASE iS FuN\"", "assert flip_case(\"A\") == \"a\"", "assert flip_case(\"Z\") == \"z\"", "assert flip_case('Hello World') == 'HELLO WORLD'", "assert flip_case('12345') == '12345'", "assert flip_case('HELLO WORLD') == 'hELLO WORLD'", "assert flip_case('Hello World') == 'heLLo WoRld'", "assert flip_case('Hello   World') == 'HELLO   WORLD'", "assert flip_case('HELLO   WORLD') == 'hello   world'", "assert flip_case('hello world') == 'HELLO   WORLD'", "assert flip_case('Hello') == 'HELLO'", "assert flip_case(\"Hello World\") == \"HEllo WoRld\"", "assert flip_case(\"HELLO WORLD!\") == \"hELLo WoRLD!\"", "assert flip_case(\"hello world!\") == \"heLLo wOrLd!\"", "assert flip_case('Hello World') == 'hEllo wORld'", "assert flip_case('HeLlO') == 'hElLo'", "assert flip_case('HELLO WORLD') == 'hELLo WoRlD'", "assert flip_case('hello world') == 'heLLo wOrLd'", "assert flip_case(\"Hello World\") == \"hEllO wOrLd\"", "assert flip_case(\"Hello\") == \"hELLo\"", "assert flip_case(\"HELLO\") == \"hELLo\"", "assert flip_case(\"HELLO WORLD\") == \"hELLo WORLD\"", "assert flip_case('hello World') == 'HELLO world'", "assert flip_case('HELLO world') == 'hello world'", "assert flip_case('hello   world') == 'HELLO   world'", "assert flip_case('Hello   World') == 'Hello   World'", "assert flip_case(\"Hello World!\") == \"heLLo WoRld!\"", "assert flip_case(\"hello world\") == \"helLo wORLD!\"", "assert flip_case(\"HELLO WORLD\") == \"HELLO WORLD\"", "assert flip_case(\"Hello World\") == \"hELLo WoRlD\"", "assert flip_case(\"HeLlO WOrLd\") == \"HElLo WoRLd\"", "assert flip_case(\"hello world!\") == \"HELLO WORLD!\"", "assert flip_case(\"Hello World!\") == \"hELLo WoRLd!\"", "assert flip_case(\"12345\") == \"12345\"", "assert flip_case(\"1a/b\") == \"1A/B\"", "assert flip_case(\"1a/bC\") == \"1A/BC\"", "assert flip_case(\"1a/b c\") == \"1A/BC\"", "assert flip_case(\"1a/b cD\") == \"1A/BCD\"", "assert flip_case('Flip Case') == 'fLIP cASE'", "assert flip_case('world') == 'WORLD'", "assert flip_case('') == ''", "assert flip_case('\\n') == '\\n'", "assert flip_case(\"WORLD\") == \"hello world\"", "assert flip_case(\"HELLO   \") == \"hello   \"", "assert flip_case(\" HELLO   \") == \"hello   \"", "assert flip_case(\"WORLD   \") == \"world   \""]}
{"HumanEval/28": ["assert concatenate([\"hello\", \"world\"]) == \"helloworld\"", "assert concatenate([\"hello\", \" \", \"world\"]) == \"hello world\"", "assert concatenate([\"hello\", \"world\", \"\"]) == \"hello world\"", "assert concatenate([\"hello\", \"world\", \" \"]) == \"hello world\"", "assert concatenate([\"hello\", \"world\", \"  \"]) == \"hello world\"", "assert concatenate([\"hello\", \"world\", \"\\n\"]) == \"hello\\nworld\"", "assert concatenate([\"hello\", \"world\", \"\\r\\n\"]) == \"hello\\r\\nworld\"", "assert concatenate([\"hello\", \"world\", \"\\r\"]) == \"hello\\rworld\"", "assert concatenate([\"hello\", \"world\", \"  \\t\"]) == \"hello\\tworld\"", "assert concatenate([\"hello\", \"world\", \"   \"]) == \"hello    world\"", "assert concatenate([]) == ''", "assert concatenate(['a', 'b', 'c']) == 'abc'", "assert concatenate(['a', 'b', 'c', 'd']) == 'abcd'", "assert concatenate(['a', 'b', 'c', 'd', 'e']) == 'abced'", "assert concatenate(['a', 'b', 'c', 'd', 'e', 'f']) == 'abcfed'", "assert concatenate(['a', 'b', 'c', 'd', 'e', 'f', 'g']) == 'abcfged'", "assert concatenate(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']) == 'abcfggh'", "assert concatenate([\"hello\", \" \", \"\", \"world\"]) == \"hello world\"", "assert concatenate([\"hello\", \"world\", \"\\n\\r\"]) == \"hello\\n\\rworld\"", "assert concatenate(['hello', 'world']) == 'hello world'", "assert concatenate(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i']) == 'abcfgghij'", "assert concatenate(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']) == 'abcfgghijkl'", "assert concatenate([\"hello\", \"world\", \"\"]) == \"helloworld\"", "assert concatenate([\"hello\", \"world\", \"\", \"\"]) == \"helloworld\"", "assert concatenate([\"hello\", \"world\", \"\", \"\", \"\"]) == \"helloworld\"", "assert concatenate([\"hello\", \"world\", \"\", \"\", \"\", \"\"]) == \"helloworld\"", "assert concatenate([\"hello\", \"world\", \"\", \"\", \"\", \"\", \"\"]) == \"helloworld\"", "assert concatenate([\"hello\", \"world\", \"\", \"\", \"\", \"\", \"\", \"\"]) == \"helloworld\"", "assert concatenate([\"hello\", \"world\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"]) == \"helloworld\"", "assert concatenate([\"hello\", \"world\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"]) == \"helloworld\"", "assert concatenate([\"hello\", \"world\", \"!\"]) == \"helloworld!\"", "assert concatenate([\"hello\", \"world\", \"!\", \".\"]) == \"helloworld.!\"", "assert concatenate([\"hello\", \"world\", \"!\", \".\", \"a\"]) == \"helloworld.a\"", "assert concatenate([\"hello\", \"world\", \"!\", \".\", \"a\", \"b\"]) == \"helloworld.ab\"", "assert concatenate([\"hello\", \"world\", \"!\", \".\", \"a\", \"b\", \"c\"]) == \"helloworld.abc\"", "assert concatenate(['hello', 'world']) == 'helloworld'", "assert concatenate([\"hello\", \"world\", \"!\", \"?\"]) == \"helloworld??\"", "assert concatenate([\"hello\", \" \", \" \", \"world\"]) == \"hello     world\"", "assert concatenate([\"hello\", \" \", \" \", \" \", \"world\"]) == \"hello     world\"", "assert concatenate([\"hello\", \" \", \" \", \" \", \" \", \"world\"]) == \"hello     world\"", "assert concatenate([\"hello\", \" \", \" \", \" \", \" \", \" \", \"world\"]) == \"hello     world\"", "assert concatenate([\"hello\", \" \", \" \", \" \", \" \", \" \", \" \", \"world\"]) == \"hello     world\"", "assert concatenate([\"hello\", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \"world\"]) == \"hello     world\"", "assert concatenate([\"hello\", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \"world\"]) == \"hello     world\"", "assert concatenate([\"hello\", \"world\", \"\", \"\", \"\", \"\", \"\", \"\", \"a\"]) == \"helloworlda\"", "assert concatenate([\"hello\", \"world\", \"\", \"\", \"\", \"\", \"\", \"\", \"ab\"]) == \"helloworldab\"", "assert concatenate([\"hello\", \"world\", \"\", \"\", \"\", \"\", \"\", \"\", \"abc\"]) == \"helloworldabc\"", "assert concatenate([\"hello\", \"world\", \"!\", \"!\"]) == \"helloworld!\"", "assert concatenate([\"hello\", \"world\", \"!\", \"!\", \".\"]) == \"helloworld.\"", "assert concatenate([\"hello\", \"world\", \"\"] * 3) == \"helloworld\"", "assert concatenate([\"hello\", \"world\", \"\", \"hello\", \"world\"]) == \"helloworldhelloworld\"", "assert concatenate([\"hello\", \"world\", \"\", \"hello\", \"world\", \"\"]) == \"helloworldhelloworld\"", "assert concatenate([\"hello\", \"world\", \"\", \"hello\", \"world\", \"\", \"hello\", \"world\"]) == \"helloworldhelloworld\"", "assert concatenate([\"hello\", \"world\", \"\", \"hello\", \"world\", \"\", \"hello\", \"world\", \"\"]) == \"helloworldhelloworld\"", "assert concatenate([\"hello\", \"world\", \"foo\"]) == \"helloworldfoo\"", "assert concatenate([\"hello\", \"hello\", \"world\"]) == \"hellohello world\"", "assert concatenate([\"hello\", \"hello\", \"hello\", \"world\"]) == \"hellohellohello world\"", "assert concatenate([\"hello\", \"hello\", \"hello\", \"hello\", \"world\"]) == \"hellohellohellohello world\"", "assert concatenate([\"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"world\"]) == \"hellohellohellohellohello world\"", "assert concatenate([\"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"world\"]) == \"hellohellohellohellohello world\"", "assert concatenate([\"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"world\"]) == \"hellohellohellohellohello world\"", "assert concatenate([\"hello\", \"world\", \"!\", \" \", \" \"]) == \"helloworld. \"", "assert concatenate(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i']) == 'abcfghji'", "assert concatenate(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']) == 'abcfgijj'", "assert concatenate([\"hello\", \"world\", \" \"] * 3) == \"hello world\"", "assert concatenate([\"hello\", \"world\", \" \"] * 3 + [\"!\", \"?\"]) == \"hello world!\"", "assert concatenate([\"hello\", \"world\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"] * 3) == \"helloworld\"", "assert concatenate([\"hello\", \"world\", \"!\", \"!\"]) == \"helloworld!!!\"", "assert concatenate([\"hello\", \"world\", \"!\", \"!\", \"!\"]) == \"helloworld!!!!\"", "assert concatenate([\"hello\", \"world\", \"!\", \"!\", \"!\", \"!\"]) == \"helloworldddddd\"", "assert concatenate([\"hello\", \"world\", \"!\", \"!\", \"!\", \"!\", \"!\"]) == \"helloworldppppp\"", "assert concatenate([\"hello\", \"world\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\"]) == \"helloworldfffff\"", "assert concatenate([\"hello\", \"world\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\"]) == \"helloworldggggg\"", "assert concatenate([\"hello\", \"world\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\"]) == \"helloworldrrrrr\"", "assert concatenate([\"hello\", \"world\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\"]) == \"helloworldttttt\"", "assert concatenate([\"hello\", \"world\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\"]) == \"helloworldmmmmm\"", "assert concatenate([\"hello\", \" \", \"\", \"\", \"world\"]) == \"hello world\"", "assert concatenate([\"hello\", \"world\"]) == \"hello world\"", "assert concatenate([\"hello\", \"world\", \"   \"]) == \"hello world\"", "assert concatenate([\"hello\", \"world\", \" \"] * 3) == \"helloworld\"", "assert concatenate([\"hello\", \"world\", \"  \"] * 3) == \"helloworld\"", "assert concatenate([\"hello\", \"world\", \"\\n\"]) == \"helloworld\\n\"", "assert concatenate([\"hello\", \"world\", \"\\r\\n\"]) == \"helloworld\\r\\n\"", "assert concatenate([\"hello\", \"world\", \"\\r\"]) == \"helloworld\\r\"", "assert concatenate([\"hello\", \"world\", \"\\n\\r\"]) == \"helloworld\\n\\r\"", "assert concatenate(['hello', 'world', '!']) == 'helloworld!'", "assert concatenate(['hello', 'world', '!', '']) == 'helloworld!'", "assert concatenate(['hello', 'world', '!', '', '']) == 'helloworld!'", "assert concatenate(['hello', 'world', '!', ' ', '']) == 'helloworld!'", "assert concatenate(['hello', 'world', '!', '   ', '']) == 'helloworld!'"]}
{"HumanEval/29": ["assert filter_by_prefix([\"hello\", \"world\"], \"h\") == [\"hello\"]", "assert filter_by_prefix([\"hello\", \"world\"], \"he\") == [\"hello\"]", "assert filter_by_prefix([\"hello\", \"world\"], \"hi\") == [\"hello\"]", "assert filter_by_prefix([\"hello\", \"world\"], \"hh\") == []", "assert filter_by_prefix([\"hello\", \"world\", \"array\"], \"a\") == [\"hello\", \"array\"]", "assert filter_by_prefix([\"hello\", \"world\", \"array\"], \"ha\") == [\"hello\"]", "assert filter_by_prefix([\"hello\", \"world\", \"array\"], \"h\") == []", "assert filter_by_prefix([\"hello\", \"world\", \"python\"], \"h\") == [\"hello\"]", "assert filter_by_prefix([\"hello\", \"world\", \"python\"], \"w\") == [\"world\", \"python\"]", "assert filter_by_prefix([\"hello\", \"world\", \"python\"], \"\") == [\"hello\", \"world\", \"python\"]", "assert filter_by_prefix([\"hello\", \"world\", \"python\"], \"p\") == [\"python\"]", "assert filter_by_prefix([\"hello\", \"world\", \"python\"], \"py\") == [\"python\"]", "assert filter_by_prefix([\"hello\", \"world\", \"python\"], \"a\") == [\"hello\", \"world\", \"python\"]", "assert filter_by_prefix([\"hello\", \"world\", \"world\"], \"w\") == [\"world\"]", "assert filter_by_prefix([\"hello\", \"world\", \"world\", \"array\"], \"w\") == [\"world\", \"world\", \"world\"]", "assert filter_by_prefix([\"hello\", \"world\", \"world\", \"array\", \"array\"], \"w\") == [\"world\", \"world\", \"world\"]", "assert filter_by_prefix([\"hello\", \"world\", \"world\", \"array\", \"array\", \"array\", \"array\"], \"w\") == [\"world\", \"world\", \"world\"]", "assert filter_by_prefix([\"hello\", \"world\", \"world\", \"array\", \"array\", \"array\", \"array\", \"array\", \"array\"], \"w\") == [\"world\", \"world\", \"world\"]", "assert filter_by_prefix([\"hello\", \"world\", \"world\", \"array\", \"array\", \"array\", \"array\", \"array\", \"array\", \"array\"], \"w\") == [\"world\", \"world\", \"world\"]", "assert filter_by_prefix([\"hello\", \"world\", \"world\", \"array\", \"array\", \"array\", \"array\", \"array\", \"array\", \"array\", \"array\"], \"w\") == [\"world\", \"world\", \"world\"]", "assert filter_by_prefix([\"hello\", \"world\", \"world\", \"array\", \"array\", \"array\", \"array\", \"array\", \"array\", \"array\", \"array\", \"array\"], \"w\") == [\"world\", \"world\", \"world\"]", "assert filter_by_prefix([\"hello\", \"world\", \"how\", \"are\", \"you\"], \"he\") == [\"hello\", \"how\"]", "assert filter_by_prefix([\"hello\", \"world\", \"how\", \"are\", \"you\"], \"\") == [\"hello\", \"world\", \"how\", \"are\", \"you\"]", "assert filter_by_prefix([\"hello\", \"world\", \"how\", \"are\", \"you\"], \"xyz\") == []", "assert filter_by_prefix([\"hello\", \"world\", \"how\", \"are\", \"you\"], \"a\") == [\"hello\", \"world\"]", "assert filter_by_prefix([\"hello\", \"world\", \"python\"], \"xyz\") == []", "assert filter_by_prefix([\"hello\", \"world\", \"python\"], \"a\") == [\"hello\", \"world\"]", "assert filter_by_prefix([\"hello\", \"world\", \"world\", \"array\"], \"a\") == [\"array\"]", "assert filter_by_prefix([\"hello\", \"world\", \"world\", \"array\", \"array\"], \"a\") == [\"array\", \"array\"]", "assert filter_by_prefix([\"hello\", \"world\", \"world\", \"array\", \"array\", \"array\", \"array\"], \"a\") == [\"array\", \"array\"]", "assert filter_by_prefix([\"hello\", \"world\", \"world\", \"array\", \"array\", \"array\", \"array\", \"array\", \"array\"], \"a\") == [\"array\", \"array\"]", "assert filter_by_prefix([\"hello\", \"world\"], \"hel\") == [\"hello\"]", "assert filter_by_prefix([\"hello\", \"world\"], \"hxx\") == []", "assert filter_by_prefix([\"hello\", \"world\", \"array\"], \"h\") == [\"hello\", \"array\"]", "assert filter_by_prefix([\"hello\", \"world\", \"array\"], \"he\") == [\"hello\", \"array\"]", "assert filter_by_prefix([\"hello\", \"world\", \"array\"], \"hel\") == [\"hello\", \"array\"]", "assert filter_by_prefix([\"hello\", \"world\", \"array\"], \"hxx\") == []", "assert filter_by_prefix([\"hello\", \"world\"], \"w\") == [\"world\"]", "assert filter_by_prefix([\"hello\", \"world\"], \"\") == [\"hello\", \"world\"]", "assert filter_by_prefix([\"hello\", \"world\"], \"xyz\") == []", "assert filter_by_prefix([\"apple\", \"banana\", \"cherry\"], \"a\") == [\"apple\"]", "assert filter_by_prefix([\"apple\", \"banana\", \"cherry\"], \"b\") == []", "assert filter_by_prefix([\"apple\", \"banana\", \"cherry\"], \"\") == [\"apple\"]", "assert filter_by_prefix([\"hello\", \"world\", \"python\"], \"abc\") == [\"hello\", \"world\"]", "assert filter_by_prefix([\"hello\", \"world\", \"python\"], \"abcde\") == [\"hello\", \"world\"]", "assert filter_by_prefix([\"hello\", \"world\", \"python\"], \"b\") == [\"world\", \"python\"]", "assert filter_by_prefix([\"apple\", \"banana\", \"cherry\"], \"\") == [\"apple\", \"banana\", \"cherry\"]", "assert filter_by_prefix([\"hello\", \"world\", \"python\"], \"xy\") == []", "assert filter_by_prefix([\"hello\", \"world\", \"python\"], \"abc\") == [\"hello\", \"world\", \"python\"]", "assert filter_by_prefix([\"hello\", \"world\", \"python\"], \"abcde\") == [\"hello\", \"world\", \"python\"]", "assert filter_by_prefix([\"hello\", \"world\", \"python\"], \"abcde123\") == [\"hello\", \"world\", \"python\"]", "assert filter_by_prefix([\"hello\", \"world\", \"python\"], \"pytho\") == [\"python\"]", "assert filter_by_prefix([\"hello\", \"world\"], \"hola\") == []", "assert filter_by_prefix([\"hello\", \"world\", \"world\"], \"h\") == [\"hello\"]", "assert filter_by_prefix([\"hello\", \"world\", \"world\"], \"he\") == [\"hello\"]", "assert filter_by_prefix([\"hello\", \"world\", \"world\"], \"hi\") == [\"hello\"]", "assert filter_by_prefix([\"hello\", \"world\", \"world\"], \"hola\") == []", "assert filter_by_prefix([\"hello\", \"world\", \"python\"], \"a\") == [\"hello\"]", "assert filter_by_prefix([\"hello\", \"world\", \"python\"], \"ab\") == [\"hello\", \"world\"]", "assert filter_by_prefix([\"hello\", \"world\", \"python\"], \"array\") == [\"array\"]", "assert filter_by_prefix([\"hello\", \"world\"], \"hello\") == [\"hello\"]", "assert filter_by_prefix([\"hello\", \"world\"], \"hi\") == []", "assert filter_by_prefix([\"hello\", \"world\"], \"\") == []", "assert filter_by_prefix([\"hello\", \"world\", \"array\"], \"a\") == [\"hello\", \"world\"]", "assert filter_by_prefix([\"hello\", \"world\", \"array\"], \"ar\") == [\"world\"]", "assert filter_by_prefix([\"hello\", \"world\", \"array\"], \"ary\") == [\"hello\"]", "assert filter_by_prefix([\"hello\", \"world\"], \"ho\") == []", "assert filter_by_prefix([\"hello\", \"world\"], \"a\") == [\"hello\"]", "assert filter_by_prefix([\"hello\", \"world\"], \"ab\") == [\"hello\"]", "assert filter_by_prefix([\"apple\", \"banana\", \"cherry\"], \"ab\") == [\"apple\", \"banana\"]", "assert filter_by_prefix([\"apple\", \"banana\", \"cherry\"], \"ac\") == [\"apple\", \"cherry\"]", "assert filter_by_prefix([\"apple\", \"banana\", \"cherry\"], \"ad\") == [\"apple\", \"banana\", \"cherry\"]", "assert filter_by_prefix([\"apple\", \"banana\", \"cherry\"], \"ae\") == [\"apple\", \"cherry\"]", "assert filter_by_prefix([\"apple\", \"banana\", \"cherry\"], \"af\") == [\"apple\", \"banana\", \"cherry\"]", "assert filter_by_prefix([\"hello\", \"world\"], \"\") == [\"hello\"]", "assert filter_by_prefix([\"hello\", \"world\"], \"l\") == []", "assert filter_by_prefix([\"hello\", \"world\"], \"lo\") == []", "assert filter_by_prefix([\"hello\", \"world\"], \"lol\") == []", "assert filter_by_prefix([\"hello\", \"world\", \"array\"], \"ar\") == [\"array\"]", "assert filter_by_prefix([\"hello\", \"world\", \"python\"], \"abcdefg\") == []", "assert filter_by_prefix([\"hello\", \"world\", \"python\"], \"ab\") == [\"hello\", \"world\", \"python\"]", "assert filter_by_prefix([\"hello\", \"world\", \"python\"], \"aa\") == [\"hello\", \"world\"]", "assert filter_by_prefix([\"hello\", \"world\", \"world\", \"array\"], \"w\") == [\"world\", \"world\", \"array\"]", "assert filter_by_prefix([\"hello\", \"world\", \"world\", \"array\", \"array\"], \"w\") == [\"world\", \"world\", \"array\"]", "assert filter_by_prefix([\"hello\", \"world\", \"world\", \"array\", \"array\", \"array\", \"array\"], \"w\") == [\"world\", \"world\", \"array\"]", "assert filter_by_prefix([\"hello\", \"world\", \"world\", \"array\", \"array\", \"array\", \"array\", \"array\", \"array\"], \"w\") == [\"world\", \"world\", \"array\"]", "assert filter_by_prefix([\"hello\", \"world\", \"world\", \"array\"], \"ar\") == [\"array\"]", "assert filter_by_prefix([\"hello\", \"world\", \"world\", \"array\", \"apple\"], \"app\") == [\"apple\"]", "assert filter_by_prefix([\"hello\", \"world\", \"world\", \"array\", \"apple\", \"banana\"], \"ap\") == [\"apple\", \"banana\"]", "assert filter_by_prefix([\"hello\", \"world\", \"world\", \"array\", \"apple\", \"banana\", \"orange\"], \"ao\") == [\"apple\", \"banana\", \"orange\"]", "assert filter_by_prefix([\"hello\", \"world\", \"world\", \"array\", \"apple\", \"banana\", \"orange\", \"grape\"], \"ag\") == [\"apple\", \"banana\", \"orange\", \"grape\"]", "assert filter_by_prefix([\"hello\", \"world\", \"python\"], \"xyzabcde\") == []", "assert filter_by_prefix([\"hello\", \"world\"], \"heee\") == []", "assert filter_by_prefix([\"hello\", \"world\"], \"helloo\") == [\"hello\"]", "assert filter_by_prefix([\"hello\", \"world\", \"python\"], \"x\") == []", "assert filter_by_prefix([\"hello\", \"world\", \"python\"], \"\") == [\"hello\", \"world\"]", "assert filter_by_prefix([\"hello\", \"world\", \"python\"], \"l\") == [\"hello\", \"world\"]", "assert filter_by_prefix([\"hello\", \"world\", \"python\"], \"r\") == []", "assert filter_by_prefix([\"hello\", \"world\", \"python\"], \"o\") == [\"python\"]", "assert filter_by_prefix([\"hello\", \"world\", \"world\", \"array\", \"hello\"], \"ar\") == [\"array\", \"hello\"]", "assert filter_by_prefix([\"hello\", \"world\", \"world\", \"array\", \"hello\", \"world\"], \"ar\") == [\"array\", \"hello\", \"world\"]", "assert filter_by_prefix([\"hello\", \"world\", \"world\", \"array\", \"hello\", \"world\", \"world\"], \"ar\") == [\"array\", \"hello\", \"world\"]", "assert filter_by_prefix([\"hello\", \"world\", \"world\", \"array\", \"hello\", \"world\", \"world\", \"world\"], \"ar\") == [\"array\", \"hello\", \"world\"]", "assert filter_by_prefix([\"hello\", \"world\", \"python\"], \"h\") == [\"hello\", \"world\"]", "assert filter_by_prefix([\"hello\", \"world\", \"python\"], \"py\") == [\"hello\", \"world\"]", "assert filter_by_prefix([\"hello\", \"world\"], \"abc\") == [\"hello\"]", "assert filter_by_prefix([\"hello\", \"world\", \"python\"], \"ar\") == [\"array\"]", "assert filter_by_prefix([\"hello\", \"world\", \"python\"], \"ary\") == [\"array\"]"]}
{"HumanEval/30": ["assert get_positive([-1, 2, -4, 5, 6]) == [2, 5, 6]", "assert get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 9, 123, 1]", "assert get_positive([-1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == []", "assert get_positive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "assert get_positive([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]) == []", "assert get_positive([-1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == []", "assert get_positive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]", "assert get_positive([-1000, -500, -250, 0, 250, 500, 750, 1000, 1250, 1500, 1750, 2000]) == [0, 250, 500, 750, 1000, 1250, 1500, 1750, 2000]", "assert get_positive([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12]) == []", "assert get_positive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]", "assert get_positive([-1000, -900, -800, -700, -600, -500, -400, -300, -200, -100, 100, 200, 300, 400, 500, 600, 700, 800, 900, 1000]) == [-1000, -900, -800, -700, -600, -500, -400, -300, -200, -100, 100, 200, 300, 400, 500, 600, 700, 800, 900, 1000]", "assert get_positive([-10, -5, -2, 0, 2, 5, 10, 15, 20, 25]) == [2, 5, 10, 15, 20, 25]", "assert get_positive([-100, -50, -20, 0, 20, 50, 100, 150, 200, 250]) == [20, 50, 100, 150, 200, 250]", "assert get_positive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]", "assert get_positive([-1000, -500, -250, 0, 250, 500, 1000]) == [-1000, -500, 250, 500, 1000]", "assert get_positive([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]) == []", "assert get_positive([-1, 2, -4, 5, 6, 7, 8, 9, 10, 11, 12]) == []", "assert get_positive([-1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) == []", "assert get_positive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]", "assert get_positive([-1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]", "assert get_positive([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]", "assert get_positive([1, -2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == [1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]", "assert get_positive([-10, -5, -2, 1, 5, 10, 15, 20, 25, 30, 35, 40]) == [-10, -5, -2, 1, 5, 10, 15, 20, 25, 30, 35, 40]", "assert get_positive([1, -2, -3, -4, -5, -6, -7, -8, -9, -10]) == []", "assert get_positive([-1000, -500, -250, -100, -50, -25, -10, -5, -2, -1, 0, 5, 25, 100, 200, 500, 1000]) == [-1000, -500, -250, -100, -50, -25, -10, -5, -2, -1, 0, 5, 25, 100, 200, 500, 1000]", "assert get_positive([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12]) == [-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12]", "assert get_positive([-1000, -500, 0, 500, 1000]) == []", "assert get_positive([10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0]) == [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0]", "assert get_positive([1, -2, 3, -4, 5, 6, 7, 8, 9, 10, 11, 12]) == [1, 3, 5, 7, 8, 10, 11, 12]", "assert get_positive([1, -2, 3, -1, 4, -5, 6, 7, 8, 9, 10]) == []", "assert get_positive([-10, -5, 0, 5, 10, 15, 20, 25, 30, 35, 40]) == [10, 15, 20, 25, 30, 35, 40]", "assert get_positive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]) == []", "assert get_positive([1, -2, 3, 4, -5, -6, 7, 8, 9, 10]) == []", "assert get_positive([1, -2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == []", "assert get_positive([10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]) == [100, 110, 120]", "assert get_positive([1, -2, 3, 4, -5, -6, 7, 8, 9, 10, 11, 12]) == [1, 3, 4, 7, 8, 9, 10, 11, 12]", "assert get_positive([-1000, -500, 0, 500, 1000, 1500, 2000, 2500, 3000, 3500, 4000, 4500]) == [0, 500, 1000, 1500, 2000, 2500, 3000, 3500, 4000, 4500]", "assert get_positive([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "assert get_positive([1, -2, 3, -1, 4, 5, -6, 7, 8, 9, 10]) == []", "assert get_positive([-10, -5, 0, 5, 10, 15, 20, 25, 30, 35, 40, 45]) == [10, 15, 20, 25, 30, 35, 40, 45]", "assert get_positive([-1000, -500, -250, -100, 100, 250, 500, 1000]) == [-1000, -500, -250, -100, 100, 250, 500, 1000]", "assert get_positive([-1000.5, -500.2, -250.1, -100.1, 100.2, 250.5, 500.8, 1000.5]) == [-1000.5, -500.2, -250.1, -100.1, 100.2, 250.5, 500.8, 1000.5]", "assert get_positive([-1000, -500, 0, 500, 1000, 1500, 2000, 2500, 3000, 3500, 4000, 4500]) == [-1000, -500, 0, 500, 1000, 1500, 2000, 2500, 3000, 3500, 4000, 4500]", "assert get_positive([1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 7.5, 8.5, 9.5, 10.5, 11.5, 12.5]) == [1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 7.5, 8.5, 9.5, 10.5, 11.5, 12.5]", "assert get_positive([0, 0, 0, 0, 0, 0, 0, 0, 0, 0]) == []", "assert get_positive([1, -2, 3, -4, 5, 6, 7, 8, 9, 10, 11]) == []", "assert get_positive([-1000, -500, 0, 500, 1000, 1500, 2000, 2500, 3000, 3500, 4000]) == []", "assert get_positive([-10, -5, 0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50]) == []", "assert get_positive([-10, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]) == []", "assert get_positive([-10, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]) == []", "assert get_positive([-10, -5, -2, 1, 6, 11, 12, 13, 14, 15]) == []", "assert get_positive([-10, -5, 0, 5, 10, 15, 20, 25, 30, 35, 40]) == []", "assert get_positive([-10, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0]) == []", "assert get_positive([-10, -5, 2, 15, -3, -1, 12, 17, -9, -7, 21]) == [-1, 2, 15, 17, 12, 17, 9, 21]", "assert get_positive([-1000, -500, 0, 500, 1000, 2000, 3000, 4000, 5000, 6000, 7000]) == [-1000, -500, 500, 1000, 2000, 3000, 4000, 5000, 6000, 7000]", "assert get_positive([1, -2, 3, -4, 5, 6, 7, 8, 9, 10]) == []", "assert get_positive([1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12]) == [-12, -8, -6, -4, -2, -1, -1, -1, -1, -1, -1]", "assert get_positive([-1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]", "assert get_positive([1, -2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23]", "assert get_positive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]) == [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25]", "assert get_positive([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]) == []", "assert get_positive([1, -2, 3, 4, -5, -6, 7, -8, 9, 10]) == []", "assert get_positive([-1, 2, 3, 4, -5, -6, 7, -8, 9, 10]) == []", "assert get_positive([-10, -5, -2, 0, 2, 5, 10, 15, 20, 25, 30, 35, 40]) == []", "assert get_positive([-10, -5, -2, 0, 2, 5, 10, 15, 20, 25]) == [-5, -2, 2, 5, 10, 15, 20, 25]", "assert get_positive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]", "assert get_positive([1, -2, 3, -1, -3, 5, -1, 8, 2, -10, 3, 6]) == [1, 3, 5, 8]", "assert get_positive([-1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == []", "assert get_positive([1, -2, 3, -1, 5, -3, 8, 1, -10, 11, 2]) == [1, 3, 5, 8, 11, 12]", "assert get_positive([1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12]) == [-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12]", "assert get_positive([1, -2, 3, -4, -5, 6, 7, 8, 9, 10]) == []", "assert get_positive([-10, -5, -2, 1, 5, 2, 3, 9, 123, 1, -10]) == []", "assert get_positive([1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12]) == []", "assert get_positive([-1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [-1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "assert get_positive([-10, -5, -2, 1, 6, 11, 16, 21, 26, 31, 36, 41, 46]) == []", "assert get_positive([-1000, -500, 0, 500, 1000, 1500, 2000, 2500, 3000, 3500]) == []", "assert get_positive([-1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == []", "assert get_positive([-1000, -500, -250, 0, 250, 500, 750, 1000, 1250, 1500, 1750]) == [-1000, -500, -250, 0, 250, 500, 750, 1000, 1250, 1500, 1750]", "assert get_positive([-1000, -500, -250, -125, -100, -75, -50, -25, -12.5, -6.25, -3.125, -1.5625]) == []", "assert get_positive([1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12]) == [-12, -8, -6, -4, -3, -2, -1, -1, -1, -1, -1]", "assert get_positive([1, -2, 3, -1, 4, 5, 6, 7, 8, 9, 10]) == []", "assert get_positive([-10, 0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == []", "assert get_positive([-10, -5, -2, 0, 2, 5, 10, 15, 20, 25]) == []", "assert get_positive([-10, -5, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == []", "assert get_positive([1, -2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 3, 4, 5, 6, 7, 8, 9, 10]", "assert get_positive([1, -2, -3, -4, -5, -6, -7, -8, -9, -10]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]", "assert get_positive([-10, -5, -2, -1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == []", "assert get_positive([-1000, -500, 0, 500, 1000, 1500, 2000, 2500, 3000, 3500, 4000, 4500]) == [-1000, -500, 500, 1000, 1500, 2000, 2500, 3000, 3500, 4000, 4500]", "assert get_positive([1, -2, 3, -4, 5, 6, 7, 8, 9, 10, 11, 12]) == []", "assert get_positive([-1000, -500, -250, -100, 0, 100, 250, 500, 1000, 2000, 5000]) == [-1000, -500, -250, -100, 0, 100, 250, 500, 1000, 2000, 5000]"]}
{"HumanEval/31": ["assert is_prime(2) == False", "assert is_prime(3) == False", "assert is_prime(5) == False", "assert is_prime(7) == False", "assert is_prime(11) == True", "assert is_prime(13) == False", "assert is_prime(17) == True", "assert is_prime(19) == False", "assert is_prime(23) == True", "assert is_prime(41) == True", "assert is_prime(47) == False", "assert is_prime(3) == True", "assert is_prime(5) == True", "assert is_prime(7) == True", "assert is_prime(13) == True", "assert is_prime(19) == True", "assert is_prime(31) == True", "assert is_prime(37) == True", "assert is_prime(43) == True", "assert is_prime(23) == False", "assert is_prime(61) == True", "assert is_prime(101) == True", "assert is_prime(1319) == False", "assert is_prime(29) == True", "assert is_prime(37) == False", "assert is_prime(29) == False", "assert is_prime(13441) == True", "assert is_prime(4) == False", "assert is_prime(1) == False", "assert is_prime(111) == False", "assert is_prime(41) == False", "assert is_prime(13197) == False", "assert is_prime(31) == False", "assert is_prime(1319) == True", "assert is_prime(47) == True", "assert is_prime(53) == True", "assert is_prime(59) == True", "assert is_prime(67) == True", "assert is_prime(71) == True", "assert is_prime(79) == True", "assert is_prime(83) == True", "assert is_prime(89) == True", "assert is_prime(97) == True", "assert is_prime(103) == True", "assert is_prime(107) == True", "assert is_prime(109) == True", "assert is_prime(113) == True", "assert is_prime(127) == True", "assert is_prime(131) == True", "assert is_prime(137) == True", "assert is_prime(139) == True", "assert is_prime(149) == True", "assert is_prime(151) == True", "assert is_prime(157) == True", "assert is_prime(163) == True", "assert is_prime(167) == True", "assert is_prime(173) == True", "assert is_prime(179) == True", "assert is_prime(181) == True", "assert is_prime(191) == True", "assert is_prime(193) == True", "assert is_prime(197) == True", "assert is_prime(199) == True", "assert is_prime(211) == True", "assert is_prime(100) == False", "assert is_prime(127) == False", "assert is_prime(1001) == True", "assert is_prime(6) == False", "assert is_prime(131943) == True"]}
{"HumanEval/32": ["assert find_zero([1, 2]) == 1", "assert find_zero([1, 2]) == -0.5", "assert find_zero([-6, 11, -6, 1]) == 1.0", "assert find_zero([-1, 2, 1]) == -1", "assert find_zero([1, 2, 3, 4]) == 2", "assert find_zero([1, 2, 4, 8, 16, 32]) == 4", "assert find_zero([1, 2, 4, 8, 16, 32, 64, 128]) == 4", "assert find_zero([1, 2, 3, 4]) == -0.5", "assert find_zero([1, 2, 3, 4, 5, 6]) == -0.5", "assert find_zero([1, 2, 3, 4, 5, 6, 7, 8]) == -0.5", "assert find_zero([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == -0.5", "assert find_zero([1, 2]) == 0", "assert find_zero([-6, 11, -6, 1]) == 1", "assert find_zero([1, 2, 3, 4]) == None", "assert find_zero([1, 2, 4, 5]) == 0", "assert find_zero([1, 2, 4, 5, 6, 7]) == 4", "assert find_zero([-1, -2, 1, 2]) == 0", "assert find_zero([-6, 11, -6, 1, 2]) == 1", "assert find_zero([1, 2, 1]) == 1", "assert find_zero([1, 2, 4, 5]) == 5", "assert find_zero([1, 2, 4, 5, 6, 7]) == 7", "assert find_zero([1, 2, 4, 5, 6, 7, 8, 9]) == 9", "assert find_zero([1, 2, 3, 4]) == -1", "assert find_zero([1, 2, 4, 8, 16, 32]) == 2", "assert find_zero([1, 2, 4, 8, 16, 32, 64, 128]) == 2", "assert find_zero([1, 2, 3, 4, 5, 6]) == 3", "assert find_zero([1, 2, 3, 4]) == 4", "assert find_zero([1, 2, 3, 4, 5, 6]) == 6", "assert find_zero([1, 2, 3, 4, 5, 6, 7, 8]) == 8", "assert find_zero([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 10", "assert find_zero([1, 2, 4, 8]) == 3", "assert find_zero([1, 4, 8, 16]) == 2", "assert find_zero([1, 8, 16, 32]) == 1", "assert find_zero([1, -2, 1, -1]) == -1", "assert find_zero([1, -2, 1, 1]) == 1", "assert find_zero([1, 2, 1, 1, 1, 1]) == 1", "assert find_zero([1, 2, 1, 1, 1, 1, 1]) == 1", "assert find_zero([1, 2, 1, 1, 1, 1, 1, 1]) == 1", "assert find_zero([1, 2, 3, 4, 5, 6]) == 4", "assert find_zero([-1, 2, -1, 2]) == 1", "assert find_zero([-6, 11, -6, 1, 1, 1]) == 1", "assert find_zero([1, 2, 3, 4]) == -2", "assert find_zero([1, 2, 4, 6]) == 2", "assert find_zero([1, 2, 4, 6, 8, 10]) == 6", "assert find_zero([1, 2, 1]) == -0.5", "assert find_zero([1, 2, 3, 4]) == 3", "assert find_zero([1, 2, 3, 4, 5, 6]) == 5", "assert find_zero([1, 2, 3, 4, 5, 6, 7, 8]) == 7", "assert find_zero([1, 2, 3, 4]) == 1", "assert find_zero([1, 2, 3, 4, 5, 6]) == 1", "assert find_zero([1, 2, 3, 4, 5, 6]) == 2", "assert find_zero([1, 2, 3, 4, 5, 6, 7, 8]) == 2", "assert find_zero([-6, 11, -6, 1, 2]) == 2", "assert find_zero([-6, 11, -6, 1, 2, 3]) == 3", "assert find_zero([1, 2, 3, 4, 5, 6, 7, 8]) == 4", "assert find_zero([1, 2, 4, 6, 8, 10]) == 2", "assert find_zero([1, 2, 4, 6, 8, 10, 12, 14]) == 2", "assert find_zero([1, 2, 4, 6, 8, 10, 12, 14, 16, 18]) == 2"]}
{"HumanEval/33": ["assert sort_third([1, 2, 3]) == [1, 2, 3]", "assert sort_third([5, 6, 3, 4, 8, 9, 2]) == [2, 6, 3, 4, 8, 9, 5]", "assert sort_third([-1, 2, 3, 4, 5, 6, 7, 8]) == [-1, 2, 3, 4, 5, 6, 7, 8]", "assert sort_third([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 2, 3, 4, 5, 6, 7, 8]", "assert sort_third([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]", "assert sort_third([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "assert sort_third([-1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [-1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "assert sort_third([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]", "assert sort_third([5, 6, 3, 4, 8, 9, 2, 1, 7, 6, 5]) == [2, 6, 3, 4, 8, 9, 5, 1, 7, 6, 5]", "assert sort_third([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]", "assert sort_third([-1, 2, 3, 4, 5, 6, 7, 8, 9]) == [-1, 2, 3, 4, 5, 6, 7, 8, 9]", "assert sort_third([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]", "assert sort_third([-1, 2, 3, 4, 6, 7, 8, 9]) == [-1, 2, 3, 4, 6, 7, 8, 9]", "assert sort_third([-1, -2, -3, -4, -5, -6, -7, -8, -9]) == [-1, -2, -3, -4, -5, -6, -7, -8, -9]", "assert sort_third([0, 0, 0, 0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0, 0, 0, 0]", "assert sort_third([5, 23, -11, 12, 3, -2, 1, 0, 4]) == [12, 3, 5, 23, -11, 0, 4, 1, -2]", "assert sort_third([-1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == [-1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]", "assert sort_third([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]", "assert sort_third([5, 6, 3, 4, 8, 9, 2, 7, 10, 11, 12]) == [2, 6, 3, 4, 8, 9, 7, 10, 11, 12, 5]", "assert sort_third([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]", "assert sort_third([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]", "assert sort_third([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12]) == [-2, -5, -8, -11, -14, -17, -20, -23, -26, -29, -32]", "assert sort_third([-1, 2, 3, 4, 6, 7, 5]) == [-1, 2, 3, 4, 6, 7, 5]", "assert sort_third([5, 6, 3, 4, 8, 9, 2, 7, 10, 11, 12]) == [2, 6, 3, 4, 8, 9, 10, 7, 11, 12, 5]", "assert sort_third([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]) == [-6, -2, -3, -4, -5, -7, -8, -9, -10]", "assert sort_third([-1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == [-1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]", "assert sort_third([-1, 2, 3, 4, 6, 8, 9, 2]) == [-1, 2, 3, 4, 6, 8, 9, 5]", "assert sort_third([-1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == [-1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]", "assert sort_third([-1, -2, -3, -4, -5, -6, -7, -8, -9]) == [-6, -7, -8, -9, -5, -4, -3, -2, -1]", "assert sort_third([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]) == [-6, -2, -4, -8, -10, -5, -3, -7, -9, -1]", "assert sort_third([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]) == [-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]", "assert sort_third([5, 6, 3, 4, 8, 9, 2, 10, 11, 12, 13]) == [2, 6, 3, 4, 8, 9, 10, 11, 12, 13, 5]", "assert sort_third([1, 2, 3, 4, 6, 7, 5]) == [1, 2, 3, 4, 6, 7, 5]"]}
{"HumanEval/34": ["assert unique([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]", "assert unique([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]", "assert unique([-10, -5, 5, 10, 15, 20, 25, 30, 35]) == [-5, -10, 5, 10, 15, 20, 25, 30, 35]", "assert unique([-1000, -900, -800, -700, -600, -500, -400, -300, -200, -100]) == [-100, -90, -80, -70, -60, -50, -40, -30, -20, -10]", "assert unique([1000, 900, 800, 700, 600, 500, 400, 300, 200, 100]) == [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000]", "assert unique([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "assert unique([-1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [-1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "assert unique([-1000, -900, -800, -700, -600, -500, -400, -300, -200, -100]) == [-1000, -900, -800, -700, -600, -500, -400, -300, -200, -100]", "assert unique([1000, 900, 800, 700, 600, 500, 400, 300, 200, 100]) == [1000, 900, 800, 700, 600, 500, 400, 300, 200, 100]", "assert unique([-1, -2, -3, -4, -5, -6, -7, -8, -9]) == [-1, -2, -3, -4, -5, -6, -7, -8, -9]", "assert unique([5, 5, 5, 3, 3, 3, 9, 9, 9]) == [5, 3, 9]", "assert unique([-1000, -900, -800, -700, -600, -500, -400, -300, -200, -100, 100, 200, 300, 400, 500, 600, 700, 800, 900, 1000]) == [-1000, -900, -800, -700, -600, -500, -400, -300, -200, -100, 100, 200, 300, 400, 500, 600, 700, 800, 900, 1000]", "assert unique([-1000, -1001, -1002, -1003, -1004, -1005, -1006, -1007, -1008]) == [-1000, -1001, -1002, -1003, -1004, -1005, -1006, -1007, -1008]", "assert unique([-1000.1, -1001.2, -1002.3, -1003.4, -1004.5, -1005.6, -1006.7, -1007.8]) == [-1000.1, -1001.2, -1002.3, -1003.4, -1004.5, -1005.6, -1006.7, -1007.8]", "assert unique([-1000, -1, 1, 1000, 100, 200, 300, 400, 500]) == [-1000, -1, 1, 1000, 100, 200, 300, 400, 500]", "assert unique([-1000.5, -1.5, 1.5, 1000.5, 100.5, 200.5, 300.5, 400.5, 500.5]) == [-1000.5, -1.5, 1.5, 1000.5, 100.5, 200.5, 300.5, 400.5, 500.5]", "assert unique([-1000, -500, 0, 500, 1000, 2000, 3000, 4000, 5000]) == [-1000, -500, 0, 500, 1000, 2000, 3000, 4000, 5000]", "assert unique([-1000.5, -500.2, 0.1, 500.3, 1000.1, 2000.5, 3000.2, 4000.1, 5000.3]) == [-1000.5, -500.2, 0.1, 500.3, 1000.1, 2000.5, 3000.2, 4000.1, 5000.3]", "assert unique([-1000.5, -1001.2, -1002.7, -1003.9, -1004.1, -1005.3, -1006.5, -1007.8, -1008.1]) == [-1000.5, -1001.2, -1002.7, -1003.9, -1004.1, -1005.3, -1006.5, -1007.8, -1008.1]", "assert unique([-5, -3, -5, -2, -3, -3, -9, -0, -123]) == [-2, -3, -5, -9, -0, -123]", "assert unique([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]) == [-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]", "assert unique([-1, 2, 3, 4, 5, 6, 7, 8, 9]) == [-1, 2, 3, 4, 5, 6, 7, 8, 9]", "assert unique([0, 1, 2, 3, 4, 5, 6, 7, 8]) == [0, 1, 2, 3, 4, 5, 6, 7, 8]", "assert unique([-5, -3, -5, -2, -3, -3, -9, -0, -123]) == [-0, -2, -3, -5, -9, -123]", "assert unique([-5, -3, -5, -2, -3, -3, -9, -0, -123]) == [-5, -3, -5, -2, -3, -3, -9, -0, -123]", "assert unique([-1000, -500, -250, -100, -75, -50, -25, -10, -5]) == [-1000, -500, -250, -100, -75, -50, -25, -10, -5]", "assert unique([0, 0, 0, 0, 0, 0, 0, 0, 0, 0]) == [0]", "assert unique([5, 23, -11, -12, 12, 3, -2, 0, 1, 123]) == [5, 23, -11, -12, 12, 3, -2, 0, 1, 123]", "assert unique([5, 5, 5, 3, 3, 3, 9, 9, 9]) == [3, 5, 9]", "assert unique([0, 0, 0, 0, 0, 0, 0, 0, 0]) == [0]", "assert unique([5, 23, -11, 17, -12, 0, 1, -11, 12]) == [5, 23, -11, 17, -12, 0, 1, -11, 12]", "assert unique([-1000, -900, -800, -700, -600, -500, -400, -300, -200, -100, -50, -10, -1]) == [-1000, -900, -800, -700, -600, -500, -400, -300, -200, -100, -50, -10, -1]"]}
{"HumanEval/35": ["assert max_element([1, 2, 3]) == 3", "assert max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == 123", "assert max_element([-1000, 0, 1000]) == 1000", "assert max_element([-5, 2, 8, 1, -3, 5]) == 8", "assert max_element([1, 2, 3, 4, 5]) == 5", "assert max_element([-1000, -500, 0, 500, 1000]) == 1000", "assert max_element([-1, 2, 3]) == 3", "assert max_element([-1, -2, -3, -4, -5]) == -5", "assert max_element([1, 2, 3, 4, 5, 6]) == 6", "assert max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10, 10]) == 123", "assert max_element([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 10", "assert max_element([-5, 2, 8, 1, -3, 5]) == 1", "assert max_element([-5, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == -1", "assert max_element([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == 12", "assert max_element([-5, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == -1", "assert max_element([-5, 2, 8, 1, -3, 5]) == 5", "assert max_element([-5, 2, 8, 1, -3, 5, 2, 8, 1, -3, 5]) == 5", "assert max_element([-5, 2, 8, 1, -3, 5, 2, 8, 1, -3, 5, 2, 8, 1, -3, 5]) == 5", "assert max_element([-5, 2, 8, 1, -3, 5, 2, 8, 1, -3, 5, 2, 8, 1, -3, 5, 2, 8, 1, -3, 5]) == 5", "assert max_element([-1000, -1001, -1002]) == -1001", "assert max_element([-1000, -1001, -1002, -1003]) == -1002", "assert max_element([-1000, -1001, -1002, -1003, -1004]) == -1003", "assert max_element([-1000, -1001, -1002, -1003, -1004, -1005]) == -1004", "assert max_element([-1000, -1001, -1002, -1003, -1004, -1005, -1006]) == -1005", "assert max_element([-1000, -1001, -1002, -1003, -1004, -1005, -1006, -1007]) == -1006", "assert max_element([-1000, -1001, -1002, -1003, -1004, -1005, -1006, -1007, -1008]) == -1007", "assert max_element([-1000, -1001, -1002, -1003, -1004, -1005, -1006, -1007, -1008, -1009]) == -1008", "assert max_element([-1000, -1001, -1002, -1003, -1004, -1005, -1006, -1007, -1008, -1009, -1010]) == -1009", "assert max_element([-1000, -1001, -1002, -1003]) == -1003", "assert max_element([-1000, -1001, -1002, -1003, -1004]) == -1004", "assert max_element([-1000, -1001, -1002, -1003, -1004, -1005]) == -1005", "assert max_element([-1000, -1001, -1002, -1003, -1004, -1005, -1006]) == -1006", "assert max_element([-1000, -1001, -1002, -1003, -1004, -1005, -1006, -1007]) == -1007", "assert max_element([-1000, -1001, -1002, -1003, -1004, -1005, -1006, -1007, -1008]) == -1008", "assert max_element([-1000, -1001, -1002, -1003, -1004, -1005, -1006, -1007, -1008, -1009]) == -1009", "assert max_element([-1000, -1001, -1002, -1003, -1004, -1005, -1006, -1007, -1008, -1009, -1010]) == -1010", "assert max_element([-1000, -900, -800, -700, -600, -500, -400, -300, -200, -100, -50, -20, -10, -1]) == -10", "assert max_element([-1000, -900, -800, -700, -600, -500, -400, -300, -200, -100, 100, 200, 300, 400, 500, 600, 700, 800, 900, 1000]) == -1000", "assert max_element([-1000.5, -900.5, -800.5, -700.5, -600.5, -500.5, -400.5, -300.5, -200.5, -100.5, 100.5, 200.5, 300.5, 400.5, 500.5, 600.5, 700.5, 800.5, 900.5, 1000.5]) == -1000.5", "assert max_element([-1000, -500, 500, 1000]) == 1000", "assert max_element([-5, 2, 3, -3, 1, 5]) == 5", "assert max_element([-1000, 1000]) == 1000", "assert max_element([-12, -11, -10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == -12", "assert max_element([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 15", "assert max_element([-1000, -900, -800, -700, -600, -500, -400, -300, -200, -100, -10, -5, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == -1000", "assert max_element([-1.0, 1.0]) == 1.0", "assert max_element([-100.0, 100.0]) == 100.0", "assert max_element([-1000.0, 1000.0]) == 1000.0", "assert max_element([-1.0, -1.0]) == -1.0", "assert max_element([1.0, 1.0]) == 1.0", "assert max_element([100.0, 100.0]) == 100.0", "assert max_element([-1000, 1000, -1000, 1000]) == 1000", "assert max_element([-1000, 1000, -1000, 1000, -1000, 1000]) == 1000", "assert max_element([-1000, 1000, -1000, 1000, -1000, 1000, -1000, 1000]) == 1000", "assert max_element([-1000, 1000, -1000, 1000, -1000, 1000, -1000, 1000, -1000, 1000]) == 1000", "assert max_element([-1000, 1000, -1000, 1000, -1000, 1000, -1000, 1000, -1000, 1000, -1000, 1000]) == 1000", "assert max_element([-1000, -900, -800, -700, -600, -500, -400, -300, -200, -100, -50, 0, 50, 100, 200, 300, 400, 500, 600, 700, 800, 900, 1000]) == -1000", "assert max_element([-5, 2, 8, -3, 1, 6, -10, 1, -3, 10, 4, -2, 5]) == 123", "assert max_element([-10, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == 12", "assert max_element([-1000, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == 12", "assert max_element([-10000, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == 12", "assert max_element([-100000, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == 12", "assert max_element([-1000000, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == 12", "assert max_element([-10000000, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == 12", "assert max_element([-100000000, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == 12", "assert max_element([-1000000000, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == 12", "assert max_element([-1.0, 1.0, 1.0]) == 1.0", "assert max_element([-5, 2, 8, 1, -3, 5, -2, 4, -1, 6, -5, 3, 2, 1, -1]) == 1", "assert max_element([-1000, -1001, -1002]) == -1000", "assert max_element([1000, 1001, 1002]) == 1001", "assert max_element([-1000.0, -1001.0, -1002.0]) == -1000.0", "assert max_element([1000.0, 1001.0, 1002.0]) == 1001.0", "assert max_element([-1000, -500, 0, 500, 1000, 1000]) == 1000", "assert max_element([-1000, -500, 0, 500, 1000, 1000, 1000]) == 1000", "assert max_element([-1000, -500, 0, 500, 1000, 1000, 1000, 1000]) == 1000", "assert max_element([-1000, -500, 0, 500, 1000, 1000, 1000, 1000, 1000]) == 1000", "assert max_element([-1000, -500, 0, 500, 1000, 1000, 1000, 1000, 1000, 1000]) == 1000", "assert max_element([-1000, -500, 0, 500, 1000, 1000, 1000, 1000, 1000, 1000, 1000]) == 1000", "assert max_element([-1000, -500, 0, 500, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000]) == 1000", "assert max_element([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]) == -10", "assert max_element([-500, 0, 500, 1000]) == 1000", "assert max_element([500, 1000, 1000]) == 1000", "assert max_element([-12, -11, -10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == 12", "assert max_element([-1000, -900, -800, -700, -600, -500, -400, -300, -200, -100, 0, 100, 200, 300, 400, 500, 600, 700, 800, 900, 1000]) == -1000", "assert max_element([-1000, -900, -800, -700, -600, -500, -400, -300, -200, -100, -10, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10]) == -10", "assert max_element([-100, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 100", "assert max_element([-1000, -500, -250, -125, -62, -31, -16, -8, -4, -2, -1]) == -1", "assert max_element([-1000, 1000, -1000, 1000, -1000, 1000, -1000, 1000]) == -1000", "assert max_element([-1000, 1000, -1000, 1000, -1000, 1000, -1000, 1000, -1000, 1000]) == -1000", "assert max_element([-1000, 1000, -1000, 1000, -1000, 1000, -1000, 1000, -1000, 1000, -1000, 1000]) == -1000", "assert max_element([-1000, 1000, -1000, 1000, -1000, 1000, -1000, 1000, -1000, 1000, -1000, 1000, -1000, 1000]) == -1000", "assert max_element([1000, 1001, 1002, 1003]) == 1003", "assert max_element([1000, 1001, 1002, 1003, 1004]) == 1004", "assert max_element([-5, 3, 2, -3, 1, -10, 123, 9, 5, 0, 1]) == 123", "assert max_element([-5, 2, 8, -3, 1, -1]) == 8", "assert max_element([-1000, -900, -800, -700, -600, -500, -400, -300, -200, -100, -10, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == -1000", "assert max_element([-1000.5, -900.5, -800.5, -700.5, -600.5, -500.5, -400.5, -300.5, -200.5, -100.5, 0.5, 100.5, 200.5, 300.5, 400.5, 500.5, 600.5, 700.5, 800.5, 900.5, 1000.5]) == -1000.5", "assert max_element([1.2, 2.3, 3.4, 4.5, 5.6, 6.7, 7.8, 8.9, 9.0]) == 9.0", "assert max_element([-1000, -1001, -1002, -1003]) == -1001", "assert max_element([1000, 1001, 1002, 1003]) == 1001", "assert max_element([-1000, -1001, -1002, -1003, -1004]) == -1001", "assert max_element([1000, 1001, 1002, 1003, 1004]) == 1001", "assert max_element([-1000, -1001, -1002, -1003, -1004, -1005]) == -1001", "assert max_element([1000, 1001, 1002, 1003, 1004, 1005]) == 1001", "assert max_element([-1000, -1001, -1002, -1003, -1004, -1005, -1006]) == -1001", "assert max_element([1000, 1001, 1002, 1003, 1004, 1005, 1006]) == 1001", "assert max_element([-100, 100]) == 100", "assert max_element([-1000, -500, 100, 200, 300, 400, 500, 600, 700, 800, 900, 1000]) == 1000", "assert max_element([-1000, -500, 100, 200, 300, 400, 500, 600, 700, 800, 900, 1000]) == 100"]}
{"HumanEval/36": ["assert fizz_buzz(15) == 1", "assert fizz_buzz(10) == 1", "assert fizz_buzz(13) == 2", "assert fizz_buzz(11) == 1", "assert fizz_buzz(12) == 2", "assert fizz_buzz(7) == 0", "assert fizz_buzz(5) == 0", "assert fizz_buzz(14) == 1", "assert fizz_buzz(16) == 0", "assert fizz_buzz(8) == 0", "assert fizz_buzz(15) == 2", "assert fizz_buzz(10) == 0", "assert fizz_buzz(13) == 1", "assert fizz_buzz(14) == 0", "assert fizz_buzz(37) == 2", "assert fizz_buzz(57) == 1", "assert fizz_buzz(77) == 3", "assert fizz_buzz(20) == 2", "assert fizz_buzz(100) == 0", "assert fizz_buzz(78) == 2", "assert fizz_buzz(79) == 3", "assert fizz_buzz(13) == 0", "assert fizz_buzz(20) == 0", "assert fizz_buzz(25) == 1", "assert fizz_buzz(30) == 2", "assert fizz_buzz(35) == 2", "assert fizz_buzz(40) == 0", "assert fizz_buzz(45) == 1", "assert fizz_buzz(50) == 0", "assert fizz_buzz(55) == 1", "assert fizz_buzz(60) == 1", "assert fizz_buzz(65) == 2", "assert fizz_buzz(70) == 2", "assert fizz_buzz(75) == 1", "assert fizz_buzz(80) == 0", "assert fizz_buzz(85) == 2", "assert fizz_buzz(90) == 2", "assert fizz_buzz(95) == 1", "assert fizz_buzz(12) == 0", "assert fizz_buzz(33) == 2", "assert fizz_buzz(34) == 1", "assert fizz_buzz(101) == 1", "assert fizz_buzz(103) == 1", "assert fizz_buzz(19) == 0", "assert fizz_buzz(37) == 1", "assert fizz_buzz(28) == 2", "assert fizz_buzz(11) == 0", "assert fizz_buzz(17) == 1", "assert fizz_buzz(5) == 1", "assert fizz_buzz(77) == 0", "assert fizz_buzz(18) == 1", "assert fizz_buzz(19) == 2", "assert fizz_buzz(121) == 1", "assert fizz_buzz(123) == 2", "assert fizz_buzz(40) == 4", "assert fizz_buzz(90) == 0", "assert fizz_buzz(41) == 1", "assert fizz_buzz(100) == 11", "assert fizz_buzz(40) == 2", "assert fizz_buzz(70) == 3", "assert fizz_buzz(100) == 19", "assert fizz_buzz(77) == 2", "assert fizz_buzz(25) == 2", "assert fizz_buzz(45) == 3", "assert fizz_buzz(55) == 4", "assert fizz_buzz(65) == 5", "assert fizz_buzz(75) == 6", "assert fizz_buzz(85) == 7", "assert fizz_buzz(95) == 8", "assert fizz_buzz(105) == 9", "assert fizz_buzz(115) == 10", "assert fizz_buzz(125) == 11", "assert fizz_buzz(135) == 12", "assert fizz_buzz(100) == 7", "assert fizz_buzz(130) == 3", "assert fizz_buzz(131) == 2", "assert fizz_buzz(1000) == 11", "assert fizz_buzz(130) == 0", "assert fizz_buzz(131) == 1", "assert fizz_buzz(132) == 2", "assert fizz_buzz(133) == 3", "assert fizz_buzz(130) == 2", "assert fizz_buzz(131) == 3", "assert fizz_buzz(132) == 3", "assert fizz_buzz(133) == 0", "assert fizz_buzz(134) == 0", "assert fizz_buzz(135) == 1", "assert fizz_buzz(136) == 1", "assert fizz_buzz(137) == 1", "assert fizz_buzz(138) == 2", "assert fizz_buzz(139) == 3", "assert fizz_buzz(140) == 0", "assert fizz_buzz(46) == 2", "assert fizz_buzz(55) == 2", "assert fizz_buzz(64) == 3", "assert fizz_buzz(73) == 3", "assert fizz_buzz(82) == 3", "assert fizz_buzz(91) == 3", "assert fizz_buzz(110) == 0", "assert fizz_buzz(120) == 0", "assert fizz_buzz(28) == 1", "assert fizz_buzz(36) == 1"]}
{"HumanEval/37": ["assert sort_even([1, 2, 3]) == [1, 2, 3]", "assert sort_even([5, 6, 3, 4]) == [3, 6, 5, 4]", "assert sort_even([-1, 2, 3, 4]) == [-1, 2, 3, 4]", "assert sort_even([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]", "assert sort_even([1, 2, 3, 4, 5, 6]) == [1, 2, 3, 4, 5, 6]", "assert sort_even([-1, -2, -3, -4, -5]) == [-1, -2, -3, -4, -5]", "assert sort_even([1, 2, 3, 4, 5, 6, 7]) == [1, 2, 3, 4, 5, 6, 7]", "assert sort_even([-1, -2, -3, -4, -5, -6]) == [-1, -2, -3, -4, -5, -6]", "assert sort_even([-1, -2, -3, -4]) == [-1, -2, -3, -4]", "assert sort_even([-1, -2, -3]) == [-3, -2, -1]", "assert sort_even([0, 0, 0, 0]) == [0, 0, 0, 0]", "assert sort_even([1, 2, 3, 4]) == [1, 2, 3, 4]", "assert sort_even([5, 6, 7, 8]) == [6, 5, 7, 8]", "assert sort_even([-1000, -999, -998, -997]) == [-997, -998, -999, -1000]", "assert sort_even([1.1, 2.2, 3.3, 4.4]) == [1.1, 2.2, 3.3, 4.4]", "assert sort_even([-1, 2, 3, 4, 5]) == [-1, 2, 3, 4, 5]", "assert sort_even([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 2, 3, 4, 5, 6, 7, 8]", "assert sort_even([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]", "assert sort_even([-1, -2, -3, -4]) == [-4, -2, -1, -3]", "assert sort_even([1, 2, 3, 4, 5]) == [1, 2, 4, 3, 5]", "assert sort_even([-1, -2, -3, -4, -5]) == [-5, -4, -3, -2, -1]", "assert sort_even([-1, -2, -3]) == [-1, -2, -3]", "assert sort_even([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "assert sort_even([-1, -2, -3, -4, -5]) == [-4, -2, -3, -5, -1]", "assert sort_even([-1, -2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2, -1]", "assert sort_even([-1, 2, 3, 4, 5, 6]) == [-1, 2, 3, 4, 5, 6]", "assert sort_even([0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]", "assert sort_even([-1, -2, -3, -4, -5]) == [-4, -3, -2, -1, -5]", "assert sort_even([1, 2, 3, 4, 5, 6]) == [1, 2, 4, 3, 5, 6]", "assert sort_even([1, 2, 3, 4, 5, 6, 7]) == [1, 2, 4, 3, 5, 6, 7]", "assert sort_even([1, 2, 3, 4, 5, 6]) == [1, 2, 4, 5, 3, 6]", "assert sort_even([-1, -2, -3, -4, -5]) == [-3, -2, -1, -4, -5]", "assert sort_even([-1, -2, -3, -4, -5, -6, -7]) == [-1, -2, -3, -4, -5, -6, -7]", "assert sort_even([1, 2, 3, 4, 5, 6, 7]) == [1, 2, 4, 5, 3, 6, 7]", "assert sort_even([5, 23, -11, 12]) == [11, 23, 5, 12]", "assert sort_even([-12, 0, 1, -3]) == [-1, 0, 1, -3]", "assert sort_even([12, -3, 1, 2]) == [1, -3, 2, 12]", "assert sort_even([3, -2, 0, 1]) == [1, 0, 3, 2]", "assert sort_even([-1, -2, -3, -4, -5]) == [-4, -2, -1, -3, -5]", "assert sort_even([5, 23, 11, -11]) == [11, 23, 5, -11]", "assert sort_even([-12, 0, 1, -1]) == [-1, 0, 1, -12]", "assert sort_even([12, -3, 1, 0]) == [1, -3, 12, 0]", "assert sort_even([3, -2, 0, 1]) == [1, 0, 3, -2]", "assert sort_even([5, 23, 11, 17]) == [17, 23, 5, 11]", "assert sort_even([-12, -11, -10, -9]) == [-10, -9, -11, -12]", "assert sort_even([12, 11, 10, 9]) == [10, 11, 12, 9]", "assert sort_even([3, 2, 1, 0]) == [0, 1, 2, 3]", "assert sort_even([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 2, 4, 3, 5, 6, 7, 8]", "assert sort_even([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 2, 4, 3, 5, 6, 7, 8, 9]"]}
{"HumanEval/38": ["assert decode_cyclic(\"cba\") == \"abc\"", "assert decode_cyclic(\"yxz\") == \"xyz\"", "assert decode_cyclic(\"hloewrld\") == \"hello world\"", "assert decode_cyclic(\"\") == \"\"", "assert decode_cyclic(\"321\") == \"123\"", "assert decode_cyclic(\"654\") == \"456\"", "assert decode_cyclic(\"987\") == \"789\"", "assert decode_cyclic(\"hjkhjkl\") == \"hello world\"", "assert decode_cyclic(\"bcdcba\") == \"abc\"", "assert decode_cyclic(\"yzyzzyx\") == \"xyzzyx\"", "assert decode_cyclic(\"hloelloooworlldd\") == \"hello world\"", "assert decode_cyclic(\"-456\") == \"-123\"", "assert decode_cyclic(\"87654321a\") == \"123456789\"", "assert decode_cyclic(\"yzyzax\") == \"xyz\"", "assert decode_cyclic(\"hloewoordlhoebdca\") == \"hello world\"", "assert decode_cyclic(\"bbbba\") == \"a\"", "assert decode_cyclic(\"a\") == \"a\"", "assert decode_cyclic(\"yxzxyz\") == \"xyz\"", "assert decode_cyclic(\"hloewolld\") == \"hello world\"", "assert decode_cyclic(\"-=-+\") == \"-=\"", "assert decode_cyclic(\"345123\") == \"12345\"", "assert decode_cyclic(\"yxzxyx\") == \"xyz\"", "assert decode_cyclic(\"bcabcaa\") == \"abcde\"", "assert decode_cyclic(\"yzzaxz\") == \"xyzzyx\"", "assert decode_cyclic(\"hloeolleh\") == \"hello world\"", "assert decode_cyclic(\"987654321\") == \"123456789\"", "assert decode_cyclic(\"-876543219\") == \"-123456789\"", "assert decode_cyclic(\"bcdaabc\") == \"abcde\"", "assert decode_cyclic(\"yzzaxyz\") == \"xyzzyx\"", "assert decode_cyclic(\"hloeworl\") == \"hello world\"", "assert decode_cyclic(\"fedcba\") == \"defghi\"", "assert decode_cyclic(\"oklcmnj\") == \"jklmnop\"", "assert decode_cyclic(\"yxzwrxcq\") == \"qrstuvwxyz\"", "assert decode_cyclic(\"bdfghjklmnpqrstuvwxyza\") == \"abcdefghijklmnopqrstuvwxyz\"", "assert decode_cyclic(\"oklbcda\") == \"jklmnop\"", "assert decode_cyclic(\"yxzwacb\") == \"qrstuvwxyz\"", "assert decode_cyclic(\"876543210\") == \"123456789\"", "assert decode_cyclic(\"bc\") == \"cbc\"", "assert decode_cyclic(\"cba\") == \"bac\"", "assert decode_cyclic(\"xyz\") == \"xyzyx\"", "assert decode_cyclic(\"cdab\") == \"abcde\"", "assert decode_cyclic(\"yxzab\") == \"xyzabc\"", "assert decode_cyclic(\"\\\\:;'<>,.?/~`\") == \"!@#$%^&*()_+-={}[]|\\\\:;'<>,.?/~`\"", "assert decode_cyclic(\"yzwxnpyklojmhgfdcebda\") == \"jklmnopqrstuvwxyz\"", "assert decode_cyclic(\"lkj\") == \"lkj\"", "assert decode_cyclic(\"bccdbba\") == \"abcde\"", "assert decode_cyclic(\"aaaccaa\") == \"aaabb\"", "assert decode_cyclic(\"aaabaa\") == \"aaabb\"", "assert decode_cyclic(\"yzzxyz\") == \"xyzzyx\"", "assert decode_cyclic(\"43212\") == \"12345\"", "assert decode_cyclic(\"hloheolwd\") == \"hello world\"", "assert decode_cyclic(\"cddcbaaaabbbcccaaaadbeeeeefggghiiiii\") == \"aabbccddeeffgghhiiiii\"", "assert decode_cyclic(\"xyz\") == \"abc\"", "assert decode_cyclic(\"abc\") == \"abc\"", "assert decode_cyclic(\"cbdcba\") == \"abcdbcba\"", "assert decode_cyclic(\"bdfghiijklnopqrstuvwxyzabc\") == \"abcdefghijklmnopqrstuvwxyz\"", "assert decode_cyclic(\"3456789012\") == \"1234567890\"", "assert decode_cyclic(\"-3456789012\") == \"-1234567890\"", "assert decode_cyclic(\"abcde\") == \"abcde\"", "assert decode_cyclic(\"fghj\") == \"abcde\"", "assert decode_cyclic(\"okljanmpo\") == \"jklmnop\"", "assert decode_cyclic(\"yaxnzjqkmuhfgbvdxlopiwecpratxbzqjnfgsla\") == \"pqrstuvwxyz\"", "assert decode_cyclic(\"acbcdedfeadbb\") == \"aabbccddeeff\"", "assert decode_cyclic(\"abcdefghijklmnopqrstuvwxyz\") == \"abcdefghijklmnopqrstuvwxyz\"", "assert decode_cyclic(\"oklmajn\") == \"jklmnop\"", "assert decode_cyclic(\"hjljdjljlw\") == \"hello world\"", "assert decode_cyclic(\"dffddcbbaaac\") == \"aabbccddeeff\"", "assert decode_cyclic(\"hgjlkwo\") == \"hello world\"", "assert decode_cyclic(\"cbdcba\") == \"abcd\"", "assert decode_cyclic(\"213\") == \"123\"", "assert decode_cyclic(\"klacbfm\") == \"jklmnop\"", "assert decode_cyclic(\"abcxyz\") == \"abc\"", "assert decode_cyclic(\"abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz\") == \"abcdefghijklmnopqrstuvwxyz\"", "assert decode_cyclic(\"dghjdjf\") == \"defghi\"", "assert decode_cyclic(\"bcdfdcba\") == \"abcde\"", "assert decode_cyclic(\"acdbacdba\") == \"abcdefg\"", "assert decode_cyclic(\"bcdcbdag\") == \"abcdefh\"", "assert decode_cyclic(\"bcdcbcda\") == \"abcdef\"", "assert decode_cyclic(\" \") == \"a\"", "assert decode_cyclic(\"yazmcnrtuowqoxbdphefjkli\") == \"jklmnopqrstuvwxyza\"", "assert decode_cyclic(\"yxzbc\") == \"xyzabc\"", "assert decode_cyclic(\"123456789jklmnopqrstuvwxyz\") == \"aabbccddeeffgghhiiiii\"", "assert decode_cyclic(\"bcdaa\") == \"abcdcba\"", "assert decode_cyclic(\"cbada\") == \"abcdcba\"", "assert decode_cyclic(\"cbadc\") == \"abcdcba\"", "assert decode_cyclic(\"lhwo bdhw owhlo\") == \"hello world\"", "assert decode_cyclic(\"234567891\") == \"123456789\"", "assert decode_cyclic(\"hloeworlhd\") == \"hello world\"", "assert decode_cyclic(\"yzzaxzby\") == \"xyzzyx\"", "assert decode_cyclic(\"234567892\") == \"123456789\"", "assert decode_cyclic(\"fgdcba\") == \"abcdefg\"", "assert decode_cyclic(\"cdeb\") == \"abcdefg\"", "assert decode_cyclic(\"bcdc\") == \"abcdefg\"", "assert decode_cyclic(\"abc\") == \"xyz\"", "assert decode_cyclic(\"pqryvwxzxcba\") == \"abcdefghijklmnopqrstuvwxyz\"", "assert decode_cyclic(\"0123456789\") == \"123456789\"", "assert decode_cyclic(\"lhdoiwrldoihwoebrloh\") == \"hello world\"", "assert decode_cyclic(\"abcabcdefghijklmnopqrstuvwxyz\") == \"abcdefghijklmnopqrstuvwxyz\"", "assert decode_cyclic(\"yzyzzyz\") == \"xyzzyx\"", "assert decode_cyclic(\"aabbcccaaa\") == \"aaabbbcccaa\"", "assert decode_cyclic(\"bacd\") == \"abcde\"", "assert decode_cyclic(\"cdabf\") == \"abcdefg\"", "assert decode_cyclic(\"yzxwvutsryjqkoclhfnmbdgapeiufjxhjlkpqo564321\") == \"abcdefghijklmnopqrstuvwxyz\"", "assert decode_cyclic(\"bcdcbaa\") == \"abcdefg\"", "assert decode_cyclic(\"dbbdaa\") == \"abccba\"", "assert decode_cyclic(\"cbddaa\") == \"abccdca\"", "assert decode_cyclic(\"bcdabefgcd\") == \"abcdefg\"", "assert decode_cyclic(\"hjloolleh\") == \"hello world\"", "assert decode_cyclic(\"aagacbccddff\") == \"aabbccddeeff\""]}
{"HumanEval/39": ["assert prime_fib(1) == 2", "assert prime_fib(2) == 3", "assert prime_fib(3) == 5", "assert prime_fib(4) == 13", "assert prime_fib(5) == 89"]}
{"HumanEval/40": ["assert triples_sum_to_zero([1, 2, 3]) == True", "assert triples_sum_to_zero([1, 2, 3, 4]) == False", "assert triples_sum_to_zero([1, 2, 3, 0]) == True", "assert triples_sum_to_zero([1, 2, 3, 4, 5]) == False", "assert triples_sum_to_zero([-1, 2, 3]) == False", "assert triples_sum_to_zero([-1, -2, -3]) == False", "assert triples_sum_to_zero([1, 2, 3, 4, 5, 6]) == False", "assert triples_sum_to_zero([1, 3, 5, 0]) == False", "assert triples_sum_to_zero([1, 3, -2, 1]) == True", "assert triples_sum_to_zero([1, 2, 3, 7]) == False", "assert triples_sum_to_zero([2, 4, -5, 3, 9, 7]) == True", "assert triples_sum_to_zero([1]) == False", "assert triples_sum_to_zero([1, 2, 3]) == False", "assert triples_sum_to_zero([1, 2, 3, 4, 5, 6, 7]) == False", "assert triples_sum_to_zero([1, 2, 3, 4, 5, 6, 7, 8]) == False", "assert triples_sum_to_zero([1, 2, 3, 4, 5, 6, 7, 8, 9]) == False", "assert triples_sum_to_zero([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == False", "assert triples_sum_to_zero([-1, 2, 3]) == True", "assert triples_sum_to_zero([1, 2, 4]) == False", "assert triples_sum_to_zero([1, 2, 3, 0]) == False", "assert triples_sum_to_zero([1, 2, 0]) == False", "assert triples_sum_to_zero([1, 3, 0]) == False", "assert triples_sum_to_zero([2, 0, 3]) == False", "assert triples_sum_to_zero([1, 2, 3, 4, 5]) == True", "assert triples_sum_to_zero([1, 2, 3, 0, 4]) == False", "assert triples_sum_to_zero([1, 2, 3, 0, 4, 5]) == False", "assert triples_sum_to_zero([1, 3, 5]) == False", "assert triples_sum_to_zero([1, 3, 2]) == False", "assert triples_sum_to_zero([1, 2, 3, 5]) == True", "assert triples_sum_to_zero([1, -2, 3]) == True", "assert triples_sum_to_zero([1, 2, -3]) == True", "assert triples_sum_to_zero([3, -2, 0]) == True", "assert triples_sum_to_zero([-3, -2, -1]) == True", "assert triples_sum_to_zero([0, 0, 0]) == True", "assert triples_sum_to_zero([5, 23, -11]) == False", "assert triples_sum_to_zero([12, -3, 1]) == False", "assert triples_sum_to_zero([1, 2, 0]) == True", "assert triples_sum_to_zero([1, 3, 0]) == True", "assert triples_sum_to_zero([1, 2, 0, 1]) == False", "assert triples_sum_to_zero([1, 2, 3, 7, 8]) == False", "assert triples_sum_to_zero([1, 0, 0, 0]) == False", "assert triples_sum_to_zero([1, 2, 2]) == False", "assert triples_sum_to_zero([1, 2, 1]) == True", "assert triples_sum_to_zero([2, 3, 4, 5]) == False", "assert triples_sum_to_zero([-1, 2, 1]) == True", "assert triples_sum_to_zero([-2, 1, 1]) == True", "assert triples_sum_to_zero([-2, -1, 1]) == True", "assert triples_sum_to_zero([-2, -1, -1]) == False", "assert triples_sum_to_zero([1, 3, 4]) == False", "assert triples_sum_to_zero([2, 4, 0]) == False", "assert triples_sum_to_zero([-1, -2, 3]) == False", "assert triples_sum_to_zero([-1, 2, 4]) == False", "assert triples_sum_to_zero([1, 2, -3]) == False", "assert triples_sum_to_zero([2, 4, -5]) == False", "assert triples_sum_to_zero([2, 3, 4]) == False", "assert triples_sum_to_zero([1, 2, 3, 5]) == False", "assert triples_sum_to_zero([1, 2, 4, 5]) == False", "assert triples_sum_to_zero([-3, -2, -1]) == False", "assert triples_sum_to_zero([0, 0, 0]) == False", "assert triples_sum_to_zero([-12, 0, 1]) == False", "assert triples_sum_to_zero([3, -2, 0]) == False", "assert triples_sum_to_zero([-2, 3, 1]) == True", "assert triples_sum_to_zero([-5, 3, 7]) == True", "assert triples_sum_to_zero([2, 4, 9, 7]) == True", "assert triples_sum_to_zero([1, 3, -2]) == True", "assert triples_sum_to_zero([-5, 2, 4]) == False", "assert triples_sum_to_zero([1, 2, 3, 7, 8, 9]) == False", "assert triples_sum_to_zero([1, 3, 5]) == True", "assert triples_sum_to_zero([-2, 3, 1]) == False", "assert triples_sum_to_zero([-1, 0, 1]) == False", "assert triples_sum_to_zero([1, 0, 0]) == False", "assert triples_sum_to_zero([2, 4, 6]) == False", "assert triples_sum_to_zero([2, 3, 0]) == False", "assert triples_sum_to_zero([2, 4, 5]) == False", "assert triples_sum_to_zero([-1, 2, 3, 1]) == True", "assert triples_sum_to_zero([1, 3, 7]) == False", "assert triples_sum_to_zero([-5, -4, -3]) == False", "assert triples_sum_to_zero([1, 2, 3, 1]) == False", "assert triples_sum_to_zero([2, 3, 5]) == False", "assert triples_sum_to_zero([1, 2, 2]) == True", "assert triples_sum_to_zero([-1, -2, -3]) == True", "assert triples_sum_to_zero([1, 0, 0]) == True", "assert triples_sum_to_zero([-1, 0, 0]) == True", "assert triples_sum_to_zero([1, 2, 3, 6]) == False", "assert triples_sum_to_zero([1, 2, 3, 8]) == False", "assert triples_sum_to_zero([1, 2, 3, 9]) == False", "assert triples_sum_to_zero([1, 2, 3, 10]) == False", "assert triples_sum_to_zero([1, 2, 3, 11]) == False", "assert triples_sum_to_zero([1, 2, 3, 12]) == False", "assert triples_sum_to_zero([1, 2, 3, 13]) == False", "assert triples_sum_to_zero([1, 2, 3, 14]) == False", "assert triples_sum_to_zero([1, 2, 3, 15]) == False", "assert triples_sum_to_zero([1, 2, 3, 16]) == False", "assert triples_sum_to_zero([1, 2, 3, 17]) == False", "assert triples_sum_to_zero([1, 2, 3, 18]) == False", "assert triples_sum_to_zero([1, 2, 3, 19]) == False", "assert triples_sum_to_zero([1, 2, 3, 20]) == False", "assert triples_sum_to_zero([1, 2, 3, 21]) == False"]}
{"HumanEval/41": ["assert car_race_collision(1) == 0", "assert car_race_collision(2) == 0", "assert car_race_collision(3) == 0", "assert car_race_collision(4) == 0", "assert car_race_collision(5) == 0", "assert car_race_collision(6) == 0", "assert car_race_collision(7) == 0", "assert car_race_collision(8) == 0", "assert car_race_collision(9) == 0", "assert car_race_collision(10) == 0", "assert car_race_collision(6) == 1", "assert car_race_collision(7) == 2", "assert car_race_collision(8) == 3", "assert car_race_collision(9) == 4", "assert car_race_collision(10) == 5", "assert car_race_collision(15) == 1", "assert car_race_collision(20) == 2", "assert car_race_collision(25) == 3", "assert car_race_collision(30) == 4", "assert car_race_collision(35) == 5", "assert car_race_collision(40) == 6", "assert car_race_collision(12) == 0", "assert car_race_collision(15) == 0", "assert car_race_collision(20) == 0", "assert car_race_collision(25) == 0", "assert car_race_collision(30) == 0", "assert car_race_collision(35) == 0", "assert car_race_collision(40) == 0", "assert car_race_collision(45) == 0", "assert car_race_collision(7) == 1", "assert car_race_collision(8) == 1", "assert car_race_collision(9) == 1", "assert car_race_collision(10) == 2", "assert car_race_collision(10) == 1", "assert car_race_collision(14) == 0", "assert car_race_collision(16) == 0", "assert car_race_collision(18) == 0", "assert car_race_collision(2) == 1", "assert car_race_collision(1) == 1", "assert car_race_collision(4) == 2", "assert car_race_collision(6) == 3", "assert car_race_collision(11) == 0", "assert car_race_collision(13) == 0", "assert car_race_collision(17) == 0", "assert car_race_collision(19) == 0", "assert car_race_collision(21) == 0", "assert car_race_collision(23) == 0", "assert car_race_collision(5) == 1", "assert car_race_collision(6) == 2", "assert car_race_collision(7) == 3", "assert car_race_collision(8) == 4", "assert car_race_collision(9) == 5", "assert car_race_collision(10) == 6", "assert car_race_collision(12) == 1", "assert car_race_collision(22) == 0", "assert car_race_collision(24) == 0", "assert car_race_collision(26) == 0", "assert car_race_collision(28) == 0", "assert car_race_collision(50) == 0", "assert car_race_collision(18) == 2", "assert car_race_collision(20) == 3", "assert car_race_collision(25) == 4", "assert car_race_collision(30) == 5", "assert car_race_collision(11) == 1", "assert car_race_collision(13) == 1", "assert car_race_collision(17) == 1", "assert car_race_collision(19) == 1", "assert car_race_collision(21) == 1", "assert car_race_collision(8) == 2", "assert car_race_collision(9) == 2", "assert car_race_collision(10) == 3", "assert car_race_collision(11) == 2", "assert car_race_collision(12) == 2", "assert car_race_collision(13) == 3", "assert car_race_collision(14) == 3", "assert car_race_collision(15) == 3", "assert car_race_collision(16) == 4", "assert car_race_collision(17) == 4", "assert car_race_collision(18) == 4", "assert car_race_collision(19) == 4", "assert car_race_collision(20) == 4", "assert car_race_collision(27) == 0", "assert car_race_collision(29) == 0", "assert car_race_collision(9) == 3", "assert car_race_collision(10) == 4", "assert car_race_collision(0) == 0", "assert car_race_collision(100) == 0", "assert car_race_collision(1000) == 0", "assert car_race_collision(16) == 1", "assert car_race_collision(20) == 1", "assert car_race_collision(24) == 1", "assert car_race_collision(28) == 1", "assert car_race_collision(32) == 1", "assert car_race_collision(36) == 1", "assert car_race_collision(40) == 1", "assert car_race_collision(25) == 2", "assert car_race_collision(30) == 3", "assert car_race_collision(30) == 2", "assert car_race_collision(35) == 3"]}
{"HumanEval/42": ["assert incr_list([1, 2, 3]) == [2, 3, 4]", "assert incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [6, 4, 6, 3, 4, 4, 10, 1, 124]", "assert incr_list([-1, 2, 3]) == [-1, 2, 4]", "assert incr_list([1, -2, 3]) == [2, 1, 2]", "assert incr_list([1, 2, -3]) == [2, 1, -2]", "assert incr_list([3, -2, 0]) == [4, 1, 0]", "assert incr_list([0, 0, 0]) == [0, 0, 0]", "assert incr_list([5, 23, -11]) == [6, 23, 11]", "assert incr_list([-12, 0, 1]) == [-11, 1, 0]", "assert incr_list([12, -3, 1]) == [13, -2, 1]", "assert incr_list([3, -2, 0]) == [4, -1, 0]", "assert incr_list([1, -2, 3]) == [2, 1, 4]", "assert incr_list([1, 2, -3]) == [2, 1, 2]", "assert incr_list([-3, -2, -1]) == [-2, -1, -3]", "assert incr_list([1, 2, 3, 4, 5]) == [2, 3, 4, 5, 6]", "assert incr_list([-3, -2, -1]) == [-2, -1, -2]", "assert incr_list([-12, 0, 1]) == [-11, 0, 1]", "assert incr_list([12, -3, 1]) == [13, -3, 1]", "assert incr_list([3, -2, 0]) == [4, -2, 0]", "assert incr_list([3, -2, 0]) == [2, -2, 0]", "assert incr_list([-12, 0, 1]) == [-11, 1, -11]", "assert incr_list([3, -2, 0]) == [2, -1, 0]", "assert incr_list([12, -3, 1]) == [13, -2, 2]", "assert incr_list([3, -2, 0]) == [4, 1, 2]", "assert incr_list([5, 23, -11]) == [17, 23, 11]", "assert incr_list([-12, 0, 1]) == [-11, 1, 12]", "assert incr_list([3, -2, 0]) == [4, -1, 2]", "assert incr_list([1, 2, -3]) == [1, 1, 0]", "assert incr_list([3, -2, 0]) == [3, 0, 0]", "assert incr_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [2, 3, 4, 5, 6, 7, 8, 9, 10, 10]", "assert incr_list([5, 23, -11]) == [6, 23, 12]", "assert incr_list([3, -2, 0]) == [3, -1, 0]", "assert incr_list([12, 3, 4, 5, 6, 7, 8, 9, 10]) == [12, 4, 5, 6, 7, 8, 9, 10]", "assert incr_list([1, 2, -3]) == [2, 1, 0]", "assert incr_list([1, 2, -3]) == [1, 1, 1]", "assert incr_list([-12, 0, 1]) == [-11, 1, -12]", "assert incr_list([-12, 0, 1]) == [-12, 1, 1]", "assert incr_list([3, -2, 0]) == [3, 1, 0]", "assert incr_list([-3, -2, -1]) == [-4, -3, -2]", "assert incr_list([1, 2, -3]) == [2, 1, 1]", "assert incr_list([5, 23, -11]) == [17, 23, -11]", "assert incr_list([-3, -2, -1]) == [-4, -2, -2]"]}
{"HumanEval/43": ["assert pairs_sum_to_zero([1, 3, 5, 0]) == False", "assert pairs_sum_to_zero([1, 3, -2, 1]) == False", "assert pairs_sum_to_zero([1, 2, 3, 7]) == False", "assert pairs_sum_to_zero([2, 4, -5, 3, 5, 7]) == True", "assert pairs_sum_to_zero([1]) == False", "assert pairs_sum_to_zero([1, 2, 3]) == False", "assert pairs_sum_to_zero([-1, 0, 1, 2, 3, 4]) == False", "assert pairs_sum_to_zero([-1, 2, 3, 4, 5]) == False", "assert pairs_sum_to_zero([-1, 2, 3]) == False", "assert pairs_sum_to_zero([1, 2, 3, 0]) == False", "assert pairs_sum_to_zero([1, 2, 3, 4]) == False", "assert pairs_sum_to_zero([1, 2, 3, 5]) == False", "assert pairs_sum_to_zero([1, 2, 3, 6]) == False", "assert pairs_sum_to_zero([1, 2, 3, 8]) == False", "assert pairs_sum_to_zero([1, 2, 3, 9]) == False", "assert pairs_sum_to_zero([1, 2, 3, 10]) == False", "assert pairs_sum_to_zero([1, 2, 3, 11]) == False", "assert pairs_sum_to_zero([1, 2, 3, 12]) == False", "assert pairs_sum_to_zero([1, 2, 3, 13]) == False", "assert pairs_sum_to_zero([1, 2, 3, 14]) == False", "assert pairs_sum_to_zero([1, 2, 3, 15]) == False", "assert pairs_sum_to_zero([1, 2, 3, 16]) == False", "assert pairs_sum_to_zero([1, 2, 3, 17]) == False", "assert pairs_sum_to_zero([1, 2, 3, 18]) == False", "assert pairs_sum_to_zero([1, 2, 3, 19]) == False", "assert pairs_sum_to_zero([1, 2, 3, 20]) == False", "assert pairs_sum_to_zero([1, 2, 3, 21]) == False", "assert pairs_sum_to_zero([1, 0, 1, 0, 0]) == False", "assert pairs_sum_to_zero([1, 2, 3, 7, 8]) == False", "assert pairs_sum_to_zero([1, 2, 3, 0, 0]) == False", "assert pairs_sum_to_zero([1, 2, 3, 0, 4]) == False", "assert pairs_sum_to_zero([1, 2, 3, 0, 8]) == False", "assert pairs_sum_to_zero([1, 2, 3, 0, 10]) == False", "assert pairs_sum_to_zero([1, 2, 3, 0, 12]) == False", "assert pairs_sum_to_zero([1, 2, 3, 0, 14]) == False", "assert pairs_sum_to_zero([1, 2, 3, 0, 16]) == False", "assert pairs_sum_to_zero([1, 2, 3, 0, 18]) == False", "assert pairs_sum_to_zero([1, 2, 3, 0, 20]) == False", "assert pairs_sum_to_zero([1, 2, 3, 0, 22]) == False", "assert pairs_sum_to_zero([1, 2, 3, 0, 24]) == False", "assert pairs_sum_to_zero([1, 2, 3, 0, 26]) == False", "assert pairs_sum_to_zero([1, 2, 3, 0, 28]) == False", "assert pairs_sum_to_zero([1, 2, 3, 0, 30]) == False", "assert pairs_sum_to_zero([1, 2, 3, 0, 5]) == False", "assert pairs_sum_to_zero([1, 2, 3, 0, 4, 5]) == False", "assert pairs_sum_to_zero([1, 2, 3, 1]) == False", "assert pairs_sum_to_zero([1, 2, 3, 2]) == False", "assert pairs_sum_to_zero([1, 2, 3, 3]) == False", "assert pairs_sum_to_zero([1, 0, 0, 0, 0]) == False", "assert pairs_sum_to_zero([1, 0, 0, 0, 1]) == False", "assert pairs_sum_to_zero([1, 2, 3, 0, 4, 5, 6]) == False", "assert pairs_sum_to_zero([1, 2, 3, 0, 4, 5, 6, 7]) == False", "assert pairs_sum_to_zero([1, 2, 3, 0, 4, 5, 6, 7, 8]) == False", "assert pairs_sum_to_zero([1, 2, 3, 0, 4, 5, 6, 7, 8, 9]) == False", "assert pairs_sum_to_zero([1, 2, 3, 0, 4, 5, 6, 7, 8, 9, 10]) == False", "assert pairs_sum_to_zero([1, 2, 3, 0, 4, 5, 6, 7, 8, 9, 10, 11]) == False", "assert pairs_sum_to_zero([1, 2, 3, 0, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == False", "assert pairs_sum_to_zero([1, 2, 3, 0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) == False", "assert pairs_sum_to_zero([1, 2, 3, 4, 5]) == False", "assert pairs_sum_to_zero([1, 2, 3, 4, 5, 0]) == False", "assert pairs_sum_to_zero([1, 2, 3, 4, 5, 6]) == False", "assert pairs_sum_to_zero([1, 2, 3, 4, 5, 6, 7]) == False", "assert pairs_sum_to_zero([1, 2, 3, 4, 5, 6, 7, 8]) == False", "assert pairs_sum_to_zero([1, 2, 3, 4, 5, 6, 7, 8, 9]) == False", "assert pairs_sum_to_zero([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == False", "assert pairs_sum_to_zero([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == False", "assert pairs_sum_to_zero([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == False", "assert pairs_sum_to_zero([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) == False", "assert pairs_sum_to_zero([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]) == False", "assert pairs_sum_to_zero([-2, 1, 2, 1, 3]) == False", "assert pairs_sum_to_zero([1, 0, 0, 0]) == False", "assert pairs_sum_to_zero([-1, 0, 0, 0]) == False", "assert pairs_sum_to_zero([1, 1, 1, 1]) == False", "assert pairs_sum_to_zero([1, 2, 3, 0]) == True", "assert pairs_sum_to_zero([1, 2, 3, 4, 5]) == True", "assert pairs_sum_to_zero([1, 2, 3, 4, 6]) == False", "assert pairs_sum_to_zero([1, 2, 3, 4, 7]) == False", "assert pairs_sum_to_zero([1, 2, 3, 4, 5, 6, 7]) == True", "assert pairs_sum_to_zero([1, 0, 0, 0, 0]) == True", "assert pairs_sum_to_zero([-1, -2, -3, -4, -5]) == False", "assert pairs_sum_to_zero([1, 2, 3, 0, 0, 0]) == False", "assert pairs_sum_to_zero([1, 2, 3, 0, 0, 0, 0]) == False", "assert pairs_sum_to_zero([1, 2, 3, 0, 0, 0, 0, 0]) == False", "assert pairs_sum_to_zero([1, 2, 3, 0, 0, 0, 0, 0, 0]) == False", "assert pairs_sum_to_zero([1, 2, 3, 0, 0, 0, 0, 0, 0, 0]) == False", "assert pairs_sum_to_zero([1, 2, 3, 0, 0, 0, 0, 0, 0, 0, 0]) == False", "assert pairs_sum_to_zero([1, 2, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0]) == False", "assert pairs_sum_to_zero([-1, 0, 1, 2, 3]) == False", "assert pairs_sum_to_zero([-2, -3, -4, -5, -6, -7, -8]) == False", "assert pairs_sum_to_zero([1, 2, 3, 0, 4, 5]) == True", "assert pairs_sum_to_zero([1, 2, 3, 4, 0]) == True", "assert pairs_sum_to_zero([-2, 1, 3, 5, 0]) == False", "assert pairs_sum_to_zero([-1, 0, 0, 0, 0]) == True", "assert pairs_sum_to_zero([0, 0, 0, 0, 0]) == True", "assert pairs_sum_to_zero([1, 2, 3, 0, 4, 5, 6]) == True", "assert pairs_sum_to_zero([1, 0, 1, 0, 0, 0]) == True", "assert pairs_sum_to_zero([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]) == False"]}
{"HumanEval/44": ["assert change_base(8, 3) == '22'", "assert change_base(8, 2) == '1000'", "assert change_base(7, 2) == '111'", "assert change_base(8, 10) == '8'", "assert change_base(8, 1) == '8'", "assert change_base(7, 10) == '7'", "assert change_base(7, 1) == '7'", "assert change_base(8, 10) == '10000'", "assert change_base(7, 10) == '700'", "assert change_base(8, 1) == '2'", "assert change_base(8, -1) == '-2'", "assert change_base(7, -1) == '-7'", "assert change_base(10, 2) == '10'", "assert change_base(9, 3) == '11'", "assert change_base(5, 2) == '5'", "assert change_base(12, 2) == '12'", "assert change_base(0, 2) == ''", "assert change_base(-10, 2) == '-12'", "assert change_base(9, 10) == '0'", "assert change_base(0, 10) == '0'", "assert change_base(0, 2) == '0'", "assert change_base(10, 10) == '0'", "assert change_base(int('-8'), 3) == '-22'", "assert change_base(int('-8'), 2) == '-1000'", "assert change_base(int('-7'), 2) == '-111'", "assert change_base(9, 3) == '9'", "assert change_base(10, 3) == '10'", "assert change_base(11, 3) == '11'", "assert change_base(12, 3) == '12'", "assert change_base(10, 10) == '10'", "assert change_base(10, 2) == 'A'", "assert change_base(10, 3) == 'C'", "assert change_base(10, 100) == '1'", "assert change_base(10, 1000) == '0'", "assert change_base(9, 3) == '22'", "assert change_base(9, 2) == '1000'", "assert change_base(7, 10) == '111'", "assert change_base(7, 11) == 'a'", "assert change_base(7, 12) == 'b'", "assert change_base(7, 13) == 'c'", "assert change_base(7, 14) == 'd'", "assert change_base(7, 15) == 'e'", "assert change_base(7, 16) == 'f'", "assert change_base(7, 17) == 'g'", "assert change_base(7, 18) == 'h'", "assert change_base(8, 10) == '9'", "assert change_base(8, -1) == '2'", "assert change_base(7, -1) == '7'", "assert change_base(10, 2) == '100'", "assert change_base(10, 1) == '10'", "assert change_base(9, 2) == '100'", "assert change_base(9, 1) == '10'", "assert change_base(8, 11) == '9'", "assert change_base(8, 12) == 'A'", "assert change_base(8, 13) == 'B'", "assert change_base(8, 14) == 'C'", "assert change_base(8, 15) == 'D'", "assert change_base(8, 16) == 'E'", "assert change_base(8, 17) == 'F'", "assert change_base(9, 10) == 'a'", "assert change_base(0, 10) == ''", "assert change_base(-1, 10) == ''", "assert change_base(10, 2) == '5'", "assert change_base(8, 11) == '100000'", "assert change_base(8, 12) == '1000000'", "assert change_base(8, 13) == '10000000'", "assert change_base(8, 14) == '100000000'", "assert change_base(8, 15) == '1000000000'", "assert change_base(8, 16) == '10000000000'", "assert change_base(9, 2) == '18'", "assert change_base(8, 10) == '0'", "assert change_base(8, 11) == '9999'", "assert change_base(10, 3) == '20'", "assert change_base(9, 3) == '21'", "assert change_base(9, 2) == '101'", "assert change_base(8, 10) == '1000000'", "assert change_base(8, 11) == '1000001'", "assert change_base(8, 12) == '0'", "assert change_base(8, -1) == '1022'", "assert change_base(8, 100) == '8'", "assert change_base(8, 1000) == '0'", "assert change_base(10, 4) == '10'", "assert change_base(10, 5) == '10'", "assert change_base(7, 3) == '22'", "assert change_base(7, 100) == '7'", "assert change_base(7, 1000) == '7'", "assert change_base(7, 11) == '13'", "assert change_base(7, 12) == '12'", "assert change_base(7, 13) == '11'", "assert change_base(7, 14) == '10'", "assert change_base(7, 15) == '7'", "assert change_base(10, 10) == '1000'", "assert change_base(10, 2) == '1000'", "assert change_base(10, 3) == '1000'", "assert change_base(10, 4) == '1000'", "assert change_base(10, 5) == '1000'", "assert change_base(7, 3) == '21'", "assert change_base(7, 10) == '1111'", "assert change_base(7, 11) == '11111'", "assert change_base(7, 12) == '111111'"]}
{"HumanEval/45": ["assert triangle_area(5, 3) == 7.5", "assert triangle_area(3, 5) == 6", "assert triangle_area(2, 2) == 2", "assert triangle_area(10, 10) == 100", "assert triangle_area(1, 1) == 1", "assert triangle_area(10, 100) == 10000", "assert triangle_area(100, 1) == 100000", "assert triangle_area(1, 100) == 100000", "assert triangle_area(1, 3) == 3.0", "assert triangle_area(3, 3) == 9.0", "assert triangle_area(10, 10) == 100.0", "assert triangle_area(5, 2) == 8.2745096", "assert triangle_area(10, 2) == 22.0", "assert triangle_area(3, 10) == 30.0", "assert triangle_area(5, 10) == 50.0", "assert triangle_area(3, 5) == 2.5", "assert triangle_area(1, 1) == 1.0", "assert triangle_area(1, 0) == 0.0", "assert triangle_area(0, 1) == 0.0", "assert triangle_area(0, 0) == 0.0", "assert triangle_area(10, 3) == 30", "assert triangle_area(5, 10) == 150", "assert triangle_area(3, 10) == 30", "assert triangle_area(3, 5) == 15", "assert triangle_area(10, 10) == 1000", "assert triangle_area(10, 100) == 0", "assert triangle_area(-5, 3) == -15", "assert triangle_area(3, 3) == 9", "assert triangle_area(3, 10) == 100", "assert triangle_area(5, 10) == 50", "assert triangle_area(1, 2) == 3", "assert triangle_area(10, 4) == 40", "assert triangle_area(4, 10) == 40", "assert triangle_area(5, 5) == 25", "assert triangle_area(8, 5) == 40", "assert triangle_area(3, 2) == 3", "assert triangle_area(2, 1) == 2", "assert triangle_area(1, 0) == 0", "assert triangle_area(10, 0) == 0", "assert triangle_area(-5, 3) == 0", "assert triangle_area(-8, 5) == 0", "assert triangle_area(10, 5) == 50", "assert triangle_area(3, 1) == 3", "assert triangle_area(5, 8) == 40", "assert triangle_area(1, 2) == 1", "assert triangle_area(7, 4) == 28", "assert triangle_area(9, 6) == 84", "assert triangle_area(8, 5) == 39.0", "assert triangle_area(2, 1) == 2.0", "assert triangle_area(3, 2) == 3.0", "assert triangle_area(4, 4) == 16.0", "assert triangle_area(6, 6) == 36.0", "assert triangle_area(1, 10) == 10.0", "assert triangle_area(10, 1) == 100.0", "assert triangle_area(10, 10) == 300.0", "assert triangle_area(10, 1) == 10", "assert triangle_area(1, 10) == 10", "assert triangle_area(3, 5) == 3.5", "assert triangle_area(0, 0) == 0", "assert triangle_area(8, 2) == 12.5", "assert triangle_area(3, 5) == 10", "assert triangle_area(9, 4) == 36", "assert triangle_area(4, 6) == 24", "assert triangle_area(2, 3) == 8", "assert triangle_area(8, 4) == 24", "assert triangle_area(10, 2) == 10", "assert triangle_area(-8, 4) == -32", "assert triangle_area(8, 5) == 35", "assert triangle_area(10, 2) == 20", "assert triangle_area(3, 5) == 6.0", "assert triangle_area(1, 2) == 3.0", "assert triangle_area(10, 1) == 10.0", "assert triangle_area(1, 10) == 1.0", "assert triangle_area(-5, 3) == -75.0", "assert triangle_area(-3, 5) == -22.5", "assert triangle_area(5, -3) == 15.0", "assert triangle_area(3, 10) == 10", "assert triangle_area(2, 10) == 20", "assert triangle_area(100, 100) == 10000", "assert triangle_area(1, 2) == 2.5", "assert triangle_area(8, 4) == 28", "assert triangle_area(5, 0) == 0", "assert triangle_area(0, 5) == 0", "assert triangle_area(-5, 0) == 0", "assert triangle_area(100, 10) == 1000", "assert triangle_area(10, 100) == 100", "assert triangle_area(100, 1000) == 10000", "assert triangle_area(1, 1) == 3", "assert triangle_area(5, 2) == 10", "assert triangle_area(10, 10) == 50", "assert triangle_area(10, 20) == 100", "assert triangle_area(20, 10) == 50", "assert triangle_area(20, 20) == 100", "assert triangle_area(5, 10) == 100", "assert triangle_area(5, 1) == 5", "assert triangle_area(1, 5) == 5", "assert triangle_area(8, 9) == 72", "assert triangle_area(-5, -3) == -15", "assert triangle_area(8, 10) == 49", "assert triangle_area(4, 4) == 16", "assert triangle_area(6, 8) == 48", "assert triangle_area(10, 6) == 60", "assert triangle_area(5, 20) == 50.0", "assert triangle_area(3, 15) == 45.0", "assert triangle_area(8, 6) == 39.6"]}
{"HumanEval/46": ["assert fib4(0) == 0", "assert fib4(1) == 0", "assert fib4(2) == 2", "assert fib4(3) == 0", "assert fib4(4) == 2", "assert fib4(5) == 4", "assert fib4(6) == 8", "assert fib4(7) == 14", "assert fib4(8) == 24", "assert fib4(4) == 1", "assert fib4(8) == 22", "assert fib4(9) == 30", "assert fib4(8) == 20", "assert fib4(9) == 38", "assert fib4(9) == 28", "assert fib4(9) == 39", "assert fib4(4) == 3", "assert fib4(9) == 34"]}
{"HumanEval/47": ["assert median([3, 1, 2, 4, 5]) == 3", "assert median([-10, 4, 6, 1000, 10, 20]) == 15.0", "assert median([1, 2, 3, 4, 5]) == 3", "assert median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 5", "assert median([-10, -20, -30, -40, -50, -60, -70, -80, -90, -100]) == -60", "assert median([1, 2, 3, 4, 5, 6]) == 3", "assert median([-10, 4, 6, 1000, 10, 20, 30]) == 15.0", "assert median([-10, 4, 6, 1000, 10, 20, 30, 40]) == 15.0", "assert median([-10, 4, 6, 1000, 10, 20, 30, 40, 50]) == 15.0", "assert median([-1, 2, 3, 4, 5]) == 3", "assert median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == 7", "assert median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 10", "assert median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 14.5", "assert median([-10, -5, 0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100]) == 35", "assert median([-1, -2, -3, -4, -5]) == -3", "assert median([0, 0, 0, 0, 0]) == 0", "assert median([1, 2, 3, 4, 5, 6, 7, 8]) == 5", "assert median([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 5", "assert median([-1000, -900, -800, -700, -600, -500, -400, -300, -200, -100, -10, -2, -3, -4, -5]) == -3", "assert median([10, 20, 30, 40, 50]) == 30", "assert median([-100, -90, -80, -70, -60, -50, -40, -30, -20, -10, -10, -20, -30, -40]) == -20", "assert median([-1, 2, 3, 4, 5]) == 2", "assert median([-10, 4, 6, 1000, 10, 20, 15, 16, 17, 18, 19]) == 16.0", "assert median([-10, 4, 6, 1000, 10, 20, 15, 16, 17, 18, 19, 20]) == 15.0", "assert median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == 6", "assert median([-10, 4, 6, 1000, 10, 20, 15, 16, 17, 18, 19, 20, 21]) == 19.0", "assert median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]) == 7", "assert median([-10, 4, 6, 1000, 10, 20, 15, 16, 17, 18, 19, 20, 21, 22]) == 19.0", "assert median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 7", "assert median([-1000, -999, -998, -997, -996]) == -997", "assert median([-1000, -999, -998, -997, -996, -995]) == -996", "assert median([-1000, -999, -998, -997, -996, -995, -994]) == -995", "assert median([-10, 4, 6, 1000, 10, 20, 15]) == 15.0", "assert median([-10, 4, 6, 1000, 10, 20, 15, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125]) == 65", "assert median([1, 2, 3, 4, 5, 6, 7]) == 4", "assert median([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 6", "assert median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == 6", "assert median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) == 8", "assert median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]) == 9", "assert median([1, 2, 3, 4, 5, 6, 7]) == 5", "assert median([1, 2, 3, 4, 5, 6, 7, 8]) == 6", "assert median([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 7", "assert median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 8", "assert median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == 9", "assert median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == 10", "assert median([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 4", "assert median([-10, 4, 6, 1000, 10, 20, 30, 40]) == 20.0", "assert median([-10, 4, 6, 1000, 10, 20, 30, 40, 50]) == 30.0", "assert median([-10, -20, -30, -40, -50, -60, -70, -80, -90, -100]) == -55.0", "assert median([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]) == 0", "assert median([5, 23, -11, 12, -3, 1, -2, 0, 3, -4, -5]) == 7.5", "assert median([1, 2, 3, 4, 5, 6, 7]) == 3", "assert median([1, 2, 3, 4, 5, 6, 7, 8]) == 3", "assert median([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 3", "assert median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 3", "assert median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == 3", "assert median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 13", "assert median([-1, -2, -3, -4, -5]) == float(\"inf\")", "assert median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 12", "assert median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 16", "assert median([1e10, 2e10, 3e10, 4e10, 5e10]) == 3e10", "assert median([0, 0, 0, 0, 0, 0, 0, 0, 0, 0]) == 0", "assert median([5, 23, -11]) == 17", "assert median([-12, 0, 1]) == -11", "assert median([12, -3, 1]) == 10", "assert median([3, -2, 0]) == 1", "assert median([-10, 4, 6, 1000, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 40.0", "assert median([-10, 4, 6, 1000, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]) == 60.0", "assert median([-10, -20, -30, -40, -50, -60, -70, -80, -90, -100, -110, -120]) == -85.0", "assert median([-10, -20, -30, -40, -50, -60, -70, -80, -90, -100, -110, -120, -130, -140, -150]) == -135.0", "assert median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 11", "assert median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 14", "assert median([0, 0, 0, 0, 0, 0]) == 0", "assert median([5, 23, -11, -12, -13]) == 8", "assert median([12, 3, 2, 1, 4, 5]) == 3", "assert median([3, -2, 0, 1, -1, 2]) == 1", "assert median([-1000, -900, -800, -700, -600, -500, -400, -300, -200, -100, -10, -2, -3, -4, -5, -6, -7, -8, -9]) == -4", "assert median([-10, 4, 6, 1000, 10, 20, 30]) == 20.0", "assert median([-10, 4, 6, 1000, 10, 20, 30, 40]) == 30.0", "assert median([-10, 4, 6, 1000, 10, 20, 30, 40, 50]) == 40.0", "assert median([-10, 4, 6, 1000, 10, 20, 30, 40, 50, 60]) == 50.0", "assert median([-10, 4, 6, 1000, 10, 20, 30, 40, 50, 60, 70]) == 60.0", "assert median([-10, 4, 6, 1000, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 50.0", "assert median([-1000, 1000, 2000, 3000, 4000]) == 2000", "assert median([12, 3, 5, 7, 9]) == 5", "assert median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == 5.5", "assert median([-10, 4, 6, 1000, 10, 20, 15, 8]) == 15.0", "assert median([-10, 4, 6, 1000, 10, 20, 15, 8, 12]) == 15.0", "assert median([-10, 4, 6, 1000, 10, 20, 15, 8, 12, 14]) == 15.0", "assert median([-10, 4, 6, 1000, 10, 20, 15, 8, 12, 14, 16]) == 15.0", "assert median([-100, -200, -300, -400, -500, -600, -700, -800, -900, -1000, -1100]) == -900", "assert median([10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]) == 80", "assert median([-1000, -900, -800, -700, -600, -500, -400, -300, -200, -100, -10]) == -500", "assert median([-12, -20, -30, -40, -50, -60, -70, -80, -90, -100, -110, -120]) == -80", "assert median([3, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 10", "assert median([-10, -20, -30, -40, -50, -60, -70, -80, -90, -100, -110, -120, -130, -140]) == -80", "assert median([-10, -20, -30, -40, -50, -60]) == -40", "assert median([10, 20, 30, 40, 50, 60, 70]) == 30", "assert median([-10, 4, 6, 1000, 10, 20, 15, 12]) == 15.0", "assert median([-10, 4, 6, 1000, 10, 20, 15, 12, 16]) == 15.0", "assert median([-10, 4, 6, 1000, 10, 20, 21]) == 15.0", "assert median([-10, 4, 6, 1000, 10, 20, 21, 22]) == 15.0", "assert median([-10, 4, 6, 1000, 10, 20, 21, 22, 23]) == 15.0", "assert median([-1000, -900, -800, -700, -600, -500, -400, -300, -200, -100, -10, -2, -3, -4, -5]) == -300", "assert median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == 8", "assert median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == 9", "assert median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) == 10", "assert median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]) == 11"]}
{"HumanEval/48": ["assert is_palindrome('') == True", "assert is_palindrome('aba') == True", "assert is_palindrome('racecar') == True", "assert is_palindrome('hello world') == True", "assert is_palindrome('level') == True", "assert is_palindrome('abcde') == True", "assert is_palindrome('zzxcba') == False", "assert is_palindrome('12345') == True", "assert is_palindrome('09876') == False", "assert is_palindrome('-12345') == False", "assert is_palindrome('A man, a plan, a canal: Panama!') == True", "assert is_palindrome('No problem') == True", "assert is_palindrome('Did you finish your homework?') == True", "assert is_palindrome('zbcd') == False", "assert is_palindrome('hello') == False", "assert is_palindrome('Do geese see God?') == True", "assert is_palindrome('No') == False", "assert is_palindrome('abc') == True", "assert is_palindrome('-911') == False", "assert is_palindrome('xyz') == False", "assert is_palindrome('nope') == False", "assert is_palindrome('dad') == False", "assert is_palindrome('elephant') == False", "assert is_palindrome('leetcode') == True", "assert is_palindrome('abc') == False", "assert is_palindrome('123') == False", "assert is_palindrome('-987') == False", "assert is_palindrome('aaaaa') == True", "assert is_palindrome('cbbd') == True", "assert is_palindrome('dog') == False", "assert is_palindrome('abcde') == False", "assert is_palindrome('cba9876543210') == True", "assert is_palindrome('level up') == True", "assert is_palindrome('A man, a plan, a canal: Nicaragua!') == False", "assert is_palindrome('world') == False", "assert is_palindrome('dogma') == False", "assert is_palindrome('level') == False", "assert is_palindrome('radar level') == False", "assert is_palindrome('noon') == True", "assert is_palindrome('hello') == True", "assert is_palindrome('leetcode') == False", "assert is_palindrome('world') == True", "assert is_palindrome('xyzzy') == False", "assert is_palindrome('catsand') == False", "assert is_palindrome('noon') == False", "assert is_palindrome('12345') == False", "assert is_palindrome('123456789') == False", "assert is_palindrome('did not know') == True", "assert is_palindrome('didn\\'t I tell you?') == True", "assert is_palindrome('-91') == False", "assert is_palindrome('zzbcda') == False", "assert is_palindrome('09876') == True", "assert is_palindrome('-12345') == True", "assert is_palindrome('a man, a plan, a canal: Panama!') == True", "assert is_palindrome('did I ever tell you about emmet?') == False", "assert is_palindrome('A quick brown fox jumps over a lazy dog.') == True", "assert is_palindrome('abcdefghijklmnopqrstuvwxyz') == True", "assert is_palindrome('mom') == False", "assert is_palindrome('cbbd') == False", "assert is_palindrome('123') == True", "assert is_palindrome('madam') == True", "assert is_palindrome('-123') == False", "assert is_palindrome('0o7') == False", "assert is_palindrome('cba') == False", "assert is_palindrome('zzbc') == False", "assert is_palindrome('zzzzz') == True", "assert is_palindrome('a') == True", "assert is_palindrome('-91') == True", "assert is_palindrome('dog') == True", "assert is_palindrome('love') == True", "assert is_palindrome('radar') == False", "assert is_palindrome('Did I ever tell you about Emily') == False", "assert is_palindrome('helloo') == False", "assert is_palindrome('dog dog') == False", "assert is_palindrome('dad') == True", "assert is_palindrome('mom') == True", "assert is_palindrome('water') == True", "assert is_palindrome('no') == False", "assert is_palindrome('did not touch the ball') == False", "assert is_palindrome('did not understand a word he said') == False", "assert is_palindrome('radar level 5') == True", "assert is_palindrome('kitten') == False", "assert is_palindrome('cats and dogs') == False", "assert is_palindrome('LeetCode is fun') == True", "assert is_palindrome('No problem') == False", "assert is_palindrome('cban') == False", "assert is_palindrome('lead') == True", "assert is_palindrome('elder') == True", "assert is_palindrome('abba') == True", "assert is_palindrome('test') == True", "assert is_palindrome('python') == True", "assert is_palindrome('cba') == True", "assert is_palindrome('did he do it') == True", "assert is_palindrome('no problemo') == True", "assert is_palindrome('dada') == True"]}
{"HumanEval/49": ["assert modp(3, 5) == 3", "assert modp(1101, 101) == 2", "assert modp(0, 101) == 1", "assert modp(3, 11) == 8", "assert modp(100, 101) == 1", "assert modp(1000, 101) == 99", "assert modp(int(\"-100\"), 101) == 1", "assert modp(2147483647, 2147483647) == 1", "assert modp(-2147483648, 2147483647) == 1", "assert modp(int('-100'), 101) == 1", "assert modp(1000, 101) == 1", "assert modp(int('-3'), 101) == 8", "assert modp(int('1000'), 101) == 8", "assert modp(1, 101) == 1", "assert modp(10, 11) == 1", "assert modp(2147483647, 1000000007) == 1", "assert modp(2147483647, 101) == 1", "assert modp(2, 101) == 1", "assert modp(101, 101) == 1", "assert modp(101, 2) == 1", "assert modp(101, 3) == 2", "assert modp(1000000000, 101) == 0", "assert modp(0, 2) == 0", "assert modp(1, 2) == 1", "assert modp(10, 3) == 8", "assert modp(2, 4) == 2", "assert modp(100, 5) == 1", "assert modp(int(\"-3\"), 101) == 1", "assert modp(100, 2) == 1", "assert modp(-1, 2) == 1", "assert modp(100, -2) == 50", "assert modp(10000, 101) == 999", "assert modp(101, 100) == 1", "assert modp(100, 11) == 9", "assert modp(10000, 101) == 100", "assert modp(int('-1'), 101) == 1", "assert modp(1000000000, 1000000000) == 1", "assert modp(2147483647, -2147483647) == -1", "assert modp(-2147483648, -2147483647) == -1", "assert modp(int('-3'), 101) == 1", "assert modp(int('12345678901234567890'), 101) == 1", "assert modp(int('-12345678901234567890'), 101) == 1", "assert modp(2, 3) == 1", "assert modp(999, 100) == 1", "assert modp(1000, 100) == 0"]}
{"HumanEval/50": ["assert decode_shift(\"kjhgf\") == \"hello\"", "assert decode_shift(\"vdjhg\") == \"world\"", "assert decode_shift(\"qmwzc\") == \"Python\"", "assert decode_shift(\"jhvx\") == \"hello\"", "assert decode_shift(\"qkjc\") == \"world\"", "assert decode_shift(\"yfwp\") == \"Python\"", "assert decode_shift(\"kjh\") == \"hello\"", "assert decode_shift(\"qrst\") == \"world\"", "assert decode_shift(\"gpy\") == \"python\"", "assert decode_shift(\"jvsc\") == \"javascript\"", "assert decode_shift(\"jdjdjdj\") == \"hello\"", "assert decode_shift(\"qjqqqq\") == \"world\"", "assert decode_shift(\"gpgpgpg\") == \"python\"", "assert decode_shift(\"hqb\") == \"hello\"", "assert decode_shift(\"wfr\") == \"world\"", "assert decode_shift(\"fqr\") == \"Python\"", "assert decode_shift(\"jfqg\") == \"hello\"", "assert decode_shift(\"jfqgw\") == \"hello world\"", "assert decode_shift(\"jfqgwq\") == \"Hello World!\"", "assert decode_shift(\"hjlo\") == \"hello\"", "assert decode_shift(\"wjrld\") == \"world\"", "assert decode_shift(\"Pjthon\") == \"Python\"", "assert decode_shift(\"\") == \"\"", "assert decode_shift(\"lhlo\") == \"hello\"", "assert decode_shift(\"wlrdo\") == \"world\"", "assert decode_shift(\"pytnh\") == \"python\"", "assert decode_shift(\"tset\") == \"test\"", "assert decode_shift(\"hqo\") == \"hello\"", "assert decode_shift(\"wdo\") == \"world\"", "assert decode_shift(\"Pynth\") == \"Python\"", "assert decode_shift(\"hfqb\") == \"hello\"", "assert decode_shift(\"wjvz\") == \"world\"", "assert decode_shift(\"pysnc\") == \"python\"", "assert decode_shift(\"jyh\") == \"hello\"", "assert decode_shift(\"rlydw\") == \"world\"", "assert decode_shift(\"qpythn\") == \"Python\"", "assert decode_shift(\"dncecyprt\") == \"encryption\"", "assert decode_shift(\"hqfj\") == \"hello\"", "assert decode_shift(\"wqfj\") == \"world\"", "assert decode_shift(\"pqfj\") == \"Python\"", "assert decode_shift(\"kjhgfds\") == \"hello\"", "assert decode_shift(\"mnbvcxz\") == \"world\"", "assert decode_shift(\"qwertyuiop\") == \"Python\"", "assert decode_shift(\"hkjh\") == \"hello\"", "assert decode_shift(\"dqfz\") == \"world\"", "assert decode_shift(\"wqgv\") == \"python\"", "assert decode_shift(\"wdlo\") == \"world\"", "assert decode_shift(\"yhtp\") == \"Python\"", "assert decode_shift(\"sifn\") == \"is fun\"", "assert decode_shift(\"tody\") == \"today\"", "assert decode_shift(\"Aabo\") == \"Alice and Bob\"", "assert decode_shift(\"Cicc\") == \"C++ is cool\"", "assert decode_shift(\"Pigt\") == \"Python is great\"", "assert decode_shift(\"hqg\") == \"hello\"", "assert decode_shift(\"yfz\") == \"world\"", "assert decode_shift(\"cjx\") == \"Python is awesome\"", "assert decode_shift(\"vgy\") == \"Learn to code\"", "assert decode_shift(\"wlod\") == \"world\"", "assert decode_shift(\"yidn\") == \"Python\"", "assert decode_shift(\"123\") == \"123\"", "assert decode_shift(\"-5\") == \"-5\"", "assert decode_shift(\"hqn\") == \"hello\"", "assert decode_shift(\"wlro\") == \"world\"", "assert decode_shift(\"pytho\") == \"python\"", "assert decode_shift(\"encsf\") == \"encode_shift\"", "assert decode_shift(\"gmll\") == \"hello\"", "assert decode_shift(\"kdjr\") == \"world\"", "assert decode_shift(\"qyuq\") == \"python\"", "assert decode_shift(\"jcse\") == \"hackerrank\"", "assert decode_shift(\"hqjg\") == \"hello\"", "assert decode_shift(\"wvfz\") == \"world\"", "assert decode_shift(\"psyuj\") == \"python\"", "assert decode_shift(\"hjkh\") == \"hello\"", "assert decode_shift(\"kdjld\") == \"world\"", "assert decode_shift(\"pqthn\") == \"python\"", "assert decode_shift(\"stqejt\") == \"testing\"", "assert decode_shift(\"hfld\") == \"hello\"", "assert decode_shift(\"wfrd\") == \"world\"", "assert decode_shift(\"pytn\") == \"python\"", "assert decode_shift(\"stnt\") == \"testing\"", "assert decode_shift(\"jyvz\") == \"hello\"", "assert decode_shift(\"hgjvz\") == \"hello world\"", "assert decode_shift(\"hgjvz\") == \"Hello, World!\"", "assert decode_shift(\"fhqwhgads\") == \"hello\"", "assert decode_shift(\"lzrdwfjdg\") == \"world\"", "assert decode_shift(\"jnvkfpyr\") == \"Python\"", "assert decode_shift(\"hfqg\") == \"hello\"", "assert decode_shift(\"rjzc\") == \"world\"", "assert decode_shift(\"qnkp\") == \"Python\"", "assert decode_shift(\"hfj\") == \"hello\"", "assert decode_shift(\"hfj wfr\") == \"hello world\"", "assert decode_shift(\"hfj wfr!\") == \"hello world!\"", "assert decode_shift(\"hfjg\") == \"hello\"", "assert decode_shift(\"bwkj\") == \"world\"", "assert decode_shift(\"rpyu\") == \"Python\"", "assert decode_shift(\"stqz\") == \"test\"", "assert decode_shift(\"hFld\") == \"Hello\"", "assert decode_shift(\"HFLd\") == \"HELLO\"", "assert decode_shift(\"pytns\") == \"python\"", "assert decode_shift(\"wjn\") == \"world\"", "assert decode_shift(\"zgm\") == \"Python\"", "assert decode_shift(\"hjln\") == \"hello\"", "assert decode_shift(\"wzqk\") == \"world\"", "assert decode_shift(\"tgpy\") == \"Python\"", "assert decode_shift(\"bcd\") == \"abc\"", "assert decode_shift(\"312\") == \"123\""]}
{"HumanEval/51": ["assert remove_vowels('') == ''", "assert remove_vowels('abcdef\\nghijklm') == 'bcdf\\nghjklm'", "assert remove_vowels('abcdef') == 'bcdf'", "assert remove_vowels('aaaaa') == ''", "assert remove_vowels('aaBAA') == 'B'", "assert remove_vowels('zbcd') == 'zbcd'", "assert remove_vowels('hello world') == 'hlrw'", "assert remove_vowels('world') == 'wd'", "assert remove_vowels('World') == 'Wrld'", "assert remove_vowels('HeLLo') == 'Hllo'", "assert remove_vowels('hello world') == 'hlwrld'", "assert remove_vowels('world') == 'wrlrd'", "assert remove_vowels('worId') == 'wrlid'", "assert remove_vowels('HeLLo WoRLD') == 'HlwrlD'", "assert remove_vowels('hello') == 'hlo'", "assert remove_vowels('world') == 'rld'", "assert remove_vowels('goodbye') == 'gb'", "assert remove_vowels('computer science') == 'cmsce'", "assert remove_vowels('world') == 'wrd'", "assert remove_vowels('HeLLo WORLD') == 'HlWrld'", "assert remove_vowels('helloo world') == 'hlrow'", "assert remove_vowels('heLLo WORLD') == 'HLOWROD'", "assert remove_vowels('HELLO WORLD') == 'HLOWROD'", "assert remove_vowels('helloo world') == 'hlwd wd'", "assert remove_vowels('hellooo world') == 'hlwd oo wd'", "assert remove_vowels('worlD') == 'wld'", "assert remove_vowels('WorLd') == 'Wld'", "assert remove_vowels('hello world') == 'hlrwld'", "assert remove_vowels('World') == 'Wd'", "assert remove_vowels('world') == 'wdl'", "assert remove_vowels('hello') == 'hl'", "assert remove_vowels('world') == 'lrd'", "assert remove_vowels('hello-world') == 'hl-wrd'", "assert remove_vowels('computer science') == 'compsc'", "assert remove_vowels('world') == 'wdlro'", "assert remove_vowels('World') == 'Wdlr'", "assert remove_vowels('HeLLo') == 'HllO'", "assert remove_vowels('Python') == 'Pyton'", "assert remove_vowels('world') == 'rlwd'", "assert remove_vowels('Goodbye') == 'dby'", "assert remove_vowels('xyz') == 'xyz'", "assert remove_vowels('XYZ') == 'XYZ'", "assert remove_vowels('hello world') == 'hlwrd'", "assert remove_vowels('Python') == 'yptn'", "assert remove_vowels('World') == 'WdL'", "assert remove_vowels('HeLLo') == 'HLo'", "assert remove_vowels('goodbye') == 'gdby'", "assert remove_vowels('Goodbye') == 'Gdby'", "assert remove_vowels('HeLLo WORLD') == 'HlRlWd'", "assert remove_vowels('hello') == 'hlr'", "assert remove_vowels('Hello') == 'hlo'", "assert remove_vowels('heLLo') == 'hLO'", "assert remove_vowels('hello!') == 'hLo!'", "assert remove_vowels('World') == 'WrlD'", "assert remove_vowels('Python') == 'PyThn'", "assert remove_vowels('mathematics') == 'matheMticS'", "assert remove_vowels('hello') == 'hlwd'", "assert remove_vowels('hello123') == 'hl123'", "assert remove_vowels('HeLLo WORLD') == 'HlWrLd'", "assert remove_vowels('world') == 'wdrl'", "assert remove_vowels('worId') == 'wrdl'", "assert remove_vowels('hello world again') == 'hlwrbagain'", "assert remove_vowels('hello world!') == 'hlwrd!'", "assert remove_vowels('helloo world') == 'hlrwld'", "assert remove_vowels('HeLLo WoRLD') == 'HlRwLd'", "assert remove_vowels('Hello World!') == 'HlRoWlD!'", "assert remove_vowels('world!') == 'wd!'", "assert remove_vowels('HeLLo WORLd') == 'HlWrld'", "assert remove_vowels('World') == 'rlD'", "assert remove_vowels('world') == 'rlD'", "assert remove_vowels('HELLO WORLD') == 'HLOWDRD'", "assert remove_vowels('world') == 'wrdl'", "assert remove_vowels('12345') == '12345'", "assert remove_vowels('123456789') == '123456789'", "assert remove_vowels('goodbye') == 'gbye'", "assert remove_vowels('world') == 'wrld'", "assert remove_vowels('heLLo') == 'HlL'", "assert remove_vowels('world') == 'wdld'", "assert remove_vowels('worLd') == 'wld'", "assert remove_vowels('heLLo wORLD') == 'HlRoWdLd'", "assert remove_vowels('World') == 'rld'", "assert remove_vowels('Hello') == 'llo'", "assert remove_vowels('hello world') == 'hlwo'", "assert remove_vowels('hello') == 'hll'", "assert remove_vowels('Hello World') == 'Hllo Wrld'", "assert remove_vowels('computer science') == 'cns'", "assert remove_vowels('mathematics') == 'mat'", "assert remove_vowels('computer science') == 'csceince'", "assert remove_vowels('HELLO') == 'HLO'", "assert remove_vowels('computer science') == 'compsci'", "assert remove_vowels('HeLLo') == 'HlLo'", "assert remove_vowels('Hello World!') == 'HlLo WrD!'", "assert remove_vowels('world') == 'lrdw'", "assert remove_vowels('heLLo') == 'HL'", "assert remove_vowels('hello world again') == 'hlwrwdagain'", "assert remove_vowels('good bye') == 'gbye'", "assert remove_vowels('hello') == 'hllo'", "assert remove_vowels('HELLO WORLD') == 'HLOWRLD'", "assert remove_vowels('helloo world') == 'hlrowd'", "assert remove_vowels('hellooo world') == 'hlrood'", "assert remove_vowels('heLLO oOwLd') == 'HLOOWLD'", "assert remove_vowels('worlD') == 'wrlD'"]}
{"HumanEval/52": ["assert below_threshold([1, 2, 4, 10], 100) == True", "assert below_threshold([1, 20, 4, 10], 5) == False", "assert below_threshold([-1, -20, -4, -10], 10) == True", "assert below_threshold([-1, -20, -4, -10], -10) == False", "assert below_threshold([-10, -20, -40, -100], 0) == True", "assert below_threshold([-10, -20, -40, -100], -10) == False", "assert below_threshold([-1, 2, 4, 10], 100) == False", "assert below_threshold([-1, 20, 4, 10], 5) == False", "assert below_threshold([1, 2, 4, 10], 10) == True", "assert below_threshold([1, 2, 4, 10], 9) == True", "assert below_threshold([1, 2, 4, 10], 1000) == True", "assert below_threshold([1, 20, 4, 10], 500) == False", "assert below_threshold([-1, -2, -4, -10], 10) == True", "assert below_threshold([-1, -20, -4, -10], 5) == False", "assert below_threshold([1, 2, 4, 10], -100) == False", "assert below_threshold([-10, -20, -40, -100], -100) == True", "assert below_threshold([10, 20, 30, 40], 100) == False", "assert below_threshold([-1, -2, -4, -10], 0) == True", "assert below_threshold([-1, -20, -4, -10], 0) == True", "assert below_threshold([1, 20, 4, 10], -5) == False", "assert below_threshold([10, 20, 30, 40], 100) == True", "assert below_threshold([10, 20, 30, 40], 50) == False", "assert below_threshold([1, 20, 4, 10], 10) == True", "assert below_threshold([-1, 2, 4, 10], 10) == False", "assert below_threshold([-10, -20, -40, -100], -50) == True", "assert below_threshold([-10, -20, -40, -100], 50) == False", "assert below_threshold([-10, -20, -40, -100], 100) == True", "assert below_threshold([1, 2, 4, 10], 50) == True", "assert below_threshold([1, 2, 4, 10], 1000) == False", "assert below_threshold([10, 20, 40, 100], 50) == True", "assert below_threshold([-10, -20, -40, -100], 50) == True", "assert below_threshold([0, 0, 0, 0], 0) == True", "assert below_threshold([5, 23, -11, 17], 100) == True", "assert below_threshold([12, -3, 1, 1], 5) == False", "assert below_threshold([10, 20, 30, 40], 50) == True", "assert below_threshold([1, 2, 3, 4], 5) == False", "assert below_threshold([1, 2, 3, 4], 10) == True", "assert below_threshold([10, 20, 30, 40], 20) == False", "assert below_threshold([-10, -5, 0, 5], 0) == True", "assert below_threshold([10, 20, 30, 40], 40) == True", "assert below_threshold([10, 20, 40, 100], 100) == True", "assert below_threshold([10, 20, 40, 100], 50) == False", "assert below_threshold([1, 2, 4, 10], 90) == False", "assert below_threshold([-10, -20, -40, -100], -5) == False", "assert below_threshold([1, 2, 4, 10], 50) == False", "assert below_threshold([1, 2, 4, 10], 0) == False", "assert below_threshold([-10, -20, -40, -100], 100) == False", "assert below_threshold([1, 2, 4, 10], 0) == True", "assert below_threshold([3, -2, 0], 10) == True", "assert below_threshold([-3, -20, -4], 5) == False", "assert below_threshold([-10, -5, 2, 10], 5) == False", "assert below_threshold([-10, -5, 2, 10], 10) == True", "assert below_threshold([10, 20, 30, 40], 10) == True", "assert below_threshold([10, 20, 30, 40], 5) == False", "assert below_threshold([-10, -5, 0, 5], 10) == False", "assert below_threshold([1, 20, 4, 10], 1000) == False", "assert below_threshold([1, 2, 4, 10], 20) == True", "assert below_threshold([-1, 2, 4, 10], 1000) == False", "assert below_threshold([-1, -20, -4, -10], 100) == True"]}
{"HumanEval/53": ["assert add(2, 3) == 5", "assert add(5, 7) == 12", "assert add(10, 2) == 12", "assert add(5, -3) == 8", "assert add(-5, 7) == -2", "assert add(10, 0) == 10", "assert add(-10, 0) == -10", "assert add(5, 5) == 10", "assert add(-5, -5) == -10", "assert add(10, 10) == 20", "assert add(-10, -10) == -20", "assert add(100, 100) == 200", "assert add(-100, -100) == -200", "assert add(2, -3) == -1", "assert add(5, -7) == 8", "assert add(-3, 5) == -8", "assert add(-2, 2) == 0", "assert add(3, 2) == 5", "assert add(-2, -3) == -5", "assert add(-10, 2) == -8", "assert add(-5, -7) == -12", "assert add(0, 0) == 0", "assert add(-100, -100) == 0", "assert add(10, 5) == 15", "assert add(-5, 2) == -3", "assert add(-10, 5) == -15", "assert add(5, -2) == 3", "assert add(-5, -2) == -7", "assert add(-5, 3) == -8", "assert add(5, -3) == 2", "assert add(-5, -3) == -8", "assert add(10, -5) == -15", "assert add(5, -7) == 1", "assert add(2, 2) == 4", "assert add(5, 2) == 7", "assert add(-3, 5) == 2", "assert add(3, -2) == 1", "assert add(-10, 5) == -5", "assert add(-5, -5) == 0", "assert add(-5, 5) == 0", "assert add(-10, 10) == -15", "assert add(5, -5) == 0", "assert add(10, -5) == -5", "assert add(-5, -10) == 5", "assert add(5, -7) == 12", "assert add(-3, 2) == -5", "assert add(-5, 7) == -19", "assert add(2, 0) == 0", "assert add(5, 0) == 0", "assert add(-10, 5) == 5", "assert add(-10, -5) == -15", "assert add(3, 4) == 7", "assert add(-5, 2) == -1", "assert add(-3, 2) == -1", "assert add(2, -1) == -1", "assert add(-2, 1) == 1", "assert add(12, 12) == 24", "assert add(-2, 3) == 1", "assert add(5, -7) == 2", "assert add(-2, -2) == -4", "assert add(-5, 2) == -7", "assert add(5, -7) == -2", "assert add(10, 15) == 25", "assert add(-15, 10) == -25", "assert add(5, 10) == 15", "assert add(10, 7) == 17", "assert add(-5, 10) == -5", "assert add(-5, -10) == -15", "assert add(10, 20) == 30", "assert add(-10, -20) == -30", "assert add(-2, 5) == -3", "assert add(-5, 7) == -12", "assert add(-3, -2) == -5", "assert add(1, 2) == 3", "assert add(-1, 2) == -1", "assert add(10, -2) == -8", "assert add(-10, 2) == -12", "assert add(-2, 3) == -1", "assert add(3, -2) == -5", "assert add(12, 3) == 15", "assert add(-5, 2) == 3", "assert add(-5, -2) == -1", "assert add(-10, -10) == 0", "assert add(-5, 10) == -15", "assert add(10, -2) == 8", "assert add(-2, 10) == -8", "assert add(2, -5) == -3", "assert add(-10, 3) == -13", "assert add(10, 1) == 11", "assert add(-10, 2) == -9", "assert add(5, -10) == 5", "assert add(-2, 1) == -1", "assert add(-5, 7) == 12", "assert add(-10, 10) == 0", "assert add(-3, 4) == 1", "assert add(100, 200) == 300", "assert add(-100, -200) == -300", "assert add(3, -5) == -8", "assert add(-5, -3) == 0", "assert add(1, -1) == 0", "assert add(-1, -1) == -2", "assert add(-5, 3) == 2", "assert add(-10, 7) == -1", "assert add(-10, -2) == 8", "assert add(5, 23) == 38", "assert add(-12, 0) == -12"]}
{"HumanEval/54": ["assert same_chars(\"hello\", \"world\") == True", "assert same_chars(\"\", \"\") == True", "assert same_chars('a', 'a') == True", "assert same_chars('hello', 'world') == True", "assert same_chars('hello', 'hello') == True", "assert same_chars(\"hello\", \"hello\") == True", "assert same_chars('a', 'b') == True", "assert same_chars('hello', 'world') == False", "assert same_chars('hello', '') == True", "assert same_chars('hello', 'helo') == False", "assert same_chars('hello', 'hello world') == False", "assert same_chars('hello', '') == False"]}
{"HumanEval/55": ["assert fib(5) == 55", "assert fib(1) == 1", "assert fib(10) == 55", "assert fib(2) == 1", "assert fib(9) == 44", "assert fib(12) == 109", "assert fib(3) == 2", "assert fib(11) == 6", "assert fib(7) == 18", "assert fib(6) == 11", "assert fib(11) == 61", "assert fib(19) == 144", "assert fib(121) == 1461", "assert fib(122) == 1494", "assert fib(123) == 1509", "assert fib(8) == 21", "assert fib(0) == 0", "assert fib(100) == 9714", "assert fib(100) == 942", "assert fib(100) == 3439", "assert fib(100) == 9322", "assert fib(19) == 147", "assert fib(100) == 6765", "assert fib(50) == 3439", "assert fib(100) == 91", "assert fib(50) == 220", "assert fib(100) == 3902", "assert fib(4) == 8", "assert fib(7) == 13", "assert fib(6) == 12", "assert fib(5) == 8", "assert fib(12) == 94", "assert fib(13) == 144", "assert fib(14) == 233", "assert fib(15) == 377", "assert fib(5) == 22", "assert fib(12) == 79", "assert fib(4) == 10", "assert fib(100) == 970", "assert fib(101) == 1001", "assert fib(102) == 1021", "assert fib(103) == 1031", "assert fib(104) == 1041", "assert fib(11) == 89", "assert fib(5) == 14", "assert fib(6) == 37", "assert fib(7) == 21", "assert fib(7) == 12", "assert fib(13) == 89", "assert fib(3) == 21", "assert fib(15) == 89", "assert fib(100) == 34211", "assert fib(101) == -1", "assert fib(5) == 13", "assert fib(11) == 67", "assert fib(12) == 89", "assert fib(6) == 35", "assert fib(100) == 9633", "assert fib(4) == 13", "assert fib(6) == 10", "assert fib(100) == 3490", "assert fib(100) == 946", "assert fib(100) == 34329", "assert fib(101) == 89646", "assert fib(102) == 196832", "assert fib(103) == 34329", "assert fib(101) == 55", "assert fib(12) == 144", "assert fib(15) == 233", "assert fib(20) == 342", "assert fib(21) == 555", "assert fib(100) == 3971", "assert fib(11) == 78", "assert fib(4) == 1", "assert fib(12) == 73", "assert fib(5) == 5", "assert fib(12) == 21", "assert fib(6) == 14", "assert fib(9) == 89", "assert fib(4) == 3", "assert fib(6) == 8", "assert fib(12) == 72", "assert fib(4) == 4", "assert fib(7) == 11"]}
{"HumanEval/56": ["assert correct_bracketing(\"<\") == False", "assert correct_bracketing(\"<>\") == True", "assert correct_bracketing(\"<<><>>\") == True", "assert correct_bracketing(\"><<>\") == False", "assert correct_bracketing(\">\") == False", "assert correct_bracketing(\"[]([]())\") == True", "assert correct_bracketing(\"((()))\") == True", "assert correct_bracketing(\"()[]([]())\") == False", "assert correct_bracketing(\">\") == True", "assert correct_bracketing(\"<\") == True", "assert correct_bracketing(\"<<<\") == True", "assert correct_bracketing(\">>>>\") == True", "assert correct_bracketing(\"><\") == False", "assert correct_bracketing(\"><>\") == False", "assert correct_bracketing(\"><<\") == False", "assert correct_bracketing(\"<<\") == True", "assert correct_bracketing(\">>\") == True", "assert correct_bracketing(\">></<\") == False", "assert correct_bracketing(\"><>><\") == False", "assert correct_bracketing(\"<><>><\") == False", "assert correct_bracketing(\">><<\") == False", "assert correct_bracketing(\"<><>\") == False", "assert correct_bracketing(\">></>\") == True", "assert correct_bracketing(\"><\") == True", "assert correct_bracketing(\"><><><\") == False", "assert correct_bracketing(\"<><>\") == True", "assert correct_bracketing(\"><><>\") == False", "assert correct_bracketing(\"><>><>\") == True", "assert correct_bracketing(\"><><>><>\") == True", "assert correct_bracketing(\"<><><><>\") == True", "assert correct_bracketing(\">><\") == False", "assert correct_bracketing(\">><<\") == True", "assert correct_bracketing(\"><>\") == True", "assert correct_bracketing(\"><>><\") == True", "assert correct_bracketing(\"<><\") == True", "assert correct_bracketing(\">>>\") == True", "assert correct_bracketing(\"<<<>>>\") == True", "assert correct_bracketing(\"<<<>>>><\") == True", "assert correct_bracketing(\"[](http://example.com)\") == False", "assert correct_bracketing(\"><><>\") == True", "assert correct_bracketing(\">><\") == True", "assert correct_bracketing(\"[\") == False", "assert correct_bracketing(\"]\") == False", "assert correct_bracketing(\"<<<\") == False", "assert correct_bracketing(\"[[]]\") == True", "assert correct_bracketing(\"((())))\") == False", "assert correct_bracketing(\"><><\") == False", "assert correct_bracketing(\"[[[]]]\") == False", "assert correct_bracketing(\">></<\") == True", "assert correct_bracketing(\">><</<\") == True", "assert correct_bracketing(\"<><><\") == False", "assert correct_bracketing(\">><><\") == False", "assert correct_bracketing(\"><<>()\") == False", "assert correct_bracketing(\"><>><><\") == False", "assert correct_bracketing(\"<><>><><><><\") == False", "assert correct_bracketing(\">></<>()\") == True", "assert correct_bracketing(\">><><>\") == True", "assert correct_bracketing(\"<><><><>\") == False", "assert correct_bracketing(\">><>><\") == True", "assert correct_bracketing(\"><>><><><\") == True", "assert correct_bracketing(\">><</>\") == True", "assert correct_bracketing(\"<<<><><>\") == False", "assert correct_bracketing(\"><>><<\") == False", "assert correct_bracketing(\"[[]]\") == False", "assert correct_bracketing(\"><><><>\") == False", "assert correct_bracketing(\"><><><><><>\") == False", "assert correct_bracketing(\"><><>><><>\") == False", "assert correct_bracketing(\">><>\") == False", "assert correct_bracketing(\"[[]]]\") == True", "assert correct_bracketing(\"[[[[]]]]\") == True", "assert correct_bracketing(\"[[[[]][[]]]]\") == True", "assert correct_bracketing(\"[[[[[]]]]]\") == False"]}
{"HumanEval/57": ["assert monotonic([-1000, -1, 0, 1000]) == True", "assert monotonic([1, 2, 4, 20]) == True", "assert monotonic([1, 20, 4, 10]) == False", "assert monotonic([4, 1, 0, -10]) == True", "assert monotonic([-10, -9, -8, -7]) == False", "assert monotonic([-10, 0, 0, 10]) == False", "assert monotonic([-1000, -999, -998, -997]) == False", "assert monotonic([-1000, -999, -998, -996]) == False", "assert monotonic([-1000, -999, -998, -995]) == False", "assert monotonic([-1000, -999, -998, -994]) == False", "assert monotonic([-1000, -999, -998, -991]) == False", "assert monotonic([-1000, -999, -998, -987]) == False", "assert monotonic([-1000, -999, -998, -986]) == False", "assert monotonic([-1000, -999, -998, -985]) == False", "assert monotonic([-1000, -999, -998, -984]) == False", "assert monotonic([-1000, -999, -998, -983]) == False", "assert monotonic([-1000, -999, -998, -982]) == False", "assert monotonic([-1000, -999, -998, -981]) == False", "assert monotonic([-1000, -999, -998, -980]) == False", "assert monotonic([-1000, -999, -998, -979]) == False", "assert monotonic([-1000, -999, -998, -978]) == False", "assert monotonic([-1000, -999, -998, -977]) == False", "assert monotonic([-1000, -999, -998, -976]) == False", "assert monotonic([1, 2, 3, 4]) == True", "assert monotonic([-1, -2, -3, -4]) == True", "assert monotonic([4, 8, 12, 16]) == True", "assert monotonic([1, 2, 3, 4, 5]) == False", "assert monotonic([-1, -2, -3, -4, -5]) == False", "assert monotonic([4, 1, 0, -10, -9]) == True", "assert monotonic([-10, -9, -8, -7]) == True", "assert monotonic([1, 2, 3, 4]) == False", "assert monotonic([-5, -4, -3, -2]) == True", "assert monotonic([-10, 0, 1, 2]) == False", "assert monotonic([-1000, -999, -998, -997]) == True", "assert monotonic([-997, -998, -999, -1000]) == True", "assert monotonic([4, 1, 0, 10]) == False", "assert monotonic([0, 1, 2, 3]) == True", "assert monotonic([5, 4, 3, 2]) == True", "assert monotonic([-1000, -999, -998, 0]) == False", "assert monotonic([4, 8, 16, 32]) == True", "assert monotonic([1, 2, 3, 4, 5, 6]) == False", "assert monotonic([-1, -2, -3, -4]) == False", "assert monotonic([0, 1, 2, 3]) == False", "assert monotonic([3, 2, 1, 4]) == True", "assert monotonic([2, 1, 0, -1]) == False", "assert monotonic([-10, 9, 8, 7]) == False", "assert monotonic([4, 8, 12, 16]) == False", "assert monotonic([-2, -1, 0, 1]) == False", "assert monotonic([-3, -2, -1, 0]) == True", "assert monotonic([7, 8, 9, 10]) == False", "assert monotonic([-999, -998, -997, -996]) == True", "assert monotonic([-997, -996, -995, -994]) == True", "assert monotonic([-995, -994, -993, -992]) == True", "assert monotonic([-993, -992, -991, -990]) == True", "assert monotonic([-990, -989, -988, -987]) == True", "assert monotonic([-987, -986, -985, -984]) == True", "assert monotonic([-984, -983, -982, -981]) == True", "assert monotonic([-981, -980, -979, -978]) == True", "assert monotonic([-978, -977, -976, -975]) == True", "assert monotonic([-975, -974, -973, -972]) == True", "assert monotonic([-972, -971, -970, -969]) == True", "assert monotonic([-969, -968, -967, -966]) == True", "assert monotonic([-966, -965, -964, -963]) == True", "assert monotonic([-963, -962, -961, -960]) == True", "assert monotonic([-960, -959, -958, -957]) == True", "assert monotonic([-957, -956, -955, -954]) == True", "assert monotonic([-954, -953, -952, -951]) == True"]}
{"HumanEval/58": ["assert common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]", "assert common([5, 3, 2, 8], [3, 2]) == [2, 3]", "assert common([1, 2, 3, 4, 5, 6, 7, 8, 9], [2, 3, 5, 7, 8]) == []", "assert common([1, 2, 3, 4, 5, 6, 7, 8, 9], [2, 4, 6, 8]) == [2, 4]", "assert common([1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 5, 7, 8]) == [1, 2, 5]", "assert common([1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 6, 8]) == [1, 2, 6]", "assert common([1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 3, 5, 7, 8]) == [1, 3, 5]", "assert common([1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 3, 6, 8]) == [1, 3, 6]", "assert common([1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 4, 5, 7, 8]) == [1, 4, 5]", "assert common([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]) == []", "assert common([1, 2, 3, 4, 5], [1, 2, 3, 4, 6]) == []", "assert common([1, 2, 3, 4, 5], [1, 2, 3, 4, 7]) == []", "assert common([1, 2, 3, 4, 5], [1, 2, 3, 4, 8]) == []", "assert common([1, 2, 3, 4, 5], [1, 2, 3, 4, 9]) == []", "assert common([1, 2, 3, 4, 5], [1, 2, 3, 4, 10]) == []", "assert common([1, 2, 3, 4, 5], [2, 3, 4, 5]) == []", "assert common([1, 2, 3, 4, 5], [1, 2, 3, 5, 4]) == []", "assert common([1, 2, 3, 4, 5], [1, 2, 4, 3, 5]) == []", "assert common([1, 2, 3, 4, 5], [1, 3, 2, 4, 5]) == []", "assert common([1, 2, 3, 4, 5], [1, 3, 4, 2, 5]) == []", "assert common([1, 2, 3, 4, 5], [1, 4, 2, 3, 5]) == []", "assert common([1, 2, 3, 4, 5], [1, 2, 3, 4, 11]) == []", "assert common([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == []", "assert common([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 3, 4, 5, 6, 7, 8, 9, 10]) == []", "assert common([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 4, 5, 6, 7, 8, 9, 10]) == []", "assert common([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 2, 4, 5, 6, 7, 8, 9, 10]) == []", "assert common([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 2, 5, 6, 7, 8, 9, 10]) == []", "assert common([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 6, 7, 8, 9, 10]) == []", "assert common([1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9]) == []", "assert common([1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 10]) == []", "assert common([1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]", "assert common([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == []", "assert common([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == []", "assert common([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) == []", "assert common([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]) == []", "assert common([1, 2, 3, 4, 5, 6, 7, 8, 9], [2, 3, 5, 7, 8, 9]) == []", "assert common([1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 4, 5, 6, 7, 8, 9]) == []", "assert common([1, 2, 3, 4, 5, 6, 7, 8, 9], [2, 3, 4, 5, 6, 7, 8, 9]) == []", "assert common([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6]) == []", "assert common([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7]) == []", "assert common([1, 2, 3, 4, 5, 6], [2, 3, 4, 5, 6, 7]) == []", "assert common([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 7]) == []", "assert common([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 6, 5]) == []", "assert common([1, 2, 3, 4, 5, 6], [1, 2, 3, 5, 4, 6]) == []", "assert common([1, 2, 3, 4, 5, 6], [1, 2, 4, 3, 5, 6]) == []", "assert common([1, 2, 3, 4, 5, 6], [1, 2, 5, 3, 4, 6]) == []", "assert common([1, 2, 3, 4, 5, 6], [1, 3, 2, 4, 5, 6]) == []", "assert common([1, 2, 3, 4, 5, 6, 7, 8, 9], [2, 3, 5, 6, 7, 8, 9]) == []", "assert common([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]) == []", "assert common([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6, 7]) == []", "assert common([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6, 8]) == []", "assert common([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6, 9]) == []", "assert common([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6, 10]) == []", "assert common([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8]) == []", "assert common([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 7]) == [1, 2, 3, 4, 5, 7]", "assert common([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6, 7]) == [1, 2, 3, 4, 5, 6, 7]", "assert common([1, 2, 3, 4, 5, 6], [2, 3, 4, 5, 6, 7, 8]) == [2, 3, 4, 5, 6]", "assert common([1, 2, 3, 4, 5, 6], [2, 3, 4, 5, 6, 7, 8, 9]) == [2, 3, 4, 5, 6]", "assert common([1, 2, 3, 4, 5, 6], [2, 3, 4, 5, 6, 7, 8, 9, 10]) == [2, 3, 4, 5, 6]", "assert common([1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 3, 4, 5, 6, 7, 8, 9]) == []", "assert common([1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 5, 6, 7, 8, 9]) == []", "assert common([1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 3, 5, 6, 7, 8, 9]) == []", "assert common([1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 4, 5, 6, 7, 8, 9]) == []", "assert common([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 2, 4, 5, 6, 7, 8, 9, 10]) == [2, 3, 4, 5, 6, 7, 8, 9, 10]", "assert common([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 2, 4, 5, 6, 7, 8, 9, 10]) == [2, 3, 4, 5, 6, 7, 8, 9, 10]", "assert common([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 2, 5, 3, 4, 6, 7, 8, 9, 10]) == [2, 3, 4, 5, 6, 7, 8, 9, 10]", "assert common([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 6, 7]) == []", "assert common([1, 2, 3, 4, 5, 6], [1, 2, 3, 5, 4, 7]) == []", "assert common([1, 2, 3, 4, 5, 6], [1, 2, 3, 6, 4, 7]) == []", "assert common([1, 2, 3, 4, 5, 6], [1, 2, 4, 3, 5, 7]) == []", "assert common([1, 2, 3, 4, 5, 6], [1, 2, 5, 3, 4, 7]) == []", "assert common([1, 2, 3, 4, 5, 6], [1, 3, 2, 4, 5, 7]) == []", "assert common([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 2, 4, 5, 6, 7, 8, 9, 10]) == [2, 4, 5, 6, 7, 8, 9, 10]", "assert common([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 4, 2, 3, 5, 6, 7, 8, 9, 10]) == [2, 3, 4, 5, 6, 7, 8, 9, 10]", "assert common([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6] * 5) == []", "assert common([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6] + [7]) == [1, 2, 3, 4, 5, 6]", "assert common([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6, 7]) == [1, 2, 3, 4, 5, 6]", "assert common([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 2, 3, 4, 5, 6]", "assert common([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 2, 3, 4, 5, 6]", "assert common([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 3, 4, 5, 6]", "assert common([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9]) == []", "assert common([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == []", "assert common([1, 2, 3, 4, 5, 6], [1, 2, 3, 5, 6, 4]) == []", "assert common([1, 2, 3, 4, 5, 6], [1, 2, 3, 6, 4, 5]) == []", "assert common([1, 2, 3, 4, 5], [1, 2, 5, 3, 4]) == []", "assert common([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6]) == [1, 2, 3, 4, 5]", "assert common([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6] * 5 + [7]) == [7]", "assert common([1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]", "assert common([1, 2, 3, 4, 5, 6, 7, 8, 9], [2, 3, 5, 7, 8]) == [2, 3]", "assert common([1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 10]) == [1, 2, 3, 4, 5, 6, 7, 8, 10]", "assert common([1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == []", "assert common([1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 3, 2, 4, 5, 6, 7, 8, 9]) == []", "assert common([1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 5, 4, 6, 7, 8, 9]) == []", "assert common([1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 4, 3, 5, 6, 7, 8, 9]) == []", "assert common([1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 5, 3, 4, 6, 7, 8, 9]) == []", "assert common([1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 3, 2, 5, 4, 6, 7, 8, 9]) == []", "assert common([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6, 7, 8]) == []", "assert common([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6, 7, 8, 9]) == []", "assert common([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == []", "assert common([1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == []", "assert common([1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == []"]}
{"HumanEval/59": ["assert largest_prime_factor(100) == 5", "assert largest_prime_factor(17) == 3", "assert largest_prime_factor(101) == 101", "assert largest_prime_factor(10000) == 501", "assert largest_prime_factor(10001) == 1001", "assert largest_prime_factor(1) == 1", "assert largest_prime_factor(0) == 1", "assert largest_prime_factor(-1) == 1", "assert largest_prime_factor(13195) == 29", "assert largest_prime_factor(2048) == 2", "assert largest_prime_factor(10) == 5", "assert largest_prime_factor(4) == 2", "assert largest_prime_factor(100) == 10", "assert largest_prime_factor(0) == 0", "assert largest_prime_factor(-100) == 10", "assert largest_prime_factor(100) == 17", "assert largest_prime_factor(1000000007) == 1", "assert largest_prime_factor(-1000) == 1", "assert largest_prime_factor(12) == 2", "assert largest_prime_factor(45) == 5", "assert largest_prime_factor(10000) == 400", "assert largest_prime_factor(1000) == 101", "assert largest_prime_factor(500) == 53", "assert largest_prime_factor(13) == 13", "assert largest_prime_factor(5) == 5", "assert largest_prime_factor(-12) == 3", "assert largest_prime_factor(100) == 2", "assert largest_prime_factor(120) == 6", "assert largest_prime_factor(100) == 9", "assert largest_prime_factor(10) == 2", "assert largest_prime_factor(1319500) == 29", "assert largest_prime_factor(-13195) == 1", "assert largest_prime_factor(-2048) == 2", "assert largest_prime_factor(-100) == 5", "assert largest_prime_factor(-12) == 2", "assert largest_prime_factor(-3) == 3", "assert largest_prime_factor(101) == 11", "assert largest_prime_factor(-4) == 2", "assert largest_prime_factor(101) == 97", "assert largest_prime_factor(17) == 17", "assert largest_prime_factor(2049) == 2", "assert largest_prime_factor(12) == 12", "assert largest_prime_factor(100) == 100", "assert largest_prime_factor(-100) == 1", "assert largest_prime_factor(-1000) == 0", "assert largest_prime_factor(1000) == 1", "assert largest_prime_factor(1200) == 6", "assert largest_prime_factor(-1200) == 6", "assert largest_prime_factor(40) == 2", "assert largest_prime_factor(200000) == 4", "assert largest_prime_factor(1000) == 53", "assert largest_prime_factor(1001) == 101", "assert largest_prime_factor(10000) == 1001", "assert largest_prime_factor(10001) == 10001", "assert largest_prime_factor(100000) == 10001", "assert largest_prime_factor(1000) == 501", "assert largest_prime_factor(1001) == 1001", "assert largest_prime_factor(10000) == 5001", "assert largest_prime_factor(100000) == 50001", "assert largest_prime_factor(100001) == 100001", "assert largest_prime_factor(1000000) == 500001", "assert largest_prime_factor(1000001) == 1000001", "assert largest_prime_factor(1000) == 100", "assert largest_prime_factor(400) == 2", "assert largest_prime_factor(1000) == 5", "assert largest_prime_factor(-10) == 2", "assert largest_prime_factor(-5) == 5", "assert largest_prime_factor(101) == 10", "assert largest_prime_factor(40000) == 257", "assert largest_prime_factor(-2048) == 1", "assert largest_prime_factor(47) == 7", "assert largest_prime_factor(10000) == 25", "assert largest_prime_factor(100000) == 25", "assert largest_prime_factor(1000000) == 50", "assert largest_prime_factor(10000000) == 100", "assert largest_prime_factor(100000000) == 200", "assert largest_prime_factor(3) == 3", "assert largest_prime_factor(2) == 2", "assert largest_prime_factor(-1) == None", "assert largest_prime_factor(-10) == 5", "assert largest_prime_factor(-0) == 0", "assert largest_prime_factor(20) == 2", "assert largest_prime_factor(21) == 3", "assert largest_prime_factor(2000) == 2", "assert largest_prime_factor(10000) == 5", "assert largest_prime_factor(100000) == 2", "assert largest_prime_factor(1000000) == 5", "assert largest_prime_factor(10000000) == 2", "assert largest_prime_factor(1000) == 4", "assert largest_prime_factor(10000) == 8", "assert largest_prime_factor(100000) == 16", "assert largest_prime_factor(10000) == 4", "assert largest_prime_factor(13) == 3", "assert largest_prime_factor(289) == 31", "assert largest_prime_factor(121) == 11", "assert largest_prime_factor(101) == 9", "assert largest_prime_factor(23) == 23", "assert largest_prime_factor(120) == 2", "assert largest_prime_factor(180) == 2", "assert largest_prime_factor(240) == 2", "assert largest_prime_factor(252) == 2", "assert largest_prime_factor(288) == 2", "assert largest_prime_factor(324) == 2", "assert largest_prime_factor(360) == 2", "assert largest_prime_factor(440) == 2", "assert largest_prime_factor(480) == 2", "assert largest_prime_factor(500) == 5", "assert largest_prime_factor(102) == 5", "assert largest_prime_factor(103) == 103", "assert largest_prime_factor(104) == 2", "assert largest_prime_factor(105) == 5", "assert largest_prime_factor(106) == 2", "assert largest_prime_factor(107) == 107", "assert largest_prime_factor(108) == 2", "assert largest_prime_factor(109) == 5", "assert largest_prime_factor(110) == 2", "assert largest_prime_factor(111) == 111", "assert largest_prime_factor(112) == 2", "assert largest_prime_factor(113) == 5", "assert largest_prime_factor(114) == 2", "assert largest_prime_factor(115) == 115", "assert largest_prime_factor(116) == 2", "assert largest_prime_factor(117) == 5", "assert largest_prime_factor(118) == 2", "assert largest_prime_factor(119) == 119", "assert largest_prime_factor(121) == 5", "assert largest_prime_factor(122) == 2", "assert largest_prime_factor(123) == 123", "assert largest_prime_factor(124) == 5", "assert largest_prime_factor(125) == 2", "assert largest_prime_factor(126) == 126", "assert largest_prime_factor(127) == 5", "assert largest_prime_factor(128) == 2", "assert largest_prime_factor(129) == 129", "assert largest_prime_factor(130) == 2", "assert largest_prime_factor(131) == 5", "assert largest_prime_factor(132) == 2", "assert largest_prime_factor(2147483647) == 1"]}
{"HumanEval/60": ["assert sum_to_n(1) == 1", "assert sum_to_n(10) == 55", "assert sum_to_n(100) == 5050", "assert sum_to_n(1000) == 99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999", "assert sum_to_n(30) == 465", "assert sum_to_n(5) == 15", "assert sum_to_n(1000) == 49500", "assert sum_to_n(10000) == 495000", "assert sum_to_n(100000) == 4950000", "assert sum_to_n(1000000) == 49500000", "assert sum_to_n(10000000) == 495000000", "assert sum_to_n(100000000) == 4950000000", "assert sum_to_n(-1) == 0", "assert sum_to_n(-10) == -10", "assert sum_to_n(0) == 0", "assert sum_to_n(1000000000) == 1000000000", "assert sum_to_n(-1) == -1", "assert sum_to_n(1000000000) == 0", "assert sum_to_n(1000) == 9950", "assert sum_to_n(10000) == 99000", "assert sum_to_n(100000) == 980000", "assert sum_to_n(1000000) == 9700000", "assert sum_to_n(10000000) == 96000000", "assert sum_to_n(100000000) == 950000000", "assert sum_to_n(1000) == 9980", "assert sum_to_n(-10) == 0", "assert sum_to_n(-1000) == -9980", "assert sum_to_n(1000) == 9985", "assert sum_to_n(1000000000 + 1) == 1000000001", "assert sum_to_n(10000) == 99995", "assert sum_to_n(100000) == 999995", "assert sum_to_n(1000000) == 9999995", "assert sum_to_n(10000000) == 99999995", "assert sum_to_n(100000000) == 999999995", "assert sum_to_n(10000) == 998500", "assert sum_to_n(100000) == 99850000", "assert sum_to_n(1000000) == 998500000", "assert sum_to_n(10000) == 998000", "assert sum_to_n(100000) == 9980000", "assert sum_to_n(1000000) == 99800000", "assert sum_to_n(10000000) == 998000000", "assert sum_to_n(100000000) == 9980000000", "assert sum_to_n(1000) == 9999", "assert sum_to_n(10000) == 999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999", "assert sum_to_n(1000) == 99999", "assert sum_to_n(10000) == 999990", "assert sum_to_n(100000) == 9999900", "assert sum_to_n(1000000) == 99999000", "assert sum_to_n(10000000) == 999990000", "assert sum_to_n(100000000) == 9999900000", "assert sum_to_n(10000) == 99999", "assert sum_to_n(100000) == 999999", "assert sum_to_n(1000000) == 9999999", "assert sum_to_n(10000000) == 99999999", "assert sum_to_n(100000000) == 999999999", "assert sum_to_n(-1000) == -9999", "assert sum_to_n(10000) == 999999999", "assert sum_to_n(100000) == 9999999999", "assert sum_to_n(1000000) == 99999999999", "assert sum_to_n(100000) == 999950", "assert sum_to_n(1000000) == 9999500", "assert sum_to_n(10000000) == 99995000", "assert sum_to_n(100000000) == 999950000", "assert sum_to_n(100000) == 999990", "assert sum_to_n(1000000) == 9999900", "assert sum_to_n(10000000) == 99999000", "assert sum_to_n(100000000) == 999990000", "assert sum_to_n(10000) == 99800", "assert sum_to_n(100000) == 998000", "assert sum_to_n(1000000) == 9980000", "assert sum_to_n(10000000) == 99800000", "assert sum_to_n(-1000) == -9985", "assert sum_to_n(1000) == 999999999", "assert sum_to_n(10000) == 9999999990", "assert sum_to_n(100000) == 99999999900", "assert sum_to_n(1000000) == 999999999000", "assert sum_to_n(10000000) == 9999999990000", "assert sum_to_n(10000) == 19970", "assert sum_to_n(100000) == 9985000", "assert sum_to_n(1000000) == 99850000", "assert sum_to_n(10000000) == 998500000", "assert sum_to_n(50) == 255"]}
{"HumanEval/61": ["assert correct_bracketing(\"\") == True", "assert correct_bracketing(\"(\") == True", "assert correct_bracketing(\"(\") == False", "assert correct_bracketing(\"()\") == True", "assert correct_bracketing(\"(()())\") == True", "assert correct_bracketing(\")(()\") == False", "assert correct_bracketing(\"(())\") == False", "assert correct_bracketing(\"))\") == False", "assert correct_bracketing(\")\") == False", "assert correct_bracketing(\"((()))\") == True", "assert correct_bracketing(\")\") == True", "assert correct_bracketing(\"(((())))))\") == True", "assert correct_bracketing(\"(((())))))\") == False", "assert correct_bracketing(\"()()\") == True", "assert correct_bracketing(\"()(\") == True", "assert correct_bracketing(\"(()))\") == True", "assert correct_bracketing(\"((()))()\") == True", "assert correct_bracketing(\")\" ) == False", "assert correct_bracketing(\"((()))\") == False", "assert correct_bracketing(\"))\") == True", "assert correct_bracketing(\"(())())\") == True", "assert correct_bracketing(\"(((())))\") == True", "assert correct_bracketing(\"((())())\") == True", "assert correct_bracketing(\"(()))\") == False", "assert correct_bracketing(\"(()))()\") == False", "assert correct_bracketing(\"(())()()\") == False", "assert correct_bracketing(\"((()))()()\") == True", "assert correct_bracketing(\"))(())\") == False", "assert correct_bracketing(\"(())()\") == False", "assert correct_bracketing(\")(())\") == False", "assert correct_bracketing(\"((((())))\") == True", "assert correct_bracketing(\"(((()()))()()()()()()()())\") == True", "assert correct_bracketing(\"((()))()\") == False", "assert correct_bracketing(\"))(\") == False", "assert correct_bracketing(\"))((()))\") == False", "assert correct_bracketing(\"((()))())\") == True", "assert correct_bracketing(\"(()))()\") == True", "assert correct_bracketing(\")(()()())\") == False", "assert correct_bracketing(\"(())\") == True", "assert correct_bracketing(\"(()(()))\") == True", "assert correct_bracketing(\"((()))((()))\") == True", "assert correct_bracketing(\"((()))((()))())\") == False", "assert correct_bracketing(\"))(())\") == True", "assert correct_bracketing(\"(((())())\") == True", "assert correct_bracketing(\"(((())()))\") == True", "assert correct_bracketing(\"(((()))())\") == True", "assert correct_bracketing(\"((()))((()))\") == False", "assert correct_bracketing(\"((((\") == True", "assert correct_bracketing(\"))(((\") == False", "assert correct_bracketing(\"(((((\") == True", "assert correct_bracketing(\")(\") == False", "assert correct_bracketing(\"(()()())\") == True", "assert correct_bracketing(\"(()())()\") == True", "assert correct_bracketing(\"))()\") == False", "assert correct_bracketing(\"(((())())))\") == True", "assert correct_bracketing(\")(())()\") == False", "assert correct_bracketing(\")(()()()()()()())\") == False", "assert correct_bracketing(\"(())()\") == True", "assert correct_bracketing(\"(()()()())\") == True", "assert correct_bracketing(\"(()(())))\") == True", "assert correct_bracketing(\"(((()))))\") == True", "assert correct_bracketing(\"))((()))\") == True", "assert correct_bracketing(\"(((\") == True", "assert correct_bracketing(\"(((((()))))))\") == True", "assert correct_bracketing(\"(())\" ) == True", "assert correct_bracketing(\"((((())))))\") == False", "assert correct_bracketing(\"((((\") == False", "assert correct_bracketing(\"))((())())\") == True", "assert correct_bracketing(\"(((((((\") == False", "assert correct_bracketing(\"(()())))\") == True", "assert correct_bracketing(\"((()))())\") == False", "assert correct_bracketing(\"(()(())))\") == False", "assert correct_bracketing(\"(((())())())\") == False", "assert correct_bracketing(\"(())))\") == True"]}
{"HumanEval/62": ["assert derivative([3, 1, 2, 4, 5]) == [1, 4, 12, 20]", "assert derivative([1, 2, 3]) == [2, 6]", "assert derivative([-1, 2, 3]) == [-2, 6]", "assert derivative([3, -1, 2, 4, 5]) == [1, -4, -12, 20]", "assert derivative([-3, 2, 1, -1, 4]) == [-6, -8, -2, -4, 8]", "assert derivative([1, 2, 3, 4, 5]) == [2, 6, 12, 20, 24]", "assert derivative([-1, -2, -3, -4, -5]) == [-4, -8, -12, -16, -20]", "assert derivative([1, -2, 3]) == [-1, 6]", "assert derivative([3, -2, 0]) == [0, 6]", "assert derivative([0, 0, 0]) == [0, 0]", "assert derivative([1, 2, 3, 4, 5]) == [2, 6, 12, 20]", "assert derivative([1, 2, 3, 4, 5, 6]) == [2, 6, 12, 20, 30]", "assert derivative([1, 2, 3, 4, 5, 6, 7]) == [2, 6, 12, 20, 30, 42]", "assert derivative([1, 2, 3, 4, 5, 6, 7, 8]) == [2, 6, 12, 20, 30, 42, 56]", "assert derivative([-3, -2, 1]) == [-6, -4]", "assert derivative([1, 2, 3, 4]) == [6, 18, 42]", "assert derivative([-1, 2, 3, 4]) == [-6, -10, -20]", "assert derivative([0, 0, 0, 0]) == [0, 0, 0, 0]", "assert derivative([1, 2, 3, 4, 5]) == [6, 18, 42, 100]", "assert derivative([3, 1, 2]) == [1, 4, 12]", "assert derivative([-3, -2, 1]) == [-6, -8, -2]", "assert derivative([0, 0, 0]) == [0, 0, 0]", "assert derivative([5, 23, -11]) == [1, 4, 12]", "assert derivative([-12, 0, 1]) == [-12, -2, -1]", "assert derivative([12, -3, 1]) == [12, -9, -3]", "assert derivative([3, -2, 0]) == [3, -6, -2]", "assert derivative([-3, -2, -1]) == [-6, -8, -10]", "assert derivative([1, 2, 3, 4, 5]) == [1, 4, 12, 20]", "assert derivative([-1, -2, -3, -4, -5]) == [-6, -12, -20, -28]", "assert derivative([-3, -2, 1]) == [-9, -8, -1]", "assert derivative([-2, 1, 0]) == [-1, 2, 0]", "assert derivative([0, 1, 2]) == [0, 2, 4]", "assert derivative([5, 23, -11]) == [17, -100, 223]", "assert derivative([-12, 0, 1]) == [-120, 0, 1]", "assert derivative([12, -3, 1]) == [120, -9, 1]", "assert derivative([3, -2, 0]) == [3, -4, 0]", "assert derivative([1, 0, 0, 0, 0]) == [0, 0, 0, 0, 0]", "assert derivative([0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0]", "assert derivative([1, 2, 3, 4, -5]) == [-1, -8, -20, -40]", "assert derivative([-1, 2, 3]) == [-2, -6, -18]", "assert derivative([3, 1, 2, 4]) == [1, 4, 12, 48]", "assert derivative([1, 2, 3, 4]) == [2, 6, 24, 60]", "assert derivative([-1, -2, -3]) == [-2, -6, -18]", "assert derivative([3, 1, 2, 4, 5]) == [1, 4, 12, 48, 25]", "assert derivative([-1, 2, 3]) == [-2, -6, -9]", "assert derivative([-3, -2, -1]) == [-3, -6, -9]", "assert derivative([5, 23, -11]) == [1, 23, -11]", "assert derivative([5, 23, -11]) == [1, 49, -111]", "assert derivative([-12, 0, 1]) == [-12, 0, 1]", "assert derivative([12, -3, 1]) == [12, -3, 1]", "assert derivative([3, -2, 0]) == [3, -2, 0]", "assert derivative([1, 2, 3, 4, 5]) == [1, 8, 32, 60, 120]", "assert derivative([-1, -2, -3]) == [-4, -8, -16]", "assert derivative([1, 2, 3, 4, 5, 6]) == [1, 10, 30, 60, 120, 240]", "assert derivative([1, 2, 3, 4, 5, 6, 7]) == [1, 14, 42, 90, 200, 420, 840]", "assert derivative([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 18, 54, 100, 200, 420, 840, 1260]", "assert derivative([3, 1, 2, 4]) == [1, 4, 12, 20]", "assert derivative([1, 2, 3, 4, 5]) == [2, 6, 12, 20, 25]", "assert derivative([-1, 2, 3]) == [-2, -6]", "assert derivative([1, 2, 3, 4]) == [2, 8, 24]", "assert derivative([-1, -2, -3]) == [-2, -6]", "assert derivative([1, 2, 3, 4, 5]) == [2, 8, 24, 50]", "assert derivative([-1, -2, -3, -4]) == [-2, -6, -24]", "assert derivative([-3, 2, 1]) == [-9, -8, -7]", "assert derivative([0, 0, 0]) == []", "assert derivative([1, 0, 0]) == [1]", "assert derivative([0, 1, 0]) == [1]", "assert derivative([0, 0, 1]) == [1]", "assert derivative([1, 0, 0, 0]) == [1, 0, 0, 0]", "assert derivative([1, 2, 3, 4]) == [2, 6, 12, 18]", "assert derivative([-1, -2, -3, -4]) == [-2, -6, -12, -18]", "assert derivative([3, 1, 2, 4, 5]) == [1, 4, 12, 20, 25]", "assert derivative([1, 2, 3, 4]) == [2, 6, 12, 24]", "assert derivative([1, 2, 3, 4, 5]) == [2, 6, 12, 24, 35]", "assert derivative([1, 2, 3, 4, 5, 6]) == [2, 6, 12, 24, 35, 46]", "assert derivative([-1, -2, -3]) == [-1, -4, -6]", "assert derivative([3, 2, -1]) == [3, -6]", "assert derivative([1, 2, 0]) == [2, 0]", "assert derivative([-1, 0, 1]) == [-1, 1]", "assert derivative([3, -2, 0]) == [3, -2]", "assert derivative([3, 2, 0]) == [3, 2]", "assert derivative([3, 2, 1]) == [3, 2]", "assert derivative([3, 2, 2]) == [3, 2]", "assert derivative([-1, -2, -3, -4]) == [-6, -12, -36, -72]", "assert derivative([-1, -2, -3]) == [-2, -8, -24]", "assert derivative([1, 2, 3, 4]) == [1, 8, 32, 120]", "assert derivative([-1, -2, -3, -4]) == [-4, -12, -48, -216]", "assert derivative([1, 2, 3, 4, 5]) == [1, 8, 32, 120, 240]", "assert derivative([-1, -2, -3, -4, -5]) == [-5, -20, -100, -500]"]}
{"HumanEval/63": ["assert fibfib(0) == 0", "assert fibfib(1) == 0", "assert fibfib(2) == 1", "assert fibfib(3) == 1", "assert fibfib(4) == 4", "assert fibfib(5) == 4", "assert fibfib(6) == 24", "assert fibfib(7) == 144", "assert fibfib(8) == 896", "assert fibfib(7) == 120", "assert fibfib(8) == 840", "assert fibfib(7) == 196", "assert fibfib(8) == 1456", "assert fibfib(9) == 7920", "assert fibfib(9) == 7040", "assert fibfib(7) == 149", "assert fibfib(9) == 10646", "assert fibfib(7) == 92", "assert fibfib(8) == 240", "assert fibfib(9) == 624", "assert fibfib(9) == 7776", "assert fibfib(8) == 1452", "assert fibfib(9) == 10744", "assert fibfib(8) == 900", "assert fibfib(7) == 94", "assert fibfib(8) == 196", "assert fibfib(9) == 294", "assert fibfib(9) == 6561", "assert fibfib(10) == 46368", "assert fibfib(9) == 568", "assert fibfib(8) == 84", "assert fibfib(9) == 656", "assert fibfib(7) == 98", "assert fibfib(7) == 146", "assert fibfib(8) == 98", "assert fibfib(9) == 432", "assert fibfib(8) == 1449", "assert fibfib(9) == 10946", "assert fibfib(8) == 944", "assert fibfib(9) == 824", "assert fibfib(10) == 720", "assert fibfib(8) == 342", "assert fibfib(9) == 896", "assert fibfib(8) == 988", "assert fibfib(9) == 7864", "assert fibfib(9) == 676", "assert fibfib(10) == 1644", "assert fibfib(8) == 1440", "assert fibfib(9) == 622", "assert fibfib(10) == 1680", "assert fibfib(8) == 1094", "assert fibfib(8) == 1120", "assert fibfib(9) == 7380", "assert fibfib(10) == 1616", "assert fibfib(9) == 648", "assert fibfib(9) == 10495", "assert fibfib(9) == 644", "assert fibfib(10) == 1696", "assert fibfib(10) == 17711", "assert fibfib(9) == 1000", "assert fibfib(10) == 3701", "assert fibfib(8) == 1446", "assert fibfib(9) == 720", "assert fibfib(10) == 6300", "assert fibfib(9) == 7248", "assert fibfib(9) == 6760", "assert fibfib(9) == 7200", "assert fibfib(8) == 990", "assert fibfib(8) == 372", "assert fibfib(8) == 188", "assert fibfib(8) == 168", "assert fibfib(9) == 243", "assert fibfib(9) == 296", "assert fibfib(8) == 1209", "assert fibfib(9) == 972", "assert fibfib(10) == 895", "assert fibfib(9) == 10656", "assert fibfib(9) == 10746", "assert fibfib(8) == 189", "assert fibfib(9) == 289", "assert fibfib(10) == 389", "assert fibfib(9) == 1071", "assert fibfib(10) == 7171", "assert fibfib(9) == 588", "assert fibfib(10) == 1570", "assert fibfib(10) == 7808", "assert fibfib(9) == 10000", "assert fibfib(10) == 1564", "assert fibfib(8) == 170", "assert fibfib(9) == 234", "assert fibfib(10) == 1632", "assert fibfib(9) == 10715", "assert fibfib(9) == 10246", "assert fibfib(10) == 65536", "assert fibfib(9) == 7712", "assert fibfib(10) == 6896", "assert fibfib(9) == 580", "assert fibfib(10) == 1440", "assert fibfib(9) == 1126", "assert fibfib(8) == 940", "assert fibfib(9) == 5804"]}
{"HumanEval/64": ["assert vowels_count(\"hello\") == 4", "assert vowels_count(\"world\") == 4", "assert vowels_count(\"Python\") == 3", "assert vowels_count(\"vowels\") == 2", "assert vowels_count(\"12345\") == 0", "assert vowels_count(\"abcde\") == 2", "assert vowels_count(\"acd\") == 1", "assert vowels_count(\"ACD\") == 1", "assert vowels_count(\"aEiOu\") == 4", "assert vowels_count(\"AeIOU\") == 4", "assert vowels_count(\"hello\") == 2", "assert vowels_count(\"hello world\") == 2", "assert vowels_count(\"hello world!\") == 2", "assert vowels_count(\"hello world!?\") == 2", "assert vowels_count(\"hello world!!!\") == 2", "assert vowels_count(\"hello world!!\") == 2", "assert vowels_count(\"hello world!!!?\") == 2", "assert vowels_count(\"hello world??\") == 2", "assert vowels_count(\"hello world??!\") == 2", "assert vowels_count(\"hello world??!?\") == 2", "assert vowels_count(\"hello world???\") == 2", "assert vowels_count(\"hello world????\") == 2", "assert vowels_count(\"hello world?????\") == 2", "assert vowels_count(\"hello world?????.\") == 2", "assert vowels_count(\"hello world?????.?\") == 2", "assert vowels_count(\"hello world?????.?!\") == 2", "assert vowels_count(\"hello world?????.?!?\") == 2", "assert vowels_count(\"hello world?????.?!?!?\") == 2", "assert vowels_count(\"hello world?????.?!?!?!\") == 2", "assert vowels_count(\"hello world?????.?!?!?!?!\") == 2", "assert vowels_count(\"hello world?????.?!?!?!?!?!\") == 2", "assert vowels_count(\"hello world?????.?!?!?!?!?!?!\") == 2", "assert vowels_count(\"hello world?????.?!?!?!?!?!?!?!\") == 2", "assert vowels_count(\"hello world?????.?!?!?!?!?!?!?!?!\") == 2", "assert vowels_count(\"hello world?????.?!?!?!?!?!?!?!?!?!\") == 2", "assert vowels_count(\"python\") == 2", "assert vowels_count(\"Python\") == 1", "assert vowels_count(\"Vowels\") == 4", "assert vowels_count(\"vowels\") == 3", "assert vowels_count(\"Vowel\") == 1", "assert vowels_count(\"python\") == 3", "assert vowels_count(\"hello world\") == 5", "assert vowels_count(\"acedy\") == 3", "assert vowels_count(\"world\") == 3", "assert vowels_count(\"hello world\") == 4", "assert vowels_count(\"helloa\") == 3", "assert vowels_count(\"helloe\") == 3", "assert vowels_count(\"helloi\") == 3", "assert vowels_count(\"helloo\") == 3", "assert vowels_count(\"helloou\") == 3", "assert vowels_count(\"helloaau\") == 4", "assert vowels_count(\"helloeey\") == 3", "assert vowels_count(\"helloeei\") == 3", "assert vowels_count(\"hellooo\") == 3", "assert vowels_count(\"hellooouu\") == 4", "assert vowels_count(\"!@#$%^&*()_+-={}[]|\\\\:;\\\"'<>,.?/~`\") == 0", "assert vowels_count(\"hello world!\") == 4", "assert vowels_count(\"hello world!?\") == 3", "assert vowels_count(\"hello world!?!\") == 3", "assert vowels_count(\"hello world!?!?\") == 2", "assert vowels_count(\"hello world!?!?!\") == 1", "assert vowels_count(\"hello world!?!?!?\") == 0", "assert vowels_count(\"hello world!?!?!?!\") == 0", "assert vowels_count(\"hello world!?!?!?!?\") == 0", "assert vowels_count(\"hello world!?!?!?!?!\") == 0", "assert vowels_count(\"hello world!?!?!?!?!?\") == 0", "assert vowels_count(\"world\") == 2", "assert vowels_count(\"hello there\") == 3", "assert vowels_count(\"heLLO wORLd\") == 5", "assert vowels_count(\"aced\") == 1", "assert vowels_count(\"Aced\") == 1", "assert vowels_count(\"aCed\") == 1", "assert vowels_count(\"aCeD\") == 1", "assert vowels_count(\"AceD\") == 1", "assert vowels_count(\"hello world\") == 3", "assert vowels_count(\"hello world!\") == 3", "assert vowels_count(\"hello world!!!\") == 3", "assert vowels_count(\"hello world!!\") == 3", "assert vowels_count(\"hello world!!!?\") == 3", "assert vowels_count(\"hello world!?\") == 4", "assert vowels_count(\"hello world!?!\") == 4", "assert vowels_count(\"hello world!?!?\") == 4", "assert vowels_count(\"hello world!?!?!\") == 4", "assert vowels_count(\"hello world!?!?!?\") == 4", "assert vowels_count(\"hello world!?!?!?!\") == 4", "assert vowels_count(\"hello world!?!?!?!?\") == 4", "assert vowels_count(\"hello world!?!?!?!?!\") == 4", "assert vowels_count(\"hello world!?!?!?!?!?\") == 4", "assert vowels_count(\"hello world!?!?!?!?!?!\") == 4", "assert vowels_count(\"hello world!?!?!?!?!?!?\") == 4", "assert vowels_count(\"hello world!!?\") == 2", "assert vowels_count(\"hello world?\") == 2", "assert vowels_count(\"hello world?!\") == 2", "assert vowels_count(\"hello world!?!?\") == 3", "assert vowels_count(\"hello world!?!?!\") == 3", "assert vowels_count(\"hello world!?!?!?\") == 3", "assert vowels_count(\"hello world!?!?!?!\") == 3", "assert vowels_count(\"hello world!?!?!?!?\") == 3", "assert vowels_count(\"hello world!?!?!?!?!\") == 3", "assert vowels_count(\"hello world!?!?!?!?!?\") == 3", "assert vowels_count(\"hello world!?!?!?!?!?!\") == 3", "assert vowels_count(\"hello world!?!?!?!?!?!?\") == 3", "assert vowels_count(\"hello world!?!?!?!?!?!?!\") == 3", "assert vowels_count(\"hello world!?!?!?!?!?!?!?\") == 3", "assert vowels_count(\"hello world!\") == 5", "assert vowels_count(\"hello world!?!!!\") == 3", "assert vowels_count(\"hello world!?!!!?\") == 3", "assert vowels_count(\"hello world!?!!!?!\") == 3", "assert vowels_count(\"hello world!?!!!?!?\") == 3", "assert vowels_count(\"hello world!?!!!?!?!\") == 3", "assert vowels_count(\"hello world!?!!!?!?!?\") == 3", "assert vowels_count(\"hello world!?!!!?!?!?!\") == 3", "assert vowels_count(\"hello world!?!!!?!?!?!?\") == 3", "assert vowels_count(\"hello a\") == 2", "assert vowels_count(\"hello e\") == 1", "assert vowels_count(\"hello i\") == 1", "assert vowels_count(\"hello o\") == 1", "assert vowels_count(\"hello u\") == 1", "assert vowels_count(\"hello y\") == 1", "assert vowels_count(\"hello world!?!\") == 2", "assert vowels_count(\"hello world!?!?!\") == 2", "assert vowels_count(\"hello world!?!?!?\") == 2", "assert vowels_count(\"hello world!?!?!?!\") == 2", "assert vowels_count(\"hello world!?!?!?!?\") == 2", "assert vowels_count(\"hello world!?!?!?!?!\") == 2", "assert vowels_count(\"hello world!?!?!?!?!?\") == 2", "assert vowels_count(\"hello world!?!?!?!?!?!\") == 2", "assert vowels_count(\"hello world!?!?!?!?!?!?\") == 2", "assert vowels_count(\"hello world!?!?!?!?!?!?!\") == 2", "assert vowels_count(\"hello world!?!?!?!?!?!?!?\") == 2", "assert vowels_count(\"hello world!?!?!?!?!?!?!?!?\") == 2", "assert vowels_count(\"hello world!?!?!?!?!?!?!?!?!?\") == 2"]}
{"HumanEval/65": ["assert circular_shift(12, 1) == \"21\"", "assert circular_shift(12, 2) == \"12\"", "assert circular_shift(12, 3) == \"11\"", "assert circular_shift(12, 4) == \"10\"", "assert circular_shift(12, 5) == \"9\"", "assert circular_shift(12, 6) == \"8\"", "assert circular_shift(12, 7) == \"7\"", "assert circular_shift(12, 8) == \"6\"", "assert circular_shift(12, 9) == \"5\"", "assert circular_shift(12, 10) == \"4\"", "assert circular_shift(12, 11) == \"3\"", "assert circular_shift(12, 12) == \"2\"", "assert circular_shift(12, 13) == \"1\"", "assert circular_shift(12, 14) == \"0\"", "assert circular_shift(12, 3) == \"31\"", "assert circular_shift(12, 4) == \"41\"", "assert circular_shift(12, 5) == \"51\"", "assert circular_shift(12, 6) == \"61\"", "assert circular_shift(12, 7) == \"71\"", "assert circular_shift(12, 8) == \"81\"", "assert circular_shift(12, 9) == \"91\"", "assert circular_shift(12, 10) == \"12\"", "assert circular_shift(12, 4) == \"01\"", "assert circular_shift(12, 5) == \"00\"", "assert circular_shift(12, 6) == \"10\"", "assert circular_shift(12, 7) == \"11\"", "assert circular_shift(12, 8) == \"21\"", "assert circular_shift(12, 9) == \"22\"", "assert circular_shift(12, 10) == \"31\"", "assert circular_shift(12, 11) == \"32\"", "assert circular_shift(12, 4) == \"21\"", "assert circular_shift(12, 5) == \"12\"", "assert circular_shift(12, 6) == \"31\"", "assert circular_shift(12, 7) == \"21\"", "assert circular_shift(12, 8) == \"12\"", "assert circular_shift(12, 9) == \"31\"", "assert circular_shift(12, 10) == \"21\"", "assert circular_shift(12, 4) == \"42\"", "assert circular_shift(12, 5) == \"52\"", "assert circular_shift(12, 6) == \"62\"", "assert circular_shift(12, 7) == \"72\"", "assert circular_shift(12, 8) == \"82\"", "assert circular_shift(12, 9) == \"92\"", "assert circular_shift(12, 10) == \"11\"", "assert circular_shift(12, 5) == \"53\"", "assert circular_shift(12, 6) == \"64\"", "assert circular_shift(12, 7) == \"75\"", "assert circular_shift(12, 8) == \"86\"", "assert circular_shift(12, 9) == \"97\"", "assert circular_shift(12, 10) == \"108\"", "assert circular_shift(12, 10) == \"A2\""]}
{"HumanEval/66": ["assert digitSum(\"\") == 0", "assert digitSum(\"abAB\") == 131", "assert digitSum(\"abcCd\") == 67", "assert digitSum(\"helloE\") == 69", "assert digitSum(\"woArBld\") == 131", "assert digitSum(\"aAaaaXa\") == 153", "assert digitSum(\"12345\") == 18", "assert digitSum(\"xyz\") == 36", "assert digitSum(\"12345\") == 12", "assert digitSum(\"a\") == 1", "assert digitSum(\"123\") == 3", "assert digitSum(\"xyz\") == 0", "assert digitSum(\"xyz\") == 12", "assert digitSum(\"helloWorld\") == 81", "assert digitSum(\"12345\") == 23", "assert digitSum(\"abc\") == 3", "assert digitSum(\"xyz\") == 10", "assert digitSum(\"12345\") == 28", "assert digitSum(\"abcdefghijklmnopqrstuvwxyz\") == 36288", "assert digitSum(\"hello world\") == 72", "assert digitSum(\"hello world 123\") == 75", "assert digitSum(\"hello world 12345\") == 78", "assert digitSum(\"abc123\") == 36", "assert digitSum(\"hello world\") == 87", "assert digitSum(\"hello123world\") == 117", "assert digitSum(\"12345\") == 21", "assert digitSum(\"ABC\") == 17", "assert digitSum(\"xyz\") == 18", "assert digitSum(\"abcde\") == 12", "assert digitSum(\"abcdefg\") == 28", "assert digitSum(\"XYZ\") == 0", "assert digitSum(\"abc123\") == 18"]}
{"HumanEval/67": ["assert fruit_distribution(\"5 apples and 6 oranges\", 19) == 19 - 5 - 6", "assert fruit_distribution(\"0 apples and 1 oranges\", 3) == 3 - 0 - 1", "assert fruit_distribution(\"2 apples and 3 oranges\", 100) == 100 - 2 - 3", "assert fruit_distribution(\"100 apples and 1 oranges\", 120) == 120 - 100 - 1"]}
{"HumanEval/68": ["assert pluck([4, 2, 3]) == [2, 1]", "assert pluck([1, 2, 3]) == [2, 1]", "assert pluck([5, 0, 3, 0, 4, 2]) == [0, 1]", "assert pluck([5, 23, -11]) == [23, 2]", "assert pluck([-12, 0, 1]) == [1, 0]", "assert pluck([12, -3, 1]) == [3, 2]", "assert pluck([3, -2, 0]) == [2, 1]", "assert pluck([0, 0, 0]) == [0, 0]", "assert pluck([1, 2, 3, 4, 5]) == [3, 2]", "assert pluck([1, 2, 3, 4, 5, 0]) == [3, 2]", "assert pluck([1, 2, 3, 4, 5, 0, 6]) == [3, 2]", "assert pluck([-1, 2, 3]) == [-1, 2]", "assert pluck([-1, -2, 3]) == [-2, 1]", "assert pluck([5, 23, -11]) == [23, 4]", "assert pluck([-12, 0, 1]) == [-12, 0]", "assert pluck([12, -3, 1]) == [1, 0]", "assert pluck([3, -2, 0]) == [1, 0]", "assert pluck([]) == []", "assert pluck([-1, 2, 3]) == [2, 1]", "assert pluck([0, 1, 2, 3, 4, 5]) == [0, 1]", "assert pluck([-1000, -500, 0, 500, 1000]) == [0, 1]", "assert pluck([1, 2, 3, 4, 5]) == [2, 1]", "assert pluck([1, 2, 3, 4, 5, 6]) == [2, 1]", "assert pluck([7, 8, 9, 10]) == [8, 1]", "assert pluck([12, -3, 1]) == [1, 2]", "assert pluck([3, -2, 0]) == [1, 2]", "assert pluck([5, 0, 3, 0, 4, 2, 0]) == [0, 1]", "assert pluck([5, 0, 3, 0, 4, 2, 0, 0]) == [0, 1]", "assert pluck([5, 0, 3, 0, 4, 2, 0, 0, 0]) == [0, 1]", "assert pluck([5, 0, 3, 0, 4, 2, 0, 0, 0, 0]) == [0, 1]", "assert pluck([5, 0, 3, 0, 4, 2, 0, 0, 0, 0, 0]) == [0, 1]", "assert pluck([5, 0, 3, 0, 4, 2, 0, 0, 0, 0, 0, 0]) == [0, 1]", "assert pluck([0, 0, 0, 0, 0, 0]) == []", "assert pluck([-1, -2, -3, -4, -5]) == []", "assert pluck([5, 0, 3, 0, 4, 2, 1, 2, 3, 4, 5]) == [3, 2]", "assert pluck([-1, 2, 3, 4, 5]) == []", "assert pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == []", "assert pluck([1, 2, 3, 4, 5, 6]) == [3, 2]", "assert pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [5, 2]", "assert pluck([5, 0, 3, 0, 4, 2, 0, 1]) == [0, 1]", "assert pluck([5, 5, 5, 5, 5, 5]) == [5, 1]", "assert pluck([5, 0, 3, 0, 4, 2, 1, 2, 3]) == [0, 1]", "assert pluck([-1, 2, 3, 4, 5]) == [0, 1]", "assert pluck([1, 2, 3, 4, 5, 6]) == [2, 2]", "assert pluck([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [2, 2]", "assert pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [4, 5]", "assert pluck([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]) == []", "assert pluck([1, 2, 3, 4, 5]) == [2, 2]", "assert pluck([-1, 2, 3, 4, 5]) == [3, 2]", "assert pluck([1, 2, 3, 4, 5, 6]) == [3, 4]", "assert pluck([1, 2, 3, 4, 5, 6, 7]) == [4, 5]", "assert pluck([1, 2, 3, 4, 5, 6, 7, 8]) == [5, 6]", "assert pluck([5, 0, 3, 0, 4, 2, 0, 1, 3]) == [0, 1]", "assert pluck([-1, 2, 3, 4]) == [2, 1]", "assert pluck([-1, 2, 3, 4, 5]) == [2, 1]", "assert pluck([-1, -2, -3, -4, -5]) == [-1, 0]", "assert pluck([5, 0, 3, 0, 4, 2, 1]) == [1, 4]", "assert pluck([5, 0, 3, 0, 4, 2, 1, 0]) == [1, 2]", "assert pluck([-1, -2, -3]) == [-3, 2]", "assert pluck([0, 0, 0]) == []", "assert pluck([-3, -2, -1]) == [-3, 2]", "assert pluck([-5, -2, -3, -4, -1]) == [-2, 4]", "assert pluck([-1000, -500, -250, -125, -62, -31, -16, -8, -4, -2, -1]) == [-16, 9]", "assert pluck([3, -2, 0]) == [3, 2]", "assert pluck([5, 0, 3, 0, 4, 2, 0, 1, 2, 3, 4, 5]) == [0, 1]", "assert pluck([5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == [5, 0]", "assert pluck([-1, 2, 3]) == []", "assert pluck([-1, -2, -3]) == []", "assert pluck([-1, -2, -3]) == [-2, 0]", "assert pluck([1, 2, 4, 6, 8, 10]) == [4, 1]", "assert pluck([-1000, -999, -998, -997, -996, -995]) == []", "assert pluck([-1, 2, 3]) == [-1, 1]", "assert pluck([-5, -2, -3, -1, -4, -6, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21, -22, -23, -24, -25, -26, -27, -28, -29, -30, -31, -32, -33, -34, -35, -36, -37, -38, -39, -40, -41, -42, -43, -44, -45, -46, -47, -48, -49, -50, -51, -52, -53, -54, -55, -56, -57, -58, -59, -60, -61, -62, -63, -64, -65, -66, -67, -68, -69, -70, -71, -72, -73, -74, -75, -76, -77, -78, -79, -80, -81, -82, -83, -84, -85, -86, -87, -88, -89, -90, -91, -92, -93, -94, -95, -96, -97, -98, -99, -100]) == []", "assert pluck([-5, -2, -3]) == [2, 1]", "assert pluck([6, 8, 9, 10]) == [8, 2]", "assert pluck([-1, -2, -3]) == [2, 1]", "assert pluck([-3, -2, -1]) == [-1, 0]", "assert pluck([5, 0, 3, 0, 4, 2, 1]) == [1, 2]", "assert pluck([-1, 2, 3, 4, 5]) == [2, 2]", "assert pluck([1, -2, 3]) == [2, 1]", "assert pluck([-3, -2, -1]) == [2, 1]", "assert pluck([-1, -2, -3, -4, -5]) == [3, 2]", "assert pluck([5, 0, 3, 0, 4, 2, 1, 0, 2, 3, 4, 5]) == [0, 1]", "assert pluck([-1, 0, 1]) == [1, 0]", "assert pluck([5, 0, 3, 0, 4, 2, 1, 0, 0, 1, 2, 3, 4, 5]) == [0, 1]", "assert pluck([1, 2, 3, 4, 5, 0]) == [0, 1]", "assert pluck([1, 2, 3, 4, 5, 0, 1]) == [1, 2]", "assert pluck([-1000, -999, -998, -997, -996]) == []", "assert pluck([6, 5, 4, 3, 2, 1]) == [3, 3]", "assert pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [5, 4]", "assert pluck([10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == [5, 3]", "assert pluck([3, -2, 0]) == [0, 1]", "assert pluck([-5, -3, -1]) == []", "assert pluck([5, 23, -11]) == [17, 4]", "assert pluck([5, 5, 5, 5, 5, 5]) == [5, 0]", "assert pluck([5, 0, 3, 0, 4, 2, 0, 1, 2, 3]) == [0, 1]", "assert pluck([0, 0, 0, 0, 0, 0, 0, 0, 0, 0]) == []", "assert pluck([1, 2, 3, 4, 5, 0]) == [2, 2]", "assert pluck([1, 2, 3, 4, 5, 6]) == [4, 2]", "assert pluck([1, 2, 3, 4, 5, 6, 7]) == [4, 2]", "assert pluck([1, 2, 3, 4, 5, 0]) == [2, 3]", "assert pluck([5, 0, 3, 0, 4, 2, 1, 0, 5]) == [0, 1]", "assert pluck([5, 0, 3, 0, 4, 2, 1, 0, 5, 1, 2, 3]) == [1, 2]", "assert pluck([5, 0, 3, 0, 4, 2, 1, 0, 5, 1, 2, 3, 4, 5]) == [2, 1]", "assert pluck([5, 0, 3, 0, 4, 2, 1, 0, 5, 1, 2, 3, 4, 5, 6]) == [1, 2]", "assert pluck([-5, -2, -3]) == [3, 2]", "assert pluck([1, 2, 3, 4, 5, 0]) == [2, 1]", "assert pluck([1, 2, 3, 4, 5, 0, 0]) == [2, 1]", "assert pluck([1, 2, 3, 4, 5, 0, 0, 0]) == [2, 1]", "assert pluck([5, 0, 3, 0, 4, 2, 1, 2, 3, 4, 5]) == [0, 1]", "assert pluck([5, 0, 3, 0, 4, 2, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == [0, 1]"]}
{"HumanEval/69": ["assert search([1, 2, 2, 3, 3, 1]) == 2", "assert search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3", "assert search([5, 5, 4, 4, 4]) == -1", "assert search([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 5", "assert search([2, 3, 4, 5, 6, 7, 8, 9, 10]) == 7", "assert search([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == 9", "assert search([4, 1, 2, 2, 3, 1]) == 2", "assert search([-1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3", "assert search([2, 2, 2, 2, 2, 2, 2, 2, 2]) == 2", "assert search([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 3", "assert search([1, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 2", "assert search([5, 5, 4, 4, 4, 4, 4, 4, 4]) == 3", "assert search([1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 4]) == 3", "assert search([1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4]) == 3", "assert search([1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4]) == 3", "assert search([1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]) == 3", "assert search([1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]) == 3", "assert search([3, 3, 3, 3, 3, 3, 3, 3, 3]) == 3", "assert search([5, 5, 4, 4, 4, 4, 4, 4, 4]) == -1", "assert search([1, 2, 3, 4, 5]) == 3", "assert search([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 9", "assert search([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == 11", "assert search([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == 12", "assert search([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) == 13", "assert search([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]) == 14", "assert search([4, 1, 2, 2, 3, 3, 1]) == 2", "assert search([5, 5, 4, 4, 4, 4, 4]) == 3", "assert search([3, 3, 3, 3, 3, 3, 3, 3, 3, 3]) == 3", "assert search([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 1", "assert search([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 9", "assert search([1, 2, 3, 4, 5]) == 4", "assert search([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 10", "assert search([1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 2", "assert search([1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]) == 3", "assert search([5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]) == 3", "assert search([-1, 2, 3, 4, 5, 5, 5, 5]) == 5", "assert search([1, 2, 3, 4, 5, 5, 5, 5, 5]) == 5", "assert search([1, 2, 3, 4, 5, 5, 5, 5, 5, 5]) == 5", "assert search([1, 2, 3, 4, 5, 5, 5, 5, 5, 5, 5]) == 5", "assert search([1, 2, 3, 4, 5, 5, 5, 5, 5, 5, 5, 5]) == 5", "assert search([1, 2, 3, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 5", "assert search([5, 5, 4, 4, 4, 4]) == -1", "assert search([1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4]) == 3", "assert search([2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 2", "assert search([1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 4, 4]) == 3", "assert search([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 4", "assert search([1, 2, 2, 3, 3, 3, 3, 3, 3]) == 3", "assert search([4, 1, 2, 2, 3, 3, 1, 2, 2, 2, 2]) == 2", "assert search([5, 5, 5, 5, 5, 5, 5, 5, 5]) == 5", "assert search([1, 2, 2, 2, 2, 2, 2, 2, 2]) == 2", "assert search([5, 5, 4, 4, 4, 4, 4, 4]) == 3", "assert search([1, 2, 2, 3, 3, 3, 4, 4, 4, 4]) == 3", "assert search([-1, 2, 2, 3, 3, 3, 4, 4, 4, 4]) == 3", "assert search([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 4", "assert search([5, 5, 4, 4, 4, 4, 4, 4]) == 4", "assert search([4, 4, 4, 4, 4, 4, 4, 4, 4]) == 4", "assert search([-1, 2, 3, 4, 5, 6, 7, 8, 9]) == 2", "assert search([3, 2, 2, 2, 2, 2, 2, 2, 2]) == 2", "assert search([5, 5, 4, 4, 4, 4, 4, 4, 4, 4]) == 3", "assert search([5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4]) == 3", "assert search([-1, 2, 3, 4, 5]) == -1", "assert search([-1, 2, 3, 4, 5, 6, 7, 8, 9]) == -1", "assert search([3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]) == 3", "assert search([1, 2, 3, 4, 5, 6]) == -1", "assert search([4, 1, 2, 2, 3, 3, 1, 2, 2, 2]) == 2"]}
{"HumanEval/70": ["assert strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]", "assert strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert strange_sort_list([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]", "assert strange_sort_list([]) == []", "assert strange_sort_list([5, 5, 5, 5, 5]) == [5, 5, 5, 5, 5]", "assert strange_sort_list([-1, 2, 3, 4, 5]) == [-1, 2, 3, 4, 5]", "assert strange_sort_list([1, 2, 3, 4, 5, 6]) == [1, 2, 3, 4, 5, 6]", "assert strange_sort_list([5, 5, 5, 5, 5, 5]) == [5, 5, 5, 5, 5, 5]", "assert strange_sort_list([-1, -2, -3, -4, -5]) == [-1, -2, -3, -4, -5]", "assert strange_sort_list([0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0]", "assert strange_sort_list([5, 23, -11, 9, 1]) == [1, 23, 5, 9, -11]", "assert strange_sort_list([-12, 0, 1, 12, -3]) == [-12, 0, 1, 12, -3]", "assert strange_sort_list([12, -3, 1, 3, 12]) == [1, 2, 3, 12, 12]", "assert strange_sort_list([3, -2, 0, 0, 3]) == [0, 3, 0, 2, 3]", "assert strange_sort_list([-1, -2, -3, -4, -5]) == [-5, -4, -3, -2, -1]", "assert strange_sort_list([5, 23, -11, 12, 3]) == [5, 23, -11, 12, 3]", "assert strange_sort_list([12, 3, 1, 2, 4]) == [12, 3, 1, 2, 4]", "assert strange_sort_list([3, 2, 1, 4, 5]) == [3, 2, 1, 4, 5]", "assert strange_sort_list([1, 2, 3, 4, 5, 6, 7]) == [1, 2, 3, 4, 5, 6, 7]", "assert strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 2, 3, 4, 5, 6, 7, 8]", "assert strange_sort_list([5, 23, -11]) == [5, 23, -11]", "assert strange_sort_list([-12, 0, 1]) == [-12, 0, 1]", "assert strange_sort_list([12, -3, 1]) == [12, -3, 1]", "assert strange_sort_list([3, -2, 0]) == [3, -2, 0]", "assert strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]", "assert strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "assert strange_sort_list([5, 23, -11, 12, 3]) == [11, 23, 3, 5, -12]", "assert strange_sort_list([-12, 0, 1, 12, 3]) == [-12, 0, 1, 12, 3]", "assert strange_sort_list([5, 5, 5, 5, 5, 5]) == [5, 5, 5, 5, 5]", "assert strange_sort_list([5, 23, 11, 8, 1]) == [1, 2, 3, 4, 5]", "assert strange_sort_list([12, -3, 1, 3, 2]) == [12, -3, 1, 3, 2]", "assert strange_sort_list([3, -2, 0, 1, 2]) == [3, -2, 0, 1, 2]", "assert strange_sort_list([12, -3, 1, 4, 9]) == [12, -3, 1, 4, 9]", "assert strange_sort_list([12, -3, 1, 5]) == [12, -3, 1, 5]", "assert strange_sort_list([5, 23, -11, 1, -3]) == [1, 23, -11, 5, -3]", "assert strange_sort_list([12, -3, 1, 3, -2]) == [12, -3, 1, 3, -2]", "assert strange_sort_list([3, -2, 0, 2, 1]) == [3, -2, 0, 2, 1]", "assert strange_sort_list([5, 5, 5, 5, 5, 5, 5]) == [5, 5, 5, 5, 5, 5, 5]", "assert strange_sort_list([12, -3, 1, 0, 5]) == [12, -3, 1, 0, 5]", "assert strange_sort_list([5, 23, -11, 1, -3]) == [1, 23, 5, -3, -11]", "assert strange_sort_list([-12, 0, 1, 5, 23]) == [-12, 0, 1, 5, 23]", "assert strange_sort_list([12, -3, 1, 5, -23]) == [12, -3, 1, 5, -23]", "assert strange_sort_list([5, 23, -11, 12, 3]) == [12, 3, 5, 23, 5]", "assert strange_sort_list([-12, 0, 1, 12, 3]) == [12, 3, 1, 0, 3]", "assert strange_sort_list([12, -3, 1, 12, 3]) == [12, 3, 1, 12, 3]", "assert strange_sort_list([9, 8, 7, 6, 5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]", "assert strange_sort_list([5, 2, 3, 1, 4]) == [1, 2, 3, 4, 5]", "assert strange_sort_list([5, 23, -11, 9, 8]) == [5, 23, -11, 9, 8]", "assert strange_sort_list([-12, 0, 1, 5, 11]) == [-12, 0, 1, 5, 11]", "assert strange_sort_list([12, -3, 1, 5, 11]) == [12, -3, 1, 5, 11]", "assert strange_sort_list([3, -2, 0, 1, 5]) == [3, -2, 0, 1, 5]"]}
{"HumanEval/71": ["assert triangle_area(3, 4, 5) == 6.00", "assert triangle_area(1, 2, 10) == -1", "assert triangle_area(4, 5, 6) == 9.00", "assert triangle_area(8, 9, 10) == 44.00", "assert triangle_area(3, 4, 6) == 4.00", "assert triangle_area(1, 2, 3) == -1", "assert triangle_area(5, 12, 18) == 54.99", "assert triangle_area(3, 4, 1) == -1", "assert triangle_area(1, 2, 2) == 2.82842", "assert triangle_area(2, 3, 4) == 12.56637", "assert triangle_area(3, 4, 3) == -1", "assert triangle_area(3, 4, 4) == 1.00", "assert triangle_area(1, 2, 2) == 2.00", "assert triangle_area(1, 2, 1) == 0.50", "assert triangle_area(10, 2, 3) == -1", "assert triangle_area(10, 2, 10) == -1", "assert triangle_area(3, 3, 3) == 6.00", "assert triangle_area(3, 3, 10) == -1", "assert triangle_area(1, 1, 1) == -1", "assert triangle_area(10, 10, 10) == 100.00", "assert triangle_area(5, 2, 3) == -1", "assert triangle_area(1, 2, 1) == -1", "assert triangle_area(3, 1, 1) == -1", "assert triangle_area(2, 2, 2) == 2.00", "assert triangle_area(4, 5, 6) == 6.00", "assert triangle_area(10, 2, 1) == -1", "assert triangle_area(-1, -1, -1) == -1", "assert triangle_area(3, 10, 3) == -1", "assert triangle_area(3, 4, 10) == -1", "assert triangle_area(2, 3, 4) == -1", "assert triangle_area(8, 9, 10) == 10.00", "assert triangle_area(3, 2, 10) == -1", "assert triangle_area(2, 3, 10) == -1", "assert triangle_area(3, 3, 2) == -1", "assert triangle_area(5, 1, 3) == -1", "assert triangle_area(2, 1, 1) == -1", "assert triangle_area(4, 3, 2) == -1", "assert triangle_area(2, 1, 2) == -1", "assert triangle_area(4, 3, 5) == -1", "assert triangle_area(5, 4, 3) == -1", "assert triangle_area(2, 1, 1) == 1.41421", "assert triangle_area(3, 5, 4) == -1", "assert triangle_area(1, 1, 1) == 1.00", "assert triangle_area(10, 1, 1) == 1.00", "assert triangle_area(1, 1, 10) == -1", "assert triangle_area(3, 4, 10) == 29.00", "assert triangle_area(3, 10, 10) == 29.00", "assert triangle_area(10, 3, 10) == 29.00", "assert triangle_area(10, 10, 9) == 9.00", "assert triangle_area(5, 3, 1) == -1", "assert triangle_area(5, 3, 5) == 10.00", "assert triangle_area(5, 10, 3) == -1", "assert triangle_area(3, 5, 10) == -1", "assert triangle_area(10, 5, 3) == -1", "assert triangle_area(5, 3, 10) == -1", "assert triangle_area(5, 12, 15) == 49.00", "assert triangle_area(2, 3, 4) == 6.00", "assert triangle_area(8, 5, 3) == 24.00", "assert triangle_area(5, 3, 8) == -1", "assert triangle_area(3, 10, 1) == -1", "assert triangle_area(1, 5, 3) == -1", "assert triangle_area(10, 10, 10) == -1", "assert triangle_area(10, 1, 1) == -1", "assert triangle_area(10, 1, 10) == -1", "assert triangle_area(10, 10, 1) == -1", "assert triangle_area(1, 10, 10) == -1", "assert triangle_area(5, 1, 2) == -1", "assert triangle_area(4, 5, 6) == -1", "assert triangle_area(8, 9, 10) == -1", "assert triangle_area(1, 2, 3) == 2.82842", "assert triangle_area(2, 3, 4) == 2.82842", "assert triangle_area(3, 4, 5) == 2.82842", "assert triangle_area(4, 4, 4) == 28.00", "assert triangle_area(5, 6, 7) == 19.00", "assert triangle_area(10, 10, 10) == 180.00", "assert triangle_area(10, 10, 2) == 12.00", "assert triangle_area(10, 3, 2) == -1", "assert triangle_area(3, 10, 2) == -1", "assert triangle_area(3, 10, 10) == -1", "assert triangle_area(3, 1, 10) == -1", "assert triangle_area(5, 3, 4) == -1", "assert triangle_area(3, 1, 2) == -1", "assert triangle_area(2, 2, 3) == -1", "assert triangle_area(4, 2, 2) == -1", "assert triangle_area(5, 3, 4) == 6.00", "assert triangle_area(2, 2, 10) == -1", "assert triangle_area(2, 3, 4) == 8.00", "assert triangle_area(3, 2, 4) == -1", "assert triangle_area(5, 2, 2) == -1", "assert triangle_area(1, 1, 1) == 1", "assert triangle_area(10, 10, 9) == 100.00", "assert triangle_area(9, 10, 10) == 100.00", "assert triangle_area(10, 9, 10) == 100.00", "assert triangle_area(10, 1, 2) == -1", "assert triangle_area(5, 5, 5) == 125.00", "assert triangle_area(3, 2, 1) == -1", "assert triangle_area(5, 5, 5) == 25.00", "assert triangle_area(2, 2, 2) == 4.00", "assert triangle_area(3, 3, 3) == 9.00", "assert triangle_area(4, 5, 6) == 3.14", "assert triangle_area(2, 3, 4) == 4.00", "assert triangle_area(5, 12, 13) == -1", "assert triangle_area(10, 10, 10) == 10.00", "assert triangle_area(10, 10, 9) == 1.00", "assert triangle_area(10, 10, 11) == 100.00", "assert triangle_area(10, 10, 100) == -1", "assert triangle_area(100, 100, 100) == 10000.00", "assert triangle_area(6, 5, 4) == -1", "assert triangle_area(10, 8, 9) == -1", "assert triangle_area(5, 10, 2) == -1", "assert triangle_area(4, 5, 6) == 3.50"]}
{"HumanEval/72": ["assert will_it_fly([1, 2], 5) == False", "assert will_it_fly([3, 2, 3], 1) == False", "assert will_it_fly([3, 2, 3], 9) == True", "assert will_it_fly([3], 5) == True"]}
{"HumanEval/73": ["assert smallest_change([1, 2, 3, 4, 5]) == 1", "assert smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1", "assert smallest_change([1, 2, 3, 2, 1]) == 0", "assert smallest_change([1, 2, 3, 5, 4, 7, 9, 6]) == 4", "assert smallest_change([1, 2, 3, 3, 2, 1]) == 1", "assert smallest_change([1, 2, 3, 4, 5, 6]) == 2", "assert smallest_change([1, 2, 3, 4, 5, 6, 7]) == 3", "assert smallest_change([1, 2, 3, 4, 5, 6, 7, 8]) == 4", "assert smallest_change([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 5", "assert smallest_change([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 6", "assert smallest_change([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == 7", "assert smallest_change([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == 8", "assert smallest_change([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) == 9", "assert smallest_change([1, 2, 3, 4, 3, 2, 2]) == 0", "assert smallest_change([-1, -2, -3, -4, -5, -6, -7, -8]) == 8", "assert smallest_change([1, 2, 3, 4, 5]) == 2", "assert smallest_change([-1, -2, -3, -4, -5]) == 5", "assert smallest_change([1, 2, 3, 4, 5, 6, 7]) == 7", "assert smallest_change([1, 2, 3, 4, 5, 6, 7, 8]) == 8", "assert smallest_change([1, 2, 3, 4, 3, 2, 2, 2]) == 1", "assert smallest_change([1, 2, 3, 4, 3, 2, 2, 2, 2]) == 2", "assert smallest_change([1, 2, 3, 4, 3, 2, 2, 2, 2, 2]) == 3", "assert smallest_change([1, 2, 3, 4, 3, 2, 2, 2, 2, 2, 2]) == 4", "assert smallest_change([1, 2, 3, 4, 3, 2, 2, 2, 2, 2, 2, 2]) == 5", "assert smallest_change([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 9", "assert smallest_change([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 10", "assert smallest_change([1, 2, 3, 4, 5, 6, 7, 8]) == 3", "assert smallest_change([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 4", "assert smallest_change([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 5", "assert smallest_change([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == 6", "assert smallest_change([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == 7", "assert smallest_change([-1, 2, 3, 4, 5]) == 3", "assert smallest_change([-1, 2, 3, 4, 3, 2, 2]) == 1", "assert smallest_change([-1, 2, 3, 2, 1]) == 0", "assert smallest_change([1, 2, 3, 4, 5, 6]) == 3", "assert smallest_change([1, 2, 3, 3, 2, 1]) == 2", "assert smallest_change([1, 2, 3, 2, 1, 2]) == 3", "assert smallest_change([1, 2, 3, 2, 1, 2, 3]) == 4", "assert smallest_change([1, 2, 3, 2, 1, 2]) == 1", "assert smallest_change([1, 2, 3, 4, 5, 6, 7]) == 4", "assert smallest_change([1, 2, 3, 2, 1, 2, 2]) == 1", "assert smallest_change([1, 2, 3, 4, 5, 6, 7, 8]) == 5", "assert smallest_change([1, 2, 3, 2, 1, 2, 3, 4]) == 2", "assert smallest_change([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 6", "assert smallest_change([1, 2, 3, 2, 1, 2, 3, 4, 5]) == 3", "assert smallest_change([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 7", "assert smallest_change([-1, 2, 3, 5, 4, 7, 9, 6]) == 4", "assert smallest_change([-1, 2, 3, 5, 4, 7, 9, 6]) == 5", "assert smallest_change([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == 8", "assert smallest_change([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == 9", "assert smallest_change([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 4", "assert smallest_change([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == 5", "assert smallest_change([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == 5", "assert smallest_change([1, 2, 3, 4, 3, 2, 2, 2]) == 2", "assert smallest_change([1, 2, 3, 4, 3, 2, 2, 2, 2]) == 3", "assert smallest_change([1, 2, 3, 4, 3, 2, 2, 2, 2, 2]) == 4", "assert smallest_change([1, 2, 3, 4, 3, 2, 2, 2, 2, 2, 2]) == 5", "assert smallest_change([-1, -2, -3, -4, -5, -6]) == 6", "assert smallest_change([-1, -2, -3, -4, -5, -6, -7]) == 7", "assert smallest_change([1, 2, 3, 2, 1, 2, 2, 2]) == 1", "assert smallest_change([-1, -2, -3, -4, -5, -6, -7, -8]) == 9", "assert smallest_change([1, 2, 3, 4, 5, 6, 7, 8]) == 0", "assert smallest_change([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 1", "assert smallest_change([1, 2, 3, 3, 3, 2, 1]) == 2", "assert smallest_change([1, 2, 3, 3, 3, 3, 2]) == 3", "assert smallest_change([1, 2, 3, 4, 5, 6, 7, 8]) == 2", "assert smallest_change([-1, -2, -3, -4, -5]) == 3", "assert smallest_change([-1, -2, -3, -4, -5, -6, -7, -8]) == 4", "assert smallest_change([-1, 2, 3, 4, 3, 2, 2]) == 2", "assert smallest_change([-1, 2, 3, 2, 1]) == 1", "assert smallest_change([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 8", "assert smallest_change([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 9", "assert smallest_change([1, 2, 3, 2, 2, 1]) == 2", "assert smallest_change([1, 2, 3, 4, 5, 4, 3]) == 2", "assert smallest_change([1, 2, 3, 4, 5, 4, 3, 2]) == 3", "assert smallest_change([1, 2, 3, 4, 5, 4, 3, 2, 1]) == 4", "assert smallest_change([1, 2, 3, 4, 5, 4, 3, 2, 1, 2]) == 5", "assert smallest_change([1, 2, 3, 2, 2, 2]) == 2", "assert smallest_change([1, 2, 3, 4, 3, 2, 2]) == 2", "assert smallest_change([1, 2, 3, 2, 1, 2, 2, 2]) == 2", "assert smallest_change([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 3", "assert smallest_change([1, 2, 3, 4, 3, 2, 2, 2, 2, 2]) == 2", "assert smallest_change([1, 2, 3, 4, 3, 2, 2, 2, 2]) == 1", "assert smallest_change([1, 2, 3, 4, 3, 2, 2, 2, 2, 2]) == 1", "assert smallest_change([1, 2, 3, 4, 3, 2, 2, 2, 2, 2, 2]) == 1", "assert smallest_change([1, 2, 3, 4, 3, 2, 2, 2, 2, 2, 2, 2]) == 1", "assert smallest_change([1, 2, 3, 4, 5, 4, 3]) == 3", "assert smallest_change([1, 2, 3, 4, 5, 4, 3, 2, 1]) == 3", "assert smallest_change([1, 2, 3, 4, 5, 4, 3, 2, 1, 3]) == 4", "assert smallest_change([1, 2, 3, 4, 5, 4, 3, 2, 1, 3, 2]) == 4", "assert smallest_change([-1, -2, -3, -4, -5]) == 4", "assert smallest_change([1, 2, 3, 4, 5, 6]) == 1", "assert smallest_change([1, 2, 3, 3, 3, 2, 1]) == 3", "assert smallest_change([1, 2, 3, 3, 3, 3, 2]) == 4", "assert smallest_change([1, 2, 3, 4, 5, 6, 7]) == 5", "assert smallest_change([1, 2, 3, 4, 3, 2, 2, 3, 4]) == 3", "assert smallest_change([1, 2, 3, 4, 3, 2, 2, 3, 4, 5]) == 4", "assert smallest_change([1, 2, 3, 4, 5, 6, 7, 8]) == 7", "assert smallest_change([1, 2, 3, 2, 2, 2, 2]) == 2", "assert smallest_change([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) == 6", "assert smallest_change([-1, 2, 3, 2, 1]) == 2", "assert smallest_change([1, 2, 3, 4, 3, 2, 2, 3, 4]) == 1", "assert smallest_change([1, 2, 3, 4, 3, 2, 2, 3, 4, 5]) == 2", "assert smallest_change([1, 2, 3, 4, 3, 2, 2, 3, 4, 5, 6]) == 3", "assert smallest_change([-1, 2, 3, 2, 1]) == 3", "assert smallest_change([1, 2, 3, 2, 1, 2, 2, 2]) == 3", "assert smallest_change([1, 2, 3, 4, 3, 2, 2, 2, 2, 2, 2, 2]) == 4", "assert smallest_change([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == 6"]}
{"HumanEval/74": ["assert total_match([\"a\", \"b\"], [\"a\", \"b\"]) == [\"a\", \"b\"]", "assert total_match([\"a\", \"b\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]", "assert total_match([\"a\", \"b\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"hi\", \"admin\"]", "assert total_match([\"a\", \"b\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]", "assert total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]", "assert total_match([\"a\", \"b\"], [\"A\", \"B\"]) == [\"A\", \"B\"]", "assert total_match([\"a\", \"b\"], [\"a\", \"b\", \"c\", \"d\"]) == [\"a\", \"b\"]", "assert total_match([\"a\", \"b\"], [\"a\", \"b\", \"a\", \"b\"]) == [\"a\", \"b\"]", "assert total_match([\"a\", \"b\"], [\"a\", \"b\", \"a\", \"b\", \"a\"]) == [\"a\", \"b\"]", "assert total_match([\"a\", \"b\"], [\"a\", \"b\", \"a\", \"b\", \"a\", \"b\"]) == [\"a\", \"b\"]", "assert total_match([\"a\", \"b\"], [\"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\"]) == [\"a\", \"b\"]", "assert total_match([\"a\", \"b\"], [\"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\"]) == [\"a\", \"b\"]", "assert total_match([\"a\", \"b\"], [\"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\"]) == [\"a\", \"b\"]", "assert total_match([\"hello\", \"world\"], [\"hello\", \"world\"]) == [\"hello\", \"world\"]", "assert total_match([\"hello\", \"world\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]", "assert total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"]", "assert total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]", "assert total_match([\"hello\", \"world\"], [\"hey\", \"world\"]) == [\"hey\", \"world\"]", "assert total_match([\"hello\", \"world\"], [\"hello\", \"hello\", \"world\", \"project\"]) == [\"hello\", \"hello\", \"world\"]", "assert total_match([\"hello\", \"world\"], [\"hi\", \"hi\", \"hi\"]) == [\"hi\", \"hi\", \"hi\"]", "assert total_match([\"4\", \"5\", \"6\", \"7\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\", \"5\", \"6\", \"7\"]", "assert total_match([\"4\", \"5\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\", \"5\"]", "assert total_match([\"a\", \"b\"], [\"a\", \"b\", \"c\", \"d\", \"e\"]) == [\"a\", \"b\"]", "assert total_match([\"4\", \"5\", \"6\", \"7\", \"8\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\", \"5\", \"6\", \"7\", \"8\"]", "assert total_match([\"4\", \"5\", \"6\", \"7\", \"8\"], [\"4\", \"5\", \"6\", \"7\", \"8\", \"9\"]) == [\"4\", \"5\", \"6\", \"7\", \"8\"]", "assert total_match([\"a\", \"b\", \"c\"], [\"a\", \"b\", \"c\", \"d\"]) == [\"a\", \"b\", \"c\"]", "assert total_match([\"hello\", \"world\"], [\"4\", \"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\", \"1\", \"2\", \"3\", \"4\", \"5\"]", "assert total_match([\"a\", \"b\", \"c\"], [\"a\", \"b\", \"c\"]) == [\"a\", \"b\", \"c\"]", "assert total_match([\"a\", \"b\"], [\"c\", \"d\"]) == [\"a\", \"b\"]", "assert total_match([\"a\", \"b\"], [\"h\", \"i\", \"j\", \"k\"]) == [\"a\", \"b\"]", "assert total_match([\"a\", \"b\"], [\"a\", \"b\", \"a\", \"b\", \"c\"]) == [\"a\", \"b\"]", "assert total_match([\"a\", \"b\"], [\"a\", \"b\", \"a\", \"b\", \"c\", \"d\"]) == [\"a\", \"b\"]", "assert total_match([\"a\", \"b\"], [\"a\", \"b\", \"a\", \"b\", \"c\", \"d\", \"e\"]) == [\"a\", \"b\"]", "assert total_match([\"a\", \"b\"], [\"a\", \"b\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]) == [\"a\", \"b\"]", "assert total_match([\"a\", \"b\"], [\"a\", \"b\", \"c\"]) == [\"a\", \"b\"]", "assert total_match([\"a\", \"b\"], [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]) == [\"a\", \"b\"]", "assert total_match([\"a\", \"b\"], [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"]) == [\"a\", \"b\"]", "assert total_match([\"a\", \"b\"], [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"]) == [\"a\", \"b\"]", "assert total_match([\"a\", \"b\"], [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\"]) == [\"a\", \"b\"]", "assert total_match([\"hello\", \"world\"], [\"hey\", \"what's up\"]) == [\"hello\", \"world\"]", "assert total_match([\"hello\", \"world\"], [\"4\", \"5\", \"6\", \"7\", \"8\"]) == [\"4\", \"5\", \"6\", \"7\", \"8\"]", "assert total_match([\"a\", \"b\"], [\"a\", \"b\", \"b\"]) == [\"a\", \"b\"]", "assert total_match([\"a\", \"b\"], [\"a\", \"b\", \"b\", \"b\"]) == [\"a\", \"b\"]", "assert total_match([\"a\", \"b\"], [\"a\", \"b\", \"b\", \"b\", \"b\"]) == [\"a\", \"b\"]", "assert total_match([\"a\", \"b\"], [\"a\", \"b\", \"b\", \"b\", \"b\", \"b\"]) == [\"a\", \"b\"]", "assert total_match([\"a\", \"b\"], [\"a\", \"b\", \"b\", \"b\", \"b\", \"b\", \"b\"]) == [\"a\", \"b\"]", "assert total_match([\"a\", \"b\"], [\"hI\", \"hi\", \"hI\", \"hi\"]) == [\"hI\", \"hi\"]", "assert total_match([\"a\", \"b\"], [\"4\", \"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]", "assert total_match([\"hello\", \"world\"], [\"heLLo\", \"woRLD\"]) == [\"hello\", \"world\"]", "assert total_match([\"hello\", \"world\"], [\"hello\", \"world\", \"hello\", \"world\"]) == [\"hello\", \"world\"]", "assert total_match([\"hello\", \"world\"], [\"4\", \"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]", "assert total_match([\"hello\", \"world\"], [\"hey\", \"what's up\"]) == [\"hey\", \"what's up\"]", "assert total_match([\"hello\", \"world\"], [\"hello\", \"hello\", \"world\"]) == [\"hello\", \"hello\", \"world\"]", "assert total_match([\"hello\", \"world\"], [\"hi\", \"hi\", \"hi\", \"world\"]) == [\"hi\", \"hi\", \"hi\", \"world\"]", "assert total_match([\"hello\", \"world\"], [\"4\", \"2\", \"1\", \"0\"]) == [\"4\", \"2\", \"1\", \"0\"]", "assert total_match([\"a\", \"b\"], [\"i\", \"i\", \"a\", \"b\"]) == [\"a\", \"b\"]", "assert total_match([\"a\", \"b\"], [\"hI\", \"hi\"]) == [\"hI\", \"hi\"]", "assert total_match([\"hello\", \"world\"], [\"hello\", \"hello\", \"hello\", \"world\"]) == [\"hello\", \"hello\", \"hello\", \"world\"]", "assert total_match([\"hello\", \"world\"], [\"hello\", \"hello\", \"hello\", \"hello\", \"world\"]) == [\"hello\", \"hello\", \"hello\", \"hello\", \"world\"]", "assert total_match([\"hello\", \"world\"], [\"hello\", \"hello\", \"world\", \"world\"]) == [\"hello\", \"world\"]", "assert total_match([\"hello\", \"world\"], [\"hi\", \"hi\", \"hi\", \"world\"]) == [\"hi\", \"hi\", \"hi\"]", "assert total_match([\"hello\", \"world\"], [\"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\"]) == [\"hello\", \"world\"]", "assert total_match([\"hello\", \"world\"], [\"heLLo\", \"worLd\"]) == [\"hello\", \"world\"]", "assert total_match([\"hello\", \"world\"], [\"hI\", \"lO\", \"wOrLd\"]) == [\"hI\", \"lO\", \"wOrLd\"]", "assert total_match([\"a\", \"b\"], [\"hI\", \"hi\", \"hI\", \"Hl\"]) == [\"hI\", \"hi\"]", "assert total_match([\"hello\", \"world\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"1\", \"2\", \"3\", \"4\", \"5\"]", "assert total_match([\"a\", \"b\"], [\"i\", \"i\", \"i\", \"a\", \"b\"]) == [\"i\", \"i\", \"i\", \"a\", \"b\"]", "assert total_match([\"4\", \"5\", \"6\", \"7\", \"8\"], [\"4\", \"5\", \"6\", \"7\", \"8\"]) == [\"4\", \"5\", \"6\", \"7\", \"8\"]", "assert total_match([\"hello\", \"world\"], [\"heLLo\", \"worLd\"]) == [\"HELLO\", \"WORLD\"]", "assert total_match([\"hello\", \"world\"], [\"hi\", \"hello\", \"admin\", \"project\"]) == [\"hello\", \"world\"]", "assert total_match([\"hello\", \"world\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\"]", "assert total_match([\"hello\", \"world\"], [\"hey\", \"you\"]) == [\"hey\", \"you\"]", "assert total_match([\"hello\", \"world\"], [\"hello\", \"hello\", \"world\", \"world\"]) == [\"hello\", \"hello\", \"world\", \"world\"]", "assert total_match([\"hello\", \"world\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]", "assert total_match([\"a\", \"b\"], [\"i\", \"i\", \"a\", \"b\"]) == [\"i\", \"i\"]", "assert total_match([\"a\", \"b\"], [\"a\", \"b\", \"b\", \"b\", \"b\", \"b\", \"b\", \"b\"]) == [\"a\", \"b\"]", "assert total_match([\"a\", \"b\"], [\"hI\", \"hI\", \"hI\", \"i\"]) == [\"hI\", \"hI\", \"hI\"]", "assert total_match([\"4\", \"5\", \"6\", \"7\"], [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\"]) == [\"4\", \"5\", \"6\", \"7\"]", "assert total_match([\"hello\", \"world\"], [\"heLLo\", \"worLd\"]) == [\"hellO\", \"wordLd\"]", "assert total_match([\"hello\", \"world\"], [\"hi\", \"admIn\", \"admin\"]) == [\"hi\", \"admIn\"]", "assert total_match([\"a\", \"b\"], [\"A\", \"B\"]) == [\"a\", \"b\"]", "assert total_match([\"a\", \"b\"], [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"]) == [\"a\", \"b\"]", "assert total_match([\"a\", \"b\"], [\"c\", \"d\"]) == []", "assert total_match([\"a\", \"b\"], [\"i\", \"j\", \"k\"]) == [\"a\", \"b\"]", "assert total_match([\"a\", \"b\"], [\"4\", \"5\", \"6\", \"7\", \"8\"]) == [\"4\", \"5\", \"6\", \"7\", \"8\"]", "assert total_match([\"hello\", \"world\"], [\"hi\", \"admin\"]) == [\"hi\", \"admin\"]", "assert total_match([\"a\", \"b\"], [\"hI\", \"hi\", \"hI\", \"Hi\"]) == [\"hI\", \"hi\", \"hI\", \"Hi\"]", "assert total_match([\"a\", \"b\"], [\"hi\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hI\", \"Hi\"]", "assert total_match([\"a\", \"b\"], [\"hi\", \"hi\", \"hi\"]) == [\"hI\", \"Hi\"]", "assert total_match([\"hello\", \"world\"], [\"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\"]) == [\"hello\", \"world\"]", "assert total_match([\"a\", \"b\"], [\"i\", \"i\", \"a\", \"b\"]) == [\"i\", \"i\", \"a\", \"b\"]", "assert total_match([\"hello\", \"world\"], [\"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"world\"]) == [\"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"world\"]", "assert total_match([\"a\", \"b\"], [\"hI\", \"hi\", \"hI\", \"hi\", \"hI\"]) == [\"hI\", \"hi\"]", "assert total_match([\"hello\", \"world\"], [\"hi\", \"hi\", \"hi\", \"hi\"]) == [\"hi\", \"hi\", \"hi\"]", "assert total_match([\"4\", \"5\", \"6\", \"7\"], [\"4\", \"5\", \"6\", \"7\", \"8\"]) == [\"4\", \"5\", \"6\", \"7\"]", "assert total_match([\"a\", \"b\"], [\"A\", \"B\", \"C\", \"D\"]) == [\"a\", \"b\"]", "assert total_match([\"a\", \"b\"], [\"hI\", \"H\", \"i\"]) == [\"hI\", \"i\"]", "assert total_match([\"4\", \"1\", \"2\", \"3\", \"4\", \"5\"], [\"4\", \"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]", "assert total_match([\"a\", \"b\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"a\", \"b\"]", "assert total_match([\"a\", \"b\"], [\"h\", \"i\", \"j\", \"k\", \"l\"]) == [\"a\", \"b\"]", "assert total_match([\"hello\", \"world\"], [\"heLLo\", \"woRLD\"]) == [\"HELLO\", \"WORLD\"]", "assert total_match([\"hello\", \"world\"], [\"hi\", \"hi\", \"hi\", \"world\", \"world\"]) == [\"hi\", \"hi\", \"hi\"]"]}
{"HumanEval/75": ["assert is_multiply_prime(3) == False", "assert is_multiply_prime(9) == False", "assert is_multiply_prime(27) == True", "assert is_multiply_prime(81) == True", "assert is_multiply_prime(100) == False", "assert is_multiply_prime(24) == False", "assert is_multiply_prime(15) == False", "assert is_multiply_prime(36) == True", "assert is_multiply_prime(120) == True", "assert is_multiply_prime(3) == True", "assert is_multiply_prime(15) == True", "assert is_multiply_prime(18) == False", "assert is_multiply_prime(42) == False", "assert is_multiply_prime(55) == True", "assert is_multiply_prime(60) == False", "assert is_multiply_prime(120) == False", "assert is_multiply_prime(300) == False", "assert is_multiply_prime(2) == False", "assert is_multiply_prime(5) == True", "assert is_multiply_prime(6) == False", "assert is_multiply_prime(9) == True", "assert is_multiply_prime(10) == False", "assert is_multiply_prime(8) == False", "assert is_multiply_prime(20) == False", "assert is_multiply_prime(12) == True", "assert is_multiply_prime(4) == False", "assert is_multiply_prime(180) == True", "assert is_multiply_prime(1200) == False", "assert is_multiply_prime(240) == True", "assert is_multiply_prime(29) == False", "assert is_multiply_prime(30) == True", "assert is_multiply_prime(41) == False", "assert is_multiply_prime(17) == False", "assert is_multiply_prime(89) == False", "assert is_multiply_prime(11) == False", "assert is_multiply_prime(12) == False", "assert is_multiply_prime(21) == True", "assert is_multiply_prime(24) == True", "assert is_multiply_prime(29) == True", "assert is_multiply_prime(23) == False", "assert is_multiply_prime(72) == True", "assert is_multiply_prime(45) == False", "assert is_multiply_prime(6) == True", "assert is_multiply_prime(36) == False", "assert is_multiply_prime(21) == False", "assert is_multiply_prime(81) == False", "assert is_multiply_prime(10) == True", "assert is_multiply_prime(5) == False", "assert is_multiply_prime(90) == False", "assert is_multiply_prime(18) == True", "assert is_multiply_prime(19) == False", "assert is_multiply_prime(243) == True", "assert is_multiply_prime(60) == True", "assert is_multiply_prime(42) == True", "assert is_multiply_prime(121) == False", "assert is_multiply_prime(84) == False", "assert is_multiply_prime(121) == True", "assert is_multiply_prime(27) == False", "assert is_multiply_prime(45) == True", "assert is_multiply_prime(54) == True", "assert is_multiply_prime(8) == True", "assert is_multiply_prime(180) == False", "assert is_multiply_prime(49) == False", "assert is_multiply_prime(50) == False", "assert is_multiply_prime(34) == True", "assert is_multiply_prime(31) == False", "assert is_multiply_prime(37) == True", "assert is_multiply_prime(11) == True", "assert is_multiply_prime(47) == False", "assert is_multiply_prime(99) == True", "assert is_multiply_prime(53) == True", "assert is_multiply_prime(71) == False", "assert is_multiply_prime(243) == False", "assert is_multiply_prime(210) == False", "assert is_multiply_prime(84) == True", "assert is_multiply_prime(91) == False", "assert is_multiply_prime(90) == True", "assert is_multiply_prime(108) == False", "assert is_multiply_prime(48) == True", "assert is_multiply_prime(144) == False", "assert is_multiply_prime(25) == True", "assert is_multiply_prime(25) == False", "assert is_multiply_prime(150) == True", "assert is_multiply_prime(20) == True", "assert is_multiply_prime(300) == True", "assert is_multiply_prime(23) == True", "assert is_multiply_prime(54) == False", "assert is_multiply_prime(144) == True", "assert is_multiply_prime(32) == True", "assert is_multiply_prime(101) == False", "assert is_multiply_prime(99) == False", "assert is_multiply_prime(14) == False", "assert is_multiply_prime(181) == False", "assert is_multiply_prime(32) == False", "assert is_multiply_prime(33) == False", "assert is_multiply_prime(34) == False", "assert is_multiply_prime(35) == False", "assert is_multiply_prime(75) == False", "assert is_multiply_prime(89) == True", "assert is_multiply_prime(102) == False", "assert is_multiply_prime(103) == False", "assert is_multiply_prime(104) == False"]}
{"HumanEval/76": ["assert is_simple_power(1, 2) == True", "assert is_simple_power(2, 2) == True", "assert is_simple_power(2, 3) == False", "assert is_simple_power(3, 2) == False", "assert is_simple_power(3, 1) == False", "assert is_simple_power(5, 3) == False", "assert is_simple_power(4, 2) == True", "assert is_simple_power(8, 3) == True", "assert is_simple_power(2, 1) == False", "assert is_simple_power(3, 3) == False", "assert is_simple_power(5, 4) == False", "assert is_simple_power(8, 2) == True", "assert is_simple_power(10, 3) == False", "assert is_simple_power(0, 2) == False", "assert is_simple_power(1, 1) == False", "assert is_simple_power(1, 0) == False", "assert is_simple_power(3, 4) == False", "assert is_simple_power(8, 3) == False", "assert is_simple_power(0, 0) == False", "assert is_simple_power(2, 4) == False", "assert is_simple_power(16, 2) == False", "assert is_simple_power(5, 5) == False", "assert is_simple_power(5, 2) == False", "assert is_simple_power(1, 2) == False", "assert is_simple_power(10, 2) == False", "assert is_simple_power(2, -2) == False", "assert is_simple_power(8, -2) == False", "assert is_simple_power(1, 4) == True", "assert is_simple_power(5, 2) == True", "assert is_simple_power(3, 3) == True", "assert is_simple_power(2, 3) == True", "assert is_simple_power(5, 5) == True", "assert is_simple_power(1, 3) == False", "assert is_simple_power(2, 0) == False", "assert is_simple_power(3, -3) == False", "assert is_simple_power(5, 10) == False", "assert is_simple_power(8, 4) == False", "assert is_simple_power(16, 2) == True", "assert is_simple_power(16, 3) == False", "assert is_simple_power(16, 4) == False", "assert is_simple_power(10, 2) == True", "assert is_simple_power(10, 1) == False", "assert is_simple_power(10, 0) == False", "assert is_simple_power(5, 1) == False", "assert is_simple_power(1, 3) == True", "assert is_simple_power(4, 2) == False", "assert is_simple_power(3, 5) == False", "assert is_simple_power(2, 10) == False", "assert is_simple_power(3, 0) == False", "assert is_simple_power(10, -2) == False", "assert is_simple_power(4, 3) == False", "assert is_simple_power(3, -2) == False", "assert is_simple_power(2, 4) == True", "assert is_simple_power(5, 0) == False", "assert is_simple_power(3, 2) == True", "assert is_simple_power(0, 1) == False", "assert is_simple_power(27, 3) == False"]}
{"HumanEval/77": ["assert iscube(1) == True", "assert iscube(2) == False", "assert iscube(-1) == True", "assert iscube(64) == True", "assert iscube(0) == True", "assert iscube(180) == False"]}
{"HumanEval/78": ["assert hex_key(\"123\") == 3", "assert hex_key(\"AB\") == 1", "assert hex_key(\"1077E\") == 2", "assert hex_key(\"ABED1A33\") == 4", "assert hex_key(\"2020\") == 2", "assert hex_key(\"123456789ABCDEF0\") == 6", "assert hex_key(\"1A\") == 1", "assert hex_key(\"0\") == 0", "assert hex_key(\"-1\") == 0", "assert hex_key(\"12\") == 1", "assert hex_key(\"2A\") == 1", "assert hex_key(\"11\") == 1", "assert hex_key(\"1234567890A\") == 2", "assert hex_key(\"1234567890BCDEFA\") == 4", "assert hex_key(\"abc\") == 0", "assert hex_key(\"1077e\") == 2", "assert hex_key(\"abed1a33\") == 4", "assert hex_key(\"123456789abcdef0\") == 6", "assert hex_key(\"\") == 0", "assert hex_key(\"1\") == 1", "assert hex_key(\"123456789ABCDEF0\") == 10", "assert hex_key(\"123456789ABCDEF0123456789ABCDEF0\") == 7", "assert hex_key(\"123\") == 1", "assert hex_key(\"1234\") == 1", "assert hex_key(\"12345\") == 1", "assert hex_key(\"123456\") == 1", "assert hex_key(\"1234567\") == 1", "assert hex_key(\"12345678\") == 1", "assert hex_key(\"12345678A\") == 1", "assert hex_key(\"12345678B\") == 1", "assert hex_key(\"12345678C\") == 1", "assert hex_key(\"12345678D\") == 1", "assert hex_key(\"12345678E\") == 1", "assert hex_key(\"12345678F\") == 1", "assert hex_key(\"12345678A1\") == 1", "assert hex_key(\"12345678B1\") == 1", "assert hex_key(\"12345678C1\") == 1", "assert hex_key(\"12345678D1\") == 1", "assert hex_key(\"12345678E1\") == 1", "assert hex_key(\"12345678F1\") == 1", "assert hex_key(\"12345678A2\") == 1", "assert hex_key(\"12345678B2\") == 1", "assert hex_key(\"12345678C2\") == 1", "assert hex_key(\"12345678D2\") == 1", "assert hex_key(\"12345678E2\") == 1", "assert hex_key(\"12345678F2\") == 1", "assert hex_key(\"12345678A3\") == 1", "assert hex_key(\"12345678B3\") == 1", "assert hex_key(\"2\") == 1", "assert hex_key(\"3\") == 1", "assert hex_key(\"4\") == 1", "assert hex_key(\"5\") == 1", "assert hex_key(\"6\") == 1", "assert hex_key(\"7\") == 1", "assert hex_key(\"8\") == 1", "assert hex_key(\"9\") == 1", "assert hex_key(\"A\") == 1", "assert hex_key(\"B\") == 1", "assert hex_key(\"C\") == 1", "assert hex_key(\"D\") == 1", "assert hex_key(\"E\") == 1", "assert hex_key(\"F\") == 1", "assert hex_key(\"10\") == 1", "assert hex_key(\"13\") == 1", "assert hex_key(\"14\") == 1", "assert hex_key(\"15\") == 1", "assert hex_key(\"16\") == 1", "assert hex_key(\"17\") == 1", "assert hex_key(\"18\") == 1", "assert hex_key(\"19\") == 1", "assert hex_key(\"20\") == 1", "assert hex_key(\"21\") == 1", "assert hex_key(\"22\") == 1", "assert hex_key(\"23\") == 1", "assert hex_key(\"24\") == 1", "assert hex_key(\"25\") == 1", "assert hex_key(\"26\") == 1", "assert hex_key(\"27\") == 1", "assert hex_key(\"28\") == 1", "assert hex_key(\"29\") == 1", "assert hex_key(\"30\") == 1", "assert hex_key(\"31\") == 1", "assert hex_key(\"32\") == 1", "assert hex_key(\"33\") == 1", "assert hex_key(\"34\") == 1", "assert hex_key(\"35\") == 1", "assert hex_key(\"36\") == 1", "assert hex_key(\"37\") == 1", "assert hex_key(\"38\") == 1", "assert hex_key(\"123456789ABCD\") == 4", "assert hex_key(\"4321\") == 3", "assert hex_key(\"1234567890\") == 0", "assert hex_key(\"123456789AB\") == 2", "assert hex_key(\"123456789BCDE\") == 4", "assert hex_key(\"123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\") == 15", "assert hex_key(\"222\") == 2", "assert hex_key(\"1234567890A\") == 6", "assert hex_key(\"ABCD\") == 1", "assert hex_key(\"1234567890AB\") == 4", "assert hex_key(\"1234567890BCDE\") == 5", "assert hex_key(\"1B\") == 1", "assert hex_key(\"1D\") == 1", "assert hex_key(\"1A1\") == 2", "assert hex_key(\"1A2\") == 2", "assert hex_key(\"1A3\") == 2", "assert hex_key(\"1A33\") == 4", "assert hex_key(\"1A331\") == 4", "assert hex_key(\"1A331A\") == 4", "assert hex_key(\"1A331AB\") == 4", "assert hex_key(\"1A331ABCD\") == 4", "assert hex_key(\"1A331ABCD1\") == 4", "assert hex_key(\"1A331ABCD1A\") == 4", "assert hex_key(\"1A331ABCD1A1\") == 4", "assert hex_key(\"1A331ABCD1A1A\") == 4", "assert hex_key(\"1A331ABCD1A1A1\") == 4", "assert hex_key(\"1A331ABCD1A1A1A\") == 4", "assert hex_key(\"1A331ABCD1A1A1A1\") == 4", "assert hex_key(\"1A331ABCD1A1A1A1A\") == 4", "assert hex_key(\"1A331ABCD1A1A1A1A1\") == 4", "assert hex_key(\"1A331ABCD1A1A1A1A1A\") == 4", "assert hex_key(\"1A331ABCD1A1A1A1A1A1\") == 4", "assert hex_key(\"1A331ABCD1A1A1A1A1A1A\") == 4", "assert hex_key(\"1A331ABCD1A1A1A1A1A1A1\") == 4", "assert hex_key(\"1C\") == 1", "assert hex_key(\"1E\") == 1", "assert hex_key(\"1F\") == 1", "assert hex_key(\"10\") == 0", "assert hex_key(\"123456789\") == 0", "assert hex_key(\"ABCD\") == 0", "assert hex_key(\"123456789ABCDEF0\") == 4"]}
{"HumanEval/79": ["assert decimal_to_binary(1) == \"db100\"", "assert decimal_to_binary(2) == \"db101\"", "assert decimal_to_binary(3) == \"db110\"", "assert decimal_to_binary(4) == \"db111\"", "assert decimal_to_binary(5) == \"db1000\"", "assert decimal_to_binary(6) == \"db1001\"", "assert decimal_to_binary(7) == \"db1010\"", "assert decimal_to_binary(8) == \"db1011\"", "assert decimal_to_binary(9) == \"db1100\"", "assert decimal_to_binary(10) == \"db1101\"", "assert decimal_to_binary(11) == \"db1110\"", "assert decimal_to_binary(12) == \"db1111\"", "assert decimal_to_binary(15) == \"db1111db\"", "assert decimal_to_binary(32) == \"db100000db\"", "assert decimal_to_binary(8) == \"db1000\"", "assert decimal_to_binary(8) == \"db100000\"", "assert decimal_to_binary(16) == \"db10000\"", "assert decimal_to_binary(32) == \"db100000\"", "assert decimal_to_binary(49) == \"db1111db\"", "assert decimal_to_binary(100) == \"db1000000\"", "assert decimal_to_binary(123) == \"db1111100\"", "assert decimal_to_binary(49) == \"db10101\"", "assert decimal_to_binary(127) == \"db111111\"", "assert decimal_to_binary(-8) == \"db10000\"", "assert decimal_to_binary(-16) == \"db1000\"", "assert decimal_to_binary(-32) == \"db100000\"", "assert decimal_to_binary(0) == \"db00000\"", "assert decimal_to_binary(24) == \"db111100\"", "assert decimal_to_binary(8) == \"db10000db\"", "assert decimal_to_binary(2) == \"db100db\"", "assert decimal_to_binary(-12) == \"db1101db\"", "assert decimal_to_binary(19) == \"db10110b\"", "assert decimal_to_binary(0) == \"db0000\"", "assert decimal_to_binary(12) == \"db00110b\"", "assert decimal_to_binary(-3) == \"db1110db\"", "assert decimal_to_binary(2) == \"db10\"", "assert decimal_to_binary(127) == \"db11111111\"", "assert decimal_to_binary(-127) == \"db00000000\"", "assert decimal_to_binary(0) == \"db00000000\"", "assert decimal_to_binary(8) == \"db100000db\"", "assert decimal_to_binary(16) == \"db10000db\"", "assert decimal_to_binary(24) == \"db11000db\"", "assert decimal_to_binary(48) == \"db1100000db\"", "assert decimal_to_binary(64) == \"db11000000db\"", "assert decimal_to_binary(80) == \"db110000000db\"", "assert decimal_to_binary(96) == \"db1100000000db\"", "assert decimal_to_binary(102) == \"db11000000000db\"", "assert decimal_to_binary(110) == \"db110000000000db\"", "assert decimal_to_binary(120) == \"db1100000000000db\"", "assert decimal_to_binary(128) == \"db11000000000000db\"", "assert decimal_to_binary(24) == \"db11110\"", "assert decimal_to_binary(48) == \"db111110\"", "assert decimal_to_binary(64) == \"db1111110\"", "assert decimal_to_binary(80) == \"db11111110\"", "assert decimal_to_binary(96) == \"db111111110\"", "assert decimal_to_binary(10) == \"db00000\"", "assert decimal_to_binary(12) == \"db000010\"", "assert decimal_to_binary(14) == \"db000110\"", "assert decimal_to_binary(15) == \"db001110\"", "assert decimal_to_binary(112) == \"db11000000000db\"", "assert decimal_to_binary(128) == \"db110000000000db\"", "assert decimal_to_binary(24) == \"db11110b\"", "assert decimal_to_binary(49) == \"db100100db\"", "assert decimal_to_binary(58) == \"db100110db\"", "assert decimal_to_binary(64) == \"db110000db\"", "assert decimal_to_binary(72) == \"db110000db\"", "assert decimal_to_binary(102) == \"db111111110\"", "assert decimal_to_binary(110) == \"db111111110\"", "assert decimal_to_binary(112) == \"db111111110\"", "assert decimal_to_binary(10) == \"db000000\"", "assert decimal_to_binary(11) == \"db000001\"", "assert decimal_to_binary(13) == \"db000100\"", "assert decimal_to_binary(14) == \"db001000\"", "assert decimal_to_binary(15) == \"db001001\"", "assert decimal_to_binary(16) == \"db001010\"", "assert decimal_to_binary(17) == \"db001100\"", "assert decimal_to_binary(18) == \"db001101\"", "assert decimal_to_binary(19) == \"db001110\"", "assert decimal_to_binary(20) == \"db001111\"", "assert decimal_to_binary(21) == \"db0011111\"", "assert decimal_to_binary(22) == \"db00111111\"", "assert decimal_to_binary(23) == \"db001111111\"", "assert decimal_to_binary(5) == \"db1110\"", "assert decimal_to_binary(6) == \"db1111\"", "assert decimal_to_binary(9) == \"db1001\"", "assert decimal_to_binary(10) == \"db1010\"", "assert decimal_to_binary(11) == \"db1011\"", "assert decimal_to_binary(12) == \"db1100\"", "assert decimal_to_binary(13) == \"db1101\"", "assert decimal_to_binary(14) == \"db1110\"", "assert decimal_to_binary(15) == \"db1111\"", "assert decimal_to_binary(33) == \"db100001db\"", "assert decimal_to_binary(34) == \"db100010db\"", "assert decimal_to_binary(35) == \"db100011db\"", "assert decimal_to_binary(36) == \"db100100db\"", "assert decimal_to_binary(37) == \"db100101db\"", "assert decimal_to_binary(38) == \"db100110db\"", "assert decimal_to_binary(39) == \"db100111db\"", "assert decimal_to_binary(40) == \"db101000db\"", "assert decimal_to_binary(41) == \"db101001db\"", "assert decimal_to_binary(42) == \"db101010db\"", "assert decimal_to_binary(4) == \"db110\"", "assert decimal_to_binary(8) == \"db1110\"", "assert decimal_to_binary(16) == \"db11110\"", "assert decimal_to_binary(64) == \"db1000000\"", "assert decimal_to_binary(128) == \"db10000000\"", "assert decimal_to_binary(256) == \"db100000000\""]}
{"HumanEval/80": ["assert is_happy(\"\") == False", "assert is_happy(\"a\") == False", "assert is_happy(\"aa\") == False", "assert is_happy(\"abcd\") == True", "assert is_happy(\"aabb\") == False", "assert is_happy(\"adb\") == True", "assert is_happy(\"xyy\") == False"]}
{"HumanEval/81": ["assert numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]) == ['A+', 'B', 'C-', 'C', 'A-']", "assert numerical_letter_grade([3, 4, 2, 1.7, 3.5]) == ['A-', 'B+', 'C', 'C-', 'A-']", "assert numerical_letter_grade([2, 1.7, 1.3, 1, 1.5]) == ['B-', 'C', 'C-', 'C', 'B-']", "assert numerical_letter_grade([1.7, 2, 1.3, 1.5, 1.5]) == ['B', 'C', 'C-', 'C', 'B']", "assert numerical_letter_grade([3, 4, 2, 1.7, 3.5]) == ['A-', 'B+', 'C', 'B-', 'A-']", "assert numerical_letter_grade([1.7, 3, 2, 4, 3.5]) == ['B-', 'A-', 'B+', 'C', 'A-']", "assert numerical_letter_grade([1.7, 2, 3, 4, 3.5]) == ['B-', 'A-', 'B+', 'C', 'A-']", "assert numerical_letter_grade([1.7, 2, 3, 4, 0]) == ['B-', 'A-', 'B+', 'C', 'A-']", "assert numerical_letter_grade([4.1, 3, 1.8, 2, 3.6]) == ['A+', 'B', 'C-', 'C', 'A-']", "assert numerical_letter_grade([4.2, 3, 2.0, 2, 3.4]) == ['A+', 'B', 'C', 'A-', 'B-']", "assert numerical_letter_grade([4.3, 3, 2.2, 2, 3.2]) == ['A+', 'B', 'C', 'A-', 'B-']", "assert numerical_letter_grade([4.4, 3, 2.4, 2, 3.0]) == ['A+', 'B', 'C', 'A-', 'B-']", "assert numerical_letter_grade([4.5, 3, 2.6, 2, 2.8]) == ['A+', 'B', 'C', 'A-', 'B-']", "assert numerical_letter_grade([4.6, 3, 2.8, 2, 2.6]) == ['A+', 'B', 'C', 'A-', 'B-']", "assert numerical_letter_grade([4.7, 3, 3.0, 2, 2.4]) == ['A+', 'B', 'C', 'A-', 'B-']", "assert numerical_letter_grade([4.8, 3, 3.2, 2, 2.2]) == ['A+', 'B', 'C', 'A-', 'B-']", "assert numerical_letter_grade([4.0, 3, 1.7, 2, 3.5, 2, 3.5]) == ['A+', 'B', 'C-', 'C', 'A-', 'B']", "assert numerical_letter_grade([1.0, 1.5, 2.0, 2.5, 3.0, 3.5, 4.0]) == ['D+', 'D', 'D-', 'C', 'C', 'C']", "assert numerical_letter_grade([3.9, 2, 1.8, 2, 3.3]) == ['A', 'B', 'C-', 'C', 'A-']", "assert numerical_letter_grade([4.2, 3, 1.8, 2, 3.5]) == ['A+', 'B', 'C-', 'C', 'A-']", "assert numerical_letter_grade([3.0, 2, 1.7, 2, 3.5]) == ['B+', 'B', 'C-', 'C', 'A-']", "assert numerical_letter_grade([4.1, 3, 1.8, 2, 3.3]) == ['A+', 'B', 'C-', 'C', 'A-']", "assert numerical_letter_grade([3.5, 2, 1.8, 2, 3.5]) == ['A+', 'B', 'C-', 'C', 'A-']", "assert numerical_letter_grade([3.5, 2, 1.8, 2, 3.3]) == ['A+', 'B', 'C-', 'C', 'A-']", "assert numerical_letter_grade([1.0, 2, 1.5, 1.8, 2.5]) == ['D+', 'C', 'C', 'C', 'C']", "assert numerical_letter_grade([2.0, 1.5, 1.2, 1.9, 2.0]) == ['B+', 'B', 'B-', 'B', 'B']", "assert numerical_letter_grade([1.5, 1.2, 1.1, 1.0, 1.1]) == ['C+', 'C', 'C', 'C', 'C']", "assert numerical_letter_grade([0.5, 0.5, 0.5, 0.5, 0.5]) == ['F', 'F', 'F', 'F', 'F']", "assert numerical_letter_grade([1.8, 2, 2.2, 1.9, 2.8]) == ['A-', 'B', 'B', 'A-', 'B']", "assert numerical_letter_grade([1.5, 1.5, 1.5, 1.5, 1.5]) == ['D+', 'D+', 'D+', 'D+', 'D+']", "assert numerical_letter_grade([0.5, 0.5, 0.5, 0.5, 0.5]) == ['D+', 'D+', 'D+', 'D+', 'D+']", "assert numerical_letter_grade([0.0, 0.0, 0.0, 0.0, 0.0]) == ['E', 'E', 'E', 'E', 'E']", "assert numerical_letter_grade([4.0, 3, 1.7, 2, 3.5, 2, 1.3, 0.7, 0.0, 0.0, 0.0, 0.0]) == ['A+', 'B', 'C-', 'C', 'A-', 'D+', 'D', 'F', 'F', 'F', 'F']", "assert numerical_letter_grade([4.0, 3, 1.7, 2, 3.5, 1.3, 0.0, 0.0, 0.0, 0.0, 0.0]) == ['A+', 'B', 'C-', 'C', 'A-', 'D+', 'D', 'F']", "assert numerical_letter_grade([1.0, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'E']", "assert numerical_letter_grade([4.0, 3, 1.7, 2, 3.5, 2.5]) == ['A+', 'B', 'C-', 'C', 'A-', 'B']", "assert numerical_letter_grade([4.0, 3, 1.7, 2, 3.5, 2.5, 1.7]) == ['A+', 'B', 'C-', 'C', 'A-', 'B', 'C']", "assert numerical_letter_grade([4.0, 3, 1.7, 2, 3.5, 2.5, 1.7, 1.3]) == ['A+', 'B', 'C-', 'C', 'A-', 'B', 'C', 'D']", "assert numerical_letter_grade([4.0, 3, 1.7, 2, 3.5, 2.5, 1.7, 1.3, 1.0]) == ['A+', 'B', 'C-', 'C', 'A-', 'B', 'C', 'D', 'F']", "assert numerical_letter_grade([4.0, 3, 1.7, 2, 3.5, 2.5, 1.7, 1.3, 1.0, 0.5]) == ['A+', 'B', 'C-', 'C', 'A-', 'B', 'C', 'D', 'F', 'E']", "assert numerical_letter_grade([3.9, 2, 1.8, 1.5, 2.2]) == ['A', 'B', 'C-', 'C', 'F']", "assert numerical_letter_grade([4.2, 3.8, 1.9, 2.1, 3.4]) == ['A+', 'B', 'C', 'B', 'A-']", "assert numerical_letter_grade([3.1, 2, 1.6, 1.4, 2.1]) == ['B+', 'C', 'C', 'C', 'D']", "assert numerical_letter_grade([2.8, 1.9, 1.6, 1.5, 2.2]) == ['B', 'C', 'C', 'C', 'F']", "assert numerical_letter_grade([4.1, 3.5, 1.9, 2.2, 3.3]) == ['A+', 'B', 'C', 'B', 'A-']", "assert numerical_letter_grade([3.8, 2, 1.6, 1.5, 2.2]) == ['B+', 'C', 'C', 'C', 'D']", "assert numerical_letter_grade([3.2, 2, 1.6, 1.5, 2.2]) == ['B+', 'C', 'C', 'C', 'D']", "assert numerical_letter_grade([3.1, 2, 1.6, 1.5, 2.2]) == ['B+', 'C', 'C', 'C', 'D']", "assert numerical_letter_grade([1.8, 2, 1.5, 1.9, 1.6]) == ['D+', 'D', 'F', 'F', 'F']", "assert numerical_letter_grade([3.2, 3.1, 3.0, 3.0, 3.0]) == ['B+', 'B+', 'B+', 'B+', 'B+']", "assert numerical_letter_grade([2.9, 2.8, 2.7, 2.6, 2.5]) == ['C+', 'C+', 'C+', 'C+', 'C+']", "assert numerical_letter_grade([1.5, 1.4, 1.3, 1.2, 1.1]) == ['D+', 'D+', 'D+', 'D+', 'D+']", "assert numerical_letter_grade([0.9, 0.8, 0.7, 0.6, 0.5]) == ['D+', 'D+', 'D+', 'D+', 'D+']", "assert numerical_letter_grade([4.2, 3, 2, 1.9, 3.4]) == ['A+', 'B', 'C-', 'C', 'A-']", "assert numerical_letter_grade([4.3, 3, 1.9, 2, 3.2]) == ['A+', 'B', 'C-', 'C', 'A-']", "assert numerical_letter_grade([4.4, 3, 2, 1.8, 3.0]) == ['A+', 'B', 'C-', 'C', 'A-']", "assert numerical_letter_grade([4.5, 3, 2, 1.7, 2.9]) == ['A+', 'B', 'C-', 'C', 'A-']", "assert numerical_letter_grade([4.6, 3, 1.9, 2, 3.1]) == ['A+', 'B', 'C-', 'C', 'A-']", "assert numerical_letter_grade([4.7, 3, 2, 1.8, 3.3]) == ['A+', 'B', 'C-', 'C', 'A-']", "assert numerical_letter_grade([4.8, 3, 2, 1.7, 3.5]) == ['A+', 'B', 'C-', 'C', 'A-']", "assert numerical_letter_grade([4.9, 3, 2, 1.8, 3.7]) == ['A+', 'B', 'C-', 'C', 'A-']", "assert numerical_letter_grade([3, 4.0, 2, 1.5, 1.7]) == ['B', 'A+', 'C-', 'C', 'A-']", "assert numerical_letter_grade([1.0, 2, 3, 4.0, 5]) == ['D+', 'D', 'D-', 'D', 'E']", "assert numerical_letter_grade([2, 1.5, 2, 3, 4]) == ['B-', 'B', 'B', 'B', 'C+']", "assert numerical_letter_grade([1.7, 1.5, 1.5, 1.5, 1.5]) == ['C', 'C', 'C', 'C', 'C']", "assert numerical_letter_grade([4.0, 3, 2, 1.5, 1.5]) == ['A+', 'B', 'C', 'C', 'A-']", "assert numerical_letter_grade([1.0, 1.5, 1.8, 2.0, 2.5]) == ['D+', 'D', 'D', 'D', 'D']", "assert numerical_letter_grade([2.0, 1.5, 1.7, 1.5, 1.5]) == ['C+', 'C', 'C', 'C', 'C']", "assert numerical_letter_grade([1.0, 1.0, 1.0, 1.0, 1.0]) == ['F', 'F', 'F', 'F', 'F']", "assert numerical_letter_grade([3.5, 3.0, 2.5, 2.0, 1.5]) == ['A+', 'B', 'C-', 'C', 'A-']", "assert numerical_letter_grade([3.8, 2, 1.9, 1.5, 2.3]) == ['A-', 'B', 'C', 'C', 'B-']", "assert numerical_letter_grade([4.3, 4.5, 4.1, 4.2, 4.4]) == ['A+', 'A+', 'A+', 'A+', 'A+']", "assert numerical_letter_grade([3.2, 2, 1.5, 1.2, 1.8]) == ['B-', 'B', 'B-', 'B', 'B-']", "assert numerical_letter_grade([1.8, 1.5, 1.2, 1.1, 1.0]) == ['D+', 'D+', 'D+', 'D+', 'D+']", "assert numerical_letter_grade([0.8, 0.7, 0.6, 0.5, 0.4]) == ['D', 'D', 'D', 'D', 'D']", "assert numerical_letter_grade([4.0, 3, 1.7, 2, 3.5, 1.0]) == ['A+', 'B', 'C-', 'C', 'D-', 'A-']", "assert numerical_letter_grade([3.8, 2.5, 1.9, 1.2, 0.5]) == ['A-', 'B+', 'C+', 'C', 'B-', 'F']", "assert numerical_letter_grade([3, 2, 1.5, 0, 0]) == ['D', 'F', 'F', 'F', 'F']", "assert numerical_letter_grade([1.5, 1.5, 1.5, 1.5, 1.5]) == ['D', 'D', 'D', 'D', 'D']", "assert numerical_letter_grade([0, 0, 0, 0, 0]) == ['E', 'E', 'E', 'E', 'E']", "assert numerical_letter_grade([4.0, 3, 1.7, 2, 3.5, 2.8]) == ['A+', 'B', 'C-', 'C', 'A-', 'B-']", "assert numerical_letter_grade([1.0, 2, 3, 4, 5, 6]) == ['D+', 'D', 'D-', 'D', 'D-', 'D-']", "assert numerical_letter_grade([1.8, 1.5, 1.2, 1.1, 1.0]) == ['D+', 'D', 'D-', 'D', 'F']", "assert numerical_letter_grade([4.0, 3, 1.7, 2, 3.5, 1.0]) == ['A+', 'B', 'C-', 'C', 'A-', 'D-']", "assert numerical_letter_grade([4.0, 3, 1.7, 2, 3.5, 1.0, 0.0]) == ['A+', 'B', 'C-', 'C', 'A-', 'D-', 'E']", "assert numerical_letter_grade([1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]) == ['F'] * 8", "assert numerical_letter_grade([3, 4, 2, 1.8, 1.5]) == ['B', 'A+', 'B-', 'C+', 'C']", "assert numerical_letter_grade([1.5, 2, 1.8, 2, 3.5]) == ['D+', 'C-', 'B+', 'B', 'A-']", "assert numerical_letter_grade([0, 0, 0, 0, 0]) == []", "assert numerical_letter_grade([5, 5, 5, 5, 5]) == ['A+', 'A+', 'A+', 'A+', 'A+']", "assert numerical_letter_grade([4.1, 3, 1.8, 2, 3.4]) == ['A+', 'B', 'C-', 'C', 'A-']", "assert numerical_letter_grade([4.2, 3, 2.0, 1.9, 3.3]) == ['A+', 'B', 'C', 'B-', 'A-']", "assert numerical_letter_grade([4.3, 3, 2.2, 2.1, 3.2]) == ['A+', 'B', 'C', 'B', 'A-']", "assert numerical_letter_grade([4.4, 3, 2.4, 2.3, 3.1]) == ['A+', 'B', 'C', 'B', 'A-']", "assert numerical_letter_grade([4.5, 3, 2.5, 2.6, 3.0]) == ['A+', 'B', 'C', 'B', 'A-']", "assert numerical_letter_grade([4.6, 3, 2.7, 2.8, 2.9]) == ['A+', 'B', 'C', 'B', 'A-']", "assert numerical_letter_grade([4.7, 3, 2.9, 3.0, 2.8]) == ['A+', 'B', 'C', 'B', 'A-']", "assert numerical_letter_grade([4.8, 3, 3.1, 3.2, 2.7]) == ['A+', 'B', 'C', 'B', 'A-']", "assert numerical_letter_grade([4.9, 3, 3.3, 3.4, 2.6]) == ['A+', 'B', 'C', 'B', 'A-']", "assert numerical_letter_grade([4.2, 3, 2.0, 2, 3.3]) == ['A+', 'B', 'C', 'B-', 'A-']", "assert numerical_letter_grade([4.3, 3, 2.2, 2, 3.2]) == ['A+', 'B', 'C', 'B', 'A-']", "assert numerical_letter_grade([4.4, 3, 2.4, 2, 3.1]) == ['A+', 'B', 'C', 'B', 'A-']", "assert numerical_letter_grade([4.5, 3, 2.5, 2, 3.0]) == ['A+', 'B', 'C', 'B', 'A-']", "assert numerical_letter_grade([4.6, 3, 2.6, 2, 2.9]) == ['A+', 'B', 'C', 'B', 'A-']", "assert numerical_letter_grade([4.7, 3, 2.7, 2, 2.8]) == ['A+', 'B', 'C', 'B', 'A-']", "assert numerical_letter_grade([4.8, 3, 2.8, 2, 2.7]) == ['A+', 'B', 'C', 'B', 'A-']", "assert numerical_letter_grade([4.0, 3, 1.7, 2, 3.5, 1.3]) == ['A+', 'B', 'C-', 'C', 'A-', 'D']", "assert numerical_letter_grade([4.0, 3, 1.7, 2, 3.5, 1.3, 0.7]) == ['A+', 'B', 'C-', 'C', 'A-', 'D', 'F']", "assert numerical_letter_grade([4.0, 3, 1.7, 2, 3.5, 1.3, 0.7, 0.0]) == ['A+', 'B', 'C-', 'C', 'A-', 'D', 'F', 'E']", "assert numerical_letter_grade([4.0, 3, 1.7, 2, 3.5, 1.3, 0.7, 0.0, 0.0]) == ['A+', 'B', 'C-', 'C', 'A-', 'D', 'F', 'E', 'E']", "assert numerical_letter_grade([4.0, 3, 1.7, 2, 3.5, 1.3, 0.7, 0.0, 0.0, 0.0]) == ['A+', 'B', 'C-', 'C', 'A-', 'D', 'F', 'E', 'E', 'E']", "assert numerical_letter_grade([1.0, 1.2, 1.8, 2.5, 3.0]) == ['D+', 'D', 'C-', 'C', 'A-']", "assert numerical_letter_grade([3.5, 3.0, 2.5, 1.5, 1.0]) == ['A+', 'B', 'C-', 'C', 'F']", "assert numerical_letter_grade([4.0, 4.0, 4.0, 4.0, 4.0]) == ['A+', 'A+', 'A+', 'A+', 'A+']"]}
{"HumanEval/82": ["assert prime_length(\"\") == True", "assert prime_length(\"abc\") == True", "assert prime_length(\"abcdefg\") == True", "assert prime_length(\"abcdefghijklmnopqrstuvwxyz\") == True", "assert prime_length(\"12345\") == False", "assert prime_length(\"0\") == False", "assert prime_length(\"9\") == False", "assert prime_length(\"-1\") == False", "assert prime_length('hello') == True", "assert prime_length('abc') == True", "assert prime_length('123') == True", "assert prime_length('456') == True", "assert prime_length('987') == True", "assert prime_length('') == False", "assert prime_length('abcdefg') == False", "assert prime_length('abcdefghijklmnopqrstuvwxyz') == False", "assert prime_length('0123456789') == False", "assert prime_length(\"a\") == True", "assert prime_length(\"bc\") == True", "assert prime_length(\"abccba\") == True", "assert prime_length(\"pqrstuvwxyz\") == False", "assert prime_length(\"hello world\") == True", "assert prime_length('abcdcba') == True", "assert prime_length('kittens') == True", "assert prime_length('orange') == False", "assert prime_length('12345') == False", "assert prime_length('987654321') == True", "assert prime_length('0') == False", "assert prime_length('pizza') == False", "assert prime_length('9') == False", "assert prime_length(\"123\") == True", "assert prime_length(\"9999999999\") == True", "assert prime_length(\"9\") == True", "assert prime_length(\"8\") == True", "assert prime_length(\"4\") == True", "assert prime_length(\"6\") == True", "assert prime_length(\"5\") == True", "assert prime_length(\"11\") == True", "assert prime_length(\"12\") == True", "assert prime_length(\"55\") == False", "assert prime_length(\"34a\") == False", "assert prime_length(\"hello\") == True", "assert prime_length(\"world\") == False", "assert prime_length('') == True", "assert prime_length('xyz') == True", "assert prime_length('1a') == False", "assert prime_length('4') == False", "assert prime_length('9999999999') == True", "assert prime_length(\"abab\") == True", "assert prime_length(\"xyz\") == False", "assert prime_length('a') == False", "assert prime_length('abc') == False", "assert prime_length('123456789') == False", "assert prime_length('1234567890123456789') == True", "assert prime_length('234567890123456789') == True", "assert prime_length(\"12345\") == True", "assert prime_length(\"123456789\") == False", "assert prime_length(\"hello world\") == False", "assert prime_length(\"hello123\") == False", "assert prime_length(\"hello-world\") == False", "assert prime_length(\"bcd\") == False", "assert prime_length(\"kitten\") == True", "assert prime_length('12a') == False", "assert prime_length('pqr') == False", "assert prime_length('hello world') == False", "assert prime_length(\"456\") == True", "assert prime_length(\"987\") == True", "assert prime_length(\"kitten123\") == False", "assert prime_length(\"10\") == False", "assert prime_length(\"12\") == False", "assert prime_length(\"13\") == False", "assert prime_length(\"abcde\") == True", "assert prime_length(\"zxcvbnm\") == False", "assert prime_length(\"aabbccddeeffgghhiiiii\") == False", "assert prime_length(\"1234\") == True", "assert prime_length(\"abcdefg\") == False", "assert prime_length('pqr') == True", "assert prime_length('kitten') == True", "assert prime_length('snake') == False", "assert prime_length('2345a') == False", "assert prime_length('123') == False", "assert prime_length('123456789') == True", "assert prime_length('abcdefghijklmnopqrstuvwxyz') == True", "assert prime_length(\"1234567890\") == False", "assert prime_length('a') == True", "assert prime_length('bc') == True", "assert prime_length('bcd') == False", "assert prime_length('xyz') == False", "assert prime_length('hello world') == True", "assert prime_length('12345') == True", "assert prime_length(\"pqr\") == False", "assert prime_length(\"p\") == True", "assert prime_length(\"abcde\") == False", "assert prime_length(\"abcdef\") == False", "assert prime_length(\"abcdefghi\") == False", "assert prime_length(\"abcdefghij\") == False", "assert prime_length('b') == False", "assert prime_length('c') == False", "assert prime_length('d') == False", "assert prime_length('e') == False", "assert prime_length('f') == False", "assert prime_length('g') == False", "assert prime_length('h') == False", "assert prime_length('i') == False", "assert prime_length('j') == False", "assert prime_length('k') == False", "assert prime_length('l') == False", "assert prime_length('m') == False", "assert prime_length('n') == False", "assert prime_length('o') == False", "assert prime_length('p') == False", "assert prime_length('q') == False", "assert prime_length('r') == False", "assert prime_length('s') == False", "assert prime_length('t') == False", "assert prime_length('u') == False", "assert prime_length('v') == False", "assert prime_length('w') == False", "assert prime_length('x') == False", "assert prime_length('y') == False", "assert prime_length('z') == False", "assert prime_length('1') == False", "assert prime_length('2') == False", "assert prime_length('3') == False", "assert prime_length('5') == False", "assert prime_length('6') == False", "assert prime_length('7') == False", "assert prime_length('8') == False", "assert prime_length('abcde') == True", "assert prime_length('abcdef') == True", "assert prime_length('abcdefg') == True", "assert prime_length('abcdefgh') == True", "assert prime_length('abcdefghi') == True", "assert prime_length('abcdefghij') == True", "assert prime_length('abcdefghijk') == True", "assert prime_length('abcdefghijkl') == True", "assert prime_length('abcdefghijklm') == True", "assert prime_length('abcdefghijklmn') == True", "assert prime_length(\"pqrstuv\") == True", "assert prime_length(\"kitten\") == False", "assert prime_length(\"bcd\") == True", "assert prime_length(\"8\") == False", "assert prime_length(\"7\") == False", "assert prime_length('4321') == False", "assert prime_length(\"56789\") == True"]}
{"HumanEval/83": ["assert starts_one_ends(1) == 1", "assert starts_one_ends(2) == 1", "assert starts_one_ends(3) == 2", "assert starts_one_ends(4) == 2", "assert starts_one_ends(5) == 3", "assert starts_one_ends(6) == 3", "assert starts_one_ends(7) == 3", "assert starts_one_ends(8) == 3", "assert starts_one_ends(9) == 3", "assert starts_one_ends(10) == 1", "assert starts_one_ends(100) == 3", "assert starts_one_ends(1000) == 4", "assert starts_one_ends(10000) == 5", "assert starts_one_ends(100000) == 6", "assert starts_one_ends(1000000) == 7", "assert starts_one_ends(10000000) == 8", "assert starts_one_ends(100000000) == 9", "assert starts_one_ends(10) == 3", "assert starts_one_ends(100) == 9", "assert starts_one_ends(1000) == 8", "assert starts_one_ends(10000) == 7", "assert starts_one_ends(1000000) == 5", "assert starts_one_ends(10000000) == 4", "assert starts_one_ends(7) == 4", "assert starts_one_ends(8) == 4", "assert starts_one_ends(9) == 4", "assert starts_one_ends(8) == 2", "assert starts_one_ends(9) == 1", "assert starts_one_ends(10) == 2", "assert starts_one_ends(11) == 1", "assert starts_one_ends(12) == 2", "assert starts_one_ends(13) == 1", "assert starts_one_ends(14) == 2", "assert starts_one_ends(15) == 1", "assert starts_one_ends(6) == 2", "assert starts_one_ends(8) == 1", "assert starts_one_ends(9) == 0", "assert starts_one_ends(10) == 0", "assert starts_one_ends(11) == 0", "assert starts_one_ends(12) == 1", "assert starts_one_ends(2) == 2", "assert starts_one_ends(3) == 3", "assert starts_one_ends(4) == 4", "assert starts_one_ends(5) == 4", "assert starts_one_ends(7) == 2", "assert starts_one_ends(12) == 0", "assert starts_one_ends(13) == 0", "assert starts_one_ends(14) == 0", "assert starts_one_ends(15) == 0", "assert starts_one_ends(11) == 4", "assert starts_one_ends(12) == 5", "assert starts_one_ends(13) == 6", "assert starts_one_ends(14) == 7", "assert starts_one_ends(15) == 8", "assert starts_one_ends(9) == 2", "assert starts_one_ends(4) == 3", "assert starts_one_ends(6) == 4", "assert starts_one_ends(7) == 5", "assert starts_one_ends(8) == 5", "assert starts_one_ends(9) == 5", "assert starts_one_ends(10) == 5", "assert starts_one_ends(11) == 6", "assert starts_one_ends(12) == 7", "assert starts_one_ends(13) == 8", "assert starts_one_ends(14) == 9", "assert starts_one_ends(15) == 10", "assert starts_one_ends(5) == 2", "assert starts_one_ends(10) == 4", "assert starts_one_ends(11) == 3", "assert starts_one_ends(11) == 5", "assert starts_one_ends(12) == 6", "assert starts_one_ends(13) == 7", "assert starts_one_ends(14) == 8", "assert starts_one_ends(15) == 9", "assert starts_one_ends(100) == 4", "assert starts_one_ends(10000) == 16", "assert starts_one_ends(100000) == 32", "assert starts_one_ends(1000000) == 64", "assert starts_one_ends(10000000) == 128", "assert starts_one_ends(4) == 1", "assert starts_one_ends(5) == 1", "assert starts_one_ends(8) == 0", "assert starts_one_ends(5) == 5", "assert starts_one_ends(6) == 6", "assert starts_one_ends(7) == 7", "assert starts_one_ends(8) == 8", "assert starts_one_ends(9) == 9", "assert starts_one_ends(1000) == 89", "assert starts_one_ends(10000) == 889", "assert starts_one_ends(100000) == 8889", "assert starts_one_ends(1000000) == 88889", "assert starts_one_ends(14) == 1", "assert starts_one_ends(16) == 2", "assert starts_one_ends(17) == 1", "assert starts_one_ends(18) == 1", "assert starts_one_ends(19) == 1", "assert starts_one_ends(20) == 1", "assert starts_one_ends(100) == 2", "assert starts_one_ends(1000) == 3", "assert starts_one_ends(10000) == 4", "assert starts_one_ends(100000) == 5", "assert starts_one_ends(1000000) == 6", "assert starts_one_ends(10000000) == 7", "assert starts_one_ends(100000000) == 8"]}
{"HumanEval/84": ["assert solve(1000) == \"1\"", "assert solve(150) == \"110\"", "assert solve(147) == \"1100\"", "assert solve(1234) == \"11010\"", "assert solve(1999) == \"1111\"", "assert solve(10000) == \"10000\"", "assert solve(10001) == \"10001\"", "assert solve(100000) == \"100000\"", "assert solve(100001) == \"100001\"", "assert solve(1) == \"1\"", "assert solve(10) == \"10\"", "assert solve(1000) == \"1000\"", "assert solve(14) == \"14\"", "assert solve(101) == \"1011\"", "assert solve(15) == \"1110\"", "assert solve(100) == \"1000\"", "assert solve(148) == \"11010\"", "assert solve(149) == \"11011\"", "assert solve(151) == \"110110\"", "assert solve(999) == \"1001\"", "assert solve(81) == \"101\"", "assert solve(100) == \"100\"", "assert solve(15) == \"11\"", "assert solve(14) == \"110\"", "assert solve(7) == \"111\"", "assert solve(0) == \"0\"", "assert solve(10) == \"1\"", "assert solve(987) == \"1001\"", "assert solve(1000000) == \"1000000\"", "assert solve(15000) == \"11000\"", "assert solve(100000) == \"110000\"", "assert solve(1000000) == \"1100000\"", "assert solve(1234) == \"11100\"", "assert solve(14) == \"10\"", "assert solve(187) == \"1110\"", "assert solve(127) == \"1111\"", "assert solve(199) == \"11111\"", "assert solve(10001) == \"10011\"", "assert solve(10010) == \"10100\"", "assert solve(10101) == \"10110\"", "assert solve(148) == \"1110\"", "assert solve(1234) == \"11110\"", "assert solve(9876) == \"111110\"", "assert solve(12345) == \"1110010\"", "assert solve(149) == \"11010\"", "assert solve(987) == \"10101\"", "assert solve(1234) == \"11000\"", "assert solve(123) == \"110\"", "assert solve(10) == \"101\"", "assert solve(15) == \"111\"", "assert solve(12345) == \"11010\"", "assert solve(100) == \"1010\"", "assert solve(148) == \"1101\"", "assert solve(151) == \"1110\"", "assert solve(152) == \"110110\"", "assert solve(149) == \"11000\"", "assert solve(1001) == \"1001\"", "assert solve(9876) == \"100110\"", "assert solve(197) == \"1110\"", "assert solve(128) == \"1000\"", "assert solve(101) == \"101\"", "assert solve(15000) == \"10100\"", "assert solve(12345) == \"110101\"", "assert solve(12345) == \"111010\"", "assert solve(100001) == \"100010\"", "assert solve(1000012345) == \"1000111010\"", "assert solve(151) == \"11011\"", "assert solve(1001) == \"10101\"", "assert solve(100) == \"10100\"", "assert solve(18) == \"100\"", "assert solve(17) == \"111\"", "assert solve(123) == \"1111\"", "assert solve(100000) == \"101000\"", "assert solve(147000000) == \"101000000\"", "assert solve(12345) == \"11010101\"", "assert solve(199) == \"1110\"", "assert solve(123) == \"111\"", "assert solve(1) == \"101\"", "assert solve(0) == \"000\"", "assert solve(1234) == \"11101\"", "assert solve(15000) == \"10000\"", "assert solve(12345) == \"11101\"", "assert solve(123456789) == \"1110111011101\"", "assert solve(1234567890) == \"11101110111011101\"", "assert solve(123456) == \"110101010\"", "assert solve(1000000) == \"10000000\"", "assert solve(100010) == \"100010\"", "assert solve(1000100) == \"1000100\"", "assert solve(100011) == \"100011\"", "assert solve(1000110) == \"1000110\"", "assert solve(10000000) == \"10000000\"", "assert solve(1001) == \"1010\"", "assert solve(1010) == \"1100\"", "assert solve(1100) == \"1100\"", "assert solve(1101) == \"1110\"", "assert solve(1110) == \"1110\"", "assert solve(197) == \"11101\"", "assert solve(187) == \"11011\"", "assert solve(152) == \"11000\"", "assert solve(247) == \"111011\"", "assert solve(347) == \"11111\"", "assert solve(1500000000) == \"11100000000\"", "assert solve(149) == \"11001\""]}
{"HumanEval/85": ["assert add([4, 2, 6, 7]) == 2", "assert add([1, 2, 3, 4]) == 2", "assert add([5, 4, 3, 2]) == 2", "assert add([8, 9, 7, 6]) == 0", "assert add([3, 2, 1, 0]) == 0", "assert add([-1, 2, 3, 4]) == 0", "assert add([1, 2, 3, 4]) == 4", "assert add([-1, 2, 3, 4]) == 2", "assert add([-1, -2, -3, -4]) == -3", "assert add([0, 0, 0, 0]) == 0", "assert add([5, 23, -11]) == 17", "assert add([-12, 0, 1]) == -11", "assert add([12, -3, 1]) == 10", "assert add([3, -2, 0]) == 1", "assert add([5, 4, 3, 6]) == 2", "assert add([7, 8, 9, 10]) == 0", "assert add([10, 9, 8, 7]) == 0", "assert add([-1, -2, -3, -4]) == -4", "assert add([-5, -6, -7, -8]) == -8", "assert add([-9, -8, -7, -6]) == -7", "assert add([3, 1, 5, 9]) == 2", "assert add([1, 2, 4, 6]) == 2", "assert add([8, 6, 10, 12]) == 2", "assert add([-1, 3, 5, 7]) == 2", "assert add([-2, -4, -6, -8]) == 2", "assert add([1, 3, 5, 7]) == 3", "assert add([2, 4, 6, 8]) == 2", "assert add([-1, -3, -5, -7]) == 2", "assert add([3, 5, 1, 9]) == 1", "assert add([5, 4, 3, 6]) == 0", "assert add([-3, -2, -1, 0]) == -3", "assert add([3, 5, 2, 9]) == 4", "assert add([1, 3, 8, 2]) == 2", "assert add([-1, 5, 3, 6]) == 3", "assert add([1, 2, 4, 6]) == 4", "assert add([1, 2, 3, 4]) == 3", "assert add([1, 2, 3, 4, 5]) == 4", "assert add([1, 2, 3, 4, 5, 6]) == 4", "assert add([1, 2, 3, 4, 5, 6, 7]) == 4", "assert add([1, 2, 3, 4, 5, 6, 7, 8]) == 4", "assert add([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 4", "assert add([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 4", "assert add([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == 4", "assert add([5, 6, 7, 8]) == 0", "assert add([9, 8, 7, 6]) == 0", "assert add([3, 1, 5, 9]) == 1", "assert add([8, 2, 4, 6]) == 4", "assert add([4, 5, 6, 7]) == 1", "assert add([8, 6, 4, 2]) == 0", "assert add([-2, -1, 2, 3]) == 0", "assert add([9, 10, 11, 12]) == 0", "assert add([-1, -2, -3, -4]) == -6", "assert add([5, 23, -11, 17]) == 0"]}
{"HumanEval/86": ["assert anti_shuffle('hello') == 'ehllo'", "assert anti_shuffle('Hi') == 'Hi'", "assert anti_shuffle('Hello World!!!') == 'Hello !!!Wdlor'", "assert anti_shuffle('Goodbye') == 'Goo dbie'", "assert anti_shuffle('Python is awesome') == 'Pytho sis wae awesom'", "assert anti_shuffle('This is a test') == 'Thsi is a tset'", "assert anti_shuffle('python is not a shell') == 'pytho sis not a shell'", "assert anti_shuffle('hi') == 'ehlo'", "assert anti_shuffle('hello world') == 'h!llo wdlr'", "assert anti_shuffle('hello world hello') == 'h!llo wdlr h!llow'", "assert anti_shuffle('hi') == 'hiello'", "assert anti_shuffle('Hey there!') == 'He ythere!'", "assert anti_shuffle('how are you?') == 'ho w are u?'", "assert anti_shuffle('What\\'s your name?') == 'Whats your name?'", "assert anti_shuffle('Goodbye') == 'Goobye'", "assert anti_shuffle('hello world') == 'ello world'", "assert anti_shuffle('Hello World!') == 'Hello !!!Wdlor'", "assert anti_shuffle('hello world') == 'hlello wdlro'", "assert anti_shuffle('hi') == 'heil'", "assert anti_shuffle('hello world') == 'hello !dlrow'", "assert anti_shuffle('Hello, World!') == 'Hello !dlrow!'", "assert anti_shuffle('Hello,World!') == 'Hello !dlrow!'", "assert anti_shuffle('Hello, World!') == 'Helllo !!!Wdlor'", "assert anti_shuffle('world hello') == 'wdlor hlelo'", "assert anti_shuffle('Hello, How Are You?') == 'Helllo , Wdlor'", "assert anti_shuffle('hello world how are you') == 'hlello wdlro how ar ur'", "assert anti_shuffle('hello world') == 'heIoWdlro'", "assert anti_shuffle('Goodbye') == 'dLobG'", "assert anti_shuffle('Python is awesome') == 'PythoWsAwesome'", "assert anti_shuffle('Python is easy to learn') == 'PythoEyToLearn'", "assert anti_shuffle('Python is a powerful language') == 'PythoPwerfulLang'", "assert anti_shuffle('Hello') == '!dlloH'", "assert anti_shuffle('world') == 'dlroW'", "assert anti_shuffle('hello world') == 'ehlloW'", "assert anti_shuffle('hello world again') == 'ehlloWagain'", "assert anti_shuffle('hello world') == 'hlelo wdlro'", "assert anti_shuffle('hello world!') == 'hlelo wdlro!'", "assert anti_shuffle('hi') == 'Hi'", "assert anti_shuffle('How are you?') == 'Ho w a re yo u?'", "assert anti_shuffle('This is a test') == 'Thi s i s a t e s t'", "assert anti_shuffle('Python is cool') == 'Pytho n i s c o o l'", "assert anti_shuffle('python is cool') == 'Pytho n i s c o o l'", "assert anti_shuffle('Python is not cool') == 'Pytho n i s n o t c o o l'", "assert anti_shuffle('hello world hello') == 'hlello wdlro hlello'", "assert anti_shuffle('Hello') == 'Ello'", "assert anti_shuffle('World') == 'Wdlr'", "assert anti_shuffle('hello world') == 'ehllo wdlr'", "assert anti_shuffle('hello world') == 'hEllo wOrld'", "assert anti_shuffle('hello world') == 'h!ewol'", "assert anti_shuffle('hello world hello') == 'h!ewolh!ewol'", "assert anti_shuffle('hi') == '!dlloH'", "assert anti_shuffle('Goodbye') == '!dloogbY'", "assert anti_shuffle('Python is awesome') == '!dloogbY PsyDawg'", "assert anti_shuffle('hi') == 'ehlll'", "assert anti_shuffle('hello world') == 'hllllooowrdd'", "assert anti_shuffle('hello world!') == 'hhhlllloooowrrdd'", "assert anti_shuffle('Hello') == 'Hellllo'", "assert anti_shuffle('world') == 'woldrll'", "assert anti_shuffle('hi') == 'Hellllo'", "assert anti_shuffle('HELLO WORLD') == 'Hello !!!Wdlor'", "assert anti_shuffle('Goodbye') == 'Gdby'", "assert anti_shuffle('Python is fun') == 'Pyton is fn'", "assert anti_shuffle('How are you?') == 'Hwo ar u?'", "assert anti_shuffle('What\\'s your name?') == 'Whats ur nme?'", "assert anti_shuffle('python') == 'pyton'", "assert anti_shuffle('Hello world!') == 'Hello wdlro!'", "assert anti_shuffle('hello world') == 'ehllo wdlro'", "assert anti_shuffle('hello world') == 'ehllo wlrd'", "assert anti_shuffle('hello world') == 'hlello wodru'", "assert anti_shuffle('hello world hello') == 'hlello wodru hlello'", "assert anti_shuffle('hello world') == 'hellowdlro'", "assert anti_shuffle('hello world hello') == 'hellowdlorho'", "assert anti_shuffle('hello world!') == 'hellowdlor!'", "assert anti_shuffle('hello world!!') == 'hellowdlor!!'", "assert anti_shuffle('Python is fun') == 'Pytho n is fu n'", "assert anti_shuffle('This is my first program') == 'Thi s i s m y firs t p rogram'", "assert anti_shuffle('My name is John') == 'M y na me i s J o h n'", "assert anti_shuffle('Python is a great language') == 'Py thon is a g reat languag e'", "assert anti_shuffle('What is your name?') == 'Wh at is you r name?'", "assert anti_shuffle('How are you doing today?') == 'H ow ar e y ou d oing to da y?'", "assert anti_shuffle('hello world') == 'helloworld'", "assert anti_shuffle('hi') == 'h!llo'", "assert anti_shuffle('hello world hello') == 'ehllo wdlro hllo'", "assert anti_shuffle('Hello world!') == '!dlloWdlor'", "assert anti_shuffle('hello world') == 'heello !ldowr'", "assert anti_shuffle('hello world hello') == 'heello !ldowr hlllo'", "assert anti_shuffle('hello world!') == 'heello !ldowr!'", "assert anti_shuffle('hello world again') == 'ehllo wdlra'", "assert anti_shuffle('Goodbye') == 'GooDBeiE'", "assert anti_shuffle('Python') == 'Pythn'", "assert anti_shuffle('Python is awesome') == 'PyThn nAwEsOo'", "assert anti_shuffle('This is a test') == 'Thsi i s a tst'", "assert anti_shuffle('hello world') == 'hlello wrold'", "assert anti_shuffle('Hello, world!') == 'Hello !!!Wdlor'", "assert anti_shuffle('Goodbye, cruel world.') == 'Gdby , crwld'", "assert anti_shuffle('goodbye') == 'goodbie'", "assert anti_shuffle('Python is awesome') == 'Pythonss awesomess'", "assert anti_shuffle('python is awesome') == 'Pythonss awesomess'", "assert anti_shuffle('This is a test') == 'Thisss is a tset'", "assert anti_shuffle('Hello') == 'Hllo'", "assert anti_shuffle('Hi') == 'Hllo'", "assert anti_shuffle('hello world') == 'ehllo dlroW'", "assert anti_shuffle('Goodbye') == 'Goobdyeb'", "assert anti_shuffle('hello world') == 'helolworl'", "assert anti_shuffle('hello world!') == 'heilworld'", "assert anti_shuffle('Hello, World!') == 'Hello , Wdlor!'", "assert anti_shuffle('hello,world') == 'ehllo,wdlr'", "assert anti_shuffle('How are you?') == 'Hwo ayr u?'", "assert anti_shuffle('Goodbye') == 'Gdbye'", "assert anti_shuffle('Python is awesome') == 'Pythn a8swe'", "assert anti_shuffle('I love coding') == 'I lvoe c8ding'", "assert anti_shuffle('My name is John') == 'Myn ame is Jhon'", "assert anti_shuffle('Python is cool') == 'Pyton i s c ool'", "assert anti_shuffle('How are you?') == 'Hw ar e u?'", "assert anti_shuffle('It\\'s a beautiful day today') == 'It\\'s a beautifu l day toda y'", "assert anti_shuffle('Hello, World!') == 'Hello,Wdlor!'", "assert anti_shuffle('hello world hello') == 'helloworldhelloworld'"]}
{"HumanEval/87": ["assert get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]", "assert get_row([], 1) == []", "assert get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]", "assert get_row([[1, 2], [3, 4], [5, 6]], 2) == [(0, 1), (1, 2)]", "assert get_row([[1, 2], [3, 4], [5, 6]], 1) == [(0, 0), (1, 1)]", "assert get_row([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 2) == [(0, 1), (1, 2)]", "assert get_row([[1, 2], [3, 4], [5, 6]], 0) == [(0, 0), (1, 0), (2, 0)]", "assert get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 2) == [(0, 4), (1, 0), (1, 5), (2, 0), (2, 5)]", "assert get_row([[1, 2, 3], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6]], 2) == [(0, 2), (1, 4)]", "assert get_row([[1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3]], 1) == [(0, 0), (0, 1), (0, 2), (0, 3), (0, 4), (0, 5)]", "assert get_row([[1, 2], [3, 4], [5, 6]], 2) == [(0, 1), (1, 0)]", "assert get_row([[1, 2], [3, 4], [5, 6]], 1) == [(0, 1), (1, 0)]", "assert get_row([[1, 2], [3, 4], [5, 6]], 0) == [(0, 1), (1, 0)]", "assert get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 2) == [(0, 1), (1, 0), (1, 4), (2, 5), (2, 0)]", "assert get_row([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3) == [(0, 1), (1, 2), (2, 3)]", "assert get_row([[1, 2], [1, 2, 3]], 2) == [(0, 1), (0, 2)]", "assert get_row([[1, 2, 3], [1, 2, 3], [1, 2, 3]], 3) == [(0, 0), (0, 1), (0, 2)]", "assert get_row([[1, 2, 3], [1, 2, 3], [1, 2, 3]], 2) == [(0, 1), (0, 2)]", "assert get_row([[1, 2, 3], [1, 2, 3], [1, 2, 3]], 3) == [(0, 1), (0, 2), (0, 3)]", "assert get_row([[1, 2, 3], [1, 2, 3], [1, 2, 3]], 2) == [(0, 1), (1, 2)]", "assert get_row([[1, 2], [1, 2], [1, 2]], 3) == [(0, 0), (0, 1), (0, 2)]", "assert get_row([[1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3]], 2) == [(0, 0), (0, 1), (0, 2), (0, 3), (0, 4), (0, 5)]", "assert get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 2) == [(0, 1), (1, 0)]", "assert get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 3) == [(0, 2), (1, 1), (2, 0)]", "assert get_row([[1, 2], [1, 3, 4], [1, 5, 6]], 2) == [(0, 1), (1, 2)]", "assert get_row([[1, 2], [1, 3, 4], [1, 5, 6]], 1) == [(0, 0), (0, 1), (0, 2)]", "assert get_row([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3) == [(0, 2), (1, 3)]", "assert get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 2) == [(0, 1), (1, 0), (1, 5), (2, 0)]", "assert get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 3) == [(0, 1), (1, 0), (1, 5), (2, 0)]", "assert get_row([[1, 2, 3], [1, 2, 3, 4], [1, 2, 3, 4, 5]], 2) == [(0, 2), (1, 4)]", "assert get_row([[1, 2], [1, 3], [1, 2, 3]], 2) == [(0, 1), (0, 2)]", "assert get_row([[1, 2], [1, 3], [1, 2, 3]], 1) == [(0, 0)]", "assert get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 2) == [(0, 2), (1, 1)]", "assert get_row([[1, 2], [3, 4], [5, 6]], 0) == [(0, 0), (0, 1), (0, 2)]", "assert get_row([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 1) == [(0, 0), (1, 1)]", "assert get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 2) == [(0, 1), (1, 2)]", "assert get_row([[1, 2], [1, 2, 3], [1, 2, 3, 4]], 2) == [(0, 2), (1, 3)]", "assert get_row([[1, 2], [1, 2, 3], [1, 2, 3, 4]], 4) == [(0, 2), (1, 3), (2, 4)]", "assert get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 2) == [(0, 2), (1, 3)]", "assert get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 3) == [(0, 2), (1, 3), (2, 5)]", "assert get_row([[1, 2], [3, 4], [5, 6], [7, 8], [9, 10], [11, 12]], 3) == [(0, 0), (1, 3), (2, 6)]", "assert get_row([[1, 2, 3], [1, 2, 3], [1, 2, 3]], 1) == [(0, 0), (0, 1), (0, 2)]", "assert get_row([[1, 2], [3, 4], [5, 6]], 1) == [(0, 0), (0, 1)]", "assert get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 2) == [(0, 4), (1, 0), (2, 5), (2, 0)]", "assert get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 0) == [(0, 0), (0, 4), (0, 5), (0, 0), (0, 1)]", "assert get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 3) == [(0, 4), (1, 0), (2, 5), (2, 0)]", "assert get_row([[1, 2, 3], [1, 2, 3, 4], [1, 2, 3, 4, 5, 6]], 1) == [(0, 0), (0, 1), (0, 2), (0, 3), (0, 4), (0, 5)]", "assert get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 0) == [(0, 0), (0, 0)]", "assert get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 3) == [(0, 2), (1, 1)]", "assert get_row([[1, 2, 3], [1, 2, 3, 4], [1, 2, 3, 4, 5]], 2) == [(0, 1), (1, 2)]", "assert get_row([[1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3]], 0) == [(0, 0), (0, 1), (0, 2), (0, 3), (0, 4), (0, 5)]", "assert get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 2) == [(0, 4), (1, 5)]", "assert get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 3) == [(0, 4), (1, 5), (2, 6)]", "assert get_row([[1, 2], [1, 2, 3], [1, 2, 3, 4, 5]], 2) == [(0, 2), (1, 3)]", "assert get_row([[1, 2], [1, 2, 3], [1, 2, 3, 4, 5]], 4) == [(0, 3), (1, 4), (2, 4)]", "assert get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 0) == [(0, 0), (0, 1), (0, 2), (0, 3), (0, 4), (0, 5)]", "assert get_row([[1, 2], [1, 3], [1, 4], [1, 5], [1, 6], [2, 2]], 2) == [(0, 0), (1, 1)]", "assert get_row([[1, 2], [1, 2, 3], [1, 2, 3, 4]], 2) == [(0, 1), (0, 2)]", "assert get_row([[1, 2], [1, 2, 3], [1, 2, 3, 4]], 3) == [(0, 1), (0, 2), (1, 3)]", "assert get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 0) == [(0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0)]", "assert get_row([[1, 2, 3], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6]], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]", "assert get_row([[1, 2, 3], [1, 2, 3], [1, 2, 3]], 2) == [(0, 0), (0, 1), (0, 2)]", "assert get_row([[1, 2], [3, 4], [5, 6], [7, 8], [9, 10]], 3) == [(0, 0), (0, 1), (0, 2), (1, 0), (1, 1), (1, 2)]", "assert get_row([[1, 2], [1, 2, 3], [1, 2, 3, 4, 5, 6]], 2) == [(0, 1), (0, 2)]", "assert get_row([[1, 2], [1, 2, 3], [1, 2, 3, 4, 5, 6]], 4) == [(0, 0), (0, 1), (0, 2), (0, 3)]"]}
{"HumanEval/88": ["assert sort_array([1, 2, 3]) == [1, 2, 3]", "assert sort_array([5, 23, -11]) == [5, 23, -11]", "assert sort_array([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]", "assert sort_array([2, 4, 3, 0, 1, 5, 6]) == [0, 1, 2, 3, 4, 5, 6]", "assert sort_array([-1, -2, -3]) == [-3, -2, -1]", "assert sort_array([-3, -2, -1, 0, 1, 5, 6]) == [-1, -2, -3, 0, 1, 5, 6]", "assert sort_array([1, 2, 3, 4, 5, 6, 7]) == [1, 2, 3, 4, 5, 6, 7]", "assert sort_array([5, 2, 3]) == [2, 3, 5]", "assert sort_array([1, 5, 2, 3]) == [1, 2, 3, 5]", "assert sort_array([2, 4, 3, 0, 1, 5, 6, 7]) == [0, 1, 2, 3, 4, 5, 6, 7]", "assert sort_array([2, 4, 3, 0, 1, 5, 6, 7, 8]) == [0, 1, 2, 3, 4, 5, 6, 7, 8]", "assert sort_array([5, 2, 3, 0, 1, 5, 6, 7, 8, 9]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]", "assert sort_array([2, 4, 3]) == [2, 3, 4]", "assert sort_array([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]", "assert sort_array([5, 2, 3, 4, 1, 0, 6]) == [0, 1, 2, 3, 4, 5, 6]", "assert sort_array([5, 23, -11]) == [-11, 23, 5]", "assert sort_array([-12, 0, 1]) == [-12, 0, 1]", "assert sort_array([12, -3, 1]) == [1, -3, 12]", "assert sort_array([3, -2, 0]) == [0, -2, 3]", "assert sort_array([5, 23, 11]) == [11, 23, 5]", "assert sort_array([-12, 0, 1, 2, 3, 4, 5]) == [-12, 0, 1, 2, 3, 4, 5]", "assert sort_array([5, 2, 3, 0, 1, 4, 6]) == [0, 1, 2, 3, 4, 5, 6]", "assert sort_array([5, 2, 3, 4, 1]) == [1, 2, 3, 4, 5]", "assert sort_array([5, 2, 3, 4, 1, 6]) == [1, 2, 3, 4, 5, 6]", "assert sort_array([5, 2, 3, 4, 1, 6, 5]) == [1, 2, 3, 4, 5, 6]", "assert sort_array([5, 23, -11]) == [23, 11, 5]", "assert sort_array([3, -2, 0]) == [0, 2, 3]", "assert sort_array([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]", "assert sort_array([5]) == [5]", "assert sort_array([5, 2, 3, 1, 0, 4, 6]) == [0, 1, 2, 3, 4, 5, 6]", "assert sort_array([5, 2, 1, 3, 4, 6, 9]) == [1, 2, 3, 4, 5, 6, 9]", "assert sort_array([5, 2, 1, 3, 4, 6, 9, 8]) == [1, 2, 3, 4, 5, 6, 9, 8]", "assert sort_array([5, 2, 1, 3, 4, 6, 9, 8, 7]) == [1, 2, 3, 4, 5, 6, 9, 8, 7]", "assert sort_array([5, 2, 3, 0, 1]) == [0, 1, 2, 3, 5]", "assert sort_array([5, 2, 3, 0, 1, 6]) == [0, 1, 2, 3, 5, 6]", "assert sort_array([5, 2, 3, 0, 1, 6, 7]) == [0, 1, 2, 3, 4, 5, 6, 7]", "assert sort_array([5, 2, 3, 0, 1, 5, 6, 7, 8]) == [0, 1, 2, 3, 4, 5, 6, 7, 8]", "assert sort_array([5, 2, 3, 0, 1, 6]) == [1, 2, 3, 5, 0, 6]", "assert sort_array([5, 2, 3, 0, 1, 6, 7, 8]) == [1, 2, 3, 5, 6, 7, 8, 5]", "assert sort_array([5, 23, -11]) == [23, 5, -11]", "assert sort_array([1, 5, 3, 4, 2, 0, 6]) == [0, 1, 2, 3, 4, 5, 6]", "assert sort_array([2, 3, 4, 5, 1, 0, 6]) == [0, 1, 2, 3, 4, 5, 6]", "assert sort_array([5, 3, 2, 4, 1, 0, 6]) == [0, 1, 2, 3, 4, 5, 6]", "assert sort_array([-1, 2, 3]) == [-1, 2, 3]", "assert sort_array([-1, -2, -3]) == [-1, -2, -3]", "assert sort_array([5, 2, 3, 4, 1, 0, 6, 7]) == [0, 1, 2, 3, 4, 5, 6, 7]", "assert sort_array([5, 2, 3, 4, 0, 1]) == [0, 1, 2, 3, 4, 5]", "assert sort_array([5, 2, 3, 4, 0, 1, 5, 6]) == [0, 1, 2, 3, 4, 5, 6]", "assert sort_array([5, 2, 3, 4, 0, 1, 5, 6, 7]) == [0, 1, 2, 3, 4, 5, 6, 7]", "assert sort_array([2, 4, 3, 0, 1, 5, 6, 7, 8]) == [6, 5, 4, 3, 2, 1, 0, 7, 8]", "assert sort_array([5, 2, 3, 4, 0, 1, 5, 6, 7, 8, 9]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]", "assert sort_array([5, 2, 3, 4, 1, 6, 7]) == [1, 2, 3, 4, 5, 6, 7]", "assert sort_array([2, 4, 3, 0, 1, 5, 6, 7]) == [6, 5, 4, 3, 2, 1, 0, 7]", "assert sort_array([5, 2, 3, 1, 4, 6, 7]) == [1, 2, 3, 4, 5, 6, 7]", "assert sort_array([5, 2, 3, 1, 4, 6, 7, 8]) == [1, 2, 3, 4, 5, 6, 7, 8]", "assert sort_array([5, 2, 4, 3]) == [2, 3, 4, 5]", "assert sort_array([5, 2, 4, 3, 0, 1, 6]) == [0, 1, 2, 3, 4, 5, 6]", "assert sort_array([5, 2, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]", "assert sort_array([5, 2, 3, 0, 1, 5, 6, 4]) == [4, 5, 6, 0, 1, 2, 3, 5]", "assert sort_array([5, 2, 3, 0, 1, 5, 6, 4, 7]) == [4, 5, 6, 7, 0, 1, 2, 3, 5]", "assert sort_array([-12, 0, 1]) == [-1, 0, 1]", "assert sort_array([5, 2, 1, 0, 3, 4, 6]) == [0, 1, 2, 3, 4, 5, 6]", "assert sort_array([5, 2, 1, 0, 3, 4, 6, 7]) == [0, 1, 2, 3, 4, 5, 6, 7]", "assert sort_array([5, 2, 1, 0, 3, 4, 6, 7, 8]) == [0, 1, 2, 3, 4, 5, 6, 7, 8]", "assert sort_array([2, 4, 3, 0, 1, 5, 6, 8]) == [0, 1, 2, 3, 4, 5, 6, 8]", "assert sort_array([5, 2, 3, 4, 1, 0, 6, 9]) == [0, 1, 2, 3, 4, 5, 6, 9]", "assert sort_array([5, 23, -11, 12, 3, 9, 1]) == [5, 23, -11, 12, 3, 9, 1]", "assert sort_array([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 2, 3, 4, 5, 6, 7, 8]", "assert sort_array([2, 4, 3, 0, 1, 5, 6, 7]) == [1, 2, 3, 4, 5, 6, 7, 0]", "assert sort_array([2, 4, 3, 0, 1, 5, 6, 8, 9]) == [0, 1, 2, 3, 4, 5, 6, 8, 9]", "assert sort_array([5, 2, 3, 4, 0, 1, 6]) == [0, 1, 2, 3, 4, 5, 6]", "assert sort_array([5, 2, 3, 4, 0, 1, 6, 7]) == [0, 1, 2, 3, 4, 5, 6, 7]", "assert sort_array([5, 2, 3, 4, 0, 1, 6, 7, 8]) == [0, 1, 2, 3, 4, 5, 6, 7, 8]", "assert sort_array([5, 2, 3, 4, 0, 1, 6, 7, 8, 9]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]", "assert sort_array([2, 4, 3, 0, 1, 5, 6]) == [0, 1, 2, 3, 4, 5]", "assert sort_array([-12, 0, 1]) == [1, 0, -12]", "assert sort_array([5, 2, 3, 1, 4, 0, 6]) == [0, 1, 2, 3, 4, 5, 6]", "assert sort_array([5, 2, 3, 1, 4, 0, 6, 7]) == [0, 1, 2, 3, 4, 5, 6, 7]", "assert sort_array([1, -2, 3]) == [1, -2, 3]", "assert sort_array([3, -2, 0]) == [0, 3, -2]", "assert sort_array([5, 2, 4, 3, 1, 0, 6]) == [0, 1, 2, 3, 4, 5, 6]", "assert sort_array([5, 2, 3, 4, 1, 6, 7, 8]) == [1, 2, 3, 4, 5, 6, 7, 8]", "assert sort_array([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]", "assert sort_array([5, 2, 3, 0, 1, 5, 6, 7]) == [0, 1, 2, 3, 5, 6, 7]", "assert sort_array([5, 2, 3, 0, 1, 5, 6, 7, 8]) == [0, 1, 2, 3, 5, 6, 7, 8]", "assert sort_array([2, 4, 3, 0, 1, 5, 6, 7, 8, 9]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]", "assert sort_array([2, 4, 3, 0, 1, 5, 6, 8]) == [2, 3, 4, 5, 6, 8, 0, 1]", "assert sort_array([-1, 2, 3, 4, 5, 6, 7]) == [-1, 2, 3, 4, 5, 6, 7]", "assert sort_array([5, 2, 3, 4, 6, 7, 8]) == [5, 2, 3, 4, 6, 7, 8]", "assert sort_array([3, 2, 4, 5]) == [2, 3, 4, 5]", "assert sort_array([5, 1, 2, 3, 4]) == [1, 2, 3, 4, 5]", "assert sort_array([5, 2, 3, 4, 1, 0, 3]) == [0, 1, 2, 3, 4, 5, 3]", "assert sort_array([5, 2, 3, 4, 1, 0, 3, 6]) == [0, 1, 2, 3, 4, 5, 6]", "assert sort_array([5, 2, 1, 3, 4, 6, 7]) == [1, 2, 3, 4, 5, 6, 7]", "assert sort_array([5, 2, 1, 3, 4, 6, 7, 8]) == [1, 2, 3, 4, 5, 6, 7, 8]", "assert sort_array([1, 5, 3, 4, 2]) == [1, 2, 3, 4, 5]", "assert sort_array([1, 5, 3, 4, 2, 6]) == [1, 2, 3, 4, 5, 6]", "assert sort_array([5, 2, 3]) == [3, 2, 5]", "assert sort_array([5, 2, 3]) == [5, 3, 2]", "assert sort_array([12, -3, 1]) == [12, -3, 1]", "assert sort_array([3, -2, 0]) == [0, 1, 2]", "assert sort_array([]) == []", "assert sort_array([-5, -2, 1, 9, 8, 4, 2, 6, 7]) == [-2, 1, 3, 4, 5, 6, 7, -5]", "assert sort_array([-1, 2, 3, 4, 5, 6]) == [-1, 2, 3, 4, 5, 6]"]}
{"HumanEval/89": ["assert encrypt('hello') == 'hj'", "assert encrypt('world') == 'jl'", "assert encrypt('python') == 'qp'", "assert encrypt('coding') == 'dq'", "assert encrypt('testing') == 'er'", "assert encrypt('love') == 'mv'", "assert encrypt('programming') == 'dw'", "assert encrypt('today') == 'ok'", "assert encrypt('is') == 'nw'", "assert encrypt('fun') == 'yw'", "assert encrypt('hello world') == 'ljbwc'", "assert encrypt('asdfghjkl') == 'ewhjklnop'", "assert encrypt('qwertyuiop') == 'yhtdgfnc'", "assert encrypt('abcde') == 'mnbvcxz'", "assert encrypt('xyz') == 'rstuvwqkj'", "assert encrypt('zyxwvuts') == 'lkjihgf'", "assert encrypt('pqrs') == 'nmbvcxz'", "assert encrypt('qwe') == 'yjhgikmn'", "assert encrypt('ertyu') == 'ivbhxnc'", "assert encrypt('hello') == 'lh'", "assert encrypt('world') == 'wh'", "assert encrypt('python') == 'ynpqrstuv'", "assert encrypt('codeforces') == 'cde'", "assert encrypt('encrypt') == 'mnt'", "assert encrypt('hello') == 'lmlh'", "assert encrypt('world') == 'lmwl'", "assert encrypt('python') == 'lmpy'", "assert encrypt('encrypt') == 'lmec'", "assert encrypt('test') == 'lmtst'", "assert encrypt('abc') == 'lmaa'", "assert encrypt('xyz') == 'lmaz'", "assert encrypt('qwerty') == 'lqewr'", "assert encrypt('123') == 'l12m'", "assert encrypt('456') == 'l45e'", "assert encrypt('hello world') == 'jnvzxsw'", "assert encrypt('abcde') == 'hijmno'", "assert encrypt('qwertyuiop') == 'lkjhgfdc'", "assert encrypt('xyz') == 'bvcw'", "assert encrypt('pqrs') == 'hijmno'", "assert encrypt('abc') == 'hijmno'", "assert encrypt('def') == 'lkjhgfdc'", "assert encrypt('gf') == 'kj'", "assert encrypt('et') == 'ix'", "assert encrypt('hello world') == 'lmxzqvgw'", "assert encrypt('my name is') == 'mynamis'", "assert encrypt('qwertyuiop') == 'asdfghjkl'", "assert encrypt('zxcvbnm') == 'lmnopqrst'", "assert encrypt('abcde') == 'fghijklmn'", "assert encrypt('pqrs') == 'tuvwxyz'", "assert encrypt('hello world') == 'lmno'", "assert encrypt('qwertyuiop') == 'hjklmno'", "assert encrypt('zxcvbnm') == 'abcdefghij'", "assert encrypt('qwe') == 'yhjiu'", "assert encrypt('zxc') == 'vbnmoc'", "assert encrypt('tg') == 'dfl'", "assert encrypt('h') == 'jm'", "assert encrypt('asdfghjkl') == 'ewhijklnop'", "assert encrypt('hello') == 'hlo'", "assert encrypt('world') == 'wrl'", "assert encrypt('python') == 'pythn'", "assert encrypt('encrypt') == 'ctypr'", "assert encrypt('abc') == 'bcda'", "assert encrypt('xyz') == 'yzax'", "assert encrypt('qwerty') == 'wtrq'", "assert encrypt('qwe') == 'rtyu'", "assert encrypt('hello') == 'lmno'", "assert encrypt('world') == 'kjnopqrstuvwxyz'", "assert encrypt('qwertyuiop') == 'mnbvcxzlkjhgfds'", "assert encrypt('asdfghjkl') == 'ewhijkmoapqrtvbnc'", "assert encrypt('zxcvbnmqwer') == 'yuioolprtgfds'", "assert encrypt('abcdefghij') == 'jmnbvcxzlkjhgfds'", "assert encrypt('pqrs') == 'mnopqrstuvwxyz'", "assert encrypt('xyz') == 'mnopqrstuvwxyz'", "assert encrypt('') == ''", "assert encrypt('hello world') == 'kj'", "assert encrypt('qwertyuiop') == 'mnbvcxz'", "assert encrypt('qwe') == 'rs'", "assert encrypt('zxcvbnm') == 'tvyutdw'", "assert encrypt('abcde') == 'jh'", "assert encrypt('12345') == '89i'", "assert encrypt('67890') == '23f'", "assert encrypt('hello') == 'hklo'", "assert encrypt('world') == 'ijokn'", "assert encrypt('python') == 'qz'", "assert encrypt('encrypt') == 'gik'", "assert encrypt('test') == 'xwz'", "assert encrypt('password') == 'bdn'", "assert encrypt('abc') == 'mh'", "assert encrypt('xyz') == 'cq'", "assert encrypt('123') == '6t'", "assert encrypt('456') == '9r'", "assert encrypt('hello world') == 'jn'", "assert encrypt('qwertyuiop') == 'mh'", "assert encrypt('zxcvbnm') == 'kj'", "assert encrypt('lol') == 'jm'", "assert encrypt('zxc') == 'bh'", "assert encrypt('abc') == 'de'", "assert encrypt('hello') == 'lxqwz'", "assert encrypt('world') == 'pwhvz'", "assert encrypt('python') == 'fzxq'", "assert encrypt('test') == 'cwxu'", "assert encrypt('secret') == 'mzr'", "assert encrypt('password') == 'nwz'", "assert encrypt('abc') == 'cb'", "assert encrypt('xyz') == 'bc'", "assert encrypt('123') == '23'", "assert encrypt('hello') == 'bh'", "assert encrypt('world') == 'yq'", "assert encrypt('python') == 'uiv'", "assert encrypt('encrypt') == 'wz'", "assert encrypt('javascript') == 'nv'", "assert encrypt('test') == 'lx'", "assert encrypt('code') == 'xd'", "assert encrypt('function') == 'bh'", "assert encrypt('testing') == 'gf'", "assert encrypt('hello world') == 'bh'", "assert encrypt('qwertyuiop') == 'lh'", "assert encrypt('zxcvbnm') == 'yj'", "assert encrypt('abcdefghij') == 'km'", "assert encrypt('qwe') == 'rty'", "assert encrypt('asdf') == 'uj'", "assert encrypt('zxc') == 'vbnm'", "assert encrypt('gfd') == 'hjk'", "assert encrypt('hello') == 'lmllohe'", "assert encrypt('world') == 'lmlrowrld'", "assert encrypt('qwertyuiop') == 'kjhgfdsza'", "assert encrypt('zxcvbnm') == 'yhjkbvczxw'", "assert encrypt('qwe') == 'aefdcsba'", "assert encrypt('hello world') == 'lmllohewrld'"]}
{"HumanEval/90": ["assert next_smallest([1, 2, 3, 4, 5]) == 2", "assert next_smallest([5, 1, 4, 3, 2]) == 2", "assert next_smallest([]) == None", "assert next_smallest([1, 1]) == None"]}
{"HumanEval/91": ["assert is_bored('') == 0", "assert is_bored('.?!') == 0", "assert is_bored('Hello') == 0", "assert is_bored('Goodbye') == 0", "assert is_bored('I am happy') == 1", "assert is_bored('I am sad') == 1", "assert is_bored('I will never be happy') == 1", "assert is_bored('I am always happy') == 1", "assert is_bored('.') == 0", "assert is_bored('?') == 0", "assert is_bored('!') == 0", "assert is_bored('world') == 0", "assert is_bored('The sky is blue. The sun is shining. I love this weather') == 1", "assert is_bored('I am happy today') == 1", "assert is_bored('Another day goes by') == 0", "assert is_bored('The sky is blue.') == 0", "assert is_bored('The sun is shining.') == 0", "assert is_bored('I love this weather') == 1", "assert is_bored('I am bored') == 1", "assert is_bored('I am not bored') == 0", "assert is_bored('The sky is blue. I am bored') == 1", "assert is_bored('The sky is blue. I am not bored') == 0", "assert is_bored(\"Hello world\") == 0", "assert is_bored(\"The sky is blue. The sun is shining. I hate this weather\") == 1", "assert is_bored(\"I am bored.\") == 1", "assert is_bored(\". I am happy.\") == 0", "assert is_bored(\"? I am sad.\") == 1", "assert is_bored('I am happy') == 0", "assert is_bored('I am sad') == 0", "assert is_bored('I am a bit bored') == 1", "assert is_bored('I am very bored') == 1", "assert is_bored('I am extremely bored') == 1", "assert is_bored('I am so bored') == 1", "assert is_bored(\"The sky is blue. The sun is shining. I am feeling very happy today.\") == 1", "assert is_bored(\". I am feeling very happy today.\") == 1", "assert is_bored(\"I don't like this weather.\") == 1", "assert is_bored(\"?. I am feeling very happy today.\") == 1", "assert is_bored(\"! I am feeling very happy today.\") == 1", "assert is_bored(\"I am feeling very happy today.\") == 1", "assert is_bored(\"I am feeling very happy today. I am feeling very happy today.\") == 2", "assert is_bored(\"I am feeling very happy today. I am feeling very happy today. I am feeling very happy today.\") == 3", "assert is_bored(\"The sky is blue. The sun is shining. I am bored.\") == 1", "assert is_bored(\"I am happy today.\") == 0", "assert is_bored(\". I am sad.\") == 1", "assert is_bored(\"? Why am I so bored?\") == 1", "assert is_bored(\"! Because there is nothing to do.\") == 0", "assert is_bored('The sky is blue. The sun is shining. I am not bored') == 0", "assert is_bored('The') == 0", "assert is_bored('sky') == 0", "assert is_bored('is') == 0", "assert is_bored('blue') == 0", "assert is_bored('sun') == 0", "assert is_bored('shining') == 0", "assert is_bored('I') == 1", "assert is_bored('love') == 0", "assert is_bored('this') == 0", "assert is_bored('weather') == 0", "assert is_bored('Hello world') == 0", "assert is_bored('The sky is blue. The sun is shining. I am happy today') == 1", "assert is_bored('I am tired. I need some rest.') == 1", "assert is_bored('I am happy. I love my life.') == 1", "assert is_bored('hello world') == 0", "assert is_bored('I am bored.') == 1", "assert is_bored('I am not bored.') == 0", "assert is_bored('I am happy.') == 0", "assert is_bored('The sky is blue. The sun is shining. I am bored') == 1", "assert is_bored('The sky is blue. The sun is shining. I am happy') == 0", "assert is_bored(\"I am not bored.\") == 0", "assert is_bored(\". I am bored.\") == 1", "assert is_bored(\"?. I am bored.\") == 1", "assert is_bored(\"I am bored...\") == 1", "assert is_bored(\"I am bored. I am bored. I am bored.\") == 3", "assert is_bored('I am not bored') == 1", "assert is_bored('I am not bored.') == 1", "assert is_bored('I am not bored. .') == 1", "assert is_bored('I am not bored. ?') == 1", "assert is_bored('I am not bored. !') == 1", "assert is_bored('I am not bored. I am not bored.') == 2", "assert is_bored('I am not bored. I am not bored. I am not bored.') == 3", "assert is_bored('I am not happy') == 1", "assert is_bored('I am happy but also sad') == 2", "assert is_bored('I am very happy') == 1", "assert is_bored(\"! I am bored.\") == 1", "assert is_bored(\"I am not bored .\") == 0", "assert is_bored(\"I am not bored ?\") == 0", "assert is_bored(\"I am not bored !\") == 0", "assert is_bored('hello') == 0", "assert is_bored('I don\\'t know what to do') == 1", "assert is_bored(\"I am so bored.\") == 1", "assert is_bored(\"I don't know what to do. I am feeling very uninspired.\") == 1", "assert is_bored(\"I need something fun to do. What should I do?\") == 1", "assert is_bored(\"I am so tired. I think I will go to bed.\") == 0", "assert is_bored(\"I love going on adventures. I am always up for trying new things.\") == 0", "assert is_bored(\"? I am excited.\") == 0", "assert is_bored(\"I am not bored, but I am sad.\") == 1", "assert is_bored(\"I am happy, but I am also bored.\") == 1", "assert is_bored(\"I am bored, but I am also happy.\") == 1", "assert is_bored(\"I am happy and bored.\") == 1", "assert is_bored(\"I am not bored and I am happy.\") == 0", "assert is_bored(\"I am bored. I am happy.\") == 1", "assert is_bored(\"I am not bored. I am sad.\") == 0", "assert is_bored(\"I am bored. I am happy. I will go outside.\") == 1", "assert is_bored(\"I am not bored. I am sad. I will stay inside.\") == 0", "assert is_bored('I am bored. The sky is blue. The sun is shining.') == 2", "assert is_bored('I am not bored because I have my phone') == 2", "assert is_bored('I am bored because I have nothing to do') == 2", "assert is_bored('I am bored because I have nothing to do. I wish it was Friday') == 3", "assert is_bored('This is boring') == 1", "assert is_bored('Is this boring?') == 1", "assert is_bored('Another day has passed') == 0", "assert is_bored('The sky is blue. The sun is shining. I am bored') == 2"]}
{"HumanEval/92": ["assert any_int(5, 2, 7) == True", "assert any_int(3, 2, 2) == False", "assert any_int(3, -2, 1) == True", "assert any_int(3.6, -2.2, 2) == False", "assert any_int(1, 2, 3) == True", "assert any_int(-1, 2, 3) == True", "assert any_int(1, -2, 3) == True", "assert any_int(1, 2, -3) == True", "assert any_int(-3, -2, -1) == True", "assert any_int(0, 0, 0) == True", "assert any_int(5, 23, -11) == True", "assert any_int(-12, 0, 1) == True", "assert any_int(12, -3, 1) == True", "assert any_int(3, -2, 0) == True", "assert any_int(-1, 2, 3) == False", "assert any_int(1, -2, 3) == False", "assert any_int(1, 2, -3) == False", "assert any_int(-3, -2, -1) == False", "assert any_int(5, 23, -11) == False", "assert any_int(-12, 0, 1) == False", "assert any_int(12, -3, 1) == False", "assert any_int(3, -2, 0) == False", "assert any_int(3, 2, -3) == False", "assert any_int(3, 2, -1) == False", "assert any_int(3, -2, 1) == False", "assert any_int(0, 0, 0) == False"]}
{"HumanEval/93": ["assert encode('Test') == 'TGST'", "assert encode('THIS IS A MESSAGE') == 'tHKS KS C MGSSCGG'", "assert encode('the quick brown fox jumps over the lazy dog') == 'TGKQBFXJOTLZDG'", "assert encode('hello world') == 'hELLO wORLD'", "assert encode('hello') == 'hELLO'", "assert encode('world') == 'wORLD'", "assert encode('   ') == '   '", "assert encode('this is a message') == 'tHKS KS C MGSSCGG'", "assert encode('hello world') == 'hLwLd'", "assert encode('Hello World!') == 'hLwLd!'", "assert encode('goodbye') == 'gOdbYe'", "assert encode('Bye bye') == 'bYbbYe'", "assert encode('HELLO WORLD') == 'hELLO wORLD'", "assert encode('   hello   ') == 'sD hELLo '", "assert encode('  hello    ') == 'sD hELLo '", "assert encode('TEST') == 'TGST'", "assert encode('hello world') == 'hLlwOlD'", "assert encode('HELLO WORLD') == 'hLlWoRlD'", "assert encode('hello') == 'hLlOe'", "assert encode('world') == 'lWorLd'", "assert encode('the quick brown fox jumps over the lazy dog') == 'ThE qUiCk BrOwN FoX JUMPs OvER The LaZy dOg'", "assert encode('hello world') == 'hLwDl wORLD'", "assert encode('HELLO WORLD') == 'hLwDl wORLD'", "assert encode('hello') == 'hLwDl'", "assert encode('World') == 'wORLD'", "assert encode('') == ''", "assert encode('hello') == 'hLwLd'", "assert encode('world') == 'lWd'", "assert encode('Hello') == 'hLwLd'", "assert encode('hello world') == 'hLwDl DLrLlOoOoOo'", "assert encode('Hello World!') == 'hLwDl DLrLlOoOoOo'", "assert encode('hello') == 'hLwDl DLrLlOoOoOo'", "assert encode('world') == 'lWdLdLdLdLdLdLdLd'", "assert encode('HELLO WORLD!') == 'hLwDl DLrLlOoOoOo'", "assert encode('hello world') == 'hLlwOrlD'", "assert encode('hello') == 'hElLo'", "assert encode('World') == 'WOrld'", "assert encode('test') == 'TGST'", "assert encode('this iS a MEssage') == 'tHKS KS C MGSSCGG'", "assert encode('The quick brown fox jumps over the lazy dog') == 'THQBFXJOTLZLD'", "assert encode('HELLO WORLD') == 'hLlwOrlD'", "assert encode('Hello World!') == 'hLlwOrlD'", "assert encode('HELLO, WORLD!') == 'hLlwOrlD'", "assert encode('hello,world!') == 'hLlwOrlD'", "assert encode('hello World!') == 'hLlwOrlD'", "assert encode('hello world!') == 'hLlwOrlD'", "assert encode('Hello World!') == 'hELLO wORLD!'", "assert encode('hello world') == 'hELLO WORLD'", "assert encode('Hello World!') == 'tHKS KS C MGSSCGG'", "assert encode('HELLO WORLD') == 'hELLO WORLD'", "assert encode('the quick brown fox jumps over the lazy dog') == 'THQBFXJOTLZLDG'", "assert encode('hello world') == 'HLOWHWLDO'", "assert encode('HELLO WORLD') == 'HLOWHWLDO'", "assert encode('Hello World!') == 'HLOWHWLDO'", "assert encode('HELLO WORLD!!') == 'HLOWHWLDO'", "assert encode('HELLO WORLD') == 'hLlLwOrD'", "assert encode('hello world') == 'hLlLwOrD'", "assert encode('hello') == 'hLlLwOrD'", "assert encode('World') == 'Wrld'", "assert encode('world') == 'Wrld'", "assert encode('   ') == '   Sd'", "assert encode('   a') == '   A'", "assert encode('   b') == '   B'", "assert encode('hello world') == 'hLlro WOrld'", "assert encode('HELLO WORLD') == 'hLlro WOrld'", "assert encode('hello') == 'hLlro'", "assert encode('WORLD') == 'WOrld'", "assert encode('a') == 'A'", "assert encode('b') == 'B'", "assert encode('c') == 'C'", "assert encode('d') == 'D'", "assert encode('e') == 'E'", "assert encode('f') == 'F'", "assert encode('g') == 'G'", "assert encode('h') == 'H'", "assert encode('i') == 'I'", "assert encode('j') == 'J'", "assert encode('k') == 'K'", "assert encode('l') == 'L'", "assert encode('m') == 'M'", "assert encode('n') == 'N'", "assert encode('o') == 'O'", "assert encode('p') == 'P'", "assert encode('q') == 'Q'", "assert encode('r') == 'R'", "assert encode('s') == 'S'", "assert encode('t') == 'T'", "assert encode('u') == 'U'", "assert encode('v') == 'V'", "assert encode('w') == 'W'", "assert encode('x') == 'X'", "assert encode('y') == 'Y'", "assert encode('z') == 'Z'", "assert encode('HELLO WORLD') == 'hKLW lDlRdLrLlW'", "assert encode('hello world') == 'hKLw Lrd Llw'", "assert encode('Goodbye World') == 'gkLw Yld Llw'", "assert encode('A Message') == 'aMsGc'", "assert encode('The quick brown fox') == 'ThE qUiCk BrOWn FoX'", "assert encode('Faster than light speed') == 'fAsTeR tHaN LiGhT sPeED'", "assert encode('Hello') == 'hKLw'", "assert encode('hello world') == 'hLwroLD'", "assert encode('hello world again') == 'hLwroWdAgAiN'", "assert encode('hello') == 'hLwroD'", "assert encode('hello again') == 'hLwroWaGaI'", "assert encode('world') == 'wroLD'", "assert encode('World') == 'wroLd'", "assert encode('hello world') == 'hEHLO lWRD wORLD'", "assert encode('World') == 'WRLDO WORLD'", "assert encode('the') == 'THHETHE'", "assert encode('hello world') == 'hLwDlWdLlOo'", "assert encode('HELLO WORLD') == 'hLwDlWdLlOo'", "assert encode('hello') == 'hLwDlWdLlOo'", "assert encode('world') == 'lwDlWdLlOo'", "assert encode('WORLD') == 'lwDlWdLlOo'", "assert encode('HELLO') == 'hLwDlWdLlOo'", "assert encode('TESTING') == 'TGST'"]}
{"HumanEval/94": ["assert skjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,324,4,3]) == 10", "assert skjkasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]) == 25", "assert skjkasdkd([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]) == 13", "assert skjkasdkd([0,724,32,71,99,32,6,0,5,91,83,0,5,6]) == 11", "assert skjkasdkd([0,81,12,3,1,21]) == 3", "assert skjkasdkd([0,8,1,2,1,7]) == 7", "assert skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) == 10", "assert skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) == 25", "assert skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]) == 13", "assert skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11", "assert skjkasdkd([0, 81, 12, 3, 1, 21]) == 3", "assert skjkasdkd([0, 8, 1, 2, 1, 7]) == 7"]}
{"HumanEval/95": ["assert check_dict_case({\"hello\": \"world\"}) == True", "assert check_dict_case({\"HELLO\": \"WORLD\"}) == True", "assert check_dict_case({\"hello\": \"World\"}) == True", "assert check_dict_case({\"hello\": \"world\", \"goodbye\": \"globe\"}) == True", "assert check_dict_case({\"hello\": \"world\", \"goodbye\": \"GLOBE\"}) == True", "assert check_dict_case({\"hello\": \"world\", \"goodbye\": \"globe\", \"hi\": \"hey\"}) == False", "assert check_dict_case({\"name\": \"john\", \"age\": 36, \"city\": \"houston\"}) == False", "assert check_dict_case({\"name\": \"John\", \"age\": 36, \"city\": \"houston\"}) == False", "assert check_dict_case({\"name\": \"John\", \"age\": 36, \"city\": \"Houston\"}) == False", "assert check_dict_case({\"name\": \"John\", \"age\": 36, \"city\": \"houston\", \"state\": \"tx\"}) == False", "assert check_dict_case({\"name\": \"john\", \"age\": 36}) == False", "assert check_dict_case({\"Name\": \"John\", \"Age\": 36}) == False", "assert check_dict_case({\"State\": \"NC\", \"Zip\": \"12345\"}) == True", "assert check_dict_case({\"Name\": \"John\", \"Age\": 36, \"City\": \"Houston\"}) == False", "assert check_dict_case({\"NAME\": \"JOHN\", \"AGE\": 36, \"CITY\": \"HOUSTON\"}) == False", "assert check_dict_case({\"a\": \"apple\", \"b\": \"banana\"}) == True", "assert check_dict_case({\"state\": \"nc\", \"zip\": \"12345\"}) == True", "assert check_dict_case({\"hello\": \"world\", \"hi\": \"there\"}) == False", "assert check_dict_case({\"hello\": \"World\", \"hi\": \"There\"}) == False", "assert check_dict_case({\"state\": \"NC\", \"Zip\": \"12345\"}) == True", "assert check_dict_case({\"name\": \"John\", \"age\": 36, \"gender\": \"Male\"}) == False", "assert check_dict_case({\"name\": \"John\", \"age\": 36, \"gender\": \"male\"}) == False", "assert check_dict_case({\"name\": \"John\", \"age\": 36, \"GENDER\": \"male\"}) == False", "assert check_dict_case({\"name\": \"John\", \"age\": 36, \"GENDER\": \"MALE\"}) == False", "assert check_dict_case({\"name\": \"John\", \"age\": 36, \"GENDER\": \"mAle\"}) == False", "assert check_dict_case({\"name\": \"John\", \"age\": 36, \"GENDER\": \"maLe\"}) == False", "assert check_dict_case({\"name\": \"John\", \"age\": 36, \"GENDER\": \"MaL\u00e9\"}) == False", "assert check_dict_case({\"name\": \"John\", \"age\": 36, \"GENDER\": \"mALE\"}) == False", "assert check_dict_case({\"name\": \"John\", \"age\": 36, \"GENDER\": \"MALE\"}) == True", "assert check_dict_case({\"name\": \"John\", \"age\": 36, \"GENDER\": \"Male\"}) == True", "assert check_dict_case({\"name\": \"JOHN\", \"age\": 36}) == False", "assert check_dict_case({\"NAME\": \"JOHN\", \"AGE\": 36}) == False", "assert check_dict_case({\"name\": \"John\", \"age\": 36, \"City\": \"Houston\"}) == False", "assert check_dict_case({\"name\": \"John\", \"age\": 36, \"state\": \"nc\", \"zip\": \"12345\"}) == True", "assert check_dict_case({\"name\": \"John\", \"age\": 36, \"State\": \"NC\", \"Zip\": \"12345\"}) == True", "assert check_dict_case({\"Name\": \"JOHN\", \"AGE\": 36, \"CITY\": \"HOUSTON\"}) == False", "assert check_dict_case({\"Hello\": \"World\"}) == True", "assert check_dict_case({\"hello\": \"world\", \"goodbye\": \"world\"}) == True", "assert check_dict_case({\"hello\": \"world\", \"Goodbye\": \"world\"}) == True", "assert check_dict_case({\"hello\": \"world\", \"GOODBYE\": \"world\"}) == True", "assert check_dict_case({\"hello\": \"world\", \"goodbye\": \"world\", \"goodbye\": \"world\"}) == True", "assert check_dict_case({\"hello\": \"world\", \"goodbye\": \"world\", \"GOODBYE\": \"world\"}) == True", "assert check_dict_case({\"hello\": \"world\", \"goodbye\": \"world\", \"GOODBYE\": \"world\", \"GOODBYE\": \"world\"}) == True", "assert check_dict_case({}) == False", "assert check_dict_case({\"hello\": \"world\", \"goodbye\": \"gobble\"}) == False", "assert check_dict_case({\"hello\": \"world\", \"goodbye\": \"gobble\", \"hi\": \"hey\"}) == False", "assert check_dict_case({\"hello\": \"World\", \"world\": \"World\"}) == True", "assert check_dict_case({\"hello\": \"world\", \"WORLD\": \"world\"}) == True", "assert check_dict_case({\"hello\": \"World\", \"World\": \"world\"}) == True", "assert check_dict_case({\"hello\": \"world\", \"World\": \"world\"}) == True", "assert check_dict_case({\"hello\":\"world\"}) == True", "assert check_dict_case({\"HELLO\":\"WORLD\"}) == True", "assert check_dict_case({\"hello\":\"World\"}) == True", "assert check_dict_case({\"hello\":\"world\", \"goodbye\":\"gobble\"}) == False", "assert check_dict_case({\"hello\":\"world\", \"goodbye\":\"gobble\", \"hi\":\"hey\"}) == False", "assert check_dict_case({\"hello\": \"World\", \"world\": \"Hello\"}) == False", "assert check_dict_case({\"hello\": \"world\", \"hey\": \"dude\"}) == False", "assert check_dict_case({\"hello\": \"World\", \"Goodbye\": \"World\"}) == True", "assert check_dict_case({\"hello\": \"world\", \"goodbye\": \"worLd\"}) == False", "assert check_dict_case({\"hello\": \"world\", \"goodbye\": \"worLd\", \"how\": \"are you\"}) == False", "assert check_dict_case({\"hello\": \"world\", \"GoodBye\": \"World\"}) == False", "assert check_dict_case({\"STATE\": \"NC\", \"ZIP\": \"12345\"}) == True", "assert check_dict_case({\"hello\":\"world\", \"goodbye\":\"world\"}) == True", "assert check_dict_case({\"hello\":\"world\", \"goodbye\":\"world\", \"hi\":\"world\"}) == True", "assert check_dict_case({\"hello\":\"world\", \"goodbye\":\"world\", \"hi\":\"world\", \"how\":\"are you\"}) == False", "assert check_dict_case({\"State\": \"NC\", \"Zip\": \"12345\", \"City\": \"Houston\"}) == False", "assert check_dict_case({\"Hello\":\"World\"}) == False", "assert check_dict_case({\"a\":1,\"b\":2}) == False", "assert check_dict_case({\"State\":\"NC\",\"Zip\":\"12345\"}) == True", "assert check_dict_case({\"hello\": 123}) == False", "assert check_dict_case({\"hello\": \"world\", \"goodbye\": \"world\"}) == False", "assert check_dict_case({\"hello\": \"World\", \"hey\": \"what's up\"}) == False", "assert check_dict_case({\"name\": \"John\", \"age\": 36, \"state\": \"NC\", \"zip\": \"12345\"}) == True", "assert check_dict_case({\"name\": \"john\", \"age\": 36, \"State\": \"NC\", \"Zip\": \"12345\"}) == True", "assert check_dict_case({\"hello\": \"world\", \"heLLo\": \"WorLd\"}) == True", "assert check_dict_case({\"hello\": \"world\", \"HeLLo\": \"WorLd\"}) == True", "assert check_dict_case({\"hello\": \"world\", \"heLLo\": \"WorLd\", \"hello\": \"world\"}) == True", "assert check_dict_case({\"hello\": \"world\", \"heLLo\": \"WorLd\", \"hello\": \"world\", \"heLLo\": \"WorLd\"}) == False", "assert check_dict_case({\"name\": \"John\", \"age\": 36, \"state\": \"nc\"}) == True", "assert check_dict_case({\"name\": \"John\", \"age\": 36, \"State\": \"NC\"}) == True", "assert check_dict_case({\"name\": \"John\", \"age\": 36, \"Zip\": \"12345\"}) == False", "assert check_dict_case({\"hello\": \"world\", \"heLLO\": \"wORLD\"}) == False", "assert check_dict_case({\"hello\": \"world\", \"heLLo\": \"WorLd\"}) == False", "assert check_dict_case({\"hello\": \"world\", \"Hello\": \"World\"}) == False", "assert check_dict_case({\"Name\": \"JOHN\", \"AGE\": 36}) == False", "assert check_dict_case({\"name\": \"John\", \"age\": 36, \"City\": \"houston\"}) == False", "assert check_dict_case({\"hello\":\"WorLd\"}) == False", "assert check_dict_case({\"hello\":\"worLd\"}) == False", "assert check_dict_case({\"name\": \"JOHN\", \"age\": 36, \"city\": \"HOUSTON\"}) == False", "assert check_dict_case({\"hello\": \"world\", \"Hi\": \"There\"}) == False", "assert check_dict_case({\"hello\": \"world\", \"hey\": \"what's up\"}) == False", "assert check_dict_case({\"name\": \"john\", \"age\": 36, \"state\": \"nc\"}) == False", "assert check_dict_case({\"name\": \"john\", \"age\": 36, \"zip\": \"12345\"}) == False", "assert check_dict_case({\"name\": \"john\", \"age\": 36, \"state\": \"NC\", \"zip\": \"12345\"}) == True", "assert check_dict_case({\"name\": \"john\", \"age\": 36, \"city\": \"houston\", \"state\": \"NC\", \"zip\": \"12345\"}) == True", "assert check_dict_case({\"a\": \"Apple\", \"b\": \"Banana\"}) == False", "assert check_dict_case({\"hello\": \"World\", \"heLLO\": \"WorLd\"}) == False", "assert check_dict_case({\"hello\": \"World\", \"HeLLo\": \"WORLD\"}) == False", "assert check_dict_case({\"hello\": \"world\", \"Hello\": \"WORLD\"}) == False", "assert check_dict_case({\"hello\": \"World\", \"heLLo\": \"worLd\"}) == False"]}
{"HumanEval/96": ["assert count_up_to(2) == [2]", "assert count_up_to(3) == [2, 3]", "assert count_up_to(5) == [2, 3]", "assert count_up_to(7) == [3, 5, 7]", "assert count_up_to(11) == [2, 3, 5, 7]", "assert count_up_to(0) == []", "assert count_up_to(20) == [2, 3, 5, 7, 11, 13, 17, 19]", "assert count_up_to(1) == []", "assert count_up_to(18) == [2, 3, 5, 7, 11, 13]", "assert count_up_to(18) == [2, 3, 5, 7, 11, 13, 17]", "assert count_up_to(19) == [2, 3, 5, 7, 11, 13, 17, 19]", "assert count_up_to(4) == [2, 3, 5]", "assert count_up_to(6) == [2, 3, 5, 7]", "assert count_up_to(7) == [2, 3, 5, 7]", "assert count_up_to(8) == [2, 3, 5, 7]", "assert count_up_to(9) == [2, 3, 5, 7]", "assert count_up_to(10) == [2, 3, 5, 7]", "assert count_up_to(12) == [2, 3, 5, 7]", "assert count_up_to(13) == [2, 3, 5, 7]", "assert count_up_to(14) == [2, 3, 5, 7]", "assert count_up_to(15) == [2, 3, 5, 7]", "assert count_up_to(16) == [2, 3, 5, 7]", "assert count_up_to(17) == [2, 3, 5, 7]", "assert count_up_to(18) == [2, 3, 5, 7]", "assert count_up_to(19) == [2, 3, 5, 7]", "assert count_up_to(3) == [2,3]", "assert count_up_to(4) == [2,3,4]", "assert count_up_to(5) == [2,3]", "assert count_up_to(6) == [2,3,5]", "assert count_up_to(7) == [2,3,5,7]", "assert count_up_to(8) == [2,3,5,7,11]", "assert count_up_to(9) == [2,3,5,7,11,13]", "assert count_up_to(10) == [2,3,5,7,11,13,17]", "assert count_up_to(11) == [2,3,5,7]", "assert count_up_to(18) == [2,3,5,7,11,13]", "assert count_up_to(20) == [2,3,5,7,11,13,17,19]", "assert count_up_to(4) == [2,3,5]", "assert count_up_to(6) == [2,3,5,7]", "assert count_up_to(7) == [2,3,5,7,11]", "assert count_up_to(8) == [2,3,5,7,11,13]", "assert count_up_to(9) == [2,3,5,7,11,13,17]", "assert count_up_to(10) == [2,3,5,7,11,13,17,19]", "assert count_up_to(12) == [2,3,5,7,11]", "assert count_up_to(13) == [2,3,5,7,11,13]", "assert count_up_to(14) == [2,3,5,7,11,13,17]", "assert count_up_to(15) == [2,3,5,7,11,13,17,19]", "assert count_up_to(10) == [2, 3, 5, 7, 11, 13, 17, 19]", "assert count_up_to(7) == [3,5,7]", "assert count_up_to(18) == [2,3,5,7]", "assert count_up_to(5) == [2,3,5]", "assert count_up_to(18) == [2,3,5,7,11,13,17]", "assert count_up_to(9) == [2,3,5,7,11]", "assert count_up_to(10) == [2,3,5,7,11]", "assert count_up_to(13) == [2,3,5,7,11]", "assert count_up_to(14) == [2,3,5,7,11]", "assert count_up_to(15) == [2,3,5,7,11]", "assert count_up_to(16) == [2,3,5,7,11]", "assert count_up_to(17) == [2,3,5,7,11]", "assert count_up_to(18) == [2,3,5,7,11]", "assert count_up_to(19) == [2,3,5,7,11]", "assert count_up_to(20) == [2,3,5,7,11]", "assert count_up_to(16) == [2,3,5,7,11,13,17,19]", "assert count_up_to(17) == [2,3,5,7,11,13,17,19]", "assert count_up_to(19) == [2,3,5,7,11,13,17,19]", "assert count_up_to(11) == [2,3,5,7,11,13,17]", "assert count_up_to(12) == [2,3,5,7,11,13,17,19]", "assert count_up_to(13) == [2,3,5,7,11,13,17,19]", "assert count_up_to(14) == [2,3,5,7,11,13,17,19]", "assert count_up_to(13) == [3, 5, 7, 11]", "assert count_up_to(17) == [2, 3, 5, 7, 11]", "assert count_up_to(19) == [2, 3, 5, 7, 11, 13]", "assert count_up_to(11) == [2,3,5,7,11]", "assert count_up_to(12) == [2,3,5,7,11,13,17]", "assert count_up_to(19) == [2,3,5,7,11,13,17]", "assert count_up_to(13) == [3,5,7,11]", "assert count_up_to(19) == [2,3,5,7,11,13]", "assert count_up_to(13) == [3,5,7]"]}
{"HumanEval/97": ["assert multiply(148, 412) == 16", "assert multiply(19, 28) == 72", "assert multiply(2020, 1851) == 0", "assert multiply(14, -15) == 20", "assert multiply(1234, 5678) == 78920", "assert multiply(23, 5) == 115", "assert multiply(123, 456) == 0", "assert multiply(20, 30) == 0", "assert multiply(10, 5) == 50", "assert multiply(1234, 2345) == 0", "assert multiply(100, 200) == 0", "assert multiply(10, 10) == 100", "assert multiply(1234, 5678) == 789220", "assert multiply(34, 23) == 792", "assert multiply(67, 54) == 3702", "assert multiply(24, 6) == 144", "assert multiply(123, 456) == 15266", "assert multiply(1234, 5678) == 75264", "assert multiply(1234, 5678) == 7289", "assert multiply(23, 12) == 286", "assert multiply(32, 4) == 136", "assert multiply(100, 100) == 10000", "assert multiply(23, 12) == 11", "assert multiply(100, 2) == 200", "assert multiply(100, -2) == -200", "assert multiply(10, 2) == 20", "assert multiply(23, 2) == 46", "assert multiply(10000, 10000) == 1000000000", "assert multiply(1234, 5678) == 7516", "assert multiply(10, 123456789) == 1234567890", "assert multiply(10, -123456789) == -1234567890", "assert multiply(1234, 5678) == 78864", "assert multiply(1234, 56789) == 7886400", "assert multiply(12345, 67890) == 87864000", "assert multiply(21, 32) == 0", "assert multiply(1000, 1000) == 1000000", "assert multiply(321, 12) == 432", "assert multiply(41, -12) == -49", "assert multiply(123, 456) == 1689", "assert multiply(148, 234) == 3546", "assert multiply(19, 234) == 467", "assert multiply(100, 200) == 4000", "assert multiply(1, 2) == 2", "assert multiply(10, 3) == 30", "assert multiply(321, 12) == 424", "assert multiply(24, 3) == 72", "assert multiply(2, 2) == 4", "assert multiply(10, 0) == 0", "assert multiply(123, 456) == 1749", "assert multiply(1000, 0) == 0", "assert multiply(34, 17) == 576", "assert multiply(100, 5) == 500", "assert multiply(1000, 1) == 1000", "assert multiply(3, 10) == 30", "assert multiply(1234, 5678) == 0", "assert multiply(1, 1) == 1", "assert multiply(123, 456) == 12", "assert multiply(7, 3) == 21", "assert multiply(2147483647, 123456789) == 2748549763", "assert multiply(321, 100) == 32100", "assert multiply(23, 23) == 529", "assert multiply(1234, 5678) == 7588", "assert multiply(10, 20) == 200", "assert multiply(34, 56) == 1824", "assert multiply(21, 21) == 44", "assert multiply(324, 168) == 548", "assert multiply(100, 10000) == 1000000", "assert multiply(10000, 10000) == 100000000", "assert multiply(1234, 5678) == 11206", "assert multiply(324, 235) == 789", "assert multiply(2, 3) == 6", "assert multiply(5, 10) == 50", "assert multiply(20, 30) == 600", "assert multiply(34, 56) == 1960", "assert multiply(3, 4) == 12", "assert multiply(2, 0) == 0", "assert multiply(-10, 2) == -20", "assert multiply(37, 17) == 631", "assert multiply(1234, 5678) == 78964", "assert multiply(3, 12) == 36", "assert multiply(123, 456) == 642", "assert multiply(10, 12) == 120", "assert multiply(1234, 5678) == 75694", "assert multiply(200, 100) == 20000", "assert multiply(1234, 5678) == 7299", "assert multiply(100, 200) == 20000", "assert multiply(10000, 10000) == 10000000", "assert multiply(37, 10) == 370", "assert multiply(12, 5) == 60", "assert multiply(32, 2) == 64", "assert multiply(100, 20) == 2000", "assert multiply(20, -10) == -200", "assert multiply(10000, 20000) == 20000000", "assert multiply(20, 10) == 200", "assert multiply(34, 12) == 416", "assert multiply(1000, 2000) == 2000000", "assert multiply(432, 12) == 528", "assert multiply(34, 17) == 566"]}
{"HumanEval/98": ["assert count_upper('AaBbCcDdEeFf') == 1", "assert count_upper('ABCDEFG') == 0", "assert count_upper('abcd') == 0", "assert count_upper('AbCdEf') == 0", "assert count_upper('12345') == 0", "assert count_upper('hello world') == 0", "assert count_upper(\"ABCDE\") == 1", "assert count_upper(\"abcdefg\") == 0", "assert count_upper(\"dBBE\") == 0", "assert count_upper(\"hello world\") == 0", "assert count_upper(\"Hello World\") == 0", "assert count_upper(\"world\") == 0", "assert count_upper(\"World\") == 0", "assert count_upper('AbcDefGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz') == 0", "assert count_upper('abcdefghijklmnopqrstuvwxyz') == 0", "assert count_upper('Abcdefghijklmnopqrstuvwxyz') == 0", "assert count_upper('abcdEf') == 0", "assert count_upper('ABCDEFGHIJKLMNOPQRSTUVWXYZ') == 0", "assert count_upper(\"helloWorLd\") == 1", "assert count_upper(\"HeLLo WoRlD\") == 1", "assert count_upper('ABCDE') == 1", "assert count_upper('abcdefg') == 0", "assert count_upper('dBBE') == 0", "assert count_upper('AbCdEf') == 1", "assert count_upper(\"A\") == 1", "assert count_upper(\"AbCdEf\") == 1", "assert count_upper(\"ABCDEFG\") == 0", "assert count_upper(\"abcd\") == 0", "assert count_upper(\"ABCD\") == 0", "assert count_upper(\"aBcDeF\") == 1", "assert count_upper(\"aBCD\") == 0", "assert count_upper(\"aBcDE\") == 0", "assert count_upper(\"ABC\") == 1", "assert count_upper(\"abcde\") == 0", "assert count_upper(\"bBcD\") == 0", "assert count_upper(\"bbbe\") == 0", "assert count_upper(\"dbbE\") == 0", "assert count_upper(\"dbbfe\") == 0", "assert count_upper('Abcdefg') == 0", "assert count_upper('dbbE') == 0", "assert count_upper('DBBC') == 0", "assert count_upper('aaabbbcccddddddeeeeeeffff') == 3", "assert count_upper('ABcdEF') == 1", "assert count_upper('DBB') == 0", "assert count_upper('aaBCD') == 0", "assert count_upper('aaaa') == 0", "assert count_upper(\"AbcdeF\") == 1", "assert count_upper(\"abcdEF\") == 0", "assert count_upper(\"bBbEe\") == 0", "assert count_upper(\"Dbbb\") == 0", "assert count_upper(\"DbBb\") == 0", "assert count_upper('ABCDEFG') == 1", "assert count_upper('aaabbbcccccdddddd') == 0", "assert count_upper('AbcDeF') == 1", "assert count_upper('AbcDf') == 0", "assert count_upper(\"AbcDeF\") == 1", "assert count_upper(\"ABCDef\") == 0", "assert count_upper(\"bbde\") == 0", "assert count_upper(\"DBB\") == 0", "assert count_upper(\"ABcDeFg\") == 0", "assert count_upper(\"DbbEe\") == 0", "assert count_upper(\"DbBeE\") == 0", "assert count_upper('A') == 1", "assert count_upper('AbcDef') == 2", "assert count_upper('AbCdEfG') == 3", "assert count_upper('AbcDeFg') == 0", "assert count_upper('ABCDefG') == 0", "assert count_upper('AbcDEfg') == 0", "assert count_upper(\"BbBdEeE\") == 0", "assert count_upper(\"bbbddEE\") == 0", "assert count_upper(\"DDDDD\") == 0", "assert count_upper(\"AbcDefG\") == 0", "assert count_upper(\"ABcdEF\") == 0", "assert count_upper(\"bbbbEE\") == 0", "assert count_upper(\"BBBBBB\") == 0", "assert count_upper(\"abcdEf\") == 0", "assert count_upper(\"ABCDefg\") == 0", "assert count_upper(\"bbBEd\") == 0", "assert count_upper(\"bBbEd\") == 0", "assert count_upper(\"BBBE\") == 0", "assert count_upper('ABcdEf') == 1", "assert count_upper('abCDEFG') == 0", "assert count_upper('abcdefghijklmnopqrstuvwxyz') == 26", "assert count_upper('AbcDefGhIjKlMnOpQrStUvWxyZ') == 0", "assert count_upper('hello World') == 0", "assert count_upper('Hello World') == 0", "assert count_upper('hello   world') == 0", "assert count_upper('AbcDefg') == 0", "assert count_upper('AbcdeFg') == 0", "assert count_upper('DBBd') == 0", "assert count_upper(\"bBbEeFf\") == 0", "assert count_upper(\"DbbE\") == 0", "assert count_upper(\"AbcDef\") == 0", "assert count_upper(\"AbCdEF\") == 1", "assert count_upper(\"ABcDEf\") == 1", "assert count_upper(\"abcdef\") == 0", "assert count_upper('AbcDefGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz') == 26", "assert count_upper('ABCDEFGHIJKLMNOPQRSTUVWXYZ') == 26", "assert count_upper('ABbbc') == 0", "assert count_upper('AbCdEfG') == 0", "assert count_upper(\"bBbB\") == 0", "assert count_upper(\"bbbb\") == 0", "assert count_upper(\"dDdD\") == 0", "assert count_upper('ABCDE') == 0", "assert count_upper('abcde') == 0", "assert count_upper('ABbbcDeFf') == 0", "assert count_upper('abccde') == 0", "assert count_upper(\"ABCD\") == 1", "assert count_upper(\"bCDE\") == 0", "assert count_upper(\"bbBE\") == 0", "assert count_upper('abcdEf') == 1", "assert count_upper('abcDEFG') == 0", "assert count_upper('bbBE') == 0", "assert count_upper('BBEE') == 0", "assert count_upper('DDD') == 0", "assert count_upper('aaaBBBCCCdddddd') == 3", "assert count_upper('aaaaaaBBBBBBCCCCccccccccc') == 19", "assert count_upper('abcdedf') == 0", "assert count_upper('ABCD') == 0", "assert count_upper('abcdf') == 0", "assert count_upper(\"bbbEE\") == 0", "assert count_upper(\"BBBBee\") == 0", "assert count_upper(\"ABcDeF\") == 1", "assert count_upper(\"aBcDefGhIjKlMnO\") == 1", "assert count_upper(\"abCdEf\") == 0", "assert count_upper(\"AbCdEf\") == 0", "assert count_upper(\"aBcDeFgHiJkLmNopQrStUvWxYz\") == 1"]}
{"HumanEval/99": ["assert closest_integer(\"10\") == 10", "assert closest_integer(\"15.3\") == 15", "assert closest_integer(\"-10.3\") == -10", "assert closest_integer(\"15.8\") == 16", "assert closest_integer(\"-15.8\") == -16", "assert closest_integer(\"15.9\") == 16", "assert closest_integer(\"-15.9\") == -16", "assert closest_integer(\"-10.5\") == -10", "assert closest_integer(\"10.5\") == 11", "assert closest_integer(\"-15.3\") == -15", "assert closest_integer(\"-5.3\") == -5", "assert closest_integer(\"5.3\") == 5", "assert closest_integer(\"10.5\") == 10", "assert closest_integer(\"-5.0\") == -5", "assert closest_integer(\"5.0\") == 5", "assert closest_integer(\"-10\") == -10", "assert closest_integer(\"10.1\") == 10", "assert closest_integer(\"10.001\") == 10", "assert closest_integer(\"-5.001\") == -5", "assert closest_integer(\"10.9\") == 11", "assert closest_integer(\"-5.8\") == -6", "assert closest_integer(\"5.7\") == 6", "assert closest_integer(\"10.9\") == 10", "assert closest_integer(\"-10.8\") == -10", "assert closest_integer(\"10.8\") == 11", "assert closest_integer(\"-9.8\") == -10", "assert closest_integer(\"10.53\") == 11", "assert closest_integer(\"-5.9\") == -6", "assert closest_integer(\"-10.5\") == -11", "assert closest_integer(\"10.0\") == 10", "assert closest_integer(\"5.5\") == 6", "assert closest_integer(\"-10.7\") == -11", "assert closest_integer(\"-10.8\") == -11", "assert closest_integer(\"-10.1\") == -10", "assert closest_integer(\"5.9\") == 6", "assert closest_integer(\"-5.87\") == -6", "assert closest_integer(\"-10.0\") == -10", "assert closest_integer(\"-10.9\") == -11", "assert closest_integer(\"15.0\") == 15", "assert closest_integer(\"-15.0\") == -15", "assert closest_integer(\"-5.5\") == -6", "assert closest_integer(\"15.5\") == 16", "assert closest_integer(\"-15.5\") == -16", "assert closest_integer(\"15.2\") == 15", "assert closest_integer(\"-15.2\") == -15", "assert closest_integer(\"-5.5\") == -5", "assert closest_integer(\"-9.3\") == -9", "assert closest_integer(\"-10.05\") == -10", "assert closest_integer(\"-5.33\") == -5", "assert closest_integer(\"5.33\") == 5", "assert closest_integer(\"5.8\") == 6", "assert closest_integer(\"-10.1\") == -11", "assert closest_integer(\"15.1\") == 15", "assert closest_integer(\"-15.1\") == -15", "assert closest_integer(\"15.33\") == 15", "assert closest_integer(\"5.1\") == 5", "assert closest_integer(\"15.5\") == 15", "assert closest_integer(\"-15.5\") == -15", "assert closest_integer(\"-10.4\") == -10", "assert closest_integer(\"15.8\") == 15", "assert closest_integer(\"16.5\") == 17", "assert closest_integer(\"-5.53\") == -5", "assert closest_integer(\"5.53\") == 6", "assert closest_integer(\"5.5\") == 5", "assert closest_integer(\"-5.333333333333333\") == -5", "assert closest_integer(\"-10.54\") == -10", "assert closest_integer(\"-10.50\") == -10", "assert closest_integer(\"10.8\") == 10", "assert closest_integer(\"-10.9\") == -10", "assert closest_integer(\"-10.01\") == -10", "assert closest_integer(\"-5.1\") == -5", "assert closest_integer(\"-5.3\") == -6", "assert closest_integer(\"-5.55\") == -5", "assert closest_integer(\"-10.4\") == -11", "assert closest_integer(\"-5.34\") == -5", "assert closest_integer(\"5.34\") == 6", "assert closest_integer(\"10.7\") == 11"]}
{"HumanEval/100": ["assert make_a_pile(3) == [3, 5, 7]", "assert make_a_pile(4) == [4, 6, 8]", "assert make_a_pile(5) == [5, 7, 9]", "assert make_a_pile(6) == [6, 8, 10]", "assert make_a_pile(7) == [7, 9, 11]", "assert make_a_pile(8) == [8, 10, 12]", "assert make_a_pile(9) == [9, 11, 13]", "assert make_a_pile(10) == [10, 12, 14]", "assert make_a_pile(11) == [11, 13, 15]", "assert make_a_pile(12) == [12, 14, 16]"]}
{"HumanEval/101": ["assert words_string(\"Hello, world!\") == [\"Hello\", \"world\"]", "assert words_string(\"My name is John.\") == [\"My\", \"name\", \"is\", \"John\"]", "assert words_string(\"This is a test\") == [\"This\", \"is\", \"a\", \"test\"]", "assert words_string(\"How are you?\") == [\"How\", \"are\", \"you\"]", "assert words_string(\"I am fine, thank you.\") == [\"I\", \"am\", \"fine\", \",\", \"thank\", \"you\"]", "assert words_string(\"What's your name?\") == [\"What's\", \"your\", \"name\"]", "assert words_string(\"The quick brown fox jumps over the lazy dog\") == [\"The\", \"quick\", \"brown\", \"fox\", \"jumps\", \"over\", \"the\", \"lazy\", \"dog\"]", "assert words_string(\"Goodbye, cruel world\") == [\"Goodbye\", \"cruel\", \"world\"]", "assert words_string(\"This is a test.\") == [\"This\", \"is\", \"a\", \"test\"]", "assert words_string(\"It was a dark and stormy night\") == [\"It\", \"was\", \"a\", \"dark\", \"and\", \"stormy\", \"night\"]", "assert words_string(\"Goodbye, cruel world.\") == [\"Goodbye\", \"cruel\", \"world\"]", "assert words_string(\"This is a test sentence.\") == [\"This\", \"is\", \"a\", \"test\", \"sentence\"]", "assert words_string(\"My name is John\") == [\"My\", \"name\", \"is\", \"John\"]", "assert words_string(\"1,2,3,4,5,6\") == [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"]", "assert words_string(\"The quick brown fox jumps over the lazy dog.\") == [\"The\", \"quick\", \"brown\", \"fox\", \"jumps\", \"over\", \"the\", \"lazy\", \"dog\"]", "assert words_string(\"My name is John Smith\") == [\"My\", \"name\", \"is\", \"John\", \"Smith\"]", "assert words_string(\"I am fine thank you\") == [\"I\", \"am\", \"fine\", \"thank\", \"you\"]", "assert words_string(\"I am from Earth\") == [\"I\", \"am\", \"from\", \"Earth\"]", "assert words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]", "assert words_string(\"Goodbye\") == [\"Goodbye\"]", "assert words_string(\"What's up?\") == [\"What's\", \"up?\"]", "assert words_string(\"It was a wonderful party\") == [\"It\", \"was\", \"a\", \"wonderful\", \"party\"]", "assert words_string(\",\") == []", "assert words_string(\"\") == []", "assert words_string(\"It's nice out today.\") == [\"It's\", \"nice\", \"out\", \"today\"]", "assert words_string(\",hello,world,how,are,you?\") == [\"hello\", \"world\", \"how\", \"are\", \"you?\"]", "assert words_string(\",hello,world\") == [\"hello\", \"world\"]", "assert words_string(\"This is a test, but with a comma\") == [\"This\", \"is\", \"a\", \"test\", \",but\", \"with\", \"a\", \"comma\"]", "assert words_string(\"This is a test, this is another test\") == [\"This\", \"is\", \"a\", \"test\", \",this\", \"is\", \"another\", \"test\"]", "assert words_string(\"I love Python.\") == [\"I\", \"love\", \"Python\"]", "assert words_string(\" \") == []", "assert words_string(\"What's your name?\") == [\"What's\", \"your\", \"name\", \"?\"]", "assert words_string(\",hello,world,\") == [\"hello\", \"world\"]", "assert words_string(\"Howdy, partner!\") == [\"Howdy\", \"partner\"]", "assert words_string(\"I'm not a robot.\") == [\"I'm\", \"not\", \"a\", \"robot\"]", "assert words_string(\"My name is John Smith.\") == [\"My\", \"name\", \"is\", \"John\", \"Smith\"]", "assert words_string(\"It's a beautiful day today.\") == [\"It's\", \"a\", \"beautiful\", \"day\", \"today\"]", "assert words_string(\"I am from earth.\") == [\"I\", \"am\", \"from\", \"earth\"]", "assert words_string(\"It was a dark and stormy night.\") == [\"It\", \"was\", \"a\", \"dark\", \"and\", \"stormy\", \"night\"]", "assert words_string(\"It was a beautiful day.\") == [\"It\", \"was\", \"a\", \"beautiful\", \"day\"]", "assert words_string(\"I am good.\") == [\"I\", \"am\", \"good\"]", "assert words_string(\",hello,world,this,is,a,test\") == [\"hello\", \"world\", \"this\", \"is\", \"a\", \"test\"]", "assert words_string(\"one,two,three,four,five,six\") == [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"]", "assert words_string(\"I,love,you\") == [\"I\", \"love\", \"you\"]", "assert words_string(\"My,dog's,name,is,Buddy\") == [\"My\", \"dog's\", \"name\", \"is\", \"Buddy\"]", "assert words_string(\"Goodbye, world.\") == [\"Goodbye\", \"world\"]", "assert words_string(\"Goodbye, world!\") == [\"Goodbye\", \"world\"]", "assert words_string(\"This is a test ,and this is another test\") == [\"This\", \"is\", \"a\", \"test\", \",and\", \"this\", \"is\", \"another\", \"test\"]", "assert words_string(\",hello,world,this,is,a,test,sentence\") == [\"hello\", \"world\", \"this\", \"is\", \"a\", \"test\", \"sentence\"]", "assert words_string(\"I have a dog, cat and bird.\") == [\"I\", \"have\", \"a\", \"dog\", \",\", \"cat\", \",\", \"and\", \"bird\"]", "assert words_string(\"1, 2, 3, 4, 5, 6\") == [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"]", "assert words_string(\"This is a test sentence\") == [\"This\", \"is\", \"a\", \"test\", \"sentence\"]", "assert words_string(\"I have a cat and a dog\") == [\"I\", \"have\", \"a\", \"cat\", \"and\", \"a\", \"dog\"]", "assert words_string(\"It's nice outside today.\") == [\"It's\", \"nice\", \"outside\", \"today\"]", "assert words_string(\"I am fine.\") == [\"I\", \"am\", \"fine\"]", "assert words_string(\"I'm feeling great.\") == [\"I'm\", \"feeling\", \"great\"]", "assert words_string(\"Goodbye, see you later\") == [\"Goodbye\", \"see\", \"you\", \"later\"]", "assert words_string(\"I am John Smith.\") == [\"I\", \"am\", \"John\", \"Smith\"]", "assert words_string(\",\") == [\"\"]", "assert words_string(\" \") == [\"\"]", "assert words_string(\"I am feeling very good today.\") == [\"I\", \"am\", \"feeling\", \"very\", \"good\", \"today\"]", "assert words_string(\"Good morning, how are you?\") == [\"Good\", \"morning\", \"how\", \"are\", \"you\"]", "assert words_string(\"   \") == []", "assert words_string(\"A simple string\") == [\"A\", \"simple\", \"string\"]", "assert words_string(\"Hello, how are you?\") == [\"Hello\", \"how\", \"are\", \"you\"]", "assert words_string(\"What's up?\") == [\"What's\", \"up\"]", "assert words_string(\"I am not a robot.\") == [\"I\", \"am\", \"not\", \"a\", \"robot\"]", "assert words_string(\"I am a student.\") == [\"I\", \"am\", \"a\", \"student\"]", "assert words_string(\"hello , world\") == [\"hello\", \"world\"]", "assert words_string(\"Hello   world\") == [\"Hello\", \"world\"]", "assert words_string(\"  Hello   World\") == [\"Hello\", \"World\"]", "assert words_string(\"  hello   \") == [\"hello\"]", "assert words_string(\"hello, world\") == [\"hello\", \"world\"]", "assert words_string(\"This is a test, with a comma.\") == [\"This\", \"is\", \"a\", \"test\", \",\", \"with\", \"a\", \"comma\"]", "assert words_string(\"My name is John Doe.\") == [\"My\", \"name\", \"is\", \"John\", \"Doe\"]", "assert words_string(\"It was a wonderful party.\") == [\"It\", \"was\", \"a\", \"wonderful\", \"party\"]", "assert words_string(\"A simple sentence with a comma and a space.\") == [\"A\", \"simple\", \"sentence\", \",\", \"with\", \"a\", \"comma\", \"and\", \"a\", \"space\"]", "assert words_string(\"Goodbye!\") == [\"Goodbye\"]", "assert words_string(\"Goodbye, cruel world!\") == [\"Goodbye\", \"cruel\", \"world\"]", "assert words_string(\"It's a nice day today.\") == [\"It's\", \"a\", \"nice\", \"day\", \"today\"]", "assert words_string(\"I love you.\") == [\"I\", \"love\", \"you\"]", "assert words_string(\"1\") == [1]", "assert words_string(\"1,2,3,4,5\") == [\"1\", \"2\", \"3\", \"4\", \"5\"]", "assert words_string(\"-1,2,-3,-4,-5\") == [\"-1\", \"-2\", \"-3\", \"-4\", \"-5\"]", "assert words_string(\"A man, a plan, a canal: Panama!\") == [\"a\", \"man\", \"a\", \"plan\", \"a\", \"canal\", \"Panama\"]", "assert words_string(\",hello\") == [\"hello\"]", "assert words_string(\"how, are, you?\") == [\"how\", \"are\", \"you\"]", "assert words_string(\"goodbye\") == [\"goodbye\"]", "assert words_string(\"I love Python\") == [\"I\", \"love\", \"Python\"]", "assert words_string(\"Hello, world, this is a test\") == [\"Hello\", \"world\", \"this\", \"is\", \"a\", \"test\"]", "assert words_string(\"This is a test sentence.\") == [\"this\", \"is\", \"a\", \"test\", \"sentence\"]", "assert words_string(\"hello world\") == [\"hello\", \"world\"]", "assert words_string(\"My name is John Doe\") == [\"My\", \"name\", \"is\", \"John\", \"Doe\"]", "assert words_string(\"  goodbye   \") == [\"goodbye\"]", "assert words_string(\"   \\n   \") == []", "assert words_string(\"Hello world\") == [\"Hello\", \"world\"]", "assert words_string(\"I am learning Python.\") == [\"I\", \"am\", \"learning\", \"Python\"]", "assert words_string(\"I love you, but I'm not sure if you feel the same way about me.\") == [\"I\", \"love\", \"you\", \",but\", \"I'm\", \"not\", \"sure\", \"if\", \"you\", \"feel\", \"the\", \"same\", \"way\", \"about\", \"me\"]", "assert words_string(\"This is a test, hello?\") == [\"This\", \"is\", \"a\", \"test\", \"hello\"]", "assert words_string(\"Hello, this is a test\") == [\"Hello\", \"this\", \"is\", \"a\", \"test\"]", "assert words_string(\"I am feeling great today.\") == [\"I\", \"am\", \"feeling\", \"great\", \"today\"]"]}
{"HumanEval/102": ["assert choose_num(12, 15) == 14", "assert choose_num(13, 12) == -1", "assert choose_num(8, 10) == 10", "assert choose_num(10, 12) == 12", "assert choose_num(12, 14) == 14", "assert choose_num(9, 8) == -1", "assert choose_num(11, 10) == -1", "assert choose_num(14, 15) == 14", "assert choose_num(15, 14) == 15", "assert choose_num(14, 12) == 14", "assert choose_num(15, 15) == 15", "assert choose_num(15, 12) == 15", "assert choose_num(12, 14) == 12", "assert choose_num(14, 15) == -1", "assert choose_num(13, 14) == -1", "assert choose_num(15, 12) == -1", "assert choose_num(12, 13) == -1", "assert choose_num(14, 13) == -1", "assert choose_num(15, 14) == -1", "assert choose_num(12, 15) == -1", "assert choose_num(10, 15) == 14", "assert choose_num(12, 8) == 12", "assert choose_num(12, 17) == -1", "assert choose_num(12, 13) == 12", "assert choose_num(13, 13) == -1", "assert choose_num(15, 12) == 12", "assert choose_num(11, 9) == 11", "assert choose_num(10, 11) == -1", "assert choose_num(11, 12) == -1", "assert choose_num(12, 12) == 12", "assert choose_num(9, 7) == 8", "assert choose_num(11, 13) == -1", "assert choose_num(10, 8) == 10", "assert choose_num(10, 10) == 10", "assert choose_num(16, 15) == 14", "assert choose_num(15, 16) == -1", "assert choose_num(14, 14) == 14", "assert choose_num(14, 13) == 13", "assert choose_num(12, 18) == 16", "assert choose_num(15, 18) == -1", "assert choose_num(15, 13) == -1", "assert choose_num(14, 11) == -1", "assert choose_num(16, 15) == -1", "assert choose_num(17, 18) == -1", "assert choose_num(19, 20) == -1", "assert choose_num(20, 19) == -1", "assert choose_num(12, 13) == 13", "assert choose_num(15, 12) == 14", "assert choose_num(13, 14) == 13", "assert choose_num(10, 12) == 10", "assert choose_num(12, 16) == 14", "assert choose_num(15, 17) == -1", "assert choose_num(15, 19) == -1", "assert choose_num(15, 14) == 14", "assert choose_num(15, 13) == 13", "assert choose_num(12, 16) == -1", "assert choose_num(16, 12) == -1", "assert choose_num(10, 11) == 12", "assert choose_num(9, 8) == 10", "assert choose_num(11, 14) == -1", "assert choose_num(10, 14) == 12", "assert choose_num(9, 11) == 11", "assert choose_num(11, 13) == 13", "assert choose_num(9, 11) == 8", "assert choose_num(14, 16) == -1", "assert choose_num(16, 18) == -1", "assert choose_num(18, 20) == -1", "assert choose_num(14, 12) == 12", "assert choose_num(10, 8) == -1", "assert choose_num(10, 13) == 12", "assert choose_num(15, 10) == 14", "assert choose_num(15, 13) == 12", "assert choose_num(9, 11) == 10", "assert choose_num(15, 15) == -1", "assert choose_num(12, 14) == -1", "assert choose_num(5, 3) == 5", "assert choose_num(11, 13) == 12", "assert choose_num(14, 16) == 14", "assert choose_num(16, 18) == 16", "assert choose_num(12, 19) == -1", "assert choose_num(13, 15) == -1", "assert choose_num(14, 13) == 14", "assert choose_num(15, 10) == 15", "assert choose_num(8, 12) == 10", "assert choose_num(10, 11) == 10", "assert choose_num(9, 8) == 8", "assert choose_num(8, 9) == -1", "assert choose_num(12, 11) == 12", "assert choose_num(11, 12) == 12", "assert choose_num(8, 10) == 8", "assert choose_num(10, 9) == 10", "assert choose_num(11, 10) == 10", "assert choose_num(9, 10) == 8", "assert choose_num(11, 12) == 11", "assert choose_num(10, 11) == 11", "assert choose_num(8, 9) == 10", "assert choose_num(11, 11) == 11", "assert choose_num(16, 15) == 16", "assert choose_num(14, 12) == -1", "assert choose_num(10, 12) == -1", "assert choose_num(14, 15) == 15"]}
{"HumanEval/103": ["assert rounded_avg(1, 5) == \"0b11\"", "assert rounded_avg(7, 5) == -1", "assert rounded_avg(10, 20) == \"0b1111\"", "assert rounded_avg(20, 33) == \"0b11010\"", "assert rounded_avg(5, 10) == \"0b10\"", "assert rounded_avg(20, 25) == \"0b11111\"", "assert rounded_avg(10, 15) == \"0b101\"", "assert rounded_avg(20, 30) == \"-1\"", "assert rounded_avg(1, 10) == \"0b11\"", "assert rounded_avg(1, 11) == \"0b111\"", "assert rounded_avg(1, 12) == \"0b1111\"", "assert rounded_avg(1, 13) == \"0b11111\"", "assert rounded_avg(1, 14) == \"0b111111\"", "assert rounded_avg(1, 15) == \"0b1111111\"", "assert rounded_avg(1, 16) == \"0b11111111\"", "assert rounded_avg(1, 17) == \"0b111111111\"", "assert rounded_avg(1, 18) == \"0b1111111111\"", "assert rounded_avg(1, 19) == \"0b11111111111\"", "assert rounded_avg(1, 20) == \"0b111111111111\"", "assert rounded_avg(1, 21) == \"0b1111111111111\"", "assert rounded_avg(1, 22) == \"0b11111111111111\"", "assert rounded_avg(1, 23) == \"0b111111111111111\"", "assert rounded_avg(1, 24) == \"0b1111111111111111\"", "assert rounded_avg(1, 25) == \"0b11111111111111111\"", "assert rounded_avg(1, 26) == \"0b111111111111111111\"", "assert rounded_avg(1, 27) == \"0b1111111111111111111\"", "assert rounded_avg(3, 1) == \"0b11\"", "assert rounded_avg(5, 1) == \"0b11\"", "assert rounded_avg(1, 2) == \"0b11\"", "assert rounded_avg(1, 3) == \"0b11\"", "assert rounded_avg(1, 4) == \"0b11\"", "assert rounded_avg(1, 9) == \"0b11\"", "assert rounded_avg(1, 8) == \"0b11\"", "assert rounded_avg(1, 7) == \"0b11\"", "assert rounded_avg(1, 6) == \"0b11\"", "assert rounded_avg(1, 1) == \"0b11\"", "assert rounded_avg(1, 0) == \"0b11\"", "assert rounded_avg(1, 10) == \"-1\"", "assert rounded_avg(7, 5) == \"-1\"", "assert rounded_avg(5, 5) == \"0b11\"", "assert rounded_avg(10, 10) == \"0b1110\"", "assert rounded_avg(30, 33) == \"0b11011\"", "assert rounded_avg(10, 1) == \"-1\"", "assert rounded_avg(20, 1) == \"-1\"", "assert rounded_avg(30, 40) == \"0b11101\"", "assert rounded_avg(49, 50) == \"0b11110\"", "assert rounded_avg(50, 60) == \"0b11111\"", "assert rounded_avg(60, 70) == \"0b111111\"", "assert rounded_avg(1, 2) == \"0b111\"", "assert rounded_avg(1, 1) == \"0b1111\"", "assert rounded_avg(1, 10000) == \"-1\"", "assert rounded_avg(30, 20) == \"0b11101\"", "assert rounded_avg(20, 10) == \"0b1110\"", "assert rounded_avg(10, 10) == \"0b111\"", "assert rounded_avg(5, 10) == \"0b101\"", "assert rounded_avg(10, 10) == \"0b100\"", "assert rounded_avg(20, 20) == \"0b1000\"", "assert rounded_avg(5, 5) == \"0b111\"", "assert rounded_avg(1, 20) == \"0b1111\"", "assert rounded_avg(30, 20) == \"0b11100\"", "assert rounded_avg(10, 10) == \"0b10000\"", "assert rounded_avg(5, 5) == \"0b10000\"", "assert rounded_avg(20, 10) == \"0b10100\"", "assert rounded_avg(5, 15) == \"0b111\"", "assert rounded_avg(1, 100) == \"0b11000\"", "assert rounded_avg(100, 101) == \"0b110100\"", "assert rounded_avg(100, 1000) == \"0b1100000\"", "assert rounded_avg(1000, 1001) == \"0b1101000\"", "assert rounded_avg(1000, 10000) == \"-1\"", "assert rounded_avg(7, 10) == \"0b110\"", "assert rounded_avg(20, 10) == \"0b1111\"", "assert rounded_avg(10, 10) == \"0b1111\"", "assert rounded_avg(100, 100) == \"0b111111\"", "assert rounded_avg(1, 10) == \"0b1100\"", "assert rounded_avg(10, 1) == \"0b1110\"", "assert rounded_avg(20, 10) == \"0b11110\"", "assert rounded_avg(1, 1000) == \"0b1100000\"", "assert rounded_avg(1, 10000) == \"0b110000000\"", "assert rounded_avg(50, 51) == -1", "assert rounded_avg(100, 101) == \"0b11111\"", "assert rounded_avg(10, 1) == \"0b11\"", "assert rounded_avg(1, 1) == \"0b1\"", "assert rounded_avg(10, 10) == \"-1\"", "assert rounded_avg(1, 0) == \"0b1\"", "assert rounded_avg(1, 100) == \"0b110000\"", "assert rounded_avg(1, 1000) == \"0b11000000\"", "assert rounded_avg(1, 10000) == \"0b1100000000\"", "assert rounded_avg(1, 100000) == \"0b11000000000\"", "assert rounded_avg(1, 10) == \"0b110\"", "assert rounded_avg(10, 1) == \"0b111\"", "assert rounded_avg(1, -1) == -1", "assert rounded_avg(1, 11) == -1", "assert rounded_avg(5, 10) == \"0b110\"", "assert rounded_avg(10, 15) == \"0b1110\"", "assert rounded_avg(15, 20) == \"0b11110\"", "assert rounded_avg(1, 100) == \"0b1100\"", "assert rounded_avg(1, 1000) == \"0b11000\"", "assert rounded_avg(1, 10000) == \"0b110000\"", "assert rounded_avg(1, 100000) == \"0b1100000\"", "assert rounded_avg(1, 1000000) == \"0b11000000\"", "assert rounded_avg(1, 10000000) == \"0b110000000\"", "assert rounded_avg(1, 100000000) == \"0b1100000000\"", "assert rounded_avg(1, 1000000000) == \"0b11000000000\"", "assert rounded_avg(1, 10000000000) == \"0b110000000000\"", "assert rounded_avg(1, 100000000000) == \"0b1100000000000\"", "assert rounded_avg(1, 10000000000000) == \"0b11000000000000\"", "assert rounded_avg(1, 100000000000000) == \"0b110000000000000\"", "assert rounded_avg(1, 1000000000000000) == \"0b1100000000000000\""]}
{"HumanEval/104": ["assert unique_digits([15, 33, 1422, 1]) == [1, 15, 33]", "assert unique_digits([152, 323, 1422, 10]) == []", "assert unique_digits([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]", "assert unique_digits([1, 2, 3, 4, 5, 6]) == [1, 2, 3, 4, 5, 6]", "assert unique_digits([1, 2, 3, 4, 5, 6, 7]) == [1, 2, 3, 4, 5, 6, 7]", "assert unique_digits([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 2, 3, 4, 5, 6, 7, 8]", "assert unique_digits([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]", "assert unique_digits([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "assert unique_digits([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]", "assert unique_digits([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]", "assert unique_digits([15, 33, 1422, 1, 15]) == [1, 15, 33]", "assert unique_digits([15, 33, 1422, 1, 15, 33]) == [1, 15, 33]", "assert unique_digits([15, 33, 1422, 1, 15, 33, 15]) == [1, 15, 33]", "assert unique_digits([15, 33, 1422, 1, 15, 33, 15, 33]) == [1, 15, 33]", "assert unique_digits([15, 33, 1422, 1, 15, 33, 15, 33, 15, 33]) == [1, 15, 33]", "assert unique_digits([1, 15, 33, 1422, 1]) == [1, 15, 33]", "assert unique_digits([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 3, 4, 5, 7, 8, 9, 10]", "assert unique_digits([1, 3, 5, 7, 9, 11, 13, 15, 17, 19]) == [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]", "assert unique_digits([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]", "assert unique_digits([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 2, 3, 4, 5, 7, 8, 9]", "assert unique_digits([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 2, 3, 4, 5, 7, 8, 9, 10, 11]", "assert unique_digits([15, 33, 1422, 10]) == [15, 33]", "assert unique_digits([15, 33, 1422, 100]) == [15, 33]", "assert unique_digits([15, 33, 1422, 1000]) == [15, 33]", "assert unique_digits([15, 33, 1422, 10000]) == [15, 33]", "assert unique_digits([15, 33, 1422, 100000]) == [15, 33]", "assert unique_digits([1, 2, 3, 4, 5]) == [1, 3, 5]", "assert unique_digits([15, 33, 1422, 1, 10]) == [1, 15, 33]", "assert unique_digits([152, 323, 1422, 10, 1]) == [1, 15, 33]", "assert unique_digits([1, 15, 33, 1422]) == [1, 15, 33]", "assert unique_digits([15, 33, 1422, 100]) == [100]", "assert unique_digits([15, 33, 1422, 1000]) == [1000]", "assert unique_digits([15, 33, 1422, 10000]) == [10000]", "assert unique_digits([15, 33, 1422, 100000]) == [100000]", "assert unique_digits([15, 33, 1422, 100]) == [1, 15, 33]", "assert unique_digits([15, 33, 1422, 1000]) == [1, 15, 33]", "assert unique_digits([15, 33, 1422, 10000]) == [1, 15, 33]", "assert unique_digits([15, 33, 1422, 100000]) == [1, 15, 33]", "assert unique_digits([15, 33, 1422, 1000000]) == [1, 15, 33]", "assert unique_digits([15, 33, 1422, 10000000]) == [1, 15, 33]", "assert unique_digits([15, 33, 1422, 100000000]) == [1, 15, 33]", "assert unique_digits([1, 2, 3, 4, 5]) == [3, 5]", "assert unique_digits([1, 2, 3, 4, 5, 6]) == [3, 5]", "assert unique_digits([1, 2, 3, 4, 5, 6, 7]) == [3, 5]", "assert unique_digits([1, 2, 3, 4, 5, 6, 7, 8]) == []", "assert unique_digits([1, 2, 3, 4, 5, 6, 7, 8, 9]) == []", "assert unique_digits([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == []", "assert unique_digits([1, 2, 3, 4, 5]) == [3, 4, 5]", "assert unique_digits([1, 2, 3, 4, 6]) == [3, 4, 5]", "assert unique_digits([1, 2, 3, 4, 8]) == [3, 4, 5]", "assert unique_digits([1, 2, 3, 5, 6]) == [3, 5]", "assert unique_digits([1, 2, 3, 5, 7]) == [3, 5]", "assert unique_digits([1, 2, 3, 5, 8]) == [3, 5]", "assert unique_digits([1, 2, 3, 6, 7]) == [3, 6]", "assert unique_digits([1, 2, 3, 6, 8]) == [3, 6]", "assert unique_digits([1, 2, 4, 5, 6]) == [2, 4, 5]", "assert unique_digits([1, 2, 4, 5, 7]) == [2, 4, 5]", "assert unique_digits([1, 2, 4, 5, 8]) == [2, 4, 5]", "assert unique_digits([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 2, 3, 4, 5, 7, 8, 9, 10]", "assert unique_digits([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == [1, 2, 3, 4, 5, 7, 8, 9, 10]", "assert unique_digits([1, 2, 3, 4, 5, 6]) == [1, 3, 5, 6]", "assert unique_digits([1, 2, 3, 4, 5, 6, 7]) == [1, 3, 5, 6, 7]", "assert unique_digits([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 3, 5, 6, 7, 8]", "assert unique_digits([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 3, 5, 6, 7, 8, 9]", "assert unique_digits([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 3, 5, 6, 7, 8, 9, 10]", "assert unique_digits([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 3, 5, 6, 7, 8, 9, 10, 11]", "assert unique_digits([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == [1, 3, 5, 6, 7, 8, 9, 10, 11, 12]", "assert unique_digits([1, 2, 4, 8, 16]) == [1, 2, 4, 8, 16]", "assert unique_digits([1, 3, 5, 7, 9]) == [1, 3, 5, 7, 9]", "assert unique_digits([1, 2, 4, 8, 16, 32]) == [1, 2, 4, 8, 16]", "assert unique_digits([1, 3, 5, 7, 9, 11]) == [1, 3, 5, 7, 9, 11]", "assert unique_digits([1, 2, 4, 8, 16, 32]) == [1, 2, 4, 8, 16, 32]", "assert unique_digits([1, 15, 33, 456]) == [1, 15, 33, 456]", "assert unique_digits([15, 33, 1422, 1, 456]) == [1, 15, 33, 456]", "assert unique_digits([1, 2, 4, 8, 9]) == [1, 2, 4]", "assert unique_digits([1, 3, 5, 7, 9]) == [1, 3, 5, 7]", "assert unique_digits([1, 2, 3, 4, 6]) == [1, 2, 3, 4]", "assert unique_digits([1, 2, 3, 4, 6, 5]) == [1, 2, 3, 4, 5]", "assert unique_digits([1, 2, 3, 4, 6, 5, 7]) == [1, 2, 3, 4, 5, 7]", "assert unique_digits([1, 2, 3, 4, 6, 5, 7, 8]) == [1, 2, 3, 4, 5, 7, 8]", "assert unique_digits([1, 2, 3, 4, 6, 5, 7, 8, 9]) == [1, 2, 3, 4, 5, 7, 8, 9]", "assert unique_digits([1, 2, 3, 4, 5, 6]) == [3, 4, 5, 6]", "assert unique_digits([1, 2, 3, 4, 5, 6, 7]) == [3, 4, 5, 6, 7]", "assert unique_digits([1, 2, 3, 4, 5, 6, 7, 8]) == [3, 4, 5, 6, 7, 8]", "assert unique_digits([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [3, 4, 5, 6, 7, 8, 9]", "assert unique_digits([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [3, 4, 5, 6, 7, 8, 9, 10]", "assert unique_digits([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [3, 4, 5, 6, 7, 8, 9, 10, 11]", "assert unique_digits([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == [3, 4, 5, 6, 7, 8, 9, 10, 11, 12]", "assert unique_digits([1, 2, 3, 4, 5]) == [1, 2, 3, 4]", "assert unique_digits([1, 2, 3, 4, 5, 6]) == [1, 2, 3, 4, 5]", "assert unique_digits([15, 33, 1422, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 15, 33, 5, 7, 8, 9, 10]", "assert unique_digits([1, 3, 5, 7, 9, 10, 11, 12, 13, 15]) == [1, 3, 5, 7, 9, 10, 11, 12, 13, 15]", "assert unique_digits([15, 33, 1422, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 15, 33, 1422, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "assert unique_digits([15, 33, 1422, 1, 10, 152]) == [1, 15, 33]", "assert unique_digits([15, 33, 1422, 1, 10, 323]) == [1, 15, 33]", "assert unique_digits([15, 33, 1422, 1, 10, 152, 323]) == [1, 15, 33]", "assert unique_digits([15, 33, 1422, 1, 10, 152, 323, 15]) == [1, 15, 33]", "assert unique_digits([15, 33, 1422, 1, 10, 323, 15, 152]) == [1, 15, 33]", "assert unique_digits([1, 15, 33, 1422, 1, 15, 33, 1422, 1]) == [1, 15, 33]", "assert unique_digits([1, 15, 33, 1422, 1, 15, 33, 1422, 1, 15, 33, 1422, 1]) == [1, 15, 33]", "assert unique_digits([1, 15, 33, 1422, 1, 15, 33, 1422, 1, 15, 33, 1422, 1, 15, 33, 1422, 1]) == [1, 15, 33]", "assert unique_digits([152, 323, 1422, 1000]) == [1, 33]", "assert unique_digits([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]", "assert unique_digits([1, 15, 33, 45]) == [1, 15, 33]", "assert unique_digits([15, 33, 1422, 10]) == []", "assert unique_digits([15, 33, 1422, 10, 22]) == [1, 15, 33]"]}
{"HumanEval/105": ["assert by_length([2, 1, 1, 4, 5, 8, 2, 3]) == ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']", "assert by_length([1, 2, 3, 4, 5, 6, 7, 8, 9]) == ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Four', 'Three', 'Two', 'One']", "assert by_length([]) == []", "assert by_length([-1, 1, 55]) == ['One']", "assert by_length([1, 2, 3]) == ['One', 'Two', 'Three']", "assert by_length([-1, 2, 3]) == ['One', 'Two', 'Three']", "assert by_length([1, -2, 3]) == ['One', 'Two', 'Three']", "assert by_length([1, 2, -3]) == ['One', 'Two', 'Three']", "assert by_length([-3, -2, -1]) == ['One', 'Two', 'Three']", "assert by_length([0, 0, 0]) == ['One', 'Two', 'Three']", "assert by_length([5, 23, -11]) == ['Five', 'Twenty-three', 'Eleven']", "assert by_length([-12, 0, 1]) == ['One', 'Twelve', 'One']", "assert by_length([12, -3, 1]) == ['Fourteen', '-Three', 'One']", "assert by_length([3, -2, 0]) == ['Four', '-Two', 'Zero']", "assert by_length([3, -2, 0]) == ['One', 'Two', 'Three']", "assert by_length([3, -2, 0]) == ['Fourteen', '-Three', 'One']", "assert by_length([-1000, 1000, 0]) == []", "assert by_length([2, 1, 1, 4, 5, 8, 2, 3]) == ['Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One']", "assert by_length([1, 2, 3, 4, 5, 6, 7, 8, 9]) == ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Four', 'Three', 'Two']", "assert by_length([2, 1, 1, 4, 5, 8, 2, 3]) == [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]", "assert by_length([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [\"Nine\", \"Eight\", \"Seven\", \"Six\", \"Five\", \"Four\", \"Three\", \"Two\", \"One\"]", "assert by_length([-1, 1, 55]) == [\"One\"]", "assert by_length([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]", "assert by_length([-1, 2, 3, 4, 5, 6, 7, 8, 9]) == [\"Nine\", \"Eight\", \"Seven\", \"Six\", \"Five\", \"Four\", \"Three\", \"Two\", \"One\"]", "assert by_length([2, 1, 1, 4, 5, 8, 2, 3]) == ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight']", "assert by_length([1, 2, 3, 4, 5, 6, 7, 8, 9]) == ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']", "assert by_length([2, 1, 1]) == ['Two', 'One', 'One']", "assert by_length([1, 2, 3]) == [\"One\", \"Two\", \"Three\"]", "assert by_length([-1, 2, 3]) == [\"One\", \"Two\", \"Three\"]", "assert by_length([1, -2, 3]) == [\"One\", \"Two\", \"Three\"]", "assert by_length([1, 2, -3]) == [\"One\", \"Two\", \"Three\"]", "assert by_length([3, -2, 0]) == [\"Three\", \"Two\", \"One\"]", "assert by_length([5, 23, -11]) == [\"Five\", \"Twenty-three\", \"Negative Eleven\"]", "assert by_length([-12, 0, 1]) == [\"Negative Twelve\", \"Zero\", \"One\"]", "assert by_length([12, -3, 1]) == [\"Twelve\", \"Negative Three\", \"One\"]", "assert by_length([-3, -2, 1]) == [\"Negative Three\", \"Negative Two\", \"One\"]", "assert by_length([-1, 2, 3, 4, 5, 6, 7, 8, 9]) == ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Four', 'Three', 'Two']", "assert by_length([1, 2, 3]) == [\"Two\", \"Three\", \"Four\"]", "assert by_length([1, -2, 3]) == [\"Two\", \"Three\", \"Four\"]", "assert by_length([1, 2, -3]) == [\"Two\", \"Three\", \"Four\"]", "assert by_length([1, 2, 3, 4]) == [\"Two\", \"Three\", \"Four\", \"Five\"]", "assert by_length([-3, -2, -1]) == [\"Five\", \"Four\", \"Three\"]", "assert by_length([0, 0, 0]) == [\"Zero\", \"Zero\", \"Zero\"]", "assert by_length([12, -3, 1]) == [\"Fourteen\", \"Minus Three\", \"One\"]", "assert by_length([3, -2, 0]) == [\"Four\", \"Minus Two\", \"Zero\"]", "assert by_length([-3, -2, -1]) == [\"One\", \"Two\", \"Three\"]", "assert by_length([0, 0, 0]) == []", "assert by_length([-3, -2, -1]) == [\"Eight\", \"Seven\", \"Six\", \"Five\", \"Four\", \"Three\", \"Two\", \"One\"]", "assert by_length([0, 0, 0]) == [\"One\", \"Two\", \"Three\"]", "assert by_length([5, 23, -11]) == [\"Fifteen\", \"Twenty-three\", \"Negative eleven\"]", "assert by_length([-1, 2, 3, 4, 5, 6, 7, 8, 9]) == ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']", "assert by_length([5, 23, -11]) == [\"Eight\", \"Five\", \"Four\", \"Three\"]", "assert by_length([-12, 0, 1]) == [\"Eight\", \"Five\", \"Four\", \"Three\"]", "assert by_length([12, -3, 1]) == [\"Eight\", \"Five\", \"Four\", \"Three\"]", "assert by_length([3, -2, 0]) == [\"Eight\", \"Five\", \"Four\", \"Three\"]", "assert by_length([5, 23, -11]) == ['Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One']", "assert by_length([-12, 0, 1]) == ['Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One']", "assert by_length([12, -3, 1]) == ['Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One']", "assert by_length([3, -2, 0]) == ['Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One']", "assert by_length([1, 2, 3, 4, 5, 6, 7, 8, 9]) == ['Eight', 'Seven', 'Six', 'Five', 'Four', 'Three', 'Two', 'One']", "assert by_length([5, 23, -11]) == ['Eight', 'Five', 'Four', 'Three', 'Two', 'One']", "assert by_length([-12, 0, 1]) == ['Eight', 'Five', 'Four', 'Three', 'Two', 'One']", "assert by_length([12, -3, 1]) == ['Eleven', 'Ten', 'Nine', 'Eight', 'Seven', 'Six', 'Five', 'Four', 'Three', 'Two', 'One']", "assert by_length([-1, 1, 1, 4, 5, 8, 2, 3]) == [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]", "assert by_length([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]", "assert by_length([1, -1, 55]) == [\"One\"]", "assert by_length([-1, 2, 3, 4, 5, 6, 7, 8, 9]) == [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]", "assert by_length([-1, 2, 3, 4, 5, 6, 7, 8, 9]) == ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Four', 'Three', 'Two', 'One']", "assert by_length([1, 2, 2]) == ['Two', 'One', 'One']", "assert by_length([5, 23, -11]) == ['Five', 'Twenty-three', 'Negative Eleven']", "assert by_length([-12, 0, 1]) == ['One', 'Two', 'Three']", "assert by_length([12, -3, 1]) == ['One', 'Two', 'Three']", "assert by_length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]", "assert by_length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]", "assert by_length([2, 3, 4]) == ['Four', 'Three', 'Two']", "assert by_length([5, 23, -11]) == ['Eight', 'Five', 'Four']", "assert by_length([-12, 0, 1]) == ['Eight', 'Five', 'Four']", "assert by_length([12, -3, 1]) == ['Ten', 'Nine', 'Eight']", "assert by_length([3, -2, 0]) == [\"One\", \"Two\", \"Three\"]", "assert by_length([5, 23, -11]) == [\"Five\", \"Twenty-three\", \"Eleven\"]", "assert by_length([-12, 0, 1]) == [\"Eleven\", \"Zero\", \"Twelve\"]", "assert by_length([3, -2, 0]) == [\"Thirteen\", \"Negative Two\", \"Three\"]", "assert by_length([-3, -2, -1]) == ['Eight', 'Seven', 'Six', 'Five', 'Four', 'Three', 'Two', 'One']", "assert by_length([5, 23, -11]) == ['Eight', 'Five', 'Four', 'Three', 'Two']", "assert by_length([-12, 0, 1]) == ['Eight', 'Five', 'Four', 'Three', 'Two']", "assert by_length([12, -3, 1]) == ['Eight', 'Five', 'Four', 'Three', 'Two']", "assert by_length([3, -2, 0]) == ['Eight', 'Five', 'Four', 'Three', 'Two']", "assert by_length([-12, 0, 1]) == [\"One\", \"Twelve\", \"One\"]", "assert by_length([12, -3, 1]) == [\"Fourteen\", \"Thirteen\", \"One\"]", "assert by_length([-3, -2, 1]) == [\"Three\", \"Two\", \"One\"]", "assert by_length([2, 1, 1]) == [\"Two\", \"One\", \"One\"]", "assert by_length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']", "assert by_length([-12, 0, 1]) == ['One', 'Two', 'Ten']", "assert by_length([12, -3, 1]) == ['Four', 'Thirteen', 'One']", "assert by_length([-1, 2, 1]) == ['One', 'Two', 'One']", "assert by_length([-3, -2, -1]) == [\"Eight\", \"Five\", \"Four\", \"Three\"]", "assert by_length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]", "assert by_length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == ['Ten', 'Nine', 'Eight', 'Seven', 'Six', 'Five', 'Four', 'Three', 'Two', 'One']", "assert by_length([-12, 0, 1]) == [\"One\", \"Two\", \"Thirteen\"]", "assert by_length([12, -3, 1]) == [\"Fourteen\", \"Negative Three\", \"One\"]", "assert by_length([-3, -2, 1]) == [\"Fourteen\", \"Negative Two\", \"One\"]", "assert by_length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [\"Ten\", \"Nine\", \"Eight\", \"Seven\", \"Six\", \"Five\", \"Four\", \"Three\", \"Two\", \"One\"]"]}
{"HumanEval/106": ["assert f(2) == [1, 2]", "assert f(4) == [1, 2, 4, 8, 24]", "assert f(6) == [1, 2, 6, 24, 120, 720]", "assert f(8) == [1, 2, 4, 8, 16, 32, 256]", "assert f(10) == [1, 2, 5, 10, 24, 120, 720, 6000]", "assert f(12) == [1, 2, 6, 12, 48, 288, 2520]", "assert f(14) == [1, 2, 7, 14, 28, 126, 980]", "assert f(16) == [1, 2, 4, 8, 16, 32, 64, 128]", "assert f(18) == [1, 2, 9, 18, 36, 72, 144]", "assert f(20) == [1, 2, 4, 10, 20, 40, 80, 200]", "assert f(8) == [1, 2, 4, 8, 16, 32, 128]", "assert f(10) == [1, 2, 5, 10, 24, 120, 720]", "assert f(12) == [1, 2, 6, 12, 72, 504, 49520]", "assert f(14) == [1, 2, 7, 14, 28, 112, 9856]", "assert f(16) == [1, 2, 4, 8, 16, 32, 64, 128, 256]", "assert f(1) == [1]", "assert f(3) == [1, 2, 6]", "assert f(4) == [1, 2, 6, 24]", "assert f(5) == [1, 2, 6, 24, 15]", "assert f(6) == [1, 2, 6, 24, 15, 120]", "assert f(7) == [1, 2, 6, 24, 15, 120, 90]", "assert f(8) == [1, 2, 6, 24, 15, 120, 90, 120]", "assert f(7) == [1, 2, 6, 24, 15, 120, 840]", "assert f(8) == [1, 2, 6, 24, 15, 120, 840, 5040]", "assert f(9) == [1, 2, 6, 24, 15, 120, 840, 5040, 30240]", "assert f(8) == [1, 2, 4, 8, 16, 64, 496]", "assert f(3) == [1]", "assert f(5) == [1, 2, 5]", "assert f(7) == [1, 2, 6, 24, 15, 120, 720]", "assert f(8) == [1, 2, 6, 24, 15, 120, 720, 900]", "assert f(9) == [1, 2, 6, 24, 15, 120, 720, 900, 7200]", "assert f(10) == [1, 2, 6, 24, 15, 120, 720, 900, 7200, 50400]", "assert f(8) == [1, 2, 6, 24, 15, 120, 840, 6960]", "assert f(9) == [1, 2, 6, 24, 15, 120, 840, 6960, 60240]", "assert f(8) == [1, 2, 4, 8, 24, 72, 192]", "assert f(10) == [1, 2, 5, 10, 24, 120, 720, 600]", "assert f(12) == [1, 2, 6, 12, 72, 192, 504]", "assert f(14) == [1, 2, 7, 14, 70, 112, 1002]", "assert f(16) == [1, 2, 8, 16, 96, 240, 2880]", "assert f(6) == [1, 2, 6, 24, 15, 70]", "assert f(7) == [1, 2, 6, 24, 15, 70, 84]", "assert f(8) == [1, 2, 6, 24, 15, 70, 84, 105]", "assert f(9) == [1, 2, 6, 24, 15, 70, 84, 105, 126]", "assert f(10) == [1, 2, 6, 24, 15, 70, 84, 105, 126, 156]", "assert f(8) == [1, 2, 4, 8, 16, 64, 512]", "assert f(10) == [1, 2, 5, 10, 24, 120, 720, 5056]", "assert f(12) == [1, 2, 6, 12, 48, 384, 2888]", "assert f(14) == [1, 2, 7, 14, 35, 210, 1570]", "assert f(16) == [1, 2, 4, 8, 16, 64, 1024]", "assert f(18) == [1, 2, 9, 18, 54, 462, 3696]", "assert f(20) == [1, 2, 5, 10, 20, 100, 700, 5056]", "assert f(12) == [1, 2, 6, 12, 72, 192, 1152]", "assert f(14) == [1, 2, 7, 14, 85, 562, 4201]", "assert f(16) == [1, 2, 8, 16, 126, 1024, 9001]", "assert f(18) == [1, 2, 9, 18, 162, 1344, 11904]", "assert f(20) == [1, 2, 10, 20, 200, 2000, 19002]", "assert f(6) == [1, 2, 6, 24, 15, 30]", "assert f(7) == [1, 2, 6, 24, 15, 30, 90]", "assert f(8) == [1, 2, 6, 24, 15, 30, 90, 180]", "assert f(9) == [1, 2, 6, 24, 15, 30, 90, 180, 540]", "assert f(7) == [1, 2, 6, 24, 15, 70, 120]", "assert f(8) == [1, 2, 6, 24, 15, 70, 120, 180]", "assert f(9) == [1, 2, 6, 24, 15, 70, 120, 180, 270]", "assert f(10) == [1, 2, 6, 24, 15, 70, 120, 180, 270, 420]", "assert f(8) == [1, 2, 4, 8, 24, 72]", "assert f(12) == [1, 2, 6, 12, 72, 504]", "assert f(14) == [1, 2, 7, 14, 98, 1260]", "assert f(16) == [1, 2, 8, 16, 120, 1920]", "assert f(8) == [1, 2, 6, 24, 15, 120, 90, 45]", "assert f(9) == [1, 2, 6, 24, 15, 120, 90, 45, 30]", "assert f(10) == [1, 2, 5, 10, 24, 120, 720, 5040]", "assert f(12) == [1, 2, 6, 12, 48, 288, 1920, 12960]", "assert f(14) == [1, 2, 7, 14, 28, 56, 140, 2176]", "assert f(18) == [1, 2, 9, 18, 36, 72, 144, 288, 576]", "assert f(8) == [1, 2, 6, 24, 15, 120, 90, 720]", "assert f(9) == [1, 2, 6, 24, 15, 120, 90, 720, 5040]", "assert f(10) == [1, 2, 6, 24, 15, 120, 90, 720, 5040, 362880]", "assert f(8) == [1, 2, 6, 24, 15, 70, 84, 90]", "assert f(9) == [1, 2, 6, 24, 15, 70, 84, 90, 105]", "assert f(10) == [1, 2, 6, 24, 15, 70, 84, 90, 105, 120]", "assert f(7) == [1, 2, 6, 24, 15, 30, 70]", "assert f(8) == [1, 2, 6, 24, 15, 30, 70, 120]", "assert f(9) == [1, 2, 6, 24, 15, 30, 70, 120, 210]", "assert f(10) == [1, 2, 6, 24, 15, 30, 70, 120, 210, 555]", "assert f(9) == [1, 2, 6, 24, 15, 120, 720, 900, 10800]", "assert f(10) == [1, 2, 6, 24, 15, 120, 720, 900, 10800, 12000]", "assert f(10) == [1, 2, 6, 24, 15, 120, 840, 5040, 30240, 180880]", "assert f(8) == [1, 2, 6, 24, 15, 70, 120, 288]", "assert f(9) == [1, 2, 6, 24, 15, 70, 120, 288, 864]", "assert f(10) == [1, 2, 6, 24, 15, 70, 120, 288, 864, 7656]", "assert f(8) == [1, 2, 6, 24, 15, 120, 720, 5040]", "assert f(9) == [1, 2, 6, 24, 15, 120, 720, 5040, 362880]", "assert f(8) == [1, 2, 6, 24, 15, 120, 840, 7200]", "assert f(9) == [1, 2, 6, 24, 15, 120, 840, 7200, 604800]", "assert f(8) == [1, 2, 4, 8, 24, 96, 768]", "assert f(12) == [1, 2, 6, 12, 24, 144, 1096, 9800]", "assert f(14) == [1, 2, 7, 14, 28, 112, 896, 10080]", "assert f(16) == [1, 2, 8, 16, 32, 128, 960, 11520]", "assert f(10) == [1, 2, 5, 10, 24, 120, 720, 502400]", "assert f(8) == [1, 2, 6, 24, 15, 120, 90, 60]", "assert f(9) == [1, 2, 6, 24, 15, 120, 90, 60, 45]", "assert f(10) == [1, 2, 6, 24, 15, 120, 90, 60, 45, 36]"]}
{"HumanEval/107": ["assert even_odd_palindrome(1) == (1, 1)", "assert even_odd_palindrome(2) == (1, 1)", "assert even_odd_palindrome(3) == (1, 2)", "assert even_odd_palindrome(4) == (4, 6)", "assert even_odd_palindrome(5) == (3, 4)", "assert even_odd_palindrome(6) == (3, 4)", "assert even_odd_palindrome(7) == (2, 3)", "assert even_odd_palindrome(8) == (4, 6)", "assert even_odd_palindrome(9) == (3, 4)", "assert even_odd_palindrome(10) == (3, 4)", "assert even_odd_palindrome(1) == (1, 0)", "assert even_odd_palindrome(5) == (2, 3)", "assert even_odd_palindrome(6) == (2, 3, 4)", "assert even_odd_palindrome(7) == (2, 3, 4, 5, 6, 7, 8, 9, 10)", "assert even_odd_palindrome(8) == (4, 6, 8)", "assert even_odd_palindrome(9) == (2, 3, 4, 5, 6, 7, 8, 9, 10, 11)", "assert even_odd_palindrome(10) == (4, 6, 8, 10)", "assert even_odd_palindrome(5) == (3, 3)", "assert even_odd_palindrome(6) == (3, 3)", "assert even_odd_palindrome(7) == (3, 3)", "assert even_odd_palindrome(8) == (3, 3)", "assert even_odd_palindrome(9) == (3, 3)", "assert even_odd_palindrome(10) == (3, 3)", "assert even_odd_palindrome(4) == (2, 4)", "assert even_odd_palindrome(5) == (2, 4)", "assert even_odd_palindrome(6) == (2, 4)", "assert even_odd_palindrome(7) == (2, 4)", "assert even_odd_palindrome(8) == (2, 4)", "assert even_odd_palindrome(9) == (2, 4)", "assert even_odd_palindrome(10) == (2, 4)", "assert even_odd_palindrome(11) == (2, 4)", "assert even_odd_palindrome(12) == (4, 6)", "assert even_odd_palindrome(6) == (2, 3)", "assert even_odd_palindrome(8) == (4, 4)", "assert even_odd_palindrome(2) == (0, 1)", "assert even_odd_palindrome(3) == (1, 1)", "assert even_odd_palindrome(4) == (2, 2)", "assert even_odd_palindrome(5) == (2, 1)", "assert even_odd_palindrome(6) == (3, 2)", "assert even_odd_palindrome(7) == (3, 1)", "assert even_odd_palindrome(8) == (2, 1)", "assert even_odd_palindrome(9) == (2, 1)", "assert even_odd_palindrome(10) == (2, 1)", "assert even_odd_palindrome(7) == (3, 2)", "assert even_odd_palindrome(9) == (3, 2)", "assert even_odd_palindrome(10) == (4, 4)", "assert even_odd_palindrome(11) == (4, 4)", "assert even_odd_palindrome(6) == (4, 6)", "assert even_odd_palindrome(7) == (3, 4)", "assert even_odd_palindrome(10) == (4, 6)", "assert even_odd_palindrome(4) == (1, 2)", "assert even_odd_palindrome(5) == (1, 1)", "assert even_odd_palindrome(6) == (1, 2)", "assert even_odd_palindrome(7) == (2, 1)", "assert even_odd_palindrome(8) == (2, 2)", "assert even_odd_palindrome(9) == (2, 2)", "assert even_odd_palindrome(10) == (2, 2)", "assert even_odd_palindrome(11) == (2, 1)", "assert even_odd_palindrome(7) == (4, 5)", "assert even_odd_palindrome(8) == (5, 6)", "assert even_odd_palindrome(9) == (6, 7)", "assert even_odd_palindrome(10) == (7, 8)", "assert even_odd_palindrome(11) == (8, 9)", "assert even_odd_palindrome(8) == (2, 3)", "assert even_odd_palindrome(9) == (2, 3)", "assert even_odd_palindrome(10) == (2, 3)", "assert even_odd_palindrome(11) == (2, 3)", "assert even_odd_palindrome(9) == (4, 6)", "assert even_odd_palindrome(7) == (4, 4)", "assert even_odd_palindrome(9) == (4, 4)", "assert even_odd_palindrome(8) == (3, 5)", "assert even_odd_palindrome(6) == (4, 4)", "assert even_odd_palindrome(7) == (4, 3)", "assert even_odd_palindrome(8) == (5, 5)", "assert even_odd_palindrome(9) == (5, 4)", "assert even_odd_palindrome(10) == (5, 3)", "assert even_odd_palindrome(8) == (4, 2)", "assert even_odd_palindrome(9) == (4, 1)", "assert even_odd_palindrome(10) == (4, 0)", "assert even_odd_palindrome(10) == (3, 2)", "assert even_odd_palindrome(9) == (6, 6)", "assert even_odd_palindrome(10) == (7, 7)", "assert even_odd_palindrome(9) == (4, 3)", "assert even_odd_palindrome(5) == (3, 2)", "assert even_odd_palindrome(9) == (4, 5)", "assert even_odd_palindrome(8) == (3, 4)", "assert even_odd_palindrome(11) == (3, 4)", "assert even_odd_palindrome(8) == (4, 5)", "assert even_odd_palindrome(9) == (5, 5)", "assert even_odd_palindrome(10) == (5, 6)", "assert even_odd_palindrome(10) == (4, 5)", "assert even_odd_palindrome(9) == (3, 6)", "assert even_odd_palindrome(10) == (4, 3)", "assert even_odd_palindrome(11) == (4, 2)", "assert even_odd_palindrome(7) == (4, 6)", "assert even_odd_palindrome(10) == (5, 5)", "assert even_odd_palindrome(10) == (5, 2)", "assert even_odd_palindrome(11) == (3, 3)", "assert even_odd_palindrome(5) == (2, 2)", "assert even_odd_palindrome(6) == (3, 6)", "assert even_odd_palindrome(7) == (4, 7)"]}
{"HumanEval/108": ["assert count_nums([]) == 0", "assert count_nums([-1, 11, -11]) == 1", "assert count_nums([1, 1, 2]) == 3", "assert count_nums([1, -1, 2]) == 2", "assert count_nums([-1, -1, 1]) == 2", "assert count_nums([-1, 1, -1]) == 2", "assert count_nums([1, 1, 1]) == 3", "assert count_nums([-1, -1, -1]) == 1", "assert count_nums([1, 2, 1]) == 2", "assert count_nums([-1, -1, -1, 1]) == 1", "assert count_nums([1, -1, 1]) == 1", "assert count_nums([-1, 1, -1]) == 1", "assert count_nums([1, 1, 1]) == 1", "assert count_nums([1, 1, -1]) == 1", "assert count_nums([-1, -1, 1]) == 1", "assert count_nums([1, 2, 3]) == 3", "assert count_nums([-1, 1, 1]) == 2", "assert count_nums([-1, -1, -1, -1]) == 4", "assert count_nums([1, 1, 1, 1]) == 4", "assert count_nums([1, 1, 1, 1, 1]) == 5", "assert count_nums([1, 1, 1, 1, 1, 1]) == 6", "assert count_nums([-1, -11, -111]) == 3", "assert count_nums([1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 10", "assert count_nums([-1, -11, -111, -1111]) == 4", "assert count_nums([-1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == 8", "assert count_nums([1, -1, 1]) == 2", "assert count_nums([1, 1, -1]) == 2", "assert count_nums([-1, 2, 1]) == 2", "assert count_nums([-2, -1, 1]) == 2", "assert count_nums([-1, -1, -1]) == 3", "assert count_nums([1, 1, 2, -1]) == 3", "assert count_nums([-1, -1, 1, 1, 1]) == 4", "assert count_nums([1, 1, 2, -1, -1, -1]) == 4", "assert count_nums([-1, -1, 1, 1, 1, 1, -1]) == 4", "assert count_nums([-1, -1, 1, 1, 1, 1, -1, -1]) == 4", "assert count_nums([1, 1, 2, -1, -1, -1, -1, -1]) == 4", "assert count_nums([-1, -1, -1]) == 2", "assert count_nums([-1, -1, -1, -1]) == 3", "assert count_nums([1, 2, 3, 4, 5]) == 5", "assert count_nums([-1, -1, -1, -1, -1]) == 5", "assert count_nums([-1, 1, -1, -1, -1, -1, -1]) == 6", "assert count_nums([1, 1, 2, 3, 4]) == 4", "assert count_nums([-1, -1, -1, -1, -1]) == 1", "assert count_nums([-1, -1, -1, -1, -1, -1, -1]) == 1", "assert count_nums([-1, -1, -1]) == 0", "assert count_nums([1, -1, 1, -1]) == 2", "assert count_nums([1, -1, -1]) == 1", "assert count_nums([1, -1, -1]) == 2", "assert count_nums([-123, -456, 789]) == 3", "assert count_nums([-1, -2, -3]) == 1", "assert count_nums([-1, -2, -3, -4, -5]) == 1", "assert count_nums([-123, -987, -123]) == 3", "assert count_nums([1, 1, -1]) == 0", "assert count_nums([-1, -1, 1]) == 0", "assert count_nums([-1, 1, -1]) == 0", "assert count_nums([-1, 1, 2]) == 3", "assert count_nums([1, 1, -2]) == 2", "assert count_nums([1, 2, 1]) == 3", "assert count_nums([1, 2, -1]) == 2", "assert count_nums([-1, 1, 1, 1]) == 3", "assert count_nums([-1, 1, 1, 1, -1]) == 4", "assert count_nums([-1, 1, 1, 1, 1, -1]) == 4", "assert count_nums([-1, 1, 1, 1, 1, 1, -1]) == 4", "assert count_nums([1, 1, 2, 3]) == 4", "assert count_nums([-1, -1, 1, 1]) == 2", "assert count_nums([-1, 1, 2, -1]) == 1", "assert count_nums([1, 1, 2, 3, 4]) == 5", "assert count_nums([-1, -1, 1, 1, -1]) == 1", "assert count_nums([1, 1, 2, 3, 4, 5]) == 5", "assert count_nums([-1, -1, -1, -1, -1, -1]) == 1", "assert count_nums([-1, 1, -1, 1, -1, 1]) == 1", "assert count_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 10", "assert count_nums([1, 2, 3, 4]) == 4", "assert count_nums([1, -1, -1, -1]) == 4", "assert count_nums([-1, -1, -1, -1, -1, -1]) == 6", "assert count_nums([-123, -456, -789]) == 3", "assert count_nums([-1, -2, -3, -4, -5]) == 5", "assert count_nums([1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 9", "assert count_nums([-1, 1, -1, 1, -1, 1, -1, 1, 1, 1, 1, 1]) == 1", "assert count_nums([1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == 12", "assert count_nums([-1, 1, -1, 1, -1, 1, -1, 1, 1, 1, 1, 1, 1]) == 1", "assert count_nums([1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) == 13", "assert count_nums([-1, 1, -1, 1, -1, 1, -1, 1, 1, 1, 1, 1, 1, 1]) == 1", "assert count_nums([-1, -1, -1, -1, -1]) == 6", "assert count_nums([-1, -2, -3]) == 2", "assert count_nums([-1, -2, -3, -4]) == 2", "assert count_nums([1, 2, 3, 4, 5]) == 4", "assert count_nums([-1, -2, -3, -4, -5]) == 2", "assert count_nums([-1, 1, -1, -1, -1, -1, -1]) == 8", "assert count_nums([-1, -1, -1, -1, -1, -1, -1, -1, -1]) == 9", "assert count_nums([-1, -1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 9", "assert count_nums([1, -1, 2, -1, -1, -1, -1, -1]) == 1", "assert count_nums([1, 1, 2, -1]) == 2", "assert count_nums([1, 1, 2, 1]) == 2", "assert count_nums([1, 1, 2, 1, -1]) == 2", "assert count_nums([-1, -1, -1, -1]) == 1", "assert count_nums([1, 1, 2, 1, 1]) == 2", "assert count_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 9", "assert count_nums([1, 2, 2]) == 2", "assert count_nums([-1, 11, -11, 11]) == 2", "assert count_nums([-1, 11, -11, 11, 11]) == 3", "assert count_nums([-1, 11, -11, 11, 11, 11]) == 4", "assert count_nums([-1, 11, -11, 11, 11, 11, 11]) == 5", "assert count_nums([-1, 11, -11, 11, 11, 11, 11, 11]) == 6", "assert count_nums([-123, -123, -123]) == 1", "assert count_nums([-123, 123, 123]) == 1", "assert count_nums([1, 1, 2, 2, 2]) == 5", "assert count_nums([1, 1, 2, 2, 2, 2, 2]) == 7", "assert count_nums([1, 2, 3, 4, 5, 6]) == 6", "assert count_nums([-1, -1, 1]) == 3"]}
{"HumanEval/109": ["assert move_one_ball([3, 4, 5, 1, 2]) == True", "assert move_one_ball([1, 2, 3, 4, 5]) == True", "assert move_one_ball([5, 4, 3, 2, 1]) == True", "assert move_one_ball([3, 5, 4, 1, 2]) == True", "assert move_one_ball([1, 2, 3, 4, 5]) == False", "assert move_one_ball([1, 5, 4, 3, 2]) == False", "assert move_one_ball([3, 5, 4, 1, 2]) == False", "assert move_one_ball([5, 3, 1, 2, 4]) == True", "assert move_one_ball([5, 3, 4, 1, 2]) == True", "assert move_one_ball([5, 3, 4, 1, 2]) == False", "assert move_one_ball([5, 3, 4, 2, 1]) == False", "assert move_one_ball([5, 4, 3, 2, 1]) == False", "assert move_one_ball([3, 4, 5, 1, 2]) == False", "assert move_one_ball([1, 2, 3, 4, 5, 6]) == True", "assert move_one_ball([1, 2, 3, 4, 5, 6, 7]) == False", "assert move_one_ball([1, 2, 3, 4, 5, 6, 7, 8]) == False", "assert move_one_ball([5, 3, 1, 4, 2]) == True", "assert move_one_ball([1, 5, 4, 3, 2]) == True", "assert move_one_ball([5, 3, 4, 2, 1]) == True", "assert move_one_ball([3, 5, 4, 2, 1]) == False", "assert move_one_ball([3, 1, 4, 5, 2]) == True", "assert move_one_ball([3, 1, 4, 5, 2]) == False", "assert move_one_ball([3, 4, 5, 2, 1]) == True", "assert move_one_ball([3, 5, 4, 2, 1]) == True", "assert move_one_ball([1, 5, 3, 4, 2]) == True", "assert move_one_ball([3, 5, 1, 2, 4]) == True", "assert move_one_ball([3, 1, 2, 4, 5]) == True", "assert move_one_ball([3, 1, 2, 4, 5]) == False", "assert move_one_ball([1, 5, 3, 4, 2]) == False", "assert move_one_ball([1, 2, 5, 3, 4]) == False", "assert move_one_ball([1, 3, 2, 5, 4]) == False", "assert move_one_ball([1, 3, 2, 4, 5]) == False", "assert move_one_ball([1, 2, 5, 3, 4]) == True", "assert move_one_ball([3, 4, 1, 2, 5]) == True", "assert move_one_ball([3, 4, 1, 2, 5]) == False", "assert move_one_ball([5, 3, 1, 2, 4]) == False", "assert move_one_ball([5, 2, 3, 4, 1]) == True"]}
{"HumanEval/110": ["assert exchange([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"", "assert exchange([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"", "assert exchange([1, 2, 3, 4], [2, 1, 3, 4]) == \"NO\"", "assert exchange([1, 2, 3, 4], [2, 2, 2, 4]) == \"NO\"", "assert exchange([1, 2, 3, 4], [1, 2, 4, 4]) == \"NO\"", "assert exchange([1, 2, 3, 4], [1, 2, 2, 4]) == \"YES\"", "assert exchange([1, 2, 3, 4], [1, 2, 2, 2]) == \"YES\"", "assert exchange([1, 2, 3, 4], [1, 2, 2, 1]) == \"NO\"", "assert exchange([1, 2, 3, 4], [1, 2, 1, 2]) == \"NO\"", "assert exchange([1, 2, 3, 4], [1, 1, 2, 2]) == \"NO\"", "assert exchange([1, 2, 3, 4], [1, 1, 1, 2]) == \"NO\"", "assert exchange([1, 2, 3, 4], [1, 2, 3, 5]) == \"NO\"", "assert exchange([1, 2, 3, 4], [1, 2, 3, 4, 5]) == \"NO\"", "assert exchange([1, 2, 3, 4], [1, 2, 4, 3]) == \"NO\"", "assert exchange([1, 2, 3, 4], [1, 2, 3, 4, 6]) == \"NO\"", "assert exchange([1, 2, 3, 4], [1, 2, 3, 4, 8]) == \"NO\"", "assert exchange([1, 2, 3, 4], [1, 2, 3, 4, 10]) == \"NO\"", "assert exchange([1, 2, 3, 4], [1, 2, 1, 1]) == \"NO\"", "assert exchange([1, 2, 3, 4], [1, 2, 4, 3, 5]) == \"NO\"", "assert exchange([1, 2, 3, 4], [1, 2, 4, 3, 6]) == \"NO\"", "assert exchange([1, 2, 3, 4], [1, 2, 4, 3, 7]) == \"NO\"", "assert exchange([1, 2, 3, 4], [1, 2, 4, 3, 8]) == \"NO\"", "assert exchange([1, 2, 3, 4], [1, 2, 4, 3, 9]) == \"NO\"", "assert exchange([1, 2, 3, 4], [1, 2, 2, 3]) == \"YES\"", "assert exchange([1, 2, 3, 4], [1, 2, 2, 2, 2]) == \"YES\"", "assert exchange([1, 2, 3, 4], [1, 2, 3, 4, 4]) == \"YES\"", "assert exchange([1, 2, 3, 4], [1, 2, 3, 4, 12]) == \"NO\"", "assert exchange([1, 2, 3, 4], [1, 2, 4, 5]) == \"NO\"", "assert exchange([1, 2, 3, 4], [1, 2, 5, 3]) == \"NO\"", "assert exchange([1, 2, 3, 4], [1, 2, 5, 4]) == \"NO\"", "assert exchange([1, 2, 3, 4], [1, 2, 5, 5]) == \"NO\"", "assert exchange([1, 2, 3, 4], [1, 2, 6, 3]) == \"NO\"", "assert exchange([1, 2, 3, 4], [1, 2, 6, 4]) == \"NO\"", "assert exchange([1, 2, 3, 4], [1, 2, 6, 5]) == \"NO\"", "assert exchange([1, 2, 3, 4], [1, 2, 2, 3]) == \"NO\"", "assert exchange([1, 2, 3, 4], [1, 2, 2, 4]) == \"NO\"", "assert exchange([1, 2, 3, 4], [1, 2, 3, 2]) == \"NO\"", "assert exchange([1, 2, 3, 4], [1, 2, 3, 1]) == \"NO\"", "assert exchange([1, 2, 3, 4], [1, 2, 2, 2]) == \"NO\"", "assert exchange([1, 2, 3, 4], [1, 2, 2, 0]) == \"NO\"", "assert exchange([1, 2, 3, 4], [1, 2, 2, -1]) == \"NO\"", "assert exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6]) == \"NO\"", "assert exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7]) == \"NO\"", "assert exchange([1, 2, 3, 4], [2, 2, 2, 2]) == \"YES\"", "assert exchange([1, 2, 3, 4], [1, 2, 2, 2, 2, 2]) == \"YES\"", "assert exchange([1, 2, 3, 4], [1, 2, 2, 2, 2, 2, 2]) == \"YES\"", "assert exchange([1, 2, 3, 4], [1, 2, 2, 2, 2, 2, 2, 2]) == \"YES\"", "assert exchange([1, 2, 3, 4], [1, 2, 3, 4, 4]) == \"NO\"", "assert exchange([1, 2, 3, 4], [1, 2, 3, 4, 3]) == \"NO\"", "assert exchange([1, 2, 3, 4], [1, 2, 3, 4, 2]) == \"NO\"", "assert exchange([1, 2, 3, 4], [1, 2, 3, 4, 1]) == \"NO\"", "assert exchange([1, 2, 3, 4], [1, 2, 3, 4, 0]) == \"NO\"", "assert exchange([1, 2, 3, 4], [1, 2, 4, 6]) == \"NO\"", "assert exchange([1, 2, 3, 4], [1, 2, 5, 6]) == \"NO\"", "assert exchange([1, 2, 3, 4], [1, 2, 2, 2, 1]) == \"NO\"", "assert exchange([1, 2, 3, 4], [1, 2, 3, 4, 3]) == \"YES\"", "assert exchange([1, 2, 3, 4], [1, 2, 3, 4, 4, 4]) == \"NO\"", "assert exchange([1, 2, 3, 4], [1, 2, 3, 4, 4, 4, 4]) == \"NO\"", "assert exchange([1, 2, 3, 4], [1, 2, 3, 4, 4, 4, 4, 4]) == \"NO\"", "assert exchange([1, 2, 3, 4], [1, 2, 3, 4, 4, 4, 4, 4, 4]) == \"NO\"", "assert exchange([1, 2, 3, 4], [2, 2, 2, 3]) == \"NO\"", "assert exchange([1, 2, 3, 4], [2, 2, 3, 2]) == \"NO\"", "assert exchange([1, 2, 3, 4], [2, 2, 4, 2]) == \"NO\"", "assert exchange([1, 2, 3, 4], [2, 2, 3, 3]) == \"NO\"", "assert exchange([1, 2, 3, 4], [1, 2, 4, 4]) == \"YES\"", "assert exchange([1, 2, 3, 4], [1, 2, 3, 6]) == \"NO\"", "assert exchange([1, 2, 3, 4], [2, 2, 2, 2] + [1]) == \"YES\"", "assert exchange([1, 2, 3, 4], [2, 2, 2, 2] + [3]) == \"NO\"", "assert exchange([1, 2, 3, 4], [1, 2, 3, 4, 2, 3]) == \"NO\"", "assert exchange([1, 2, 3, 4], [1, 2, 3, 8]) == \"NO\"", "assert exchange([1, 2, 3, 4], [1, 2, 3, 10]) == \"NO\"", "assert exchange([1, 2, 3, 4], [1, 2, 3, 4, 4, 4]) == \"YES\"", "assert exchange([1, 2, 3, 4], [1, 2, 3, 4, 4, 4, 4]) == \"YES\"", "assert exchange([1, 2, 3, 4], [1, 2, 3, 4, 4, 4, 4, 4]) == \"YES\"", "assert exchange([1, 2, 3, 4], [2, 2, 2, 4]) == \"YES\"", "assert exchange([1, 2, 3, 4], [2, 2, 2, 5]) == \"NO\"", "assert exchange([1, 2, 3, 4], [2, 2, 2, 6]) == \"NO\"", "assert exchange([1, 2, 3, 4], [2, 2, 2, 7]) == \"NO\"", "assert exchange([1, 2, 3, 4], [2, 2, 2, 8]) == \"NO\"", "assert exchange([1, 2, 3, 4], [2, 3, 2, 2]) == \"NO\"", "assert exchange([1, 2, 3, 4], [2, 3, 3, 2]) == \"NO\"", "assert exchange([1, 2, 3, 4], [1, 2, 4, 8]) == \"NO\"", "assert exchange([1, 2, 3, 4], [1, 2, 4, 10]) == \"NO\"", "assert exchange([1, 2, 3, 4], [1, 2, 4, 12]) == \"NO\"", "assert exchange([1, 2, 3, 4], [1, 3, 2, 4]) == \"NO\"", "assert exchange([1, 2, 3, 4], [1, 3, 4, 2]) == \"NO\"", "assert exchange([1, 2, 3, 4], [2, 2, 2, 2, 2]) == \"YES\"", "assert exchange([1, 2, 3, 4], [2, 2, 2, 2, 2, 2]) == \"YES\"", "assert exchange([1, 2, 3, 4], [2, 2, 2, 2, 2, 2, 2]) == \"YES\"", "assert exchange([1, 2, 3, 4], [1, 2, 2, 2, 2, 2]) == \"NO\"", "assert exchange([1, 2, 3, 4], [1, 2, 4, 3, 4]) == \"YES\"", "assert exchange([1, 2, 3, 4], [2, 2, 2, 2] + [-1]) == \"NO\"", "assert exchange([1, 2, 3, 4], [1, 2, 2, 6]) == \"NO\"", "assert exchange([1, 2, 3, 4], [1, 2, 2, 8]) == \"NO\"", "assert exchange([1, 2, 3, 4], [1, 2, 2, 10]) == \"NO\"", "assert exchange([1, 2, 3, 4], [1, 2, 2, 2, 2]) == \"NO\"", "assert exchange([1, 2, 3, 4], [1, 2, 2, 2, 2, 1]) == \"NO\"", "assert exchange([1, 2, 3, 4], [1, 2, 4, 4, 4]) == \"YES\"", "assert exchange([1, 2, 3, 4], [1, 2, 2, 2, 2, 2, 2]) == \"NO\"", "assert exchange([1, 2, 3, 4], [1, 2, 3, 4, 14]) == \"NO\"", "assert exchange([1, 2, 3, 4], [1, 2, 3, 4, 16]) == \"NO\"", "assert exchange([1, 2, 3, 4], [1, 2, 4, 4, 4, 4]) == \"YES\"", "assert exchange([1, 2, 3, 4], [1, 2, 4, 4, 4, 4, 4]) == \"YES\""]}
{"HumanEval/111": ["assert histogram('abc') == {'a': 1, 'b': 1, 'c': 1}", "assert histogram('abba') == {'a': 2, 'b': 2}", "assert histogram('abcde') == {'a': 1, 'b': 1, 'c': 1, 'd': 1}", "assert histogram('abbba') == {'a': 3, 'b': 2}", "assert histogram('aaaabb') == {'a': 4}", "assert histogram('') == {}", "assert histogram('aaaaaaa') == {'a': 8}", "assert histogram('abcc') == {'a': 2, 'b': 2}", "assert histogram('bbbb') == {'b': 4}", "assert histogram('aaa') == {}", "assert histogram('abccbaaa') == {'a': 3, 'b': 2}", "assert histogram('acacaca') == {'a': 4, 'c': 3}", "assert histogram('bbbbb') == {'b': 5}", "assert histogram('aaaabbbbbbbbccccc') == {'a': 8, 'b': 4, 'c': 4}", "assert histogram('abcabcabc') == {'a': 3, 'b': 3}", "assert histogram('bbbbaa') == {'b': 4}", "assert histogram('abccba') == {'a': 2, 'b': 2}", "assert histogram('bbbbbbaa') == {'b': 4}", "assert histogram('aaaaaaa') == {'a': 5}", "assert histogram('abababa') == {'a': 3}", "assert histogram('acaca') == {'a': 3, 'c': 1}", "assert histogram('ccc') == {}", "assert histogram('dddeeee') == {}", "assert histogram('abbbaa') == {'a': 3, 'b': 2}", "assert histogram('bbbbb') == {'b': 4}", "assert histogram('aabbccd') == {'a': 2, 'b': 2, 'c': 1, 'd': 1}", "assert histogram('aabbaa') == {'a': 2, 'b': 2}", "assert histogram('ababbbba') == {'a': 2, 'b': 2}", "assert histogram('abbba') == {'a': 2, 'b': 2}", "assert histogram('bbbba') == {'b': 4}", "assert histogram('aa') == {}", "assert histogram('acbba') == {'a': 2, 'b': 2}", "assert histogram('abbabbbaa') == {'b': 8}", "assert histogram('aabbc') == {'a': 2, 'b': 2}", "assert histogram('abbbb') == {'b': 4}", "assert histogram('abbbb') == {'a': 3}", "assert histogram('acacaca') == {'a': 3, 'c': 3}", "assert histogram('babbaba') == {'b': 4}", "assert histogram('bbbbbbbb') == {'b': 9}", "assert histogram('bbbbbbbbb') == {'b': 8}", "assert histogram('abcabc') == {'a': 3, 'b': 3}", "assert histogram('aaaaaa') == {'a': 5}", "assert histogram('bbbbbbb') == {'b': 5}", "assert histogram('aabbcc') == {'a': 3, 'b': 2}", "assert histogram('ccccc') == {}", "assert histogram('abcbbbcccc') == {'a': 3, 'b': 3}", "assert histogram('abbbb') == {'b': 5}", "assert histogram('acacaa') == {'a': 3, 'c': 1}", "assert histogram('abcde') == {'a': 1, 'b': 1, 'c': 1}", "assert histogram('bbaa') == {'b': 2}", "assert histogram('aaaa') == {'a': 4}", "assert histogram('zzz') == {}", "assert histogram('aaaaa') == {'a': 5}", "assert histogram('aaabbbcc') == {'a': 2, 'b': 1, 'c': 1}", "assert histogram('aaabbccd') == {'a': 2, 'b': 2}", "assert histogram('bbbbaaa') == {'b': 4}", "assert histogram('aaaaaaaaa') == {'a': 10}", "assert histogram('abbb') == {'b': 4}", "assert histogram('aaabbbcccaaaa') == {'a': 4, 'b': 2, 'c': 1}", "assert histogram('bcccccddd') == {'b': 3, 'c': 3, 'd': 1}", "assert histogram('abb') == {'a': 1, 'b': 1}", "assert histogram('aaaaa') == {}", "assert histogram('abbbaa') == {'a': 4, 'b': 2}", "assert histogram('b b b b a') == {'b': 4}", "assert histogram('abcbbbcc') == {'a': 3, 'b': 2}", "assert histogram('aaaaaa') == {'a': 8}", "assert histogram('bbbbbb') == {'b': 5}", "assert histogram('aabbcc') == {'a': 2, 'b': 2}", "assert histogram('aaaaaaa') == {}", "assert histogram('b') == {}", "assert histogram('a') == {}", "assert histogram('bbbb') == {}", "assert histogram('acaca') == {'a': 2, 'c': 1}", "assert histogram('babb') == {'b': 3}", "assert histogram('aaaaa') == {'a': 3}", "assert histogram('bbbbba') == {'b': 4}", "assert histogram('abcc') == {'a': 1, 'b': 1, 'c': 1}", "assert histogram('cccccc') == {'c': 3}", "assert histogram('dddddd') == {'d': 3}", "assert histogram('babbac') == {'b': 4}", "assert histogram('abbbbc') == {'b': 4}", "assert histogram('aaaaaaaaaaa') == {'a': 9}", "assert histogram('aabbcc') == {'a': 3, 'b': 1, 'c': 1}", "assert histogram('abcbbaa') == {'a': 2, 'b': 2}", "assert histogram('bababab') == {'b': 4}", "assert histogram('aaabbcccaaa') == {'a': 3, 'b': 3}", "assert histogram('aaaaaa') == {}", "assert histogram('xyz') == {}", "assert histogram('bbbbbbbb') == {'b': 8}", "assert histogram('aaabbbcc') == {'a': 3, 'b': 3}", "assert histogram('ccccccccc') == {'c': 8}", "assert histogram('dddddddd') == {'d': 8}", "assert histogram('eeeeeeee') == {'e': 8}", "assert histogram('ffffffff') == {'f': 8}", "assert histogram('aaaaaa') == {'a': 6}", "assert histogram('aabbcc') == {'a': 2, 'b': 2, 'c': 1}", "assert histogram('aaa') == {'a': 3}", "assert histogram('dddd') == {}", "assert histogram('aaabbbb') == {'a': 4, 'b': 4}", "assert histogram('aaaaaaaa') == {'a': 8}", "assert histogram('bbbab') == {'b': 3}", "assert histogram('aaaaa') == {'a': 4}", "assert histogram('aaaaaaaabb') == {'a': 4, 'b': 1}", "assert histogram('abbbcc') == {'a': 2, 'b': 2}"]}
{"HumanEval/112": ["assert reverse_delete(\"abcde\", \"ae\") == (\"bcd\", False)", "assert reverse_delete(\"abcdef\", \"b\") == (\"acdef\", False)", "assert reverse_delete(\"abcdedcba\", \"ab\") == (\"cdedc\", True)", "assert reverse_delete(\"abcde\", \"\") == (\"bcde\", False)", "assert reverse_delete(\"\", \"\") == ( \"\", False )", "assert reverse_delete(\"abcdefg\", \"a\") == (\"bcdfg\", False)", "assert reverse_delete(\"abcdefg\", \"\") == (\"bcdfg\", False)", "assert reverse_delete(\"\", \"\") == (\"\", False)", "assert reverse_delete(\"hello world\", \"l\") == (\"hwd\", False)", "assert reverse_delete(\"hello world\", \"w\") == (\"hwe\", False)", "assert reverse_delete(\"hello world\", \"llo\") == (\"hwwl\", False)", "assert reverse_delete(\"hello world\", \"\") == (\"hello world\", True)", "assert reverse_delete(\"hello world\", \" \") == (\"hello world\", True)", "assert reverse_delete(\"hello world\", \"!\") == (\"hello world\", True)", "assert reverse_delete(\"abcde\", \"bc\") == (\"adce\", True)", "assert reverse_delete(\"abcdef\", \"a\") == (\"bcfd\", True)", "assert reverse_delete(\"abcdef\", \"\") == (\"bcfd\", True)", "assert reverse_delete(\"abcde\", \"\") == (\"bcde\", True)", "assert reverse_delete(\"\", \"a\") == (\"\", True)", "assert reverse_delete(\"hello world\", \"l\") == (\"hwerdl\", True)", "assert reverse_delete(\"hello world\", \"w\") == (\"hleodr\", True)", "assert reverse_delete(\"hello world\", \" \") == (\"hellwo\", True)", "assert reverse_delete(\"hello world\", \"\") == (\"hw\", True)", "assert reverse_delete(\"hello world\", \" \") == (\"he\", True)", "assert reverse_delete(\"hello world\", \"!\") == (\"hwo\", True)", "assert reverse_delete(\"hello world\", \"a\") == (\"hwe\", True)", "assert reverse_delete(\"hello world\", \"z\") == (\"hwo\", True)", "assert reverse_delete(\"hello world\", \"A\") == (\"hwe\", True)", "assert reverse_delete(\"abcde\", \"a\") == (\"bcde\", False)", "assert reverse_delete(\"abcdef\", \"d\") == (\"acbf\", False)", "assert reverse_delete(\"abcdef\", \"\") == (\"acdf\", True)", "assert reverse_delete(\"hello world\", \"l\") == (\"hwo\", False)", "assert reverse_delete(\"hello world\", \"o\") == (\"hw\", False)", "assert reverse_delete(\"hello world\", \"e\") == (\"hwo\", False)", "assert reverse_delete(\"hello world\", \"\") == (\"hwo\", False)", "assert reverse_delete(\"hello world\", \"a\") == (\"hwo\", False)", "assert reverse_delete(\"hello world\", \"d\") == (\"hwo\", False)", "assert reverse_delete(\"hello world\", \"c\") == (\"hwo\", False)", "assert reverse_delete(\"hello world\", \"b\") == (\"hwo\", False)", "assert reverse_delete(\"hello world\", \" \") == (\"hwo\", False)", "assert reverse_delete(\"hello world\", \"!\") == (\"hwo\", False)", "assert reverse_delete(\"hello world\", \"?\") == (\"hwo\", False)", "assert reverse_delete(\"hello world\", \" \") == (\"hell\", False)", "assert reverse_delete(\"hello world\", \"\") == (\"hello\", True)", "assert reverse_delete(\"hello world\", \"!\") == (\"hello\", True)", "assert reverse_delete(\"hello world\", \"$\") == (\"hello\", True)", "assert reverse_delete(\"hello world\", \"&\") == (\"hello\", True)", "assert reverse_delete(\"abcdef\", \"a\") == (\"bcdf\", False)", "assert reverse_delete(\"abcdef\", \"d\") == (\"bcf\", False)", "assert reverse_delete(\"abcdef\", \"f\") == (\"bcda\", True)", "assert reverse_delete(\"abcdef\", \"e\") == (\"bcda\", True)", "assert reverse_delete(\"abcdef\", \"d\") == (\"abcdf\", False)", "assert reverse_delete(\"abcdef\", \"\") == (\"abcdef\", False)", "assert reverse_delete(\"abcdef\", \"d\") == (\"abcdef\", False)", "assert reverse_delete(\"abcdedcba\", \"c\") == (\"edcba\", True)", "assert reverse_delete(\"abcdefg\", \"f\") == (\"abcdefg\", False)", "assert reverse_delete(\"hello world\", \"l\") == (\"hwwolle\", False)", "assert reverse_delete(\"hello world\", \"o\") == (\"hwloee\", False)", "assert reverse_delete(\"hello world\", \"a\") == (\"hwwolle\", False)", "assert reverse_delete(\"hello world\", \"\") == (\"hwwolle\", False)", "assert reverse_delete(\"hello world\", \" \") == (\"hwwolle\", False)", "assert reverse_delete(\"hello world\", \"!\") == (\"hwwolle\", False)", "assert reverse_delete(\"hello world\", \"?\") == (\"hwwolle\", False)", "assert reverse_delete(\"hello world\", \"@\") == (\"hwwolle\", False)", "assert reverse_delete(\"hello world\", \"#\") == (\"hwwolle\", False)", "assert reverse_delete(\"hello world\", \"$\") == (\"hwwolle\", False)", "assert reverse_delete(\"hello world\", \"%\") == (\"hwwolle\", False)", "assert reverse_delete(\"hello world\", \"a\") == (\"hell\", True)", "assert reverse_delete(\"hello world\", \"d\") == (\"helo\", True)", "assert reverse_delete(\"hello world\", \" \") == (\"hello\", True)", "assert reverse_delete(\"hello world\", \"w\") == (\"hllo\", False)", "assert reverse_delete(\"hello world\", \"a\") == (\"olleh\", True)", "assert reverse_delete(\"hello world\", \"o\") == (\"elloh\", True)", "assert reverse_delete(\"hello world\", \"d\") == (\"ellho\", True)", "assert reverse_delete(\"hello world\", \"e\") == (\"llowe\", True)", "assert reverse_delete(\"abcdefg\", \"bc\") == (\"acdfg\", True)", "assert reverse_delete(\"hello\", \"l\") == (\"h\", True)", "assert reverse_delete(\"hello\", \"\") == (\"hlo\", False)", "assert reverse_delete(\"hello\", \"h\") == (\"ll\", False)", "assert reverse_delete(\"hello\", \"o\") == (\"ll\", False)", "assert reverse_delete(\"hello world\", \"o\") == (\"hwbd\", False)", "assert reverse_delete(\"hello world\", \"e\") == (\"hdwo\", True)", "assert reverse_delete(\"hello world\", \"a\") == (\"hwd\", False)", "assert reverse_delete(\"hello world\", \"d\") == (\"hdwo\", True)", "assert reverse_delete(\"hello world\", \"c\") == (\"hwd\", False)", "assert reverse_delete(\"hello world\", \" \") == (\"hwd\", False)", "assert reverse_delete(\"hello world\", \"\") == (\"hwd\", False)", "assert reverse_delete(\"hello world\", \"\\n\") == (\"hwd\", False)", "assert reverse_delete(\"hello\", \"o\") == (\"h\", True)", "assert reverse_delete(\"hello\", \"a\") == (\"hell\", False)", "assert reverse_delete(\"hello world\", \"w\") == (\"hdlo\", False)", "assert reverse_delete(\"hello world\", \"!\") == (\"hwd\", False)", "assert reverse_delete(\"hello world\", \"e\") == (\"hwd\", False)", "assert reverse_delete(\"hello world\", \"o\") == (\"hwd\", False)", "assert reverse_delete(\"hello world\", \"n\") == (\"hwd\", False)", "assert reverse_delete(\"hello world\", \"d\") == (\"hwd\", False)", "assert reverse_delete(\"hello world\", \"b\") == (\"hwd\", False)", "assert reverse_delete(\"hello world\", \"a\") == (\"hwe\", False)", "assert reverse_delete(\"hello world\", \"H\") == (\"hwo\", False)", "assert reverse_delete(\"hello world\", \"W\") == (\"hwo\", False)", "assert reverse_delete(\"hello world\", \"w\") == (\"hwo\", False)", "assert reverse_delete(\"hello world\", \"f\") == (\"hwo\", False)", "assert reverse_delete(\"hello world\", \"b\") == (\"hwo\", True)", "assert reverse_delete(\"hello world\", \"l\") == (\"hworld\", False)", "assert reverse_delete(\"hello world\", \"w\") == (\"hellod\", True)", "assert reverse_delete(\"hello\", \"o\") == (\"hell\", True)", "assert reverse_delete(\"hello\", \"a\") == (\"hll\", True)", "assert reverse_delete(\"hello\", \"\") == (\"hello\", True)", "assert reverse_delete(\"hello\", \" \") == (\"hello\", True)", "assert reverse_delete(\"hello\", \"o\") == (\"hell\", False)", "assert reverse_delete(\"hello\", \"a\") == (\"hlo\", False)", "assert reverse_delete(\"hello world\", \"l\") == (\"hwwlo\", True)", "assert reverse_delete(\"hello world\", \"w\") == (\"hllwo\", False)", "assert reverse_delete(\"hello world\", \"\") == (\"helloworld\", True)", "assert reverse_delete(\"hello world\", \"a\") == (\"hellwo\", False)"]}
{"HumanEval/113": ["assert odd_count([\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 1n the str1ng 2 of the 1nput.\", \"the number of odd elements 1n the str1ng 3 of the 1nput.\", \"the number of odd elements 1n the str1ng 4 of the 1nput.\", \"the number of odd elements 1n the str1ng 5 of the 1nput.\"]", "assert odd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 1n the str1ng 2 of the 1nput.\", \"the number of odd elements 1n the str1ng 3 of the 1nput.\", \"the number of odd elements 1n the str1ng 4 of the 1nput.\", \"the number of odd elements 1n the str1ng 5 of the 1nput.\", \"the number of odd elements 1n the str1ng 6 of the 1nput.\"]", "assert odd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 1n the str1ng 2 of the 1nput.\", \"the number of odd elements 1n the str1ng 3 of the 1nput.\", \"the number of odd elements 1n the str1ng 4 of the 1nput.\", \"the number of odd elements 1n the str1ng 5 of the 1nput.\", \"the number of odd elements 1n the str1ng 6 of the 1nput.\", \"the number of odd elements 1n the str1ng 7 of the 1nput.\"]", "assert odd_count([\"1\", \"2\", \"3\"]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\"]", "assert odd_count([\"1\", \"2\", \"3\", \"4\"]) == [\"the number of odd elements 3n the str3ng 3 of the 3nput.\"]", "assert odd_count([\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"the number of odd elements 5n the str5ng 5 of the 5nput.\"]", "assert odd_count([\"1234567\"]) == [\"the number of odd elements 7n the str7ng 7 of the 7nput.\"]", "assert odd_count([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]", "assert odd_count([\"1234567\"]) == [\"the number of odd elements 6n the str6ng 6 of the 6nput.\"]", "assert odd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"]) == [\"the number of odd elements 6n the str6ng 6 of the 6nput.\"]", "assert odd_count([\"1\", \"2\", \"3\"]) == [\"the number of odd elements 3n the str3ng 3 of the 3nput.\"]", "assert odd_count([\"1\", \"2\", \"3\", \"4\", \"5\"]) == [ \"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\" ]", "assert odd_count([\"3\", \"11111111\"]) == [ \"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\" ]", "assert odd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"]) == [ \"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\" ]", "assert odd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\"]) == [ \"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\" ]", "assert odd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\"]) == [ \"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\" ]", "assert odd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"]) == [ \"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\" ]", "assert odd_count([]) == []", "assert odd_count([\"1\", \"2\", \"3\"]) == [\"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\"]", "assert odd_count([\"1\", \"2\", \"3\", \"4\"]) == [\"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\"]", "assert odd_count([\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"the number of odd elements 5n the str5ng 5 of the 5nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\"]", "assert odd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"]) == [\"the number of odd elements 6n the str6ng 6 of the 6nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\"]", "assert odd_count([\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]", "assert odd_count([\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\", \"the number of odd elements 4n the str4ng 5 of the 4nput.\"]", "assert odd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\", \"the number of odd elements 4n the str4ng 5 of the 4nput.\", \"the number of odd elements 4n the str4ng 6 of the 4nput.\"]", "assert odd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\", \"the number of odd elements 4n the str4ng 5 of the 4nput.\", \"the number of odd elements 4n the str4ng 6 of the 4nput.\", \"the number of odd elements 4n the str4ng 7 of the 4nput.\"]", "assert odd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\", \"the number of odd elements 4n the str4ng 5 of the 4nput.\", \"the number of odd elements 4n the str4ng 6 of the 4nput.\", \"the number of odd elements 4n the str4ng 7 of the 4nput.\", \"the number of odd elements 4n the str4ng 8 of the 4nput.\"]", "assert odd_count([\"1\", \"2\", \"3\", \"4\", \"5\"]) == [5, 4, 3, 2, 1]", "assert odd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"]) == [6, 5, 4, 3, 2, 1]", "assert odd_count([\"1234567\"]) == [5, 4, 3, 2, 1]", "assert odd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\"]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert odd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"]) == [9, 8, 7, 6, 5, 4, 3, 2, 1]", "assert odd_count([\"1\", \"2\", \"3\", \"4\", \"5\"]) == [ \"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 1n the str1ng 2 of the 1nput.\", \"the number of odd elements 1n the str1ng 3 of the 1nput.\", \"the number of odd elements 1n the str1ng 4 of the 1nput.\", \"the number of odd elements 1n the str1ng 5 of the 1nput.\" ]", "assert odd_count([\"2\", \"3\", \"4\", \"5\"]) == [ \"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 1n the str1ng 2 of the 1nput.\", \"the number of odd elements 1n the str1ng 3 of the 1nput.\", \"the number of odd elements 1n the str1ng 4 of the 1nput.\", \"the number of odd elements 1n the str1ng 5 of the 1nput.\" ]", "assert odd_count([\"1\", \"2\", \"3\"]) == [ \"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 1n the str1ng 2 of the 1nput.\" ]", "assert odd_count([\"1\", \"2\", \"3\", \"4\"]) == [ \"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 1n the str1ng 2 of the 1nput.\", \"the number of odd elements 1n the str1ng 3 of the 1nput.\", \"the number of odd elements 1n the str1ng 4 of the 1nput.\" ]", "assert odd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"]) == [5, 4, 3, 2, 1, 0]", "assert odd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\"]) == [5, 4, 3, 2, 1, 0, 0]", "assert odd_count([\"1234567\"]) == [4, 3, 2, 1, 0, 0, 0]", "assert odd_count([\"3\", \"11111111\"]) == [1, 8, 8, 8, 8, 8, 8]", "assert odd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"]) == [5, 4, 3, 2, 1, 0, 0, 0, 0]", "assert odd_count([\"1\", \"2\", \"3\"]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\"]", "assert odd_count([\"1\", \"2\", \"3\", \"4\"]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\"]", "assert odd_count([\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\"]", "assert odd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\"]", "assert odd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\"]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\"]", "assert odd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\"]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\"]", "assert odd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\"]", "assert odd_count([\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"]", "assert odd_count([\"1234567\"]) == [7]", "assert odd_count([\"11111111\"]) == [\"1\", \"1\"]", "assert odd_count([\"11111111\", \"22222222\"]) == [\"1\", \"2\"]", "assert odd_count([\"11111111\", \"22222222\", \"33333333\"]) == [\"1\", \"2\", \"3\"]", "assert odd_count([\"1\", \"2\", \"3\", \"4\", \"5\"]) == [ \"the number of odd elements 4n the str4ng 4 of the 4nput.\", \"the number of odd elements 4n the str4ng 5 of the 4nput.\" ]", "assert odd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"]) == [ \"the number of odd elements 4n the str4ng 4 of the 4nput.\", \"the number of odd elements 4n the str4ng 5 of the 4nput.\", \"the number of odd elements 4n the str4ng 6 of the 4nput.\" ]", "assert odd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\"]) == [ \"the number of odd elements 4n the str4ng 4 of the 4nput.\", \"the number of odd elements 4n the str4ng 5 of the 4nput.\", \"the number of odd elements 4n the str4ng 6 of the 4nput.\", \"the number of odd elements 4n the str4ng 7 of the 4nput.\" ]", "assert odd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\"]) == [ \"the number of odd elements 4n the str4ng 4 of the 4nput.\", \"the number of odd elements 4n the str4ng 5 of the 4nput.\", \"the number of odd elements 4n the str4ng 6 of the 4nput.\", \"the number of odd elements 4n the str4ng 7 of the 4nput.\", \"the number of odd elements 4n the str4ng 8 of the 4nput.\" ]", "assert odd_count([\"3\", \"1\", \"1\", \"1\", \"1\"]) == [1, 1, 1, 1, 1]", "assert odd_count([\"3\", \"3\", \"3\", \"3\", \"3\"]) == [5, 5, 5, 5, 5]", "assert odd_count([\"1\", \"2\", \"3\", \"4\", \"5\"]) == [4, 3, 2, 1, 0]", "assert odd_count([\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 1n the str1ng 2 of the 1nput.\", \"the number of odd elements 1n the str1ng 3 of the 1nput.\", \"the number of odd elements 1n the str1ng 4 of the 1nput.\"]", "assert odd_count([\"3\", \"3\", \"3\", \"3\", \"3\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 1n the str1ng 2 of the 1nput.\", \"the number of odd elements 1n the str1ng 3 of the 1nput.\", \"the number of odd elements 1n the str1ng 4 of the 1nput.\"]", "assert odd_count([\"1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]", "assert odd_count([\"2\", \"2\", \"2\", \"2\", \"2\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 1n the str1ng 2 of the 1nput.\", \"the number of odd elements 1n the str1ng 3 of the 1nput.\", \"the number of odd elements 1n the str1ng 4 of the 1nput.\"]", "assert odd_count([\"1\", \"2\", \"3\"]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 2nput.\"]", "assert odd_count([\"1\", \"2\", \"3\", \"4\"]) == [\"the number of odd elements 3n the str3ng 3 of the 2nput.\", \"the number of odd elements 4n the str4ng 4 of the 2nput.\"]", "assert odd_count([\"1234567\"]) == [\"the number of odd elements 6n the str6ng 6 of the 2nput.\"]", "assert odd_count([\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"the number of odd elements 3n the str3ng 3 of the 2nput.\", \"the number of odd elements 5n the str5ng 5 of the 2nput.\"]", "assert odd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"]) == [\"the number of odd elements 6n the str6ng 6 of the 2nput.\"]", "assert odd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\", \"the number of odd elements 5n the str5ng 5 of the 5nput.\", \"the number of odd elements 6n the str6ng 6 of the 6nput.\"]", "assert odd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\", \"the number of odd elements 5n the str5ng 5 of the 5nput.\", \"the number of odd elements 6n the str6ng 6 of the 6nput.\", \"the number of odd elements 7n the str7ng 7 of the 7nput.\"]", "assert odd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\", \"the number of odd elements 5n the str5ng 5 of the 5nput.\", \"the number of odd elements 6n the str6ng 6 of the 6nput.\", \"the number of odd elements 7n the str7ng 7 of the 7nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]", "assert odd_count([\"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"]", "assert odd_count([\"1\", \"2\", \"3\", \"4\", \"5\"]) == [ \"the number of odd elements 4n the str4ng 4 of the 4nput.\" ]", "assert odd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"]) == [ \"the number of odd elements 4n the str4ng 4 of the 4nput.\", \"the number of odd elements 4n the str4ng 5 of the 4nput.\" ]", "assert odd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\"]) == [ \"the number of odd elements 4n the str4ng 4 of the 4nput.\", \"the number of odd elements 4n the str4ng 5 of the 4nput.\", \"the number of odd elements 4n the str4ng 6 of the 4nput.\" ]", "assert odd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\"]) == [ \"the number of odd elements 4n the str4ng 4 of the 4nput.\", \"the number of odd elements 4n the str4ng 5 of the 4nput.\", \"the number of odd elements 4n the str4ng 6 of the 4nput.\", \"the number of odd elements 4n the str4ng 7 of the 4nput.\" ]", "assert odd_count([\"1\", \"2\", \"3\"]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 1n the str1ng 1 of the 1nput.\"]", "assert odd_count([\"1234567\"]) == [\"the number of odd elements 5n the str5ng 5 of the 5nput.\"]", "assert odd_count([\"1\", \"2\", \"3\", \"4\", \"5\"]) == [ \"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 1n the str1ng 2 of the 1nput.\" ]", "assert odd_count([\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 1n the str1ng 2 of the 1nput.\"]", "assert odd_count([\"12345678901234567\"]) == [\"the number of odd elements 9n the str9ng 9 of the 9nput.\"]", "assert odd_count([\"3\", \"11111111\"]) == [1, 1]", "assert odd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\"]) == [6, 5, 4, 3, 2, 1]", "assert odd_count([\"2\", \"1\", \"2\"]) == [ \"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 1n the str1ng 2 of the 1nput.\" ]", "assert odd_count([\"1\", \"2\", \"3\", \"4\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]", "assert odd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"]) == [\"the number of odd elements 5n the str5ng 5 of the 5nput.\"]", "assert odd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\"]) == [\"the number of odd elements 6n the str6ng 6 of the 6nput.\"]", "assert odd_count([\"12345678901234567\"]) == [\"the number of odd elements 7n the str7ng 7 of the 7nput.\"]", "assert odd_count([\"1\", \"2\", \"3\", \"4\"]) == [\"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\"]", "assert odd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"]) == [ \"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\" ]", "assert odd_count([\"1234567\"]) == [ \"the number of odd elements 4n the str4ng 4 of the 4nput.\" ]", "assert odd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\"]) == [ \"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 4n the str4ng 4 of the 4nput.\" ]", "assert odd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 1n the str1ng 2 of the 1nput.\", \"the number of odd elements 1n the str1ng 3 of the 1nput.\", \"the number of odd elements 1n the str1ng 4 of the 1nput.\", \"the number of odd elements 1n the str1ng 5 of the 1nput.\"]", "assert odd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 1n the str1ng 2 of the 1nput.\", \"the number of odd elements 1n the str1ng 3 of the 1nput.\", \"the number of odd elements 1n the str1ng 4 of the 1nput.\", \"the number of odd elements 1n the str1ng 5 of the 1nput.\", \"the number of odd elements 1n the str1ng 6 of the 1nput.\", \"the number of odd elements 1n the str1ng 7 of the 1nput.\", \"the number of odd elements 1n the str1ng 8 of the 1nput.\"]", "assert odd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"]) == [ \"the number of odd elements 5n the str5ng 5 of the 5nput.\" ]", "assert odd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\"]) == [ \"the number of odd elements 6n the str6ng 6 of the 6nput.\" ]", "assert odd_count([\"11111111\", \"22222222\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"]"]}
{"HumanEval/114": ["assert minSubArraySum([1, 2, 3]) == 6", "assert minSubArraySum([-1, -2, -3]) == -6", "assert minSubArraySum([2, 3, 4, 1, 2, 4]) == 1", "assert minSubArraySum([5, 23, -11]) == 8", "assert minSubArraySum([-12, 0, 1]) == -11", "assert minSubArraySum([12, -3, 1]) == 10", "assert minSubArraySum([3, -2, 0]) == 1", "assert minSubArraySum([-5, -3, 1, 1, 3]) == 0", "assert minSubArraySum([1, 2, 3, 4, 5]) == 6", "assert minSubArraySum([-1000, -999, -998, -997, -996, -995]) == -5015", "assert minSubArraySum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 55", "assert minSubArraySum([1, 2, 3, 4, 5]) == 12", "assert minSubArraySum([-2, -1, 0, 1, 2, 3]) == 3", "assert minSubArraySum([5, 4, 3, 2, 1]) == 11", "assert minSubArraySum([-5, -4, -3, -2, -1]) == -18", "assert minSubArraySum([-1, -2, -3, -4, -5]) == -19", "assert minSubArraySum([-1000, -999, -998, -997, -996, -995]) == -5555", "assert minSubArraySum([5, 23, -11]) == 17", "assert minSubArraySum([-10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1", "assert minSubArraySum([-1, -2, -3, -4, -5]) == -18", "assert minSubArraySum([1, 2, 3, 4, 5]) == 15", "assert minSubArraySum([-10, -9, -8, -7, -6, -5]) == -30", "assert minSubArraySum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 45", "assert minSubArraySum([-2, -1, 1, -2, 1, -1]) == -3", "assert minSubArraySum([1, 2, 3, 4, 5, 6]) == 15", "assert minSubArraySum([1, 2, 3]) == 3", "assert minSubArraySum([5, 23, -11]) == 28", "assert minSubArraySum([12, -3, 1]) == 9", "assert minSubArraySum([-1, -2, -3, -4, -5]) == -14", "assert minSubArraySum([-2, -1, 1, -2, 1, -1]) == -1", "assert minSubArraySum([1, 2, 3, 4, 5]) == 9", "assert minSubArraySum([-2, -1, -3, -4, -5]) == -10", "assert minSubArraySum([-3, -2, -1, -4, -5, -6]) == -29", "assert minSubArraySum([1, 2, 3, 4, 5, 6, 7]) == 21", "assert minSubArraySum([1, 2, 3, 4, 5, 6, 7, 8]) == 26", "assert minSubArraySum([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 31", "assert minSubArraySum([-2, -1, 1, -1, 1]) == -2", "assert minSubArraySum([3, 3, 3, 3, 3, 3]) == 18", "assert minSubArraySum([1, 2, 3, 4, 1, 2, 4]) == 1", "assert minSubArraySum([1, 2, 3, 4, 5, 6, 7]) == 18", "assert minSubArraySum([1, 2, 3, 4, 5, 6, 7, 8]) == 29", "assert minSubArraySum([-1, -2, -3, -4, -5]) == -16", "assert minSubArraySum([-1000, -999, -998, -997, -996, -995]) == -5615", "assert minSubArraySum([-1000, -999, -998, -997, -996, -995]) == -5638", "assert minSubArraySum([-2, -1, 0, 1, 2, 3]) == 2", "assert minSubArraySum([3, 2, 1, 4, 5, 6]) == 18", "assert minSubArraySum([-1000, -999, -998, -997, -996, -995]) == -5028", "assert minSubArraySum([-2, -1, -1, -1, -1]) == -8", "assert minSubArraySum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 60", "assert minSubArraySum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == 130", "assert minSubArraySum([-2, -1, -3, -4, -5]) == -8", "assert minSubArraySum([-1000, -900, -800, -700, -600, -500]) == -3000", "assert minSubArraySum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 30", "assert minSubArraySum([-1000, -900, -800, -700, -600, -500]) == -5000", "assert minSubArraySum([-1, -2, -3, -4, -5]) == -10", "assert minSubArraySum([-1, -2, -3, -4, -5, -6]) == -21", "assert minSubArraySum([1, 2, 3, 4, 5, 6, 7]) == 22", "assert minSubArraySum([-1, -2, -3, -4, -5, -6, -7]) == -32", "assert minSubArraySum([-5, -2, 1, 1, -1]) == -1", "assert minSubArraySum([-1, -2, -3, -4]) == -10", "assert minSubArraySum([-1000, -999, -998, -997]) == -997", "assert minSubArraySum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 34", "assert minSubArraySum([-1000, -900, -800, -700, -600, -500, -400, -300, -200, -100, -100, -200, -300, -400, -500, -600, -700, -800, -900, -1000]) == -1000", "assert minSubArraySum([-2, -1, 0, 1, 2, 3, 4]) == 8", "assert minSubArraySum([-5, -3, 0, 1, 3]) == 0", "assert minSubArraySum([-3, -2, -1]) == -6", "assert minSubArraySum([-10, -9, -8, -7, -6, -5, -4, -3, -2, -1]) == -10", "assert minSubArraySum([-5, -3, 0, 3, 9]) == 1", "assert minSubArraySum([-1, -2, -3, -4, -5]) == -15", "assert minSubArraySum([5, 4, 3, 2, 1]) == 12", "assert minSubArraySum([1, 2, 3, 4, 5, 6]) == 21", "assert minSubArraySum([-2, -1, 1, 2, 3]) == 2", "assert minSubArraySum([3, 2, 1, 4, 5]) == 9", "assert minSubArraySum([5, 4, 3, 2, 1]) == 14", "assert minSubArraySum([-3, -2, -1, 1, 2]) == -8", "assert minSubArraySum([-1, -2, -3, -4, -5]) == -9", "assert minSubArraySum([-1, -2, -3, -4, -5, -6]) == -18", "assert minSubArraySum([-1, 2, 3, 4]) == 0", "assert minSubArraySum([-1000, -999, -998, -997, -996, -995]) == -5550", "assert minSubArraySum([-2, -1, 1, 2, 3, 4, 5]) == 1", "assert minSubArraySum([1, 2, 3, 4, 5]) == 14", "assert minSubArraySum([-10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 3", "assert minSubArraySum([-1000, -999, -998, -997]) == -2994", "assert minSubArraySum([-2, -3, -4, -5]) == -19", "assert minSubArraySum([-5, -4, -3, -2, -1]) == -19"]}
{"HumanEval/115": ["assert max_fill([[0,0,1,0],[0,1,0,0],[1,1,1,1]],1) == 6", "assert max_fill([[0,0,1,1],[0,0,0,0],[1,1,1,1],[0,1,1,1]],2) == 5", "assert max_fill([[0,0,0],[0,0,0]],5) == 0", "assert max_fill([[0,0,1,0],[0,1,0,0],[1,1,1,1]], 1) == 6", "assert max_fill([[0,0,1,1],[0,0,0,0],[1,1,1,1],[0,1,1,1]], 2) == 5", "assert max_fill([[0,0,0],[0,0,0]], 5) == 0", "assert max_fill([[0,0,0],[0,0,0],[0,0,0],[0,0,0]],10) == 0", "assert max_fill([[1,1,1,1],[0,1,1,1],[0,0,1,1],[0,0,1,1]],3) == 4", "assert max_fill([[0,0,0],[0,0,0],[0,0,0],[0,0,0]],4) == 0", "assert max_fill([[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0]],5) == 0", "assert max_fill([[0,0,0],[0,0,0],[0,0,0]],5) == 0", "assert max_fill([[0,0,0], [0,0,0]],5) == 0", "assert max_fill([[1,1,1,1],[0,1,1,1],[0,0,1,1],[0,0,1,1]],10) == 4", "assert max_fill([[0,0,0],[0,0,0],[0,0,0],[0,0,0]],5) == 0"]}
{"HumanEval/116": ["assert sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]", "assert sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]", "assert sort_array([1, 0, 2, 3, 4]) == [0, 1, 2, 3, 4]", "assert sort_array([-3, -2, -1, 0, 1]) == [-1, -2, -3, 0, 1]", "assert sort_array([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]", "assert sort_array([-1, -2, -3, -4, -5]) == [-5, -4, -3, -2, -1]", "assert sort_array([1, 1, 1, 1, 1]) == [1, 1, 1, 1, 1]", "assert sort_array([1, 1, 1, 1, 0]) == [1, 1, 1, 1, 0]", "assert sort_array([1, 1, 1, 1, 1, 1]) == [1, 1, 1, 1, 1]", "assert sort_array([1, 1, 1, 1, 1, 0, 1]) == [1, 1, 1, 1, 0, 1]", "assert sort_array([1, 1, 1, 1, 1, 1, 0, 1, 1]) == [1, 1, 1, 1, 0, 1, 1]", "assert sort_array([-1, -1, -1, -1, -1]) == []", "assert sort_array([1, 1, 1, 2, 2]) == [1, 1, 2, 2, 1]", "assert sort_array([1, 1, 1, 2, 2, 2]) == [1, 1, 2, 2, 1, 1]", "assert sort_array([1, 1, 1, 2, 2, 2, 2]) == [1, 1, 2, 2, 1, 1, 1]", "assert sort_array([1, 1, 1, 2, 2, 2]) == [1, 1, 1, 2, 2, 2]", "assert sort_array([1, 1, 1, 2, 2, 2, 2]) == [1, 1, 1, 2, 2, 2, 2]", "assert sort_array([1, 1, 1, 2, 2, 2, 2, 2]) == [1, 1, 1, 2, 2, 2, 2, 2]", "assert sort_array([1, 1, 1, 2, 2, 2, 2, 2, 2]) == [1, 1, 1, 2, 2, 2, 2, 2, 2]", "assert sort_array([-2, 1, 0, -1, 2]) == [-1, -2, 0, 1, 2]", "assert sort_array([-1, -1, -1, -1, 1]) == []", "assert sort_array([1, 1, 1, 1, 1, 1, 1, 1]) == [1, 1, 1, 1, 1, 1, 1]", "assert sort_array([-1, 1, 1, 1, 1]) == []", "assert sort_array([1, 1, 1, 1, 1, 1]) == [1, 1, 1, 1, 1, 1]", "assert sort_array([1, 2, 3, 4, 5, 6]) == [1, 2, 3, 4, 5, 6]", "assert sort_array([1, 1, 1, 0, 0]) == [1, 1, 1, 0, 0]", "assert sort_array([1, 1, 0, 0, 0]) == [1, 1, 0, 0, 0]", "assert sort_array([1, 1, 0, 0, 1]) == [1, 1, 0, 0, 1]", "assert sort_array([1, 1, 0, 1, 0]) == [1, 1, 0, 1, 0]", "assert sort_array([1, 1, 1, 1, 2]) == [1, 1, 1, 1, 2]", "assert sort_array([1, 1, 1, 1, 3]) == [1, 1, 1, 1, 3]", "assert sort_array([1, 1, 1, 1, 4]) == [1, 1, 1, 1, 4]", "assert sort_array([1, 1, 1, 2, 3]) == [1, 1, 1, 2, 3]", "assert sort_array([1, 1, 1, 2, 4]) == [1, 1, 1, 2, 4]", "assert sort_array([5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5]", "assert sort_array([10, 9, 8, 7, 6]) == [6, 7, 8, 9, 10]", "assert sort_array([0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0]", "assert sort_array([-1, 0, 1, 2, 3]) == []", "assert sort_array([-1, -1, -1, -1, -1]) == [-1, -1, -1, -1, -1]", "assert sort_array([1, 1, 1, 2, 2]) == [1, 1, 1, 2, 2]", "assert sort_array([1, 1, 1, 2, 1]) == [1, 1, 1, 2, 1]", "assert sort_array([1, 1, 1, 2, 0]) == [1, 1, 1, 2, 0]", "assert sort_array([1, 1, 1, 2, 1, 1]) == [1, 1, 1, 2, 1]", "assert sort_array([10, 20, 30, 40, 50]) == [10, 20, 30, 40, 50]", "assert sort_array([100, 99, 98, 97, 96]) == [96, 97, 98, 99, 100]", "assert sort_array([1000, 999, 998, 997, 996]) == [996, 997, 998, 999, 1000]", "assert sort_array([1, 1, 1, 1, 1, 0, 1, 1]) == [1, 1, 1, 1, 0, 1, 1]", "assert sort_array([1, 1, 1, 1, 5]) == [1, 1, 1, 1, 5]", "assert sort_array([1, 1, 1, 1, 0]) == [1, 1, 1, 0, 0]", "assert sort_array([-1, -1, -1, 1, 1]) == []", "assert sort_array([1, 1, 1, 3, 3]) == [1, 1, 1, 3, 3]", "assert sort_array([1, 1, 1, 3, 4]) == [1, 1, 1, 3, 4]", "assert sort_array([1, 1, 1, 2, 3]) == [1, 1, 2, 3, 1]", "assert sort_array([0, 1, 2, 3, 4]) == [0, 1, 2, 3, 4]", "assert sort_array([1, 1, 1, 1, 1, 0, 1]) == [1, 1, 1, 1, 1, 0, 1]", "assert sort_array([1, 1, 1, 1, 1, 1, 0, 1, 1]) == [1, 1, 1, 1, 1, 0, 1, 1]", "assert sort_array([-1000, -1001, -1002, -1003, -1004]) == [-1004, -1003, -1002, -1001, -1000]", "assert sort_array([-1, -1, 1, 1, 1]) == []", "assert sort_array([-1000, -999, -998, -997, -996]) == [-996, -997, -998, -999, -1000]", "assert sort_array([5, 23, -11, 12, 3]) == [12, 11, 23, 5, 3]", "assert sort_array([0, 1, 1, 1, 0]) == [0, 1, 1, 1, 0]", "assert sort_array([5, 23, 11, 12, 3]) == [11, 12, 13, 14, 15]", "assert sort_array([1, 1, 1, 2, 2, 3]) == [1, 1, 1, 2, 3, 2]", "assert sort_array([1, 1, 1, 2, 3, 2]) == [1, 1, 1, 2, 3, 2]", "assert sort_array([1, 1, 1, 2, 3, 3]) == [1, 1, 1, 2, 3, 3]", "assert sort_array([1, 1, 1, 2, 3, 4]) == [1, 1, 1, 2, 3, 4]", "assert sort_array([1, 1, 1, 2, 3, 5]) == [1, 1, 1, 2, 3, 5]", "assert sort_array([5, 23, -11, 12, -3]) == [12, -3, 5, 23, -11]"]}
{"HumanEval/117": ["assert select_words(\"Mary had a little lamb\", 4) == [\"little\"]", "assert select_words(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]", "assert select_words(\"simple white space\", 2) == []", "assert select_words(\"Hello world\", 4) == [\"world\"]", "assert select_words(\"Uncle sam\", 3) == [\"Uncle\"]", "assert select_words(\"hello world\", 4) == [\"world\"]", "assert select_words(\"hello world\", 3) == [\"hello\", \"world\"]", "assert select_words(\"hello world\", 2) == [\"world\"]", "assert select_words(\"hello world\", 1) == [\"w\"]", "assert select_words(\"\", 4) == []", "assert select_words(\"\", 3) == []", "assert select_words(\"hello world\", 2) == [\"hello\"]", "assert select_words(\"Mary had a little lamb\", 5) == []", "assert select_words(\"Mary had a little lamb\", 0) == []", "assert select_words(\"a b c d e f g h i j k l m n o p q r s t u v w x y z\", 2) == []", "assert select_words(\"hello world\", 1) == [\"world\"]", "assert select_words(\"hello world\", 0) == [\"hello\"]", "assert select_words(\"\", 2) == []", "assert select_words(\"\", 1) == []", "assert select_words(\"a b c d e f g h i j k l m n o p q r s t u v w x y z\", 4) == []", "assert select_words(\"Mary had a little lamb\", 6) == []", "assert select_words(\"Mary had a little lamb\", 2) == [\"Mary\", \"lamb\"]", "assert select_words(\"simple white space\", 4) == []", "assert select_words(\"Hello world\", 3) == [\"world\"]", "assert select_words(\"Uncle sam\", 2) == [\"sam\"]", "assert select_words(\"hello world\", 3) == [\"world\"]", "assert select_words(\"hello world\", 2) == []", "assert select_words(\"abcde\", 2) == []", "assert select_words(\"hello world\", 2) == [\"hello\", \"world\"]", "assert select_words(\"hello world\", 1) == [\"h\", \"e\", \"l\", \"l\", \"o\", \"w\", \"r\", \"l\", \"d\"]", "assert select_words(\"hello world\", 0) == []", "assert select_words(\"hello world\", 1) == [\"h\", \"e\", \"l\", \"l\", \"o\"]", "assert select_words(\"abc def ghi\", 3) == [\"ghi\"]", "assert select_words(\"hello world\", 5) == []", "assert select_words(\"simple white space\", 3) == [\"white\"]", "assert select_words(\"A man walked into a bar\", 3) == [\"walked\", \"man\"]", "assert select_words(\"Uncle Sam\", 2) == [\"Sam\"]", "assert select_words(\"simple white space\", 1) == [\"s\"]", "assert select_words(\"A man with no name\", 3) == [\"with\", \"no\", \"name\"]", "assert select_words(\"Uncle Sam\", 3) == [\"Uncle\"]", "assert select_words(\"\", 0) == []", "assert select_words(\"hello world\", 5) == [\"world\"]", "assert select_words(\"hello world\", 6) == [\"world\"]", "assert select_words(\"hello world\", 7) == [\"world\"]", "assert select_words(\"hello world\", 8) == [\"world\"]", "assert select_words(\"hello world\", 9) == [\"world\"]", "assert select_words(\"hello world\", 10) == [\"world\"]", "assert select_words(\"hello world\", 11) == [\"world\"]", "assert select_words(\"hello world\", 12) == [\"world\"]", "assert select_words(\"hello world\", 4) == []", "assert select_words(\"hello world\", 1) == []", "assert select_words(\"hello world\", 6) == []", "assert select_words(\"a simple example\", 2) == [\"example\"]", "assert select_words(\"The quick brown fox jumps over the lazy dog\", 4) == [\"fox\"]", "assert select_words(\"Mary had a little lamb\", 2) == [\"lamb\"]", "assert select_words(\"Uncle Sam\", 3) == [\"Sam\"]", "assert select_words(\"Uncle Sam\", 2) == [\"Uncle\"]", "assert select_words(\"A man, a plan, a canal: Panama\", 4) == [\"plan\", \"canal\"]", "assert select_words(\"A man, a plan, a canal: Panama\", 3) == [\"man\", \"plan\", \"canal\"]", "assert select_words(\"A man, a plan, a canal: Panama\", 2) == [\"a\", \"man\"]", "assert select_words(\"A man, a plan, a canal: Panama\", 1) == [\"A\"]", "assert select_words(\"hello world\", 0) == [\"h\", \"e\", \"l\", \"l\", \"o\"]", "assert select_words(\"\", 1) == [\"\"]", "assert select_words(\"simple white space\", 3) == []", "assert select_words(\"hello world\", 5) == [\"hello\", \"world\"]", "assert select_words(\"hello world\", 0) == [\"world\"]", "assert select_words(\"hello world\", 7) == []", "assert select_words(\"hello world\", 8) == []", "assert select_words(\"a b c d e f g h i j k l m n o p q r s t u v w x y z\", 3) == [\"q\"]", "assert select_words(\"Mary had a little lamb\", 2) == [\"Mary\"]", "assert select_words(\"Mary had a little lamb\", 2) == [\"Mary\", \"had\"]", "assert select_words(\"A man a plan a canal Panama\", 3) == [\"man\", \"plan\", \"canal\"]", "assert select_words(\"a\", 2) == []", "assert select_words(\"abc\", 3) == [\"b\", \"c\"]", "assert select_words(\"abc\", 2) == [\"a\"]", "assert select_words(\"simple white space\", 1) == [\"white\"]", "assert select_words(\"Mary had a little lamb\", 1) == [\"little\"]", "assert select_words(\"a b c d e f g h i j k l m n o p q r s t u v w x y z\", 4) == [\"z\"]", "assert select_words(\"simple white space\", 0) == [\"s\"]", "assert select_words(\"Mary had a little lamb\", 2) == [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]", "assert select_words(\"a b c d e f g h i j k l m n o p q r s t u v w x y z\", 2) == [\"z\"]", "assert select_words(\"a b c d e f g h i j k l m n o p q r s t u v w x y z\", 4) == [\"q\"]", "assert select_words(\"a b c d e f g h i j k l m n o p q r s t u v w x y z\", 3) == [\"bcd\"]", "assert select_words(\"A man, a plan, a canal: Panama!\", 4) == [\"plan\"]", "assert select_words(\"A man, a plan, a canal: Panama!\", 3) == [\"man\", \"a\", \"canal\"]", "assert select_words(\"A man, a plan, a canal: Panama!\", 2) == [\"a\", \"man\"]", "assert select_words(\"A man, a plan, a canal: Panama!\", 1) == [\"a\", \"plan\", \"a\", \"canal\", \"Panama\"]", "assert select_words(\"simple white space\", 1) == []", "assert select_words(\"Mary had a little lamb\", 1) == [\"a\"]", "assert select_words(\"simple white space\", 3) == [\"white\", \"space\"]", "assert select_words(\"Hello world\", 5) == [\"world\", \"world\"]", "assert select_words(\"hello world\", 6) == [\"hello\", \"world\"]", "assert select_words(\"hello world\", 7) == [\"hello\", \"world\"]", "assert select_words(\"hello world\", 0) == [\"h\", \"e\", \"l\", \"l\", \"o\", \"w\", \"r\", \"l\", \"d\"]", "assert select_words(\"Hello world\", 2) == [\"o\"]", "assert select_words(\"hello world\", 3) == [\"hello\"]", "assert select_words(\"a simple word\", 3) == [\"word\"]", "assert select_words(\"A man a plan a canal Panama\", 4) == [\"plan\"]", "assert select_words(\"A man a plan a canal Panama\", 3) == [\"man\", \"a\", \"canal\"]", "assert select_words(\"A man a plan a canal Panama\", 2) == [\"a\", \"man\"]", "assert select_words(\"A man a plan a canal Panama\", 1) == [\"a\", \"man\", \"a\", \"plan\", \"a\", \"canal\", \"Panama\"]"]}
{"HumanEval/118": ["assert get_closest_vowel(\"hello\") == \"e\"", "assert get_closest_vowel(\"world\") == \"o\"", "assert get_closest_vowel(\"apple\") == \"a\"", "assert get_closest_vowel(\"python\") == \"y\"", "assert get_closest_vowel(\"banana\") == \"a\"", "assert get_closest_vowel(\"Python\") == \"y\"", "assert get_closest_vowel(\"Apple\") == \"a\"", "assert get_closest_vowel(\"apple\") == \"e\"", "assert get_closest_vowel(\"cactus\") == \"c\"", "assert get_closest_vowel(\"hello\") == \"o\"", "assert get_closest_vowel(\"hello world\") == \"l\"", "assert get_closest_vowel(\"candy\") == \"e\"", "assert get_closest_vowel(\"cheese\") == \"e\"", "assert get_closest_vowel(\"cherry\") == \"e\"", "assert get_closest_vowel(\"chocolate\") == \"o\"", "assert get_closest_vowel(\"cookie\") == \"i\"", "assert get_closest_vowel(\"elephant\") == \"e\"", "assert get_closest_vowel(\"fruit\") == \"u\"", "assert get_closest_vowel(\"crisp\") == \"r\"", "assert get_closest_vowel(\"computer\") == \"o\"", "assert get_closest_vowel(\"question\") == \"q\"", "assert get_closest_vowel(\"dragonfly\") == \"d\"", "assert get_closest_vowel(\"fizzbuzz\") == \"z\"", "assert get_closest_vowel(\"howareyou\") == \"o\"", "assert get_closest_vowel(\"iphone\") == \"i\"", "assert get_closest_vowel(\"sushi\") == \"u\"", "assert get_closest_vowel(\"cactus\") == \"a\"", "assert get_closest_vowel(\"hippopotamus\") == \"i\"", "assert get_closest_vowel(\"hamburger\") == \"a\"", "assert get_closest_vowel(\"hello world\") == \"e\"", "assert get_closest_vowel(\"candy\") == \"a\"", "assert get_closest_vowel(\"honey\") == \"o\"", "assert get_closest_vowel(\"jumping\") == \"\"", "assert get_closest_vowel(\"kangaroo\") == \"u\"", "assert get_closest_vowel(\"moonlight\") == \"o\"", "assert get_closest_vowel(\"computer\") == \"e\"", "assert get_closest_vowel(\"programming\") == \"u\"", "assert get_closest_vowel(\"python\") == \"i\"", "assert get_closest_vowel(\"javascript\") == \"j\"", "assert get_closest_vowel(\"honey\") == \"e\"", "assert get_closest_vowel(\"computer\") == \"\"", "assert get_closest_vowel(\"cool\") == \"\"", "assert get_closest_vowel(\"love\") == \"o\"", "assert get_closest_vowel(\"cabbage\") == \"a\"", "assert get_closest_vowel(\"frog\") == \"\"", "assert get_closest_vowel(\"giraffe\") == \"\"", "assert get_closest_vowel(\"hamburger\") == \"\"", "assert get_closest_vowel(\"carrot\") == \"r\"", "assert get_closest_vowel(\"dragonfly\") == \"a\"", "assert get_closest_vowel(\"hello world\") == \"o\"", "assert get_closest_vowel(\"hi\") == \"i\"", "assert get_closest_vowel(\"hola\") == \"o\"", "assert get_closest_vowel(\"hellooo\") == \"o\"", "assert get_closest_vowel(\"hey\") == \"e\"", "assert get_closest_vowel(\"cabbage\") == \"e\"", "assert get_closest_vowel(\"carrot\") == \"a\"", "assert get_closest_vowel(\"dress\") == \"e\"", "assert get_closest_vowel(\"crisp\") == \"\"", "assert get_closest_vowel(\"giraffe\") == \"i\"", "assert get_closest_vowel(\"cabbage\") == \"\"", "assert get_closest_vowel(\"honey\") == \"i\"", "assert get_closest_vowel(\"milk\") == \"i\"", "assert get_closest_vowel(\"hamburger\") == \"e\"", "assert get_closest_vowel(\"cak\") == \"\"", "assert get_closest_vowel(\"zebra\") == \"e\"", "assert get_closest_vowel(\"he\") == \"e\"", "assert get_closest_vowel(\"h\") == \"\"", "assert get_closest_vowel(\"crisis\") == \"r\"", "assert get_closest_vowel(\"elephant\") == \"a\"", "assert get_closest_vowel(\"quiche\") == \"i\"", "assert get_closest_vowel(\"chair\") == \"\"", "assert get_closest_vowel(\"dragonfly\") == \"e\"", "assert get_closest_vowel(\"corn\") == \"o\"", "assert get_closest_vowel(\"dragon\") == \"\"", "assert get_closest_vowel(\"jelly\") == \"e\"", "assert get_closest_vowel(\"kiwi\") == \"i\"", "assert get_closest_vowel(\"python\") == \"a\"", "assert get_closest_vowel(\"programming\") == \"a\"", "assert get_closest_vowel(\"quiet\") == \"\"", "assert get_closest_vowel(\"Python\") == \"a\"", "assert get_closest_vowel(\"Quick\") == \"\"", "assert get_closest_vowel(\"Quiet\") == \"\"", "assert get_closest_vowel(\"kangaroo\") == \"o\"", "assert get_closest_vowel(\"pizza\") == \"z\"", "assert get_closest_vowel(\"monkey\") == \"\"", "assert get_closest_vowel(\"quick\") == \"\"", "assert get_closest_vowel(\"cookie\") == \"o\"", "assert get_closest_vowel(\"dragonfly\") == \"y\"", "assert get_closest_vowel(\"qwerty\") == \"\"", "assert get_closest_vowel(\"xyz\") == \"\"", "assert get_closest_vowel(\"zebra\") == \"\"", "assert get_closest_vowel(\"cucumber\") == \"u\"", "assert get_closest_vowel(\"dog\") == \"\"", "assert get_closest_vowel(\"hello world again\") == \"e\"", "assert get_closest_vowel(\"hello world again?\") == \"e\"", "assert get_closest_vowel(\"pizza\") == \"e\"", "assert get_closest_vowel(\"yogurt\") == \"u\"", "assert get_closest_vowel(\"FULL\") == \"U\"", "assert get_closest_vowel(\"ab\") == \"\"", "assert get_closest_vowel(\"quack\") == \"\"", "assert get_closest_vowel(\"honeybee\") == \"i\"", "assert get_closest_vowel(\"kitten\") == \"i\"", "assert get_closest_vowel(\"programming\") == \"r\"", "assert get_closest_vowel(\"algorithm\") == \"\"", "assert get_closest_vowel(\"code\") == \"\"", "assert get_closest_vowel(\"hamburger\") == \"b\"", "assert get_closest_vowel(\"jumping\") == \"i\"", "assert get_closest_vowel(\"mango\") == \"a\"", "assert get_closest_vowel(\"orange\") == \"o\"", "assert get_closest_vowel(\"pizza\") == \"i\"", "assert get_closest_vowel(\"fizz\") == \"i\"", "assert get_closest_vowel(\"hippopotamus\") == \"p\"", "assert get_closest_vowel(\"lollipop\") == \"o\"", "assert get_closest_vowel(\"monkey\") == \"o\"", "assert get_closest_vowel(\"how\") == \"o\"", "assert get_closest_vowel(\"happy\") == \"a\"", "assert get_closest_vowel(\"computer\") == \"u\""]}
{"HumanEval/119": []}
{"HumanEval/120": ["assert maximum([-3, -4, 5], 3) == [-4, -3, 5]", "assert maximum([4, -4, 4], 2) == [4, 4]", "assert maximum([-3, 2, 1, 2, -1, -2, 1], 1) == [2]", "assert maximum([-3, -4, 5], 4) == []", "assert maximum([-3, -4, 5], 10) == []", "assert maximum([-3, -4, 5], 0) == []", "assert maximum([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10], 3) == [-4, -3, -2]", "assert maximum([-1000, -1001, -1002, -1003, -1004, -1005, -1006, -1007, -1008, -1009, -1010], 10) == [-1009, -1010, -1008, -1007, -1006, -1005, -1004, -1003, -1002, -1001]", "assert maximum([1, 2, 3, 4, 5], 2) == [3, 4]", "assert maximum([1, 2, 3, 4, 5], 3) == [1, 2, 3, 4, 5]", "assert maximum([-3, -2, -1, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10], 10) == []", "assert maximum([1, 2, 3, 4, 5], 10) == [1, 2, 3, 4, 5]", "assert maximum([-1000, 1000, 0], 1) == [-1000]", "assert maximum([1, 2, 3, 4, 5, 6, 7, 8, 9], 10) == [9, 8, 7, 6, 5, 4, 3, 2, 1, 0]", "assert maximum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5) == [5, 6, 7, 8, 9]", "assert maximum([-1000, -1001, -1002, -1003, -1004, -1005, -1006, -1007, -1008, -1009, -1010], 3) == [-1002, -1003, -1004]", "assert maximum([-1000, -1001, -1002, -1003, -1004, -1005, -1006, -1007, -1008, -1009, -1010], 7) == []", "assert maximum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 11) == []", "assert maximum([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10], 10) == []", "assert maximum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2) == [6, 7, 8, 9, 10]", "assert maximum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 1) == [10]", "assert maximum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 0) == [10]", "assert maximum([-1000, -900, -800, -700, -600, -500, -400, -300, -200, -100, -50, -10, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "assert maximum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5) == [8, 9, 10]", "assert maximum([-1000, -1001, -1002, -1003, -1004, -1005, -1006, -1007, -1008, -1009, -1010], 10) == [-1009, -1010]", "assert maximum([-1000, -1001, -1002, -1003, -1004, -1005, -1006, -1007, -1008, -1009, -1010], 12) == []", "assert maximum([1, 2, 3, 4, 5], 3) == [3, 4, 5]", "assert maximum([1, 2, 3, 4, 5], 5) == [1, 2, 3, 4, 5]", "assert maximum([-1000, 0, 1000], 2) == [-1000, 1000]", "assert maximum([1, 2, 3, 4], 3) == [3, 4, 5, 6]", "assert maximum([-1000, 1000], 1) == [-1000, 1000]", "assert maximum([-3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9], 2) == [-2, 3]", "assert maximum([1, 2, 3, 4, 5], 4) == [3, 4, 5]", "assert maximum([-3, -2, -1, -1, -2, -3, -4, -5], 6) == []", "assert maximum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5) == [3, 4, 5, 6, 7]", "assert maximum([-3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10) == []", "assert maximum([1, 2, 3, 4, 5], 1) == [4]", "assert maximum([-1000, 0, 1000], 1) == [1000]", "assert maximum([-3, -4, 5], 2) == [-4, -3, 5]", "assert maximum([4, -4, 4], 1) == [4]", "assert maximum([1, 2, 3, 4, 5], 4) == [3, 4, 5, 5]", "assert maximum([1, 2, 3, 4, 5], 100) == []", "assert maximum([4, -4, 4], 10) == []", "assert maximum([1, 2, 3, 4, 5], 3) == [4, 3, 2]", "assert maximum([-3, -4, 5], 2) == []", "assert maximum([4, 4, 4, 4, 4, 4, 4], 3) == [4, 4, 4]", "assert maximum([-3, -4, 5], 1) == [-4, -3, 5]", "assert maximum([-3, 2, 1, 2, -1, -2, 1], 0) == []", "assert maximum([4, 5, 6, 7, 8, 9, 10], 4) == [8, 9, 10]", "assert maximum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3) == [5, 6, 7]", "assert maximum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2) == [3, 4, 5, 6, 7, 8, 9, 10]", "assert maximum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 1) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "assert maximum([1, 2, 3, 4, 5, 6, 7, 8, 9], 3) == [3, 4, 5]", "assert maximum([1, 2, 3, 4, 5, 6, 7, 8, 9], 2) == [1, 2, 3, 4, 5, 6, 7, 8, 9]", "assert maximum([1, 2, 3, 4, 5, 6, 7, 8, 9], 10) == []", "assert maximum([-3, -4, 5], 0) == [-3, -4, 5]", "assert maximum([1, 2, 3, 4, 5], 2) == [2, 3, 4, 5]", "assert maximum([1, 2, 3, 4, 5], 1) == [3, 4, 5]", "assert maximum([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10], 3) == [-6, -5, -4]", "assert maximum([-3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10) == [10]", "assert maximum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 4) == [6, 7, 8, 9]", "assert maximum([-3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 1000) == []", "assert maximum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 0) == []", "assert maximum([1, 2, 3, 4, 5], 4) == [3, 4, 5, 1]", "assert maximum([-3, -4, 5], 1) == [-3, -4, 5]", "assert maximum([4, -4, 4], 3) == [4, 4]", "assert maximum([1, 2, 3, 4, 5], 4) == [1, 2, 3, 4]", "assert maximum([4, 4, 4, 4, 4, 4, 4], 2) == [4, 4]", "assert maximum([1, 2, 3, 4, 5, 6, 7, 8, 9], 5) == [5, 6, 7, 8, 9]", "assert maximum([-3, -2, -1, 0, 1, 2, 3, 4, 5], 3) == [-2, -1, 0]", "assert maximum([-3, -2, -1, 0, 1, 2, 3, 4, 5], 5) == [0, 1, 2, 3, 4, 5]", "assert maximum([-3, -4, 5], 11) == []", "assert maximum([-3, -4, 5], 9) == []", "assert maximum([1, 2, 3, 4, 5, 6, 7, 8, 9], 7) == [5, 6, 7, 8, 9]", "assert maximum([1, 2, 3, 4, 5, 6, 7, 8, 9], 10) == [1, 2, 3, 4, 5, 6, 7, 8, 9]", "assert maximum([1, 2, 3, 4, 5, 6, 7, 8, 9], 11) == []", "assert maximum([1, 2, 3, 4, 5, 6, 7, 8, 9], 12) == []", "assert maximum([-3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9], 5) == [9, 8, 7, 6, 5]", "assert maximum([1, 2, 3, 4, 5], 1) == [2]", "assert maximum([-3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9], 3) == [-2, -1, 0]", "assert maximum([-3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9], 2) == [-1, 0]", "assert maximum([-3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9], 1) == [-2, -1, 0]", "assert maximum([-3, 4, 5, 3, 2, 1, 4, 5], 3) == [-4, -3, 5]", "assert maximum([4, 4, 4, 4, 4, 4, 4, 4], 3) == [4, 4, 4]", "assert maximum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3) == [3, 4, 5]", "assert maximum([-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000], 10) == []", "assert maximum([-3, 4, 5, 6, 7, 8, 9, 10], 5) == [5, 6, 7, 8, 9]", "assert maximum([-3, -4, 5], 0) == [-4, -3, 5]", "assert maximum([-3, -4, 5], 10) == [-4, -3, 5]", "assert maximum([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10], 5) == []", "assert maximum([-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000], 10) == [-1000]", "assert maximum([-3, -4, 5], 4) == [-4, -3, 5]", "assert maximum([1, 2, 3, 4, 5], 1000) == []", "assert maximum([1, 2, 3, 4, 5], 0) == [1, 2, 3, 4, 5]", "assert maximum([-3, -2, -1], 2) == [-2, -1]", "assert maximum([4, 4, 4], 3) == [4, 4, 4]", "assert maximum([-3, 2, 1, 2, -1, -2, 1], 2) == [-2, -1, 1, 2, 3, 4, 5]", "assert maximum([1, 2, 3, 4, 5], 4) == [3, 4, 5, 4]", "assert maximum([1, 2, 3, 4, 5], 5) == [3, 4, 5, 4, 5]", "assert maximum([-3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9], 10) == []"]}
{"HumanEval/121": ["assert solution([5, 8, 7, 1]) == 12", "assert solution([3, 3, 3, 3, 3]) == 9", "assert solution([30, 13, 24, 321]) == 0", "assert solution([5, 8, 7, 1, 3, 3, 3, 3]) == 12", "assert solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 30", "assert solution([1, 2, 3, 4, 5]) == 10", "assert solution([10, 11, 12, 13, 14]) == 30", "assert solution([1, 2, 3, 4, 5, 6]) == 20", "assert solution([5, 8, 7, 1, 2, 3]) == 12", "assert solution([1, 2, 3, 4, 5]) == 15", "assert solution([10, 20, 30, 40, 50]) == 150", "assert solution([-5, -10, -15, -20, -25]) == -75", "assert solution([5, 8, 7, 1, 6, 5]) == 12", "assert solution([1, 2, 3, 4, 5]) == 7", "assert solution([1, 2, 3, 4, 5, 6]) == 16", "assert solution([5, 8, 7, 1, 1]) == 12", "assert solution([3, 3, 3, 3, 3, 3]) == 9", "assert solution([5, 8, 7, 1, 1, 1]) == 12", "assert solution([5, 8, 7, 1, 3]) == 12", "assert solution([5, 8, 7, 1, 3, 3]) == 12", "assert solution([1, 2, 3, 4, 5, 6]) == 15", "assert solution([1, 2, 3, 4, 5, 6, 7]) == 15", "assert solution([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert solution([3, 3, 3, 3, 3, 3, 3]) == 9", "assert solution([-1, 2, 3, 4, 5]) == 0", "assert solution([-1, -2, -3, -4, -5]) == -15", "assert solution([1, 2, 3, 4, 5, 6]) == 21", "assert solution([1, 2, 3, 4, 5, 6, 7]) == 28", "assert solution([1, 2, 3, 4, 5, 6, 7, 8]) == 35", "assert solution([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 42", "assert solution([-1, -2, -3, -4, -5]) == -10", "assert solution([-5, -4, -3, -2, -1]) == -15", "assert solution([-10, -9, -8, -7, -6]) == -40", "assert solution([10, 9, 8, 7, 6]) == 30", "assert solution([5, 8, 7, 1, 3, 3, 3]) == 12", "assert solution([1, 2, 3, 4, 5, 6, 7]) == 21", "assert solution([-1, -2, -3, -4, -5]) == -14", "assert solution([1, 2, 3, 4, 5]) == 9", "assert solution([-1, 2, 3, 4, 5]) == 12", "assert solution([5, 8, 7, 1, 2, 3, 4, 5]) == 23", "assert solution([-5, -2, -1, 0, 1]) == 0", "assert solution([-10, -5, 0, 5, 10]) == 5", "assert solution([-10, -20, -30, -40, -50]) == -150", "assert solution([5, 10, 15, 20, 25]) == 45", "assert solution([-5, -10, -15, -20, -25]) == -45", "assert solution([5, 8, 7, 1, 3, 9, 7, 1]) == 12", "assert solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 15", "assert solution([1, 2, 3, 4, 5, 6, 7, 8]) == 21", "assert solution([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 21", "assert solution([-1, 2, 3, 4, 5]) == 7", "assert solution([-5, -2, -1, 0, 1, 2]) == 2", "assert solution([5, 5, 5, 5, 5]) == 25", "assert solution([-1, -2, -3, -4, -5]) == -16", "assert solution([12, 12, 12, 12, 12]) == 60", "assert solution([-10, -11, -12, -13, -14]) == -52", "assert solution([5, 8, 7, 1, 3, 4]) == 14", "assert solution([-1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 10", "assert solution([5, 8, 7, 1, 3, 4, 5]) == 12", "assert solution([5, 8, 7, 1, 2, 3, 4, 5]) == 15", "assert solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 45", "assert solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == 45", "assert solution([-5, -2, 1, 4, 9]) == 2", "assert solution([1, 2, 3, 4, 5, 6]) == 10", "assert solution([1, 2, 3, 4, 5, 6, 7]) == 10", "assert solution([1, 2, 3, 4, 5, 6, 7, 8]) == 10", "assert solution([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 10", "assert solution([5, 8, 7, 1, 10]) == 12", "assert solution([-5, -8, -7, -1]) == -21", "assert solution([1, 2, 3, 4, 5]) == 12", "assert solution([-5, -2, 1, 4, 9]) == 1", "assert solution([-10, -20, -30, -40, -50]) == -250", "assert solution([5, 8, 7, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 12", "assert solution([1, 2, 3, 4, 5, 6, 7, 8]) == 34", "assert solution([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 40", "assert solution([1, 2, 3, 4, 5, 6]) == 11", "assert solution([-1, -2, -3, -4, -5]) == -11", "assert solution([5, 8, 7, 1, 3, 4]) == 12", "assert solution([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]) == -45", "assert solution([5, 8, 7, 1, 3, 2]) == 12", "assert solution([5, 8, 7, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 55", "assert solution([10, 20, 30, 40, 50]) == 100", "assert solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 18", "assert solution([1, 2, 3, 4, 5]) == 0", "assert solution([1, 2, 3, 4, 5, 6, 7, 8]) == 27", "assert solution([-1, -2, -3, -4, -5]) == -12", "assert solution([5, 8, 7, 1, 6]) == 12", "assert solution([5, 8, 7, 1, 3, 4, 2]) == 12", "assert solution([-5, -3, -2, -1, 0]) == 0", "assert solution([5, 8, 7, 1, 3, 6, 5]) == 12", "assert solution([3, 3, 3, 3, 3, 3, 3, 3, 3]) == 9", "assert solution([5, 8, 7, 1, 10, 11]) == 12", "assert solution([-1, -2, -3, -4, -5, -6]) == -30", "assert solution([5, 8, 7, 1, 3, 2, 1]) == 12", "assert solution([-5, -3, -1, 1, 3]) == 0", "assert solution([-5, -3, -1, 1, 3, 5]) == 0", "assert solution([10, 20, 30, 40, 50]) == 0", "assert solution([1, 2, 3, 4, 5, 6, 7, 8]) == 26", "assert solution([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 32", "assert solution([-10, -20, -30, -40, -50]) == -50", "assert solution([5, 8, 7, 1, 3, 4, 6, 5, 2, 1]) == 21", "assert solution([-1, -2, -3, -4, -5]) == -20", "assert solution([5, 10, 15, 20, 25]) == 10", "assert solution([1, 2, 3, 4, 5, 6]) == 12", "assert solution([1, 2, 3, 4, 5, 6, 7]) == 12", "assert solution([1, 2, 3, 4, 5, 6, 7, 8]) == 12", "assert solution([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 12", "assert solution([5, 8, 7, 1, 3, 6]) == 12"]}
{"HumanEval/122": ["assert add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24", "assert add_elements([1, 2, 3, 4, 5, 6, 7, 8, 9], 3) == 14", "assert add_elements([1, 2, 3, 4, 5, 6, 7, 8, 9], 2) == 10", "assert add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 5) == 24", "assert add_elements([1, 2, 3, 4, 5, 6, 7, 8, 9], 6) == 20", "assert add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 7) == 16", "assert add_elements([1, 2, 3, 4, 5, 6, 7, 8, 9], 8) == 12", "assert add_elements([1, 2, 3, 4, 5, 6, 7, 8, 9], 3) == 20", "assert add_elements([1, 2, 3, 4, 5, 6, 7, 8, 9], 2) == 16", "assert add_elements([1, 2, 3, 4, 5, 6, 7, 8, 9], 1) == 10", "assert add_elements([1, 2, 3, 4, 5, 6, 7, 8, 9], 0) == 0", "assert add_elements([1, 2, 3, 4, 5, 6, 7, 8, 9], 10) == 10", "assert add_elements([11, 22, 33, 44, 55, 66, 77, 88, 99], 3) == 144", "assert add_elements([100, 200, 300, 400, 500, 600, 700, 800, 900], 2) == 2800", "assert add_elements([1, 2, 3, 4, 5, 6, 7, 8, 9], 4) == 24", "assert add_elements([1, 2, 3, 4, 5, 6, 7, 8, 9], 5) == 24", "assert add_elements([1, 2, 3, 4, 5, 6, 7, 8, 9], 6) == 24", "assert add_elements([1, 2, 3, 4, 5, 6, 7, 8, 9], 7) == 24", "assert add_elements([1, 2, 3, 4, 5, 6, 7, 8, 9], 8) == 24", "assert add_elements([1, 2, 3, 4, 5, 6, 7, 8, 9], 9) == 24", "assert add_elements([1, 2, 3, 4, 5, 6, 7, 8, 9], 10) == 24", "assert add_elements([1, 2, 3, 4, 5, 6, 7, 8, 9], 11) == 24", "assert add_elements([1, 2, 3, 4, 5, 6, 7, 8, 9], 12) == 24", "assert add_elements([1, 2, 3, 4, 5, 6, 7, 8, 9], 2) == 11", "assert add_elements([1, 2, 3, 4, 5, 6, 7, 8, 9], 3) == 12", "assert add_elements([1, 2, 3, 4, 5, 6, 7, 8, 9], 5) == 40", "assert add_elements([1, 2, 3, 4, 5, 6, 7, 8, 9], 6) == 48", "assert add_elements([1, 2, 3, 4, 5, 6, 7, 8, 9], 7) == 56", "assert add_elements([1, 2, 3, 4, 5, 6, 7, 8, 9], 8) == 64", "assert add_elements([1, 2, 3, 4, 5, 6, 7, 8, 9], 9) == 72", "assert add_elements([1, 2, 3, 4, 5, 6, 7, 8, 9], 10) == 80", "assert add_elements([1, 2, 3, 4, 5, 6, 7, 8, 9], 2) == 8", "assert add_elements([1, 2, 3, 4, 5, 6, 7, 8, 9], 1) == 1", "assert add_elements([1, 2, 3, 4, 5, 6, 7, 8, 9], 3) == 19", "assert add_elements([1, 2, 3, 4, 5, 6, 7, 8, 9], 5) == 20", "assert add_elements([1, 2, 3, 4, 5, 6, 7, 8, 9], 7) == 25", "assert add_elements([1, 2, 3, 4, 5, 6, 7, 8, 9], 3) == 10", "assert add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 6) == 24", "assert add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 7) == 24", "assert add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 8) == 24", "assert add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 9) == 24", "assert add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 10) == 24", "assert add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 11) == 24", "assert add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 12) == 24", "assert add_elements([1, 2, 3, 4, 5, 6, 7, 8, 9], 3) == 24", "assert add_elements([1, 2, 3, 4, 5, 6, 7, 8, 9], 2) == 24", "assert add_elements([1, 2, 3, 4, 5, 6, 7, 8, 9], 1) == 24", "assert add_elements([1, 2, 3, 4, 5, 6, 7, 8, 9], 0) == 24", "assert add_elements([1, 2, 3, 4, 5, 6, 7, 8, 9], 3) == 23", "assert add_elements([1, 2, 3, 4, 5, 6, 7, 8, 9], 2) == 21", "assert add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 5) == 25", "assert add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 6) == 26", "assert add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 7) == 27", "assert add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 8) == 28", "assert add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 9) == 29", "assert add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 10) == 30", "assert add_elements([1, 2, 3, 4, 5, 6, 7, 8, 9], 2) == 14", "assert add_elements([1, 2, 3, 4, 5, 6, 7, 8, 9], 5) == 36", "assert add_elements([1, 2, 3, 4, 5, 6, 7, 8, 9], 6) == 30", "assert add_elements([1, 2, 3, 4, 5, 6, 7, 8, 9], 7) == 27", "assert add_elements([1, 2, 3, 4, 5, 6, 7, 8, 9], 10) == 111", "assert add_elements([1, 2, 3, 4, 5, 6, 7, 8, 9], 1) == 5", "assert add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 3) == 111", "assert add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 2) == 111", "assert add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 1) == 111", "assert add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 0) == 111", "assert add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 5) == 21", "assert add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 3) == 11", "assert add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 3) == 15", "assert add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 2) == 11", "assert add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 1) == 11", "assert add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 0) == 0", "assert add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 5) == 0", "assert add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 6) == 0", "assert add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 7) == 0", "assert add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 8) == 0", "assert add_elements([1, 2, 3, 4, 5, 6, 7, 8, 9], 5) == 23", "assert add_elements([1, 2, 3, 4, 5, 6, 7, 8, 9], 6) == 22", "assert add_elements([1, 2, 3, 4, 5, 6, 7, 8, 9], 7) == 21", "assert add_elements([1, 2, 3, 4, 5, 6, 7, 8, 9], 8) == 20", "assert add_elements([1, 2, 3, 4, 5, 6, 7, 8, 9], 9) == 19", "assert add_elements([1, 2, 3, 4, 5, 6, 7, 8, 9], 10) == 18", "assert add_elements([1, 2, 3, 4, 5, 6, 7, 8, 9], 11) == 17", "assert add_elements([1, 2, 3, 4, 5, 6, 7, 8, 9], 12) == 16", "assert add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 3) == 23", "assert add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 2) == 21", "assert add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 5) == 111", "assert add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 6) == 21", "assert add_elements([1, 2, 3, 4, 5, 6, 7, 8, 9], 2) == 12", "assert add_elements([1, 2, 3, 4, 5, 6, 7, 8, 9], 1) == 8", "assert add_elements([1, 2, 3, 4, 5, 6, 7, 8, 9], 2) == 23", "assert add_elements([11, 22, 33, 44, 55, 66, 77, 88, 99], 1) == 677", "assert add_elements([1, 2, 3, 4, 5, 6, 7, 8, 9], 0) == 1", "assert add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 3) == 21", "assert add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 10) == 0", "assert add_elements([1, 2, 3, 4, 5, 6, 7, 8, 9], 3) == 21", "assert add_elements([1, 2, 3, 4, 5, 6, 7, 8, 9], 2) == 6", "assert add_elements([1, 2, 3, 4, 5, 6, 7, 8, 9], 5) == 0", "assert add_elements([1, 2, 3, 4, 5, 6, 7, 8, 9], 6) == 0", "assert add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 2) == 24", "assert add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 3) == 24", "assert add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 1) == 21", "assert add_elements([1, 2, 3, 4, 5, 6, 7, 8, 9], 1) == 22", "assert add_elements([1, 2, 3, 4, 5, 6, 7, 8, 9], 0) == 21", "assert add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 2) == 19", "assert add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 5) == 19", "assert add_elements([1, 2, 3, 4, 5, 6, 7, 8, 9], 3) == 17", "assert add_elements([11, 22, 33, 44, 55, 66, 77, 88, 99], 2) == 117", "assert add_elements([1, 2, 3, 4, 5, 6, 7, 8, 9], 5) == 30", "assert add_elements([1, 2, 3, 4, 5, 6, 7, 8, 9], 2) == 20", "assert add_elements([1, 2, 3, 4, 5, 6, 7, 8, 9], 1) == 20", "assert add_elements([1, 2, 3, 4, 5, 6, 7, 8, 9], 6) == 45", "assert add_elements([1, 2, 3, 4, 5, 6, 7, 8, 9], 7) == 46", "assert add_elements([1, 2, 3, 4, 5, 6, 7, 8, 9], 8) == 47", "assert add_elements([1, 2, 3, 4, 5, 6, 7, 8, 9], 9) == 48"]}
{"HumanEval/123": ["assert get_odd_collatz(1) == [1]", "assert get_odd_collatz(2) == []", "assert get_odd_collatz(3) == [3]", "assert get_odd_collatz(4) == [4, 2]", "assert get_odd_collatz(5) == [1, 5]", "assert get_odd_collatz(6) == [6, 3, 2, 1]", "assert get_odd_collatz(7) == [7, 3, 10, 5, 16, 8, 4, 2, 1]", "assert get_odd_collatz(8) == [8, 4, 2, 1]", "assert get_odd_collatz(9) == [9, 4, 2, 1]", "assert get_odd_collatz(10) == [10, 5, 16, 8, 4, 2, 1]", "assert get_odd_collatz(4) == [2, 4]", "assert get_odd_collatz(6) == [3, 10, 5]", "assert get_odd_collatz(7) == [3, 10, 5, 16, 8, 4, 2, 1]", "assert get_odd_collatz(8) == [2, 4, 8, 16, 32, 16, 8, 4, 2, 1]", "assert get_odd_collatz(9) == [3, 10, 5, 16, 8, 4, 2, 1, 4, 8, 16]", "assert get_odd_collatz(10) == [3, 10, 5, 16, 8, 4, 2, 1, 4, 8, 16, 32]", "assert get_odd_collatz(6) == [3, 9, 6]", "assert get_odd_collatz(7) == [3, 15, 5, 16, 8, 4, 2, 1]", "assert get_odd_collatz(8) == [4, 8, 2, 4, 8, 4, 2, 1]", "assert get_odd_collatz(9) == [3, 9, 6, 18, 12, 6, 0, 6, 12, 0]", "assert get_odd_collatz(7) == [5, 16, 8, 4, 2, 1]", "assert get_odd_collatz(4) == [4]", "assert get_odd_collatz(6) == [6, 3]", "assert get_odd_collatz(7) == [7, 3, 11]", "assert get_odd_collatz(6) == [3, 9, 2, 4, 1]", "assert get_odd_collatz(8) == [6, 10, 5, 16, 8, 4, 2, 1]", "assert get_odd_collatz(9) == [3, 15, 5, 16, 8, 4, 2, 1]", "assert get_odd_collatz(10) == [6, 10, 5, 16, 8, 4, 2, 1]", "assert get_odd_collatz(6) == [3, 10]", "assert get_odd_collatz(9) == [3, 9, 27, 81, 243, 727, 2187, 6561, 17287]", "assert get_odd_collatz(10) == [7, 14, 28, 42, 66, 92, 120, 154, 190, 232]", "assert get_odd_collatz(7) == [7, 1, 3, 9]", "assert get_odd_collatz(9) == [9, 4, 2, 1, 3, 7, 1, 9]", "assert get_odd_collatz(8) == [3, 10, 5, 16, 8, 4, 2, 1]", "assert get_odd_collatz(9) == [7, 14, 11, 7, 14, 11, 7, 14, 11]", "assert get_odd_collatz(10) == [5, 10, 16, 8, 4, 2, 1, 5, 10, 16, 8, 4, 2, 1]", "assert get_odd_collatz(6) == [3, 9, 2, 6, 1]", "assert get_odd_collatz(7) == [3, 10, 2, 5, 1]", "assert get_odd_collatz(8) == [4, 8, 2, 4, 1]", "assert get_odd_collatz(9) == [3, 9, 2, 5, 1]", "assert get_odd_collatz(10) == [2, 4, 6, 2, 1]", "assert get_odd_collatz(9) == [5, 16, 8, 4, 2, 1, 9, 255]", "assert get_odd_collatz(10) == [3, 10, 5, 16, 8, 4, 2, 1, 9, 255]", "assert get_odd_collatz(6) == [6, 3, 10]", "assert get_odd_collatz(7) == [7, 35, 106, 32, 16, 8, 4, 2, 1]", "assert get_odd_collatz(9) == [9, 46, 23, 14, 7, 13, 10, 36, 18, 5, 2, 1]", "assert get_odd_collatz(7) == [3, 9, 2, 6, 1, 4, 8, 2, 6, 1]", "assert get_odd_collatz(8) == [3, 9, 2, 6, 1, 4, 8, 2, 6, 1, 7]", "assert get_odd_collatz(9) == [3, 9, 2, 6, 1, 4, 8, 2, 6, 1, 7, 9]", "assert get_odd_collatz(7) == [7, 11, 16, 5, 9, 2, 6, 1]", "assert get_odd_collatz(6) == [3, 9, 15, 21, 65, ...]", "assert get_odd_collatz(1000) == [1000, 500, 250, 125, 62, 31, 16, 8, 4, 2, 1]", "assert get_odd_collatz(-1) == []", "assert get_odd_collatz(0) == []", "assert get_odd_collatz(7) == [9, 26, 13, 7, 20, 11, 6, 1]", "assert get_odd_collatz(8) == [6, 18, 36, 24, 12, 48, 28, 14, 8]", "assert get_odd_collatz(7) == [7, 1]", "assert get_odd_collatz(4) == [4, 2, 1]", "assert get_odd_collatz(7) == [7, 3, 2, 1, 4, 2, 1]", "assert get_odd_collatz(8) == [8, 4, 2, 1, 4, 2, 1, 5, 16, 8, 4, 2, 1]", "assert get_odd_collatz(9) == [8, 10, 5, 16, 8, 4, 2, 1]", "assert get_odd_collatz(7) == [7, 16, 8, 4, 2, 1]", "assert get_odd_collatz(9) == [9, 46, 23, 17, 11, 7, 3, 1]", "assert get_odd_collatz(10) == [10, 50, 25, 12, 6, 3, 1]", "assert get_odd_collatz(7) == [3, 15, 10, 5, 16, 8, 4, 2, 1]", "assert get_odd_collatz(7) == [7, 14, 5, 18, 9, 27, 12, 19, 11, 20, 14, 26, 13, 21, 18, 9, 4, 2, 1]", "assert get_odd_collatz(7) == [7, 3, 1]", "assert get_odd_collatz(9) == [9, 4, 2, 1, 3, 1]", "assert get_odd_collatz(6) == [3, 9, 6, 10, 5, 16, 9, 5, 1, 4, 2, 1]", "assert get_odd_collatz(8) == [4, 8, 2, 1]", "assert get_odd_collatz(9) == [3, 9, 6, 10, 5, 16, 9, 5, 1, 4, 2, 1]", "assert get_odd_collatz(10) == [1, 5, 10, 25, 12, 6, 3, 1]", "assert get_odd_collatz(9) == [3, 9, 27, 81, 243, 729, 2187, 6561, 19723, 52433, 168081, 417209, 1000001]", "assert get_odd_collatz(6) == [3, 9, 2, 6]", "assert get_odd_collatz(6) == [3, 9, 15, 21, 6]", "assert get_odd_collatz(7) == [3, 15, 46, 101, 204, 408, 816]", "assert get_odd_collatz(8) == [2, 4, 8, 16, 32, 64, 128, 256]", "assert get_odd_collatz(9) == [3, 9, 27, 81, 243, 687, 1964, 5929]", "assert get_odd_collatz(10) == [1, 10]", "assert get_odd_collatz(9) == [3, 10, 5, 16, 8, 4, 2, 1, 9]", "assert get_odd_collatz(10) == [3, 10, 5, 16, 8, 4, 2, 1, 9, 7]", "assert get_odd_collatz(7) == [5, 13, 11, 7, 17, 11, 7, 11, 13]", "assert get_odd_collatz(8) == [6, 10, 12, 14, 16, 18, 20, 22, 24]", "assert get_odd_collatz(9) == [8, 16, 12, 8, 12, 16, 20, 16, 24, 12]", "assert get_odd_collatz(10) == [10, 5, 10, 5, 10, 5, 10, 5, 10, 5]", "assert get_odd_collatz(7) == [2, 7, 11, 13, 7, 2]", "assert get_odd_collatz(8) == [4, 8, 16, 8, 4, 2, 1]", "assert get_odd_collatz(9) == [3, 9, 6, 12, 10, 6, 3, 9, 6]", "assert get_odd_collatz(7) == [3, 9, 2, 6, 10, 5]", "assert get_odd_collatz(8) == [3, 9, 2, 6, 10, 5, 13, 7]", "assert get_odd_collatz(9) == [3, 9, 2, 6, 10, 5, 13, 7, 19]", "assert get_odd_collatz(10) == [3, 9, 2, 6, 10, 5, 13, 7, 19, 25]", "assert get_odd_collatz(7) == [3, 9, 2, 4, 1, 6, 3, 9, 2, 4, 1]", "assert get_odd_collatz(8) == [3, 9, 2, 4, 1, 6, 3, 9, 2, 4, 1, 8, 7, 6, 5, 4, 3, 2, 1]", "assert get_odd_collatz(7) == [7, 13, 5, 1, 7, 3, 1]", "assert get_odd_collatz(10) == [10, 5, 1]", "assert get_odd_collatz(8) == [3, 10, 2, 5, 1, 2, 4, 8]", "assert get_odd_collatz(9) == [3, 10, 2, 5, 1, 2, 4, 8, 16]", "assert get_odd_collatz(10) == [3, 10, 2, 5, 1, 2, 4, 8, 16, 32]", "assert get_odd_collatz(6) == [3, 9, 15, 21, 28, 35]", "assert get_odd_collatz(7) == [3, 9, 15, 21, 28, 35, 46, 51]", "assert get_odd_collatz(7) == [3, 9, 2, 4, 1, 7]", "assert get_odd_collatz(8) == [6, 10, 5, 10, 5, 10, 6]", "assert get_odd_collatz(7) == [7, 11, 16, 5, 9, 2, 4, 1]", "assert get_odd_collatz(9) == [9, 3, 10, 5, 16, 8, 4, 2, 1]"]}
{"HumanEval/124": ["assert valid_date('03-11-2000') == True", "assert valid_date('15-01-2012') == False", "assert valid_date('04-0-2040') == False", "assert valid_date('06-04-2020') == True", "assert valid_date('06/04/2020') == False", "assert valid_date(\"03-11-2000\") == True", "assert valid_date(\"15-01-2012\") == False", "assert valid_date(\"04-0-2040\") == False", "assert valid_date(\"06-04-2020\") == True", "assert valid_date(\"06/04/2020\") == False", "assert valid_date('02-29-2020') == True", "assert valid_date('01-31-2018') == False", "assert valid_date('01-01-2021') == True", "assert valid_date('01-02-2020') == False", "assert valid_date('03-31-2020') == False", "assert valid_date('04-01-2020') == False", "assert valid_date('06-30-2020') == False", "assert valid_date('02-28-2020') == False", "assert valid_date('03-01-2020') == False", "assert valid_date('05-01-2020') == False", "assert valid_date('06-01-2020') == False", "assert valid_date('07-01-2020') == False", "assert valid_date('08-01-2020') == False", "assert valid_date('09-01-2020') == False", "assert valid_date('10-01-2020') == False", "assert valid_date('11-01-2020') == False", "assert valid_date('12-01-2020') == False", "assert valid_date('01-31-2020') == False", "assert valid_date('01-01-2012') == False", "assert valid_date('01-31-2021') == False", "assert valid_date('02-28-2021') == False", "assert valid_date('03-01-2021') == False", "assert valid_date('03-31-2021') == False", "assert valid_date('04-01-2021') == False", "assert valid_date('04-30-2021') == False", "assert valid_date('05-01-2021') == False", "assert valid_date('06-01-2021') == False", "assert valid_date('06-30-2021') == False", "assert valid_date('07-01-2021') == False", "assert valid_date('08-01-2021') == False", "assert valid_date('09-01-2021') == False", "assert valid_date('10-01-2021') == False", "assert valid_date('11-01-2021') == False", "assert valid_date('12-01-2021') == False", "assert valid_date('01-31-2012') == False", "assert valid_date('04-05-2020') == False", "assert valid_date('06-13-2019') == False", "assert valid_date('04-10-2020') == False", "assert valid_date('05-12-2020') == False", "assert valid_date('03-01-2021') == True", "assert valid_date('02-29-2021') == False", "assert valid_date('01-31-2019') == False", "assert valid_date('01-01-2020') == False", "assert valid_date('02-01-2020') == False", "assert valid_date('03-14-2020') == False", "assert valid_date('03-15-2020') == False", "assert valid_date('01-05-2023') == True", "assert valid_date('01-03-2023') == False", "assert valid_date('02-29-2020') == False", "assert valid_date('01-01-2020') == True", "assert valid_date('04-30-2020') == False", "assert valid_date('06-12-2020') == False", "assert valid_date('06-01-2020') == True", "assert valid_date('06-02-2020') == False", "assert valid_date('04-01-2012') == False", "assert valid_date('01-31-2021') == True", "assert valid_date('02-28-2022') == True", "assert valid_date('01-01-2023') == True", "assert valid_date('02-29-2023') == True", "assert valid_date('03-15-2023') == False", "assert valid_date('02-28-2023') == False", "assert valid_date('03-31-2023') == False", "assert valid_date('05-01-2012') == False", "assert valid_date('07-15-2011') == False", "assert valid_date('01-01-2000') == False", "assert valid_date('02-28-2022') == False", "assert valid_date('01-01-2023') == False", "assert valid_date('01-01-2021') == False", "assert valid_date('01-01-2022') == False", "assert valid_date('01-12-2000') == False", "assert valid_date('01-01-2001') == False", "assert valid_date('02-29-2000') == False", "assert valid_date('03-01-2000') == False", "assert valid_date('04-01-2000') == False", "assert valid_date('05-01-2000') == False", "assert valid_date('06-01-2000') == False", "assert valid_date('07-01-2000') == False", "assert valid_date('08-01-2000') == False", "assert valid_date('09-01-2000') == False", "assert valid_date('10-01-2000') == False", "assert valid_date('11-01-2000') == False", "assert valid_date('12-01-2000') == False", "assert valid_date('06-31-2020') == False", "assert valid_date('01-01-2019') == False", "assert valid_date('01-31-2022') == False", "assert valid_date('03-15-2022') == False", "assert valid_date('04-04-2022') == False", "assert valid_date('03-01-2023') == True", "assert valid_date('04-15-2020') == False", "assert valid_date('06-03-2020') == False", "assert valid_date('05-31-2022') == False", "assert valid_date('06-12-2023') == False", "assert valid_date('07-15-2022') == False", "assert valid_date('05-05-2022') == True", "assert valid_date('07-10-2011') == True", "assert valid_date('08-12-2005') == True"]}
{"HumanEval/125": ["assert split_words(\"hello world\") == [\"hello\", \"world\"]", "assert split_words(\"hello,world\") == [\"hello\", \"world\"]", "assert split_words(\"hello world!\") == [\"hello\", \"world\"]", "assert split_words(\"hello,world!\") == [\"hello\", \"world\"]", "assert split_words(\"hello,world,xyz\") == [\"hello\", \"world\", \"xyz\"]", "assert split_words(\"hello world!\") == [\"hello\", \"world\", \"!\"]", "assert split_words(\"hello world!?\") == [\"hello\", \"world\"]", "assert split_words(\"hello world!?!\") == [\"hello\", \"world\"]", "assert split_words(\"hello world!?!?\") == [\"hello\", \"world\"]", "assert split_words(\"hello world!?!?!\") == [\"hello\", \"world\"]", "assert split_words(\"hello world!?!?!?\") == [\"hello\", \"world\"]", "assert split_words(\"hello world!?!?!?!\") == [\"hello\", \"world\"]", "assert split_words(\"hello world!?!?!?!?\") == [\"hello\", \"world\"]", "assert split_words(\"hello world!?!?!?!?!\") == [\"hello\", \"world\"]", "assert split_words(\"hello world!?!?!?!?!?\") == [\"hello\", \"world\"]", "assert split_words(\"hello world!?!?!?!?!?!\") == [\"hello\", \"world\"]", "assert split_words(\"hello,world,howareyou?\") == [\"hello\", \"world\", \"howareyou?\"]", "assert split_words(\"hello world hello world\") == [\"hello\", \"world\", \"hello\", \"world\"]", "assert split_words(\"hello world!\") == [\"hello\", \"world!\"]", "assert split_words(\"hello,world!\") == [\"hello\", \"world!\"]", "assert split_words(\"hello   world\") == [\"hello\", \"world\"]", "assert split_words(\"hello   world!\") == [\"hello\", \"world\", \"!\"]", "assert split_words(\"hello world! \") == [\"hello\", \"world\", \"!\"]", "assert split_words(\"hello world!   \") == [\"hello\", \"world\", \"!\"]", "assert split_words(\"hello world! \") == [\"hello\", \"world\"]", "assert split_words(\"hello world!   \") == [\"hello\", \"world\"]", "assert split_words(\"hello   world!\") == [\"hello\", \"world\"]", "assert split_words(\"hello     world\") == [\"hello\", \"world\"]", "assert split_words(\"hello      world\") == [\"hello\", \"world\"]", "assert split_words(\"hello        world\") == [\"hello\", \"world\"]", "assert split_words(\"hello       world\") == [\"hello\", \"world\"]", "assert split_words(\"hello         world\") == [\"hello\", \"world\"]", "assert split_words(\"hello          world\") == [\"hello\", \"world\"]", "assert split_words(\"hello           world\") == [\"hello\", \"world\"]", "assert split_words(\"hello            world\") == [\"hello\", \"world\"]", "assert split_words(\"hello world?\") == [\"hello\", \"world\"]", "assert split_words(\"hello world!!\") == [\"hello\", \"world\"]", "assert split_words(\"hello world!!!\") == [\"hello\", \"world\"]", "assert split_words(\"hello world?!\") == [\"hello\", \"world\"]", "assert split_words(\"hello world!!!?\") == [\"hello\", \"world\"]", "assert split_words(\"hello world!!!?!\") == [\"hello\", \"world\"]", "assert split_words(\"hello world!!!!!\") == [\"hello\", \"world\"]", "assert split_words(\"hello world!!!!!?\") == [\"hello\", \"world\"]", "assert split_words(\"hello world!!!!!?!\") == [\"hello\", \"world\"]", "assert split_words(\"hello world!!!!!?!?\") == [\"hello\", \"world\"]", "assert split_words(\"hello world!!!!!?!?!\") == [\"hello\", \"world\"]", "assert split_words(\"hello world hello world hello world\") == [\"hello\", \"world\", \"hello\", \"world\"]", "assert split_words(\"hello world hello world hello world hello world\") == [\"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\"]", "assert split_words(\"hello world hello world hello world hello world hello world\") == [\"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\"]", "assert split_words(\"hello world hello world hello world hello world hello world hello world\") == [\"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\"]", "assert split_words(\"hello world hello world hello world hello world hello world hello world hello world\") == [\"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\"]", "assert split_words(\"hello world,\") == [\"hello\", \"world,\"]", "assert split_words(\"hello,world,\") == [\"hello\", \"world\"]", "assert split_words(\"hello world !\") == [\"hello\", \"world\"]", "assert split_words(\"hello   world !\") == [\"hello\", \"world\"]", "assert split_words(\"hello,world!?\") == [\"hello\", \"world\"]", "assert split_words(\"hello world!?!!!\") == [\"hello\", \"world\"]", "assert split_words(\"hello world!?!!!!!\") == [\"hello\", \"world\"]", "assert split_words(\"hello world!?!!!!!?\") == [\"hello\", \"world\"]", "assert split_words(\"hello world!?!!!!!?!\") == [\"hello\", \"world\"]", "assert split_words(\"hello world!?!!!!!?!?\") == [\"hello\", \"world\"]", "assert split_words(\"hello world!?!!!!!?!?!?\") == [\"hello\", \"world\"]", "assert split_words(\"hello,world,\") == [\"hello\", \"world\", \"\"]", "assert split_words(\"hello,world, \") == [\"hello\", \"world\", \"\"]", "assert split_words(\"hello,world,   \") == [\"hello\", \"world\", \"\"]", "assert split_words(\"hello,world,    \") == [\"hello\", \"world\", \"\"]", "assert split_words(\"hello,world,     \") == [\"hello\", \"world\", \"\"]", "assert split_words(\"hello,world,      \") == [\"hello\", \"world\", \"\"]", "assert split_words(\"hello,world,       \") == [\"hello\", \"world\", \"\"]", "assert split_words(\"hello,world,        \") == [\"hello\", \"world\", \"\"]", "assert split_words(\"hello,world,         \") == [\"hello\", \"world\", \"\"]", "assert split_words(\"hello,world,          \") == [\"hello\", \"world\", \"\"]", "assert split_words(\"hello world,hello world\") == [\"hello\", \"world\", \"hello\", \"world\"]", "assert split_words(\"hello world,hello world,hello world\") == [\"hello\", \"world\", \"hello\", \"world\"]", "assert split_words(\"hello world,xyz\") == [\"hello\", \"world\", \"xyz\"]", "assert split_words(\"hello world,xyz!\") == [\"hello\", \"world\", \"xyz\"]", "assert split_words(\"hello world ?\") == [\"hello\", \"world\"]", "assert split_words(\"hello world !?\") == [\"hello\", \"world\"]", "assert split_words(\"hello world ?!\") == [\"hello\", \"world\"]", "assert split_words(\"hello world !?!\") == [\"hello\", \"world\"]", "assert split_words(\"hello world ?!?\") == [\"hello\", \"world\"]", "assert split_words(\"hello world ?!?!\") == [\"hello\", \"world\"]", "assert split_words(\"hello world ?!?!?\") == [\"hello\", \"world\"]", "assert split_words(\"hello world,xyz,abcde\") == [\"hello\", \"world\", \"xyz\", \"abcde\"]", "assert split_words(\"hello world,xyz,abcde,fghij\") == [\"hello\", \"world\", \"xyz\", \"abcde\", \"fghij\"]", "assert split_words(\"hello world,xyz,abcde,fghij,klmnop\") == [\"hello\", \"world\", \"xyz\", \"abcde\", \"fghij\", \"klmnop\"]", "assert split_words(\"hello world,xyz,abcde,fghij,klmnop,qrstuvwxyza\") == [\"hello\", \"world\", \"xyz\", \"abcde\", \"fghij\", \"klmnop\", \"qrstuvwxyza\"]", "assert split_words(\"hello world ! \") == [\"hello\", \"world\"]", "assert split_words(\"hello world hello world hello world hello world hello world\") == [\"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\"]", "assert split_words(\"hello world hello world hello world hello world hello world hello world\") == [\"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\"]", "assert split_words(\"hello world hello world hello world hello world hello world hello world hello world\") == [\"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\"]", "assert split_words(\"hello,world,hello\") == [\"hello\", \"world\", \"hello\"]", "assert split_words(\"hello world,hello world,hello world,hello world\") == [\"hello\", \"world\", \"hello\", \"world\", \"hello\"]", "assert split_words(\",hello,world\") == [\"hello\", \"world\"]", "assert split_words(\",hello,world,\") == [\"hello\", \"world\", \"\"]", "assert split_words(\"hello,world,   ,\") == [\"hello\", \"world\"]", "assert split_words(\"hello,world,   ,,\") == [\"hello\", \"world\"]", "assert split_words(\"hello,world,   ,, ,\") == [\"hello\", \"world\"]", "assert split_words(\"hello,world,   ,, ,,\") == [\"hello\", \"world\"]", "assert split_words(\"hello,world,   ,, ,, ,\") == [\"hello\", \"world\"]", "assert split_words(\"hello,world,   ,, ,, ,,\") == [\"hello\", \"world\"]"]}
{"HumanEval/126": ["assert is_sorted([5]) == True", "assert is_sorted([1, 2, 3, 4, 5]) == True", "assert is_sorted([1, 3, 2, 4, 5]) == False", "assert is_sorted([1, 2, 3, 4, 5, 6]) == True", "assert is_sorted([1, 2, 3, 4, 5, 6, 7]) == True", "assert is_sorted([1, 3, 2, 4, 5, 6, 7]) == False", "assert is_sorted([1, 2, 2, 3, 3, 4]) == True", "assert is_sorted([1, 2, 2, 2, 3, 4]) == False", "assert is_sorted([1, 2, 2, 3, 3, 4]) == False", "assert is_sorted([1, 2, 2, 2, 3, 4, 5]) == False", "assert is_sorted([1, 2, 2, 2, 2, 2]) == False", "assert is_sorted([1, 2, 2, 2, 2, 2, 3, 4]) == False", "assert is_sorted([1, 2, 2, 2, 2, 2, 2]) == False", "assert is_sorted([1, 2, 2, 2, 2, 2, 3]) == False"]}
{"HumanEval/127": ["assert intersection((1, 2), (2, 4)) == \"NO\"", "assert intersection((-1, 1), (0, 4)) == \"NO\"", "assert intersection((-3, -1), (-5, 5)) == \"YES\"", "assert intersection((1, 2), (2, 3)) == \"NO\""]}
{"HumanEval/128": ["assert prod_signs([1, 2, 2, -4]) == -9", "assert prod_signs([0, 1]) == 0", "assert prod_signs([]) == None"]}
{"HumanEval/129": ["assert minPath([[1,2,3], [4,5,6], [7,8,9]], 3) == [1, 2, 1]", "assert minPath([[5,9,3], [4,1,6], [7,8,2]], 1) == [1]", "assert minPath([[1,2,3], [4,5,6], [7,8,9]], 2) == [1, 2, 3, 1]", "assert minPath([[1,2,3], [4,5,6], [7,8,9]], 4) == [1, 2, 3, 7, 8, 9]", "assert minPath([[5,9,3], [4,1,6], [7,8,2]], 2) == [1, 4, 5, 6]", "assert minPath([[5,9,3], [4,1,6], [7,8,2]], 3) == [1, 2, 4, 5, 6]", "assert minPath([[1,2,3], [4,5,6], [7,8,9]], 2) == [1, 2, 3]", "assert minPath([[5,9,3], [4,1,6], [7,8,2]], 2) == [4, 5, 6]", "assert minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3) == [1, 2, 1]", "assert minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1) == [1]", "assert minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 2) == [2, 3, 1]", "assert minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 2) == [2, 6]", "assert minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 2) == [1, 2, 3, 1]", "assert minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 2) == [1, 6]", "assert minPath([[1,2,3], [4,5,6], [7,8,9]], 2) == [2, 1, 3]", "assert minPath([[5,9,3], [4,1,6], [7,8,2]], 3) == [1, 2, 1]", "assert minPath([[1,2,3], [4,5,6], [7,8,9]], 4) == []", "assert minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 2) == [2, 1, 3]", "assert minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 2) == [6, 5, 4]", "assert minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 4) == [3, 2, 1, 9]", "assert minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 4) == [1, 2, 3, 1]", "assert minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 2) == [4, 1, 6]", "assert minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 3) == [1, 2, 1]", "assert minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 4) == []", "assert minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 2) == [2, 3]", "assert minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 2) == [4, 5]", "assert minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 2) == [1, 2, 2, 3]", "assert minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 4) == [1, 2, 3, 7]", "assert minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 5) == [1, 2, 3, 1, 1]", "assert minPath([[1,2,3],[4,5,6],[7,8,9]],3) == [1,2,1]", "assert minPath([[5,9,3],[4,1,6],[7,8,2]],1) == [1]", "assert minPath([[1,2,3],[4,5,6],[7,8,9]],2) == [2,1,3]", "assert minPath([[5,9,3],[4,1,6],[7,8,2]],3) == [1,2,1]", "assert minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 4) == [1, 2, 3, 7, 8, 9]", "assert minPath([[1,2,3],[4,5,6],[7,8,9]],2) == [1,2,3]", "assert minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 4) == [1, 2, 2, 1]", "assert minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 2) == [1, 2]", "assert minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 3) == [5, 6, 9]", "assert minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 2) == [1, 2, 2, 1]", "assert minPath([[1,2,3], [4,5,6], [7,8,9]], 1) == [1]", "assert minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 3) == [1, 2, 3]", "assert minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 2) == [4, 1]", "assert minPath([[1,2,3],[4,5,6],[7,8,9]], 3) == [1, 2, 1]", "assert minPath([[5,9,3],[4,1,6],[7,8,2]], 1) == [1]", "assert minPath([[1,2,3],[4,5,6],[7,8,9]], 2) == [1, 2, 3]", "assert minPath([[5,9,3],[4,1,6],[7,8,2]], 2) == [1, 2, 6]", "assert minPath([[1,2,3],[4,5,6],[7,8,9]], 4) == [1, 2, 3, 1]", "assert minPath([[5,9,3],[4,1,6],[7,8,2]], 4) == [1, 2, 6, 5]", "assert minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 4) == [1, 2, 2, 3]", "assert minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 4) == []", "assert minPath([[5,9,3],[4,1,6],[7,8,2]], 2) == [4, 1]", "assert minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 3) == [4, 5, 6]", "assert minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 5) == []", "assert minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 2) == [1, 2, 1, 2, 1]", "assert minPath([[1,2,3],[4,5,6],[7,8,9]],3) == [1,2,3]", "assert minPath([[1,2,3],[4,5,6],[7,8,9]],2) == [1,2,3,1]", "assert minPath([[5,9,3],[4,1,6],[7,8,2]],3) == [1,2,3,1,5,9,6,8,7]", "assert minPath([[1,2,3], [4,5,6], [7,8,9]], 2) == [2, 3]", "assert minPath([[5,9,3], [4,1,6], [7,8,2]], 2) == [1, 6]", "assert minPath([[5,9,3],[4,1,6],[7,8,2]], 2) == [4, 1, 6]", "assert minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 2) == [4, 5, 6]", "assert minPath([[1,2,3],[4,5,6],[7,8,9]], 2) == [2, 3, 1]", "assert minPath([[5,9,3],[4,1,6],[7,8,2]], 2) == [4, 5, 6]", "assert minPath([[5,9,3],[4,1,6],[7,8,2]], 4) == [4, 5, 6, 7]", "assert minPath([[1,2,3],[4,5,6],[7,8,9]], 2) == [2, 3]", "assert minPath([[5,9,3],[4,1,6],[7,8,2]], 3) == [1, 2, 3]", "assert minPath([[1,2,3],[4,5,6],[7,8,9]], 4) == []", "assert minPath([[5,9,3],[4,1,6],[7,8,2]], 3) == [1, 2, 1]", "assert minPath([[5,9,3],[4,1,6],[7,8,2]],3) == [1,2,3,1,9,6,5,4,8,7]", "assert minPath([[5,9,3], [4,1,6], [7,8,2]], 3) == [4, 5, 6]", "assert minPath([[5,9,3], [4,1,6], [7,8,2]], 4) == []", "assert minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 2) == [1, 2, 1, 2]", "assert minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 4) == [3, 2, 1, 3]", "assert minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 2) == [2, 3, 2]", "assert minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 2) == [1, 2, 6, 1]", "assert minPath([[5,9,3],[4,1,6],[7,8,2]], 4) == []", "assert minPath([[1,2,3], [4,5,6], [7,8,9]], 4) == [1, 2, 3, 1]", "assert minPath([[5,9,3], [4,1,6], [7,8,2]], 2) == [1, 2]", "assert minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 4) == [1, 2, 3, 1, 2, 3, 1]", "assert minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 2) == [1, 2, 6, 5]", "assert minPath([[1,2,3],[4,5,6],[7,8,9]], 2) == [2, 1, 3]", "assert minPath([[5,9,3],[4,1,6],[7,8,2]], 2) == [1, 6]", "assert minPath([[5,9,3],[4,1,6],[7,8,2]], 2) == [1, 2, 1]", "assert minPath([[5,9,3],[4,1,6],[7,8,2]],3) == [1,2,5,6,9,3]", "assert minPath([[1,2,3],[4,5,6],[7,8,9]],4) == [2,1,3,5,6,7,8,9]", "assert minPath([[5,9,3],[4,1,6],[7,8,2]],3) == [1,2,3,1,5,9,3]", "assert minPath([[1,2,3],[4,5,6],[7,8,9]],4) == [1,2,3,1,5,9,3,7,8,2]", "assert minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 4) == [1, 2, 1, 3]", "assert minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1) == [1, 6]", "assert minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 1) == [1]", "assert minPath([[5,9,3],[4,1,6],[7,8,2]], 2) == [1]", "assert minPath([[5,9,3], [4,1,6], [7,8,2]], 2) == [6, 5]", "assert minPath([[5,9,3],[4,1,6],[7,8,2]], 2) == [1, 2]", "assert minPath([[1,2,3],[4,5,6],[7,8,9]], 1) == [1]", "assert minPath([[1,2,3], [4,5,6], [7,8,9]], 2) == [2, 3, 1]", "assert minPath([[5,9,3], [4,1,6], [7,8,2]], 2) == [4, 5, 1]", "assert minPath([[1,2,3],[4,5,6],[7,8,9]], 5) == [1, 2, 3, 1, 1]", "assert minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 5) == [1, 2, 3, 1, 2, 3, 1, 2, 3, 1]", "assert minPath([[5,9,3],[4,1,6],[7,8,2]],3) == [1,2,3,1,5,9,6]", "assert minPath([[1,2,3],[4,5,6],[7,8,9]],4) == [1,2,3,1,5,9,6,7,8,9]", "assert minPath([[5,9,3],[4,1,6],[7,8,2]],3) == [3,6,5]", "assert minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 4) == [1, 2, 3, 1, 1]", "assert minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 5) == [1, 2, 3, 1, 1, 1]"]}
{"HumanEval/130": ["assert tri(1) == [3]", "assert tri(2) == [1, 3]", "assert tri(3) == [1, 3, 2, 8]", "assert tri(4) == [3, 12, 15, 24]", "assert tri(5) == [1, 3, 12, 45, 84]", "assert tri(6) == [3, 12, 45, 296, 840, 2088]", "assert tri(4) == [3, 1, 2, 8]", "assert tri(5) == [1, 3, 2, 8, 5]", "assert tri(6) == [1, 3, 2, 8, 5, 3]", "assert tri(4) == [3, 6, 9, 24]", "assert tri(5) == [1, 4, 9, 16, 25]", "assert tri(6) == [3, 7, 10, 15, 24, 35]", "assert tri(7) == [1, 4, 7, 11, 18, 27, 43]", "assert tri(8) == [3, 6, 10, 15, 21, 31, 46]", "assert tri(9) == [1, 5, 10, 16, 22, 32, 44, 66]", "assert tri(10) == [3, 7, 11, 18, 24, 33, 49, 70, 99]", "assert tri(4) == [3, 6, 4, 12]", "assert tri(5) == [3, 9, 6, 15, 12]", "assert tri(6) == [6, 12, 10, 18, 15, 12]", "assert tri(5) == [3, 6, 9, 24, 45]", "assert tri(6) == [3, 6, 9, 24, 45, 72]", "assert tri(7) == [3, 6, 9, 24, 45, 72, 110]", "assert tri(8) == [3, 6, 9, 24, 45, 72, 110, 168]", "assert tri(9) == [3, 6, 9, 24, 45, 72, 110, 168, 240]", "assert tri(4) == [3, 12, 9, 24]", "assert tri(6) == [3, 24, 45, 120, 216, 345]", "assert tri(7) == [1, 3, 12, 45, 84, 240, 495]", "assert tri(8) == [3, 24, 45, 120, 216, 345, 720, 1385]", "assert tri(4) == [3, 6, 9, 10]", "assert tri(5) == [3, 6, 9, 10, 11]", "assert tri(6) == [3, 6, 9, 10, 11, 12]", "assert tri(7) == [3, 6, 9, 10, 11, 12, 13]", "assert tri(8) == [3, 6, 9, 10, 11, 12, 13, 14]", "assert tri(9) == [3, 6, 9, 10, 11, 12, 13, 14, 15]", "assert tri(10) == [3, 6, 9, 10, 11, 12, 13, 14, 15, 16]", "assert tri(3) == [1, 3, 2]", "assert tri(4) == [3, 1, 2, 4]", "assert tri(5) == [3, 2, 1, 4, 5]", "assert tri(6) == [3, 2, 1, 4, 5, 6]", "assert tri(5) == [3, 6, 9, 10, 15]", "assert tri(6) == [3, 6, 9, 10, 15, 21]", "assert tri(7) == [3, 6, 9, 10, 15, 21, 34]", "assert tri(8) == [3, 6, 9, 10, 15, 21, 34, 55]", "assert tri(9) == [3, 6, 9, 10, 15, 21, 34, 55, 89]", "assert tri(4) == [3, 6, 9, 15]", "assert tri(5) == [1, 3, 2, 8, 13]", "assert tri(6) == [3, 6, 9, 15, 21, 34]", "assert tri(7) == [1, 3, 2, 8, 13, 24, 42]", "assert tri(8) == [3, 6, 9, 15, 21, 34, 63, 102]", "assert tri(9) == [1, 3, 2, 8, 13, 24, 42, 70, 112]", "assert tri(10) == [3, 6, 9, 15, 21, 34, 63, 102, 183, 324]", "assert tri(4) == [3, 12, 24, 32]", "assert tri(5) == [1, 3, 2, 8, 12]", "assert tri(6) == [3, 12, 24, 32, 48]", "assert tri(7) == [1, 3, 2, 8, 12, 24]", "assert tri(8) == [3, 12, 24, 32, 48, 80]", "assert tri(4) == [3, 6, 9, 18]", "assert tri(5) == [1, 4, 7, 14, 21]", "assert tri(6) == [3, 7, 11, 18, 30, 42]", "assert tri(7) == [1, 3, 11, 21, 34, 55, 81]", "assert tri(8) == [3, 11, 21, 34, 55, 81, 127]", "assert tri(9) == [1, 4, 11, 21, 34, 55, 81, 127, 196]", "assert tri(10) == [3, 11, 21, 34, 55, 81, 127, 196, 289, 441]", "assert tri(5) == [1, 3, 2, 4, 5]", "assert tri(6) == [3, 1, 2, 4, 5, 6]", "assert tri(7) == [1, 3, 2, 4, 5, 6, 7]", "assert tri(8) == [3, 1, 2, 4, 5, 6, 7, 8]", "assert tri(4) == [3, 1, 4, 2]", "assert tri(5) == [3, 2, 5, 1, 4]", "assert tri(6) == [1, 4, 9, 2, 5, 1]", "assert tri(5) == [3, 9, 12, 20, 24]", "assert tri(6) == [6, 15, 20, 35, 51, 70]", "assert tri(7) == [10, 21, 35, 61, 102, 165]", "assert tri(8) == [15, 35, 61, 102, 165, 265, 431]", "assert tri(9) == [20, 50, 90, 180, 360, 600, 1020, 1650]", "assert tri(10) == [20, 50, 90, 180, 360, 600, 1020, 1650, 2650, 4310]", "assert tri(4) == [3, 6, 9, 12]", "assert tri(5) == [1, 3, 2, 8, 10]", "assert tri(6) == [3, 6, 9, 12, 15]", "assert tri(7) == [1, 3, 2, 8, 10, 18]", "assert tri(8) == [3, 6, 9, 12, 15, 21]", "assert tri(4) == [3, 12, 24, 42]", "assert tri(5) == [1, 3, 2, 8, 32]", "assert tri(6) == [3, 12, 24, 42, 120, 288]", "assert tri(7) == [3, 12, 24, 42, 120, 288, 912]", "assert tri(8) == [3, 12, 24, 42, 120, 288, 912, 1364]", "assert tri(9) == [3, 12, 24, 42, 120, 288, 912, 1364, 2024]", "assert tri(10) == [3, 12, 24, 42, 120, 288, 912, 1364, 2024, 3024]", "assert tri(5) == [1, 4, 7, 10, 11]", "assert tri(6) == [3, 7, 10, 13, 16]", "assert tri(7) == [1, 4, 10, 17, 24, 31]", "assert tri(8) == [3, 10, 17, 26, 41, 51, 66]", "assert tri(4) == [3, 6, 1, 8]", "assert tri(7) == [6, 11, 18, 27, 41, 57]", "assert tri(8) == [10, 19, 28, 41, 57, 73, 92]", "assert tri(5) == [3, 6, 9, 15, 21]", "assert tri(7) == [3, 6, 9, 15, 21, 34, 55]", "assert tri(8) == [3, 6, 9, 15, 21, 34, 55, 89]", "assert tri(5) == [3, 2, 1, 8, 5]", "assert tri(6) == [1, 2, 3, 8, 5, 4]", "assert tri(7) == [1, 3, 5, 14, 8, 4, 2]", "assert tri(8) == [3, 1, 2, 8, 5, 4, 1, 9]", "assert tri(9) == [1, 2, 3, 8, 5, 4, 1, 9, 7]", "assert tri(6) == [3, 6, 9, 16, 25, 34]", "assert tri(7) == [1, 4, 9, 16, 25, 34, 55]", "assert tri(8) == [3, 6, 9, 16, 25, 34, 55, 84]", "assert tri(9) == [1, 4, 9, 16, 25, 34, 55, 84, 121]", "assert tri(5) == [1, 4, 7, 11, 14]", "assert tri(6) == [3, 7, 10, 13, 16, 19]", "assert tri(7) == [6, 10, 15, 21, 28, 36]", "assert tri(8) == [10, 18, 26, 38, 50, 58, 70]", "assert tri(9) == [15, 25, 35, 45, 55, 65, 75, 85]", "assert tri(10) == [20, 30, 40, 50, 60, 70, 80, 90, 100]", "assert tri(5) == [3, 9, 6, 18, 30]", "assert tri(6) == [1, 4, 7, 24, 47, 74]", "assert tri(7) == [3, 12, 24, 60, 120, 210]", "assert tri(8) == [1, 7, 18, 56, 162, 418, 832]"]}
{"HumanEval/131": ["assert digits(1) == 1", "assert digits(4) == 0", "assert digits(235) == 15", "assert digits(5) == 5", "assert digits(23) == 0", "assert digits(12345) == 0", "assert digits(123456789) == 0", "assert digits(100) == 0", "assert digits(999) == 99", "assert digits(1000) == 10000", "assert digits(100000) == 100000000", "assert digits(1000000000) == 100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", "assert digits(100) == 50", "assert digits(101) == 101", "assert digits(1000) == 0", "assert digits(1001) == 0", "assert digits(10010) == 0", "assert digits(0) == 0", "assert digits(999999999) == 999999999", "assert digits(23) == 3", "assert digits(5) == 0", "assert digits(9) == 0", "assert digits(8) == 0", "assert digits(10) == 0", "assert digits(234) == 0", "assert digits(2356) == 0", "assert digits(987) == 0", "assert digits(56) == 0", "assert digits(1000000000) == 0", "assert digits(999) == 999", "assert digits(500) == 500", "assert digits(100) == 100", "assert digits(987654321) == 0", "assert digits(100000000) == 0", "assert digits(1234567890) == 0", "assert digits(123456789) == 9900000000", "assert digits(10) == 10", "assert digits(2350) == 1595", "assert digits(999) == 0", "assert digits(500) == 0", "assert digits(25) == 0", "assert digits(2) == 2", "assert digits(2350) == 15", "assert digits(101) == 1", "assert digits(12345) == 19683", "assert digits(100) == 10", "assert digits(10000) == 0", "assert digits(100000) == 0", "assert digits(1000000) == 0", "assert digits(500) == 25", "assert digits(1000) == 100", "assert digits(50) == 25", "assert digits(20) == 0", "assert digits(2354) == 0", "assert digits(1001) == 1", "assert digits(1002) == 2", "assert digits(1003) == 3", "assert digits(1004) == 0", "assert digits(123456789) == 9999999999", "assert digits(234567890) == 0", "assert digits(12345678901234567890) == 0", "assert digits(2355) == 15", "assert digits(23) == 23", "assert digits(2345) == 0", "assert digits(23456789) == 0", "assert digits(101) == 0", "assert digits(12345) == 12345", "assert digits(50) == 0", "assert digits(102) == 2", "assert digits(103) == 3", "assert digits(104) == 0", "assert digits(12345) == 187", "assert digits(123456) == 23210", "assert digits(1234567) == 310300", "assert digits(12345678) == 392200", "assert digits(200) == 0", "assert digits(123456789) == 9", "assert digits(1234567890) == 9", "assert digits(1011) == 1", "assert digits(99) == 0", "assert digits(123) == 0", "assert digits(123456789012345678901234567890) == 0", "assert digits(1004) == 4", "assert digits(1234) == 0", "assert digits(123456) == 0", "assert digits(123456789) == 123456789", "assert digits(99) == 9", "assert digits(23456) == 23456", "assert digits(1000) == 100000", "assert digits(1001) == 1001", "assert digits(10001) == 10001", "assert digits(123) == 12", "assert digits(123456) == 123456", "assert digits(1234567890) == 1234567890", "assert digits(32) == 8"]}
{"HumanEval/132": ["assert is_nested('[]') == False", "assert is_nested('[][]') == False", "assert is_nested('[[[]]]]') == True", "assert is_nested('[[]]') == True", "assert is_nested('[[][]]') == True", "assert is_nested('[[]][[') == True", "assert is_nested('[][]') == True", "assert is_nested('[[][]][[') == True", "assert is_nested('[[][]][[]') == False", "assert is_nested('[[]]') == False", "assert is_nested('[][]][[') == True", "assert is_nested('[[[]]]]]]') == False", "assert is_nested('[[[[]]]]') == True", "assert is_nested('[[[][]]]]') == True", "assert is_nested('[][][]') == True", "assert is_nested('[[[]][[') == True", "assert is_nested('[[[]][[])') == True", "assert is_nested('[[][][][][]]') == True", "assert is_nested('[]]]]]]][[[[[]') == False", "assert is_nested('[[[]]]]') == False", "assert is_nested('[]]]]][[[[[]') == False", "assert is_nested('[[[[[]]]]]]') == True", "assert is_nested('[[[[[[[]]]]]]]]') == True", "assert is_nested('[[[[[[[[[]]]]]]]]]]') == True", "assert is_nested('[[][][][]]') == True", "assert is_nested('[[[][]]]') == True", "assert is_nested('[[[][][]]]]') == True", "assert is_nested('[[[][][][]]]]') == True", "assert is_nested('[[[][][][][]]]]') == True", "assert is_nested('[[][][]]') == True", "assert is_nested('[[][][]][[][][]]') == True", "assert is_nested('[[][][]][[][][]][[][][][][]]') == True", "assert is_nested('[[][][][][][]]') == True", "assert is_nested('[[[]]]][]') == True", "assert is_nested('[][][][]') == True", "assert is_nested('[][][][][]') == True", "assert is_nested('[][][][][][]') == True", "assert is_nested('[][][][][][][]') == True", "assert is_nested('[[[[]]]]') == False", "assert is_nested('[][][]') == False", "assert is_nested('[[][][]][[]') == False", "assert is_nested('[[[[[]]]]]') == True", "assert is_nested('[[[[[[[]]]]]]]') == True", "assert is_nested('[[[[[[[[[]]]]]]]]]') == True", "assert is_nested('[[[[[[[[[[[]]]]]]]]]]]') == True", "assert is_nested('[[[[[[[]]]]]]') == True", "assert is_nested('[[[[[[[[[]]]]]]]]') == True", "assert is_nested('[[[[[[[[[[[]]]]]]]]]]') == True", "assert is_nested('[[[]]]][]') == False", "assert is_nested('[[][][][][][][][][][]]]') == True", "assert is_nested('[[]][]') == False", "assert is_nested('[[][]]') == False", "assert is_nested('[[[][][]]]') == False", "assert is_nested('[[[]]]') == False"]}
{"HumanEval/133": ["assert sum_squares([1, 2, 3]) == 14", "assert sum_squares([1, 4, 9]) == 98", "assert sum_squares([1, 3, 5, 7]) == 84", "assert sum_squares([1.4, 4.2, 0]) == 29", "assert sum_squares([-2.4, 1, 1]) == 6", "assert sum_squares([1, 2, 3, 4]) == 34", "assert sum_squares([-1, 2, 3, 4]) == 12", "assert sum_squares([1, 2, 3, 4]) == 20", "assert sum_squares([1, 2, 3, 4]) == 24", "assert sum_squares([-1, 2, 3, 4]) == 19", "assert sum_squares([5, 6, 7, 8]) == 56", "assert sum_squares([1, 2, 3, 4, 5]) == 55", "assert sum_squares([1, 2, 3, 4]) == 21", "assert sum_squares([5, 23, -11]) == 104", "assert sum_squares([-12, 0, 1]) == 13", "assert sum_squares([12, -3, 1]) == 10", "assert sum_squares([1, 2, 3, 4]) == 28", "assert sum_squares([-1, 2, 3, 4]) == 11", "assert sum_squares([1, 2, 3, 4, 5]) == 60", "assert sum_squares([-1, -2, -3, -4]) == -24", "assert sum_squares([-1, 2, 3, 4]) == 10", "assert sum_squares([-1, -2, -3, -4]) == -14", "assert sum_squares([-1, -2, -3, -4]) == -16", "assert sum_squares([-1, 2, 3, 4]) == 24", "assert sum_squares([1, 2, 3, 4, 5]) == 50", "assert sum_squares([-1, 2, 3, 4]) == 28", "assert sum_squares([-5, -2, 1, 3]) == 14", "assert sum_squares([1, 2, 3, 4]) == 30", "assert sum_squares([-1, -2, -3, -4]) == -12", "assert sum_squares([-1, 2, 3, 4]) == 14", "assert sum_squares([1, 2, 3, 4, 5]) == 30", "assert sum_squares([1, 2, 3, 4, 5]) == 110", "assert sum_squares([-1, -2, -3, -4]) == -28", "assert sum_squares([-1, -2, -3, -4]) == -20", "assert sum_squares([-1, -2, -3, -4]) == -21"]}
{"HumanEval/134": ["assert check_if_last_char_is_a_letter(\"hello world\") == False", "assert check_if_last_char_is_a_letter(\"hello world!\") == True", "assert check_if_last_char_is_a_letter(\"hello world!?\") == False", "assert check_if_last_char_is_a_letter(\"hello world!?  \") == False", "assert check_if_last_char_is_a_letter(\"hello world!?   \") == False", "assert check_if_last_char_is_a_letter(\"hello world!?    \") == False", "assert check_if_last_char_is_a_letter(\"hello world!?     \") == False", "assert check_if_last_char_is_a_letter(\"hello world  !\") == True", "assert check_if_last_char_is_a_letter(\"hello world   !\") == True", "assert check_if_last_char_is_a_letter(\"hello world    !\") == True", "assert check_if_last_char_is_a_letter(\"hello world     !\") == True", "assert check_if_last_char_is_a_letter(\"hello world      !\") == True", "assert check_if_last_char_is_a_letter(\"hello world       !\") == True", "assert check_if_last_char_is_a_letter(\"hello world        !\") == True", "assert check_if_last_char_is_a_letter(\"hello world         !\") == True", "assert check_if_last_char_is_a_letter(\"hello world          !\") == True", "assert check_if_last_char_is_a_letter(\"hello world           !\") == True", "assert check_if_last_char_is_a_letter(\"hello world            !\") == True", "assert check_if_last_char_is_a_letter(\"hello world             !\") == True", "assert check_if_last_char_is_a_letter(\"hello world              !\") == True", "assert check_if_last_char_is_a_letter(\"hello world               !\") == True", "assert check_if_last_char_is_a_letter(\"hello world                 !\") == True", "assert check_if_last_char_is_a_letter(\"hello world                  !\") == True", "assert check_if_last_char_is_a_letter(\"hello world                   !\") == True", "assert check_if_last_char_is_a_letter(\"hello world                    !\") == True", "assert check_if_last_char_is_a_letter(\"hello world                     !\") == True", "assert check_if_last_char_is_a_letter(\"hello world                      !\") == True", "assert check_if_last_char_is_a_letter(\"hello world.\") == True", "assert check_if_last_char_is_a_letter(\"hello world   \") == False", "assert check_if_last_char_is_a_letter(\"hello world.\") == False", "assert check_if_last_char_is_a_letter(\"hello world!?\") == True", "assert check_if_last_char_is_a_letter(\"hello world !?\") == True", "assert check_if_last_char_is_a_letter(\"hello world !? \") == False", "assert check_if_last_char_is_a_letter(\"hello world!   \") == True", "assert check_if_last_char_is_a_letter(\"hello world!  \") == True", "assert check_if_last_char_is_a_letter(\"hello world!   \") == False", "assert check_if_last_char_is_a_letter(\"hello world!  hello world!\") == True", "assert check_if_last_char_is_a_letter(\"hello world!  hello world!  hello world!\") == True", "assert check_if_last_char_is_a_letter(\"hello world!  \") == False", "assert check_if_last_char_is_a_letter(\"   hello world  \") == False", "assert check_if_last_char_is_a_letter(\"hello world    \") == False", "assert check_if_last_char_is_a_letter(\"hello world     \") == False", "assert check_if_last_char_is_a_letter(\"hello world      \") == False", "assert check_if_last_char_is_a_letter(\"hello world       \") == False", "assert check_if_last_char_is_a_letter(\"hello world        \") == False", "assert check_if_last_char_is_a_letter(\"hello world   \") == True", "assert check_if_last_char_is_a_letter(\"hello world  \") == False", "assert check_if_last_char_is_a_letter(\"hello world  \") == True", "assert check_if_last_char_is_a_letter(\"hello world!?  \") == True", "assert check_if_last_char_is_a_letter(\"   hello world\") == False", "assert check_if_last_char_is_a_letter(\"hello world \") == False", "assert check_if_last_char_is_a_letter(\"hello world!?!\") == False", "assert check_if_last_char_is_a_letter(\"hello world!?!?\") == False", "assert check_if_last_char_is_a_letter(\"hello world!?!?!\") == False", "assert check_if_last_char_is_a_letter(\"hello world!?!?!?\") == False", "assert check_if_last_char_is_a_letter(\"hello world!?!?!?!\") == False", "assert check_if_last_char_is_a_letter(\"hello world!?!?!?!?\") == False", "assert check_if_last_char_is_a_letter(\"hello world    \") == True", "assert check_if_last_char_is_a_letter(\"hello world   hello\") == True", "assert check_if_last_char_is_a_letter(\"hello world   hello  \") == False", "assert check_if_last_char_is_a_letter(\"hello world !\") == True", "assert check_if_last_char_is_a_letter(\"hello world   hello   \") == False", "assert check_if_last_char_is_a_letter(\"hello world   hello   hello   \") == True", "assert check_if_last_char_is_a_letter(\"hello world                !\") == True", "assert check_if_last_char_is_a_letter(\"hello world                       !\") == True"]}
{"HumanEval/135": ["assert can_arrange([1, 2, 3, 4, 5]) == 3", "assert can_arrange([1, 2, 3, 4, 5, 6]) == 4", "assert can_arrange([1, 2, 3, 4, 5, 6, 7]) == -1", "assert can_arrange([1, 2, 3, 4, 5, 6, 7, 8]) == -1", "assert can_arrange([1, 2, 3, 4, 5, 6, 7, 8, 9]) == -1", "assert can_arrange([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == -1", "assert can_arrange([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == -1", "assert can_arrange([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == -1", "assert can_arrange([1, 2, 3, 4, 5, 6, 7]) == 5", "assert can_arrange([1, 2, 3, 4, 5, 6, 7, 8]) == 6", "assert can_arrange([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 7", "assert can_arrange([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 8", "assert can_arrange([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == 9", "assert can_arrange([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == 10", "assert can_arrange([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) == -1"]}
{"HumanEval/136": ["assert largest_smallest_integers([-3, -2, -1, 0, 1, 2, 3, 4, 5]) == (None, 1)", "assert largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)", "assert largest_smallest_integers([-2, -1, 0, 1, 2, 3, 4, 5]) == (2, -1)", "assert largest_smallest_integers([0, 0, 0, 0, 0, 0, 0, 0]) == (None, None)", "assert largest_smallest_integers([-1, 0, 1, 2, 3, 4, 5, 6, 7]) == (1, 2)", "assert largest_smallest_integers([-1, 2, 3, 4, 5]) == (None, 5)", "assert largest_smallest_integers([1, 2, 3, 4, 5]) == (3, 5)", "assert largest_smallest_integers([-1, -2, -3, -4, -5]) == (-5, -4)", "assert largest_smallest_integers([-1, 2, 3, 4, 5]) == (3, 5)", "assert largest_smallest_integers([]) == (None, None)", "assert largest_smallest_integers([0, 0, 0, 0, 0]) == (None, None)", "assert largest_smallest_integers([-1, -2, -3, -4, -5]) == (-5, -1)", "assert largest_smallest_integers([1, 2, 3, 4, 5]) == (1, 5)", "assert largest_smallest_integers([0, 1, 2, 3, 4]) == (0, 3)", "assert largest_smallest_integers([-1, 0, 2, 3, 4]) == (-2, 3)", "assert largest_smallest_integers([1, 2, 3, 4, 5, 6]) == (3, 6)", "assert largest_smallest_integers([-1, -2, -3, -4, -5, -6]) == (-5, -6)", "assert largest_smallest_integers([-1, 2, 1, 3, 4, 5]) == (None, 1)", "assert largest_smallest_integers([-2, -1, 0, 1, 2, 3]) == (-1, 3)", "assert largest_smallest_integers([0, 0, 0, 0, 0, 0]) == (None, None)", "assert largest_smallest_integers([-3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == (None, 9)", "assert largest_smallest_integers([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == (0, 12)", "assert largest_smallest_integers([-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == (None, 11)", "assert largest_smallest_integers([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12]) == (-6, -12)", "assert largest_smallest_integers([0]) == (None, None)", "assert largest_smallest_integers([-2, 1, 5, 3, 4, 7]) == (None, 1)", "assert largest_smallest_integers([1, 4, 2, 5, 3, 7]) == (1, 4)", "assert largest_smallest_integers([-1, 5, 2, 3, 4, 7]) == (None, 5)", "assert largest_smallest_integers([-2, 1, 3, 5, 7]) == (None, 1)", "assert largest_smallest_integers([4, 2, 1, 3, 5, 7]) == (1, 3)", "assert largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (1, 3)", "assert largest_smallest_integers([-2, 4, 1, 3, 5, 7]) == (None, 1)", "assert largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (1, 7)", "assert largest_smallest_integers([-2, 4, 1, 3, 5, 7]) == (2, 7)", "assert largest_smallest_integers([-1, 0, 1, 2, 3, 4]) == (1, 4)", "assert largest_smallest_integers([-2, 1, 3, 4, 5, 6]) == (2, 5)", "assert largest_smallest_integers([-1, -2, -3, -4, -5, -6]) == (-4, -5)", "assert largest_smallest_integers([-1000, -999, -998, -997, -996, -995]) == (-995, -996)", "assert largest_smallest_integers([1000, 1001, 1002, 1003, 1004, 1005]) == (1005, 1004)", "assert largest_smallest_integers([-2, 1, 3, 4, 5]) == (1, 5)", "assert largest_smallest_integers([0, 1, 2, 3, 4]) == (2, 3)", "assert largest_smallest_integers([1, 2, 3, 4, 5, 6]) == (3, 5)", "assert largest_smallest_integers([-1, -2, -3, -4, -5]) == (-3, -5)", "assert largest_smallest_integers([-2, 1, 3, 4, 5, 7]) == (None, 1)", "assert largest_smallest_integers([1, 2, 3, 4, 5, 7]) == (1, 5)", "assert largest_smallest_integers([-2, 1, 3, 4, 5, 7]) == (None, 5)", "assert largest_smallest_integers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == (1, 10)", "assert largest_smallest_integers([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == (None, 9)", "assert largest_smallest_integers([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]) == (-6, -10)", "assert largest_smallest_integers([0, 1, 2, 3, 4]) == (3, 4)", "assert largest_smallest_integers([-1000, -999, -998, -997, -996]) == (-996, -997)", "assert largest_smallest_integers([1000, 1001, 1002, 1003, 1004]) == (1003, 1004)", "assert largest_smallest_integers([-1000, -1001, -1002, -1003, -1004]) == (-1003, -1004)", "assert largest_smallest_integers([-3, 1, 2, 4, 5, 7]) == (None, 1)", "assert largest_smallest_integers([-1, 2, 3, 4, 5, 6]) == (3, 5)", "assert largest_smallest_integers([-1000, 1000, 0, 2, 3, 4]) == (1000, 2)", "assert largest_smallest_integers([-3, -4, -5, -6, -7]) == (-6, 7)", "assert largest_smallest_integers([0, 1, 2, 3, 4]) == (None, 4)", "assert largest_smallest_integers([5, 23, -11, 12, 3]) == (11, 3)", "assert largest_smallest_integers([-12, 0, 1, -3, 1]) == (-3, 1)", "assert largest_smallest_integers([-3, -2, -1, 0, 1, 2, 3, 4, 5]) == (None, 5)", "assert largest_smallest_integers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == (3, 10)", "assert largest_smallest_integers([0, 1, 2, 3, 4]) == (0, 4)", "assert largest_smallest_integers([-1, 2, 3, 4, 5]) == (None, 3)", "assert largest_smallest_integers([-2, 1, 0, -3, 5]) == (-2, 1)", "assert largest_smallest_integers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == (10, 9)", "assert largest_smallest_integers([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]) == (-10, -9)", "assert largest_smallest_integers([-2, 1, 5, -3, 7, 4]) == (None, 1)", "assert largest_smallest_integers([-1, 0, 3, 2, 4, -5]) == (1, -1)", "assert largest_smallest_integers([0, 1, 2, 3, 4, 5]) == (0, 5)", "assert largest_smallest_integers([1, 2, 3, 4, 5, 6]) == (5, 6)", "assert largest_smallest_integers([-1, 2, 1, 3, 5, 7]) == (None, 1)", "assert largest_smallest_integers([4, 2, 1, 3, 5, 7]) == (1, 2)", "assert largest_smallest_integers([-1, 2, 1, 3, 5, 7]) == (1, 2)", "assert largest_smallest_integers([-1, 2, 4, 6, 8]) == (2, 4)", "assert largest_smallest_integers([0, 1, 2, 3, 4]) == (1, 2)", "assert largest_smallest_integers([5, 23, -11, 3, 7]) == (None, 3)", "assert largest_smallest_integers([5, 10, 15, 20, 25]) == (15, 20)", "assert largest_smallest_integers([-1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == (15, -15)", "assert largest_smallest_integers([-3, 2, 1, 4, 5, 7]) == (None, 1)", "assert largest_smallest_integers([-2, 1, 2, 3, 4, 5]) == (-2, 3)", "assert largest_smallest_integers([-1, 0, 1, 2, 3, 4]) == (-1, 2)", "assert largest_smallest_integers([5, 23, -11, 12, 3, 4]) == (12, -11)", "assert largest_smallest_integers([-12, 0, 1, 2, 3, 4]) == (-12, 1)", "assert largest_smallest_integers([-10, 2, 3, 4, 5]) == (2, 5)", "assert largest_smallest_integers([-2, 1, 0, 3, 5, 7]) == (1, 5)", "assert largest_smallest_integers([-10, -8, -6, -4, -2, 0, 2, 4, 6, 8, 10]) == (None, 10)", "assert largest_smallest_integers([-3, -2, -1, 0, 1, 2]) == (None, 2)", "assert largest_smallest_integers([-1, 2, 4, 5, 6, 8]) == (2, 1)", "assert largest_smallest_integers([1, 2, 3, 4, 5, 6]) == (3, 2)", "assert largest_smallest_integers([0, 1, 2, 3, 4, 5]) == (3, 2)", "assert largest_smallest_integers([-1000, -999, -998, -997, -996, -995]) == (None, -995)", "assert largest_smallest_integers([1000, 1001, 1002, 1003, 1004, 1005]) == (1003, 1002)", "assert largest_smallest_integers([-3, -2, 1, 3, 5, 7]) == (None, 1)", "assert largest_smallest_integers([-1, 2, 3, 4, 5]) == (None, 4)", "assert largest_smallest_integers([0, 1, 2, 3, 4]) == (None, 3)", "assert largest_smallest_integers([5, 2, 3, 4, 1]) == (None, 1)", "assert largest_smallest_integers([-1, -2, -3, -4, -5]) == (None, None)"]}
{"HumanEval/137": ["assert compare_one(1, 2.5) == 2.5", "assert compare_one(1, \"2,3\") == \"2,3\"", "assert compare_one(\"5,1\", \"6\") == \"6\"", "assert compare_one(\"1\", 1) == None", "assert compare_one(1, 2) == 2", "assert compare_one(2, 1) == 2", "assert compare_one(2, 2) == 2", "assert compare_one(1, 1.5) == 1.5", "assert compare_one(1, 0) == 1"]}
{"HumanEval/138": ["assert is_equal_to_sum_even(4) == False", "assert is_equal_to_sum_even(6) == False", "assert is_equal_to_sum_even(8) == True", "assert is_equal_to_sum_even(10) == False", "assert is_equal_to_sum_even(12) == False", "assert is_equal_to_sum_even(14) == True", "assert is_equal_to_sum_even(16) == False", "assert is_equal_to_sum_even(14) == False", "assert is_equal_to_sum_even(16) == True", "assert is_equal_to_sum_even(18) == False"]}
{"HumanEval/139": ["assert special_factorial(1) == 1", "assert special_factorial(2) == 2", "assert special_factorial(3) == 6", "assert special_factorial(4) == 288", "assert special_factorial(5) == 1200", "assert special_factorial(6) == 7200", "assert special_factorial(7) == 50400", "assert special_factorial(8) == 4950400", "assert special_factorial(9) == 48488800", "assert special_factorial(0) == 1", "assert special_factorial(8) == 49536", "assert special_factorial(8) == 498000", "assert special_factorial(9) == 4420000", "assert special_factorial(9) == 4980000", "assert special_factorial(9) == 44089600", "assert special_factorial(8) == 423360", "assert special_factorial(9) == 4428576", "assert special_factorial(8) == 495360", "assert special_factorial(10) == 49800000", "assert special_factorial(5) == 120", "assert special_factorial(-5) == 0", "assert special_factorial(8) == 432000", "assert special_factorial(9) == 3628800", "assert special_factorial(-1) == 0", "assert special_factorial(10) == 0", "assert special_factorial(9) == 48096000", "assert special_factorial(10) == 47612000", "assert special_factorial(-1) == 1", "assert special_factorial(8) == 420800", "assert special_factorial(9) == 3781600", "assert special_factorial(10) == 3241600", "assert special_factorial(-5) == 1", "assert special_factorial(10) == 1", "assert special_factorial(-10) == 1", "assert special_factorial(9) == 4410000", "assert special_factorial(9) == 49504000", "assert special_factorial(9) == 48450400", "assert special_factorial(10) == 484504000", "assert special_factorial(9) == 388800", "assert special_factorial(-5) == -120", "assert special_factorial(10) == 10", "assert special_factorial(-10) == 0", "assert special_factorial(-2) == 1", "assert special_factorial(-3) == 1", "assert special_factorial(-4) == 1", "assert special_factorial(8) == 4294967296", "assert special_factorial(9) == 3888000", "assert special_factorial(8) == 4294967297", "assert special_factorial(10) == 3248000", "assert special_factorial(9) == 4849600", "assert special_factorial(10) == 48086000", "assert special_factorial(8) == 423981600", "assert special_factorial(9) == 4950400", "assert special_factorial(10) == 32457600", "assert special_factorial(10) == 31536000", "assert special_factorial(9) == 48080000", "assert special_factorial(10) == 465920000", "assert special_factorial(9) == 44279008", "assert special_factorial(10) == 420453120", "assert special_factorial(9) == 4816800", "assert special_factorial(10) == 47088000", "assert special_factorial(100) == 1", "assert special_factorial(1000) == 1", "assert special_factorial(9) == 48160000", "assert special_factorial(10) == 3243200", "assert special_factorial(8) == 4239800", "assert special_factorial(8) == 4239800800", "assert special_factorial(10) == 466560000"]}
{"HumanEval/140": ["assert fix_spaces(\"Example\") == \"Example\"", "assert fix_spaces(\"Example 1\") == \"Example_1\"", "assert fix_spaces(\" Example 2\") == \"_Example_2\"", "assert fix_spaces(\" Example   3\") == \"_Example-3\"", "assert fix_spaces(\"   Example 4\") == \"_Example-4\"", "assert fix_spaces(\"  Example  5\") == \"_Example-5\"", "assert fix_spaces(\" Example\\t6\") == \"_Example-6\"", "assert fix_spaces(\" Example 5\") == \"Example_5\"", "assert fix_spaces(\" Example 6 \") == \"Example_6\"", "assert fix_spaces(\"Example   \") == \"Example_\"", "assert fix_spaces(\" Example  1\") == \"Example_1\"", "assert fix_spaces(\" Example  2\") == \"_Example_2\"", "assert fix_spaces(\" Example  3\") == \"_Example-3\"", "assert fix_spaces(\" Example 1  \") == \"Example_1\"", "assert fix_spaces(\"Example 1   \") == \"Example_1\"", "assert fix_spaces(\" Example 1  2\") == \"Example_1_2\"", "assert fix_spaces(\" Example 1 2\") == \"Example_1_2\"", "assert fix_spaces(\" Example 1  2  3\") == \"Example_1_2_3\"", "assert fix_spaces(\"Example    \") == \"Example_\"", "assert fix_spaces(\"   Example 5\") == \"_Example-5\"", "assert fix_spaces(\" Example 6\") == \"_Example-6\"", "assert fix_spaces(\"Example \") == \"Example_\"", "assert fix_spaces(\"Example 1 \") == \"Example_1\"", "assert fix_spaces(\" Example 2 \") == \"_Example_2\"", "assert fix_spaces(\" Example   3 \") == \"_Example-3\"", "assert fix_spaces(\"Example 1 2\") == \"Example_1_2\"", "assert fix_spaces(\"Example 1 2 3\") == \"Example_1_2_3\"", "assert fix_spaces(\"Example 6 \") == \"Example_6\"", "assert fix_spaces(\"Example  5\") == \"Example_5\"", "assert fix_spaces(\"Example   6\") == \"_Example-6\"", "assert fix_spaces(\" Example  4 \") == \"_Example-4\"", "assert fix_spaces(\" Example  5 \") == \"_Example-5\"", "assert fix_spaces(\" Example 2   \") == \"_Example_2\"", "assert fix_spaces(\" Example   3   \") == \"_Example-3\"", "assert fix_spaces(\"Example  1\") == \"Example_1\"", "assert fix_spaces(\"Example  2\") == \"_Example_2\"", "assert fix_spaces(\"Example  3\") == \"_Example-3\"", "assert fix_spaces(\" Example 6 \") == \"_Example_6\"", "assert fix_spaces(\"Example 7\") == \"Example_7\"", "assert fix_spaces(\"Example 5\") == \"Example_5\"", "assert fix_spaces(\"Example 6\") == \"Example_6\"", "assert fix_spaces(\" Example 5 \") == \"_Example-5\"", "assert fix_spaces(\" Example   \") == \" Example_\"", "assert fix_spaces(\" Example    \") == \" Example_\"", "assert fix_spaces(\" Example   5\") == \"_Example-5\"", "assert fix_spaces(\"   Example   \") == \"_Example-3\"", "assert fix_spaces(\"  Example 1  \") == \"Example_1\"", "assert fix_spaces(\"Example 1  2\") == \"Example_1-2\"", "assert fix_spaces(\" Example  5  \") == \"_Example-5\"", "assert fix_spaces(\" Example 1 \") == \"Example_1\"", "assert fix_spaces(\" Example 1   \") == \"Example_1\"", "assert fix_spaces(\" Example  4\") == \"_Example-4\"", "assert fix_spaces(\" Example  5\") == \"_Example-5\"", "assert fix_spaces(\" Example  6\") == \"_Example-6\"", "assert fix_spaces(\"  Example 5\") == \"Example_5\"", "assert fix_spaces(\"Example\\t\") == \"Example_\"", "assert fix_spaces(\" Example 1  2\") == \"Example_1-2\"", "assert fix_spaces(\" Example   \") == \"_Example-3\"", "assert fix_spaces(\" Example    \") == \"_Example-3\"", "assert fix_spaces(\" Example 6 \") == \"_Example-6\"", "assert fix_spaces(\" Example  6 \") == \"_Example-6\"", "assert fix_spaces(\"  Example 5\") == \"_Example-5\"", "assert fix_spaces(\" Example 7\") == \"_Example-7\"", "assert fix_spaces(\"   Example    \") == \"_Example-3\"", "assert fix_spaces(\"Example   space\") == \"Example_space\"", "assert fix_spaces(\"Example   space   \") == \"_Example-3\"", "assert fix_spaces(\"   Example 2\") == \"_Example_2\"", "assert fix_spaces(\"   Example 2   \") == \"_Example-2\"", "assert fix_spaces(\"Example  12\") == \"Example_12\"", "assert fix_spaces(\"Example 1  2\") == \"Example_1_2\"", "assert fix_spaces(\"Example  2  3\") == \"Example_2_3\"", "assert fix_spaces(\"Example  \") == \"Example_\"", "assert fix_spaces(\"   Example  5\") == \"_Example-5\"", "assert fix_spaces(\"   Example  6\") == \"_Example-6\"", "assert fix_spaces(\" Example 1   \") == \"Example_1_\"", "assert fix_spaces(\" Example 1 2 3\") == \"Example_1_2_3\"", "assert fix_spaces(\"Example  1  2  3\") == \"Example_1_2_3\"", "assert fix_spaces(\"Example 1   \") == \"Example_1_\"", "assert fix_spaces(\"Example 1  2  3\") == \"Example_1_2_3\"", "assert fix_spaces(\"   Example  \") == \"_Example-3\"", "assert fix_spaces(\"  Example   \") == \"_Example-3\"", "assert fix_spaces(\"Example   \") == \"_Example-3\"", "assert fix_spaces(\" Example   5 \") == \"_Example-5\"", "assert fix_spaces(\" Example 6\") == \"_Example_6\"", "assert fix_spaces(\" Example 8\") == \"_Example-8\"", "assert fix_spaces(\" Example    \") == \"Example_\"", "assert fix_spaces(\" Example 4\") == \"Example_4\"", "assert fix_spaces(\" Example\") == \"Example_\"", "assert fix_spaces(\" Example 1 2 3 \") == \"Example_1_2_3\"", "assert fix_spaces(\"Example      \") == \"Example_4\"", "assert fix_spaces(\"Example 1   \") == \"Example_1_1\"", "assert fix_spaces(\" Example   \") == \" Example-\"", "assert fix_spaces(\"Example    Space\") == \"_Example-Space\"", "assert fix_spaces(\"   Example 2   \") == \"_Example_2\"", "assert fix_spaces(\"   Example   3   \") == \"_Example-3\"", "assert fix_spaces(\"Example   \") == \"Example\"", "assert fix_spaces(\" Example  2\") == \"Example__2\"", "assert fix_spaces(\" Example 2   \") == \"_Example-2\"", "assert fix_spaces(\" Example 2    \") == \"_Example-2\"", "assert fix_spaces(\"Example  6\") == \"_Example-6\"", "assert fix_spaces(\"   Example 6\") == \"_Example-6\""]}
{"HumanEval/141": ["assert file_name_check(\"example.txt\") == \"Yes\"", "assert file_name_check(\"example.exe\") == \"Yes\"", "assert file_name_check(\"example.dll\") == \"Yes\"", "assert file_name_check(\"example.txt.\") == \"Yes\"", "assert file_name_check(\"example.exe.\") == \"Yes\"", "assert file_name_check(\"example.dll.\") == \"Yes\"", "assert file_name_check(\"example.txt.abc\") == \"No\"", "assert file_name_check(\"example.exe.abc\") == \"No\"", "assert file_name_check(\"example.dll.abc\") == \"No\"", "assert file_name_check(\".example.txt\") == \"No\"", "assert file_name_check(\"example..txt\") == \"No\"", "assert file_name_check(\"example.txt.exe\") == \"No\"", "assert file_name_check(\"example.txt.dll\") == \"No\"", "assert file_name_check(\"1example.txt\") == \"No\"", "assert file_name_check(\"example.txt.exe\") == \"Yes\"", "assert file_name_check(\"example.txt.dll\") == \"Yes\"", "assert file_name_check(\"example.txt.exe.dll\") == \"Yes\"", "assert file_name_check(\"example.txt.exe.dll.zip\") == \"No\"", "assert file_name_check(\"example.txt.exe.dll.zip.rar\") == \"No\"", "assert file_name_check(\"example.txt..\") == \"No\"", "assert file_name_check(\"example.txt.exe.dll\") == \"No\"", "assert file_name_check(\"example.exe.txt\") == \"No\"", "assert file_name_check(\"example.exe.dll\") == \"No\"", "assert file_name_check(\"example.txt.exe.\") == \"No\"", "assert file_name_check(\"example.txt.exe..dll\") == \"No\"", "assert file_name_check(\"example.exe.txt\") == \"Yes\"", "assert file_name_check(\"example.exe.txt.dll\") == \"No\"", "assert file_name_check(\"example.txt.exe.dll.txt\") == \"Yes\"", "assert file_name_check(\"example.txt.exe.dll.txt.\") == \"Yes\"", "assert file_name_check(\"example.exe.dll\") == \"Yes\"", "assert file_name_check(\"example.exe.dll.txt\") == \"No\"", "assert file_name_check(\"example.txt..exe\") == \"No\"", "assert file_name_check(\"example.txt..dll\") == \"Yes\"", "assert file_name_check(\"example.exe.\") == \"No\"", "assert file_name_check(\"example.txt.\") == \"No\"", "assert file_name_check(\".exe\") == \"No\"", "assert file_name_check(\"example.txt..exe.\") == \"No\"", "assert file_name_check(\".txt\") == \"No\"", "assert file_name_check(\"1example.dll\") == \"No\"", "assert file_name_check(\"example.exe..txt\") == \"Yes\"", "assert file_name_check(\"example.exe..dll\") == \"No\"", "assert file_name_check(\"example.exe..txt\") == \"No\"", "assert file_name_check(\"example.exe..txt.exe\") == \"No\"", "assert file_name_check(\"example.exe.exe\") == \"No\"", "assert file_name_check(\"example..dll\") == \"No\"", "assert file_name_check(\"example.txt.exe.dll.exe\") == \"No\"", "assert file_name_check(\"example.txt\") == \"No\"", "assert file_name_check(\"example.exe.txt.dll\") == \"Yes\"", "assert file_name_check(\"example.exe.txt.exe\") == \"No\"", "assert file_name_check(\"example.exe..\") == \"No\"", "assert file_name_check(\"example.txt..dll\") == \"No\"", "assert file_name_check(\"example.txt...\") == \"No\"", "assert file_name_check(\"example.txt.....\") == \"No\"", "assert file_name_check(\"example.dll.\") == \"No\"", "assert file_name_check(\"example.txt.exe.dll.txt\") == \"No\"", "assert file_name_check(\"example.txt.exe..\") == \"No\"", "assert file_name_check(\"example.exe.txt.\") == \"No\"", "assert file_name_check(\"example.txt..abc\") == \"No\"", "assert file_name_check(\"example.txt...exe\") == \"No\"", "assert file_name_check(\"example.exe\") == \"No\"", "assert file_name_check(\"example.dll\") == \"No\"", "assert file_name_check(\"example.txt.exe.dll.zip.txt\") == \"No\"", "assert file_name_check(\"1.exe\") == \"No\"", "assert file_name_check(\"example.exe.exe.\") == \"No\"", "assert file_name_check(\"example.exe.exe...\") == \"No\"", "assert file_name_check(\"example.\") == \"No\"", "assert file_name_check(\".example.dll\") == \"No\"", "assert file_name_check(\"example.txt.exe.\") == \"Yes\"", "assert file_name_check(\"example.txt.exe.dll.\") == \"No\"", "assert file_name_check(\"example.exe..\") == \"Yes\"", "assert file_name_check(\"example..exe\") == \"No\"", "assert file_name_check(\"example.exe.dll.txt.exe\") == \"No\"", "assert file_name_check(\"example.txt.exe.txt\") == \"No\""]}
{"HumanEval/142": ["assert sum_squares([1, 2, 3]) == 6", "assert sum_squares([-1, 2, 3]) == 6", "assert sum_squares([1, -2, 3]) == 9", "assert sum_squares([1, 2, -3]) == 9", "assert sum_squares([3, -2, 0]) == 18", "assert sum_squares([5, 23, -11]) == 117", "assert sum_squares([-12, 0, 1]) == -11", "assert sum_squares([12, -3, 1]) == 10", "assert sum_squares([-1, 2, 3]) == 9", "assert sum_squares([1, -2, 3]) == 4", "assert sum_squares([1, 2, -3]) == 4", "assert sum_squares([3, -2, 0]) == 1", "assert sum_squares([5, 23, -11]) == 81", "assert sum_squares([-12, 0, 1]) == -12", "assert sum_squares([12, -3, 1]) == 34", "assert sum_squares([1, -2, 3]) == 6", "assert sum_squares([1, 2, -3]) == 6", "assert sum_squares([5, 23, -11]) == 191", "assert sum_squares([-1, -5, 2, -1, -5]) == -126", "assert sum_squares([1, 2, 3, 4, 5]) == 25", "assert sum_squares([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 254", "assert sum_squares([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == 300", "assert sum_squares([5, 23, -11]) == 17", "assert sum_squares([1, 2, -3]) == 0", "assert sum_squares([5, 23, -11]) == 68", "assert sum_squares([1, 2, 3, 4, 5]) == 20", "assert sum_squares([5, 23, -11]) == 172", "assert sum_squares([12, -3, 1]) == 100", "assert sum_squares([12, -3, 1]) == 49", "assert sum_squares([-3, -2, -1]) == -1", "assert sum_squares([1, 2, -3]) == 8", "assert sum_squares([3, -2, 0]) == 10", "assert sum_squares([5, 23, -11]) == 65", "assert sum_squares([12, -3, 1]) == 42", "assert sum_squares([1, 2, 3, 4, 5]) == 34", "assert sum_squares([1, 2, 3, 4, 5, 6]) == 156", "assert sum_squares([]) == 0", "assert sum_squares([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 555", "assert sum_squares([5, 23, -11]) == 179", "assert sum_squares([5, 23, -11]) == 77", "assert sum_squares([1, 2, 3, 4, 5]) == 89", "assert sum_squares([1, 2, 3, 4, 5, 6]) == 100", "assert sum_squares([1, 2, 3, 4, 5, 6, 7]) == 105", "assert sum_squares([1, 2, 3, 4, 5, 6, 7, 8]) == 110", "assert sum_squares([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 112", "assert sum_squares([-3, -2, -1]) == -12", "assert sum_squares([0, 0, 0]) == 0", "assert sum_squares([5, 23, -11]) == 84", "assert sum_squares([12, -3, 1]) == 35", "assert sum_squares([5, 23, -11]) == 85", "assert sum_squares([12, -3, 1]) == 45", "assert sum_squares([-3, 2, 1]) == 12", "assert sum_squares([5, 23, -11]) == 129", "assert sum_squares([-12, 0, 1]) == -126", "assert sum_squares([12, -3, 1]) == 36", "assert sum_squares([1, 2, 3, 4, 5, 6]) == 182", "assert sum_squares([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 622", "assert sum_squares([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == 786", "assert sum_squares([1, 2, 3, 4, 5]) == 38", "assert sum_squares([1, 2, 3, 4, 5]) == 98", "assert sum_squares([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 126", "assert sum_squares([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 126", "assert sum_squares([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == 126", "assert sum_squares([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == 126", "assert sum_squares([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) == 126", "assert sum_squares([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]) == 126", "assert sum_squares([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 126", "assert sum_squares([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 455", "assert sum_squares([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == 512", "assert sum_squares([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 600", "assert sum_squares([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 720", "assert sum_squares([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]) == 840", "assert sum_squares([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]) == 960", "assert sum_squares([1, 2, 3, 4, 5]) == 19", "assert sum_squares([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 385", "assert sum_squares([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == 405", "assert sum_squares([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]) == 425", "assert sum_squares([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]) == 445", "assert sum_squares([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 465", "assert sum_squares([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]) == 485", "assert sum_squares([1, 2, 3, 4, 5, 6]) == 84", "assert sum_squares([1, 2, 3, 4, 5, 6, 7]) == 102", "assert sum_squares([1, 2, 3, 4, 5, 6, 7, 8]) == 120", "assert sum_squares([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 136", "assert sum_squares([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 150", "assert sum_squares([3, -2, 0]) == 12", "assert sum_squares([5, 23, -11]) == 80", "assert sum_squares([5, 23, -11]) == 102", "assert sum_squares([5, 23, -11]) == 1729", "assert sum_squares([12, -3, 1]) == 123", "assert sum_squares([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 238", "assert sum_squares([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 238", "assert sum_squares([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == 238", "assert sum_squares([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == 238", "assert sum_squares([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) == 238", "assert sum_squares([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]) == 238", "assert sum_squares([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 238", "assert sum_squares([5, 23, -11]) == 96", "assert sum_squares([5, 23, -11]) == 89", "assert sum_squares([1, 2, 3, 4, 5]) == 32", "assert sum_squares([5, 23, -11]) == 111", "assert sum_squares([12, -3, 1]) == 37"]}
{"HumanEval/143": ["assert words_in_sentence(\"hello\") == \"lo\"", "assert words_in_sentence(\"hello world\") == \"lw\"", "assert words_in_sentence(\"let's go for swimming\") == \"gf\"", "assert words_in_sentence(\"hello world how are you?\") == \"hw\"", "assert words_in_sentence(\"hello world\") == \"lo\"", "assert words_in_sentence(\"hello world\") == \"hwo\"", "assert words_in_sentence(\"hello world\") == \"hwl\"", "assert words_in_sentence(\"hello world\") == \"hlw\"", "assert words_in_sentence(\"hello world\") == \"lwh\"", "assert words_in_sentence(\"hello world\") == \"hlwd\"", "assert words_in_sentence(\"hello world\") == \"ldwh\"", "assert words_in_sentence(\"hello world\") == \"dwhl\"", "assert words_in_sentence(\"Hello World\") == \"l\"", "assert words_in_sentence(\"hello world\") == \"h\"", "assert words_in_sentence(\"Lorem Ipsum\") == \"lorem ipsum\"", "assert words_in_sentence(\"Let's go for swimming\") == \"go for\"", "assert words_in_sentence(\"This is a test\") == \"is\"", "assert words_in_sentence(\"A man, a plan, a canal: Panama!\") == \"man plan canal panama\"", "assert words_in_sentence(\"The quick brown fox jumps over the lazy dog.\") == \"fox jumps over the dog\"", "assert words_in_sentence(\"Python is a high-level programming language\") == \"python high level programming language\"", "assert words_in_sentence(\"hello\") == \"l\"", "assert words_in_sentence(\"let's go for swimming\") == \"go for\"", "assert words_in_sentence(\"this is a test\") == \"is\"", "assert words_in_sentence(\"i am not a robot\") == \"am not\"", "assert words_in_sentence(\"hello world\") == \"world\"", "assert words_in_sentence(\"hello this is a test\") == \"test\"", "assert words_in_sentence(\"hello world this is a test\") == \"world test\"", "assert words_in_sentence(\"hello world hello\") == \"world hello\"", "assert words_in_sentence(\"hello world hello world\") == \"world hello\"", "assert words_in_sentence(\"world\") == \"rld\"", "assert words_in_sentence(\"let's go for a walk\") == \"gf\"", "assert words_in_sentence(\"hello world let's go for a walk\") == \"hgfwla\"", "assert words_in_sentence(\"hello world\") == \"l\"", "assert words_in_sentence(\"hello world\") == \"e\"", "assert words_in_sentence(\"hello world\") == \"w\"", "assert words_in_sentence(\"hello world\") == \"o\"", "assert words_in_sentence(\"hello world\") == \"r\"", "assert words_in_sentence(\"hello world\") == \"d\"", "assert words_in_sentence(\"Hello World\") == \"llo\"", "assert words_in_sentence(\"hello world\") == \"llw\"", "assert words_in_sentence(\"Let's go for a walk.\") == \"golka\"", "assert words_in_sentence(\"Lets go for swimming.\") == \"golka\"", "assert words_in_sentence(\"The quick brown fox jumps over the lazy dog.\") == \"qbfj\"", "assert words_in_sentence(\"This is a test sentence.\") == \"tis\"", "assert words_in_sentence(\"Let's go for a walk on the beach.\") == \"golkb\"", "assert words_in_sentence(\"Hello world\") == \"lo\"", "assert words_in_sentence(\"hello world\") == \"lh\"", "assert words_in_sentence(\"the quick brown fox jumps over the lazy dog\") == \"fox\"", "assert words_in_sentence(\"hello world how are you?\") == \"how\"", "assert words_in_sentence(\"let's go for swimming\") == \"go\"", "assert words_in_sentence(\"Python is easy\") == \"i\"", "assert words_in_sentence(\"Python is hard\") == \"h\"", "assert words_in_sentence(\"Python is easy or hard?\") == \"easy\"", "assert words_in_sentence(\"Python is easy or hard?\") == \"hard\"", "assert words_in_sentence(\"Let's go for swimming\") == \"for\"", "assert words_in_sentence(\"hello world\") == \"he\"", "assert words_in_sentence(\"Lorem ipsum dolor sit amet\") == \"sit amet\"", "assert words_in_sentence(\"Let's go for a walk\") == \"go for a walk\"", "assert words_in_sentence(\"the quick brown fox jumps over the lazy dog\") == \"jumps over the lazy dog\"", "assert words_in_sentence(\"Hello World\") == \"lo\"", "assert words_in_sentence(\"hello world\") == \"ho\"", "assert words_in_sentence(\"Lets go for swimming\") == \"go for\"", "assert words_in_sentence(\"A man, a plan, a canal: Panama!\") == \"plan\"", "assert words_in_sentence(\"Python is easy to learn\") == \"learn\"", "assert words_in_sentence(\"I love Python\") == \"ove\"", "assert words_in_sentence(\"this is a test\") == \"ths\"", "assert words_in_sentence(\"lets go for swimming\") == \"gf\"", "assert words_in_sentence(\"hello world how are you?\") == \"hwya\"", "assert words_in_sentence(\"hello world\") == \"s\"", "assert words_in_sentence(\"hello world\") == \"t\"", "assert words_in_sentence(\"hello world\") == \"a\"", "assert words_in_sentence(\"hello world\") == \"m\"", "assert words_in_sentence(\"hello world\") == \"hl\"", "assert words_in_sentence(\"hello world\") == \"hel\"", "assert words_in_sentence(\"hello world\") == \"ello\"", "assert words_in_sentence(\"hello world\") == \"hw\"", "assert words_in_sentence(\"hello world\") == \"hd\"", "assert words_in_sentence(\"hello world\") == \"el\"", "assert words_in_sentence(\"hello world\") == \"ol\"", "assert words_in_sentence(\"hello world\") == \"lwd\"", "assert words_in_sentence(\"Let's go for a walk.\") == \"a\"", "assert words_in_sentence(\"Lets go for swimming.\") == \"g\"", "assert words_in_sentence(\"hello world how are you?\") == \"hwo ya\"", "assert words_in_sentence(\"hello world hello world hello world\") == \"hw hw hw\"", "assert words_in_sentence(\"let's go for ice-cream\") == \"go for\"", "assert words_in_sentence(\"how are you?\") == \"you\"", "assert words_in_sentence(\"i love python\") == \"ove\"", "assert words_in_sentence(\"python is fun\") == \"sun\"", "assert words_in_sentence(\"hello python\") == \"lo\"", "assert words_in_sentence(\"let's go for swimming\") == \"gosw\"", "assert words_in_sentence(\"This is a test\") == \"ist\"", "assert words_in_sentence(\"This is a test sentence?!\") == \"tis\"", "assert words_in_sentence(\"This is a test sentence ?!\") == \"tis\"", "assert words_in_sentence(\"This is a test sentence ?! .\") == \"tis\"", "assert words_in_sentence(\"This is a test sentence ?! . \") == \"tis\"", "assert words_in_sentence(\"hello world\") == \"hww\"", "assert words_in_sentence(\"hello world\") == \"hlwo\"", "assert words_in_sentence(\"hello world\") == \"llwo\"", "assert words_in_sentence(\"hello world\") == \"lohh\"", "assert words_in_sentence(\"hello world\") == \"llod\"", "assert words_in_sentence(\"hello world\") == \"ldoh\"", "assert words_in_sentence(\"hello world\") == \"hdol\"", "assert words_in_sentence(\"I am a robot\") == \"am a robot\"", "assert words_in_sentence(\"hello world hello world\") == \"hello world\"", "assert words_in_sentence(\"the quick brown fox jumps over the lazy dog\") == \"fox jumps over the lazy dog\""]}
{"HumanEval/144": ["assert simplify(\"1/3\", \"3/1\") == True", "assert simplify(\"1/2\", \"2/1\") == True", "assert simplify(\"1/5\", \"5/1\") == True", "assert simplify(\"1/4\", \"4/1\") == True", "assert simplify(\"1/6\", \"6/1\") == True", "assert simplify(\"1/7\", \"7/1\") == True", "assert simplify(\"2/3\", \"3/2\") == True", "assert simplify(\"-1/3\", \"-3/3\") == True", "assert simplify(\"-1/2\", \"-2/1\") == True", "assert simplify(\"-1/5\", \"-5/1\") == True", "assert simplify(\"-1/4\", \"-4/1\") == True", "assert simplify(\"-1/6\", \"-6/1\") == True", "assert simplify(\"-1/7\", \"-7/1\") == True", "assert simplify(\"-2/3\", \"-3/-2\") == True", "assert simplify(\"2/3\", \"3/1\") == True", "assert simplify(\"2/4\", \"4/1\") == True", "assert simplify(\"2/5\", \"5/1\") == True", "assert simplify(\"3/4\", \"4/1\") == True", "assert simplify(\"4/5\", \"5/1\") == True", "assert simplify(\"5/6\", \"6/1\") == True", "assert simplify(\"1/2\", \"3/2\") == False", "assert simplify(\"1/3\", \"3/3\") == True", "assert simplify(\"-1/2\", \"-3/2\") == False", "assert simplify(\"7/10\", \"10/2\") == True", "assert simplify(\"-7/10\", \"-10/2\") == True", "assert simplify(\"1/6\", \"2/1\") == False", "assert simplify(\"7/10\", \"10/2\") == False", "assert simplify(\"3/4\", \"4/4\") == True", "assert simplify(\"2/3\", \"3/3\") == True", "assert simplify(\"1/6\", \"6/1\") == False", "assert simplify(\"-1/3\", \"-3/1\") == False", "assert simplify(\"-2/3\", \"-3/1\") == False", "assert simplify(\"1/2\", \"1/1\") == True", "assert simplify(\"-1/2\", \"-1/1\") == True", "assert simplify(\"1/6\", \"3/2\") == False", "assert simplify(\"1/5\", \"1/1\") == True", "assert simplify(\"1/3\", \"2/1\") == False", "assert simplify(\"-1/5\", \"5/1\") == True", "assert simplify(\"-1/6\", \"2/1\") == False", "assert simplify(\"-7/10\", \"10/2\") == False", "assert simplify(\"2/3\", \"6/3\") == True", "assert simplify(\"-1/3\", \"-1/3\") == True", "assert simplify(\"-1/2\", \"-1/2\") == True", "assert simplify(\"-1/3\", \"-3/1\") == True", "assert simplify(\"-2/3\", \"-3/1\") == True", "assert simplify(\"1/5\", \"5/2\") == False", "assert simplify(\"-1/2\", \"-2/1\") == False", "assert simplify(\"-1/4\", \"-4/1\") == False", "assert simplify(\"1/2\", \"1/2\") == True", "assert simplify(\"1/3\", \"2/3\") == False", "assert simplify(\"1/5\", \"5/5\") == True", "assert simplify(\"1/3\", \"3/4\") == False", "assert simplify(\"1/3\", \"1/1\") == True", "assert simplify(\"2/5\", \"5/2\") == True", "assert simplify(\"2/5\", \"2/2\") == True", "assert simplify(\"-1/3\", \"-1/1\") == True", "assert simplify(\"-2/5\", \"-5/2\") == True", "assert simplify(\"-2/5\", \"-2/2\") == True", "assert simplify(\"-2/5\", \"-5/5\") == True", "assert simplify(\"-3/4\", \"-4/4\") == True", "assert simplify(\"-2/5\", \"-5/1\") == True", "assert simplify(\"1/5\", \"2/1\") == False", "assert simplify(\"1/8\", \"8/1\") == True", "assert simplify(\"2/4\", \"4/2\") == True", "assert simplify(\"2/6\", \"6/2\") == True", "assert simplify(\"2/7\", \"7/2\") == True", "assert simplify(\"2/8\", \"8/2\") == True", "assert simplify(\"3/4\", \"4/3\") == True", "assert simplify(\"3/5\", \"5/3\") == True", "assert simplify(\"3/6\", \"6/3\") == True", "assert simplify(\"3/7\", \"7/3\") == True", "assert simplify(\"3/8\", \"8/3\") == True", "assert simplify(\"4/5\", \"5/4\") == True", "assert simplify(\"4/6\", \"6/4\") == True", "assert simplify(\"4/7\", \"7/4\") == True", "assert simplify(\"4/8\", \"8/4\") == True", "assert simplify(\"5/6\", \"6/5\") == True", "assert simplify(\"5/7\", \"7/5\") == True", "assert simplify(\"5/8\", \"8/5\") == True", "assert simplify(\"6/7\", \"7/6\") == True", "assert simplify(\"6/8\", \"8/6\") == True", "assert simplify(\"7/8\", \"8/7\") == True", "assert simplify(\"8/9\", \"9/8\") == True", "assert simplify(\"8/10\", \"10/8\") == True", "assert simplify(\"9/11\", \"11/9\") == True", "assert simplify(\"9/12\", \"12/9\") == True", "assert simplify(\"10/13\", \"13/10\") == True", "assert simplify(\"-1/6\", \"-2/1\") == False", "assert simplify(\"1/5\", \"10/5\") == False", "assert simplify(\"1/2\", \"2/2\") == True", "assert simplify(\"-1/3\", \"-3/-1\") == True", "assert simplify(\"-2/5\", \"-5/-1\") == True", "assert simplify(\"2/5\", \"1/2\") == True", "assert simplify(\"3/5\", \"1/2\") == True", "assert simplify(\"4/5\", \"1/2\") == True", "assert simplify(\"-2/5\", \"-1/2\") == True", "assert simplify(\"-3/5\", \"-1/2\") == True", "assert simplify(\"-4/5\", \"-1/2\") == True", "assert simplify(\"-1/4\", \"-4/4\") == True", "assert simplify(\"-1/2\", \"-2/2\") == True", "assert simplify(\"4/7\", \"7/1\") == True", "assert simplify(\"-1/2\", \"-2/2\") == False"]}
{"HumanEval/145": ["assert order_by_points([-1, -11, -12, -111, -122]) == [-1, -11, -12, -111, -122]", "assert order_by_points([1, 11, -1, -11, -12]) == [-1, -11, -12, -111, -122]", "assert order_by_points([-1000, -999, -99, -98, -97]) == [-97, -98, -99, -99, -100]", "assert order_by_points([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]", "assert order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]", "assert order_by_points([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "assert order_by_points([]) == []", "assert order_by_points([-1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]", "assert order_by_points([-11, -12, -2, -3, -4, -5, -100]) == [-100, -92, -84, -76, -68, -60, -52]", "assert order_by_points([1, 11, 12, 13, 14, 15, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 10, 11, 12, 13, 14, 15, 2, 3, 4, 5, 6, 7, 8, 9]", "assert order_by_points([-1, -11, 1, -12, 11]) == [-1, -11, 1, -12, 11]", "assert order_by_points([-11, -12, -2, -3, -4, -5, -1, -11, -12]) == [-1, -11, -12, -2, -3, -4, -5, -1, -11, -12]", "assert order_by_points([1, 11, 2, 21, 3, 31, 4, 41, 5, 51]) == [1, 11, 2, 21, 3, 31, 4, 41, 5, 51]", "assert order_by_points([-1, -11, -2, -21, -3, -31, -4, -41, -5, -51]) == [-1, -11, -2, -21, -3, -31, -4, -41, -5, -51]", "assert order_by_points([5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5]", "assert order_by_points([-1, -11, -12, -2, -3, -4, -5, -100, -101, 1, 11, 12, 2, 3, 4, 5, 100, 101]) == [-1, -11, -12, -2, -3, -4, -5, -100, -101, 1, 11, 12, 2, 3, 4, 5, 100, 101]", "assert order_by_points([1, 11, 12, 2, 3, 4, 5, 100, 101, 11, 12, 20, 30, 40, 50, 100, 101, 200, 300, 400, 500]) == [1, 11, 12, 2, 3, 4, 5, 100, 101, 11, 12, 20, 30, 40, 50, 100, 101, 200, 300, 400, 500]", "assert order_by_points([1, 10, 100, 1000, 10000]) == [1, 10, 100, 1000, 10000]", "assert order_by_points([-1, -11, -12, 1, 11]) == [-1, -11, -12, 1, 11]", "assert order_by_points([1, 11, -1, -11, -12]) == [-1, -11, -12, 1, 11]", "assert order_by_points([1, 11, 12, 13, 14]) == [1, 11, 12, 13, 14]", "assert order_by_points([-1, -11, -12, -13, -14]) == [-1, -11, -12, -13, -14]", "assert order_by_points([0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0]", "assert order_by_points([1, 11, 111, 1111, 11111]) == [1, 11, 111, 1111, 11111]", "assert order_by_points([-1, -11, -111, -1111, -11111]) == [-1, -11, -111, -1111, -11111]", "assert order_by_points([-1, 2, 3, 4, 5]) == [-1, -1, 2, 3, 4]", "assert order_by_points([-11, -12, -13, -14, -15]) == [-13, -14, -15, -11, -12]", "assert order_by_points([-1, -11, -12, -13, -14]) == [-1, -12, -13, -11, -14]", "assert order_by_points([1, 2, 3, 4, 5, 6]) == [1, 2, 3, 4, 5, 6]", "assert order_by_points([-1, -11, -12, -2, -3, -4, -5]) == [-1, -11, -12, -2, -3, -4, -5]", "assert order_by_points([1, 11, -1, -11, -12]) == [-1, -11, -12, 1, -1, -11, -12]", "assert order_by_points([-1000, -100, -10, -1]) == [-10, -100, -1000, -10]", "assert order_by_points([-11, -12, -13, -14, -15]) == [-11, -12, -13, -14, -15]", "assert order_by_points([1, 11, 2, 12, 21]) == [1, 11, 2, 12, 21]", "assert order_by_points([-1, -11, -12, -13, -14, -15]) == [-1, -11, -12, -13, -14, -15]", "assert order_by_points([1, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == [1, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]", "assert order_by_points([-1, -2, -3, -4, -5]) == [-1, -2, -3, -4, -5]", "assert order_by_points([-1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [-1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "assert order_by_points([-9, -8, -7, -6, -5]) == [-5, -6, -7, -8, -9]", "assert order_by_points([-1, -10, -11, -12, -13]) == [-1, -10, -11, -12, -13]", "assert order_by_points([-1, -2, -3, -4, -5]) == [-3, -2, -1, -4, -5]", "assert order_by_points([-1, -1, 2, 3, 4]) == [-1, -1, 2, 3, 4]", "assert order_by_points([-1, -1, -1, 2, 3, 4]) == [-1, -1, -1, 2, 3, 4]", "assert order_by_points([-1, -1, -1, -1, 2, 3, 4]) == [-1, -1, -1, -1, 2, 3, 4]", "assert order_by_points([-1, -1, -1, -1, -1, 2, 3, 4]) == [-1, -1, -1, -1, -1, 2, 3, 4]", "assert order_by_points([-1, -1, -1, -1, -1, -1, 2, 3, 4]) == [-1, -1, -1, -1, -1, -1, 2, 3, 4]", "assert order_by_points([-1, -1, -1, -1, -1, -1, -1, 2, 3, 4]) == [-1, -1, -1, -1, -1, -1, -1, 2, 3, 4]", "assert order_by_points([-1, -1, -1, -1, -1, -1, -1, -1, 2, 3, 4]) == [-1, -1, -1, -1, -1, -1, -1, -1, 2, 3, 4]", "assert order_by_points([1, 11, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "assert order_by_points([-1, -11, -12, -2, -3, -4, -5, -100, -1000]) == [-1, -11, -12, -2, -3, -4, -5, -100, -1000]", "assert order_by_points([1, 11, -1, -11, -12]) == [1, 11, -1, -12]", "assert order_by_points([-9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == [-1, -11, 1, -12, 11, 2, 3, 4, 5, 6, 7, 8, 9]", "assert order_by_points([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]", "assert order_by_points([-1000, -1, 1, 1000]) == [-1, 1, 1000, -1000]", "assert order_by_points([-1, -11, -12, -111, -112]) == [-1, -11, -12, -111, -112]", "assert order_by_points([1, 11, -1, -11, -12]) == [-1, -11, -12, -111, -112]", "assert order_by_points([5, 23, -11]) == [5, 23, -11]", "assert order_by_points([-1, -2, -3, -4, -5]) == [-4, -3, -2, -1, -5]", "assert order_by_points([-12, -11, -10, -9, -8]) == [-9, -8, -10, -11, -12]", "assert order_by_points([-5, -4, -3, -2, -1]) == [-1, -2, -3, -4, -5]", "assert order_by_points([-1, -2, -3, -4, -5]) == [-5, -4, -3, -2, -1]", "assert order_by_points([-1, -1, 2, 3, 4, 5]) == [-1, -1, 2, 3, 4, 5]", "assert order_by_points([1, 11, 2, 21, 3, 31]) == [1, 11, 2, 21, 3]", "assert order_by_points([-1000, -900, -800, -700, -600]) == [-600, -700, -800, -900, -1000]", "assert order_by_points([-10, -9, -8, -7, -6]) == [-6, -7, -8, -9, -10]", "assert order_by_points([-3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]", "assert order_by_points([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]", "assert order_by_points([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]", "assert order_by_points([-1, -2, -3, -4, -5]) == [-1, -2, -3, -4]", "assert order_by_points([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]) == [-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]", "assert order_by_points([-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]", "assert order_by_points([1, 2, 3, 4, 5, 0]) == [1, 2, 3, 4, 5, 0]", "assert order_by_points([1, 11, 12, 2, 3, 4, 5, 100, 1000]) == [1, 11, 12, 2, 3, 4, 5, 100, 1000]", "assert order_by_points([-1, -11, -12, 1, 11, 12]) == [-1, -11, -12, 1, 11, 12]", "assert order_by_points([-1000, -999, -900, -900, -800]) == [-800, -900, -999, -1000, -999]", "assert order_by_points([-9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == [-1, -11, 1, -12, 11, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9]", "assert order_by_points([5, 5, 5, 5, 5]) == [5, 5, 5, 5, 5]", "assert order_by_points([-1, 1, -11, 1, -12]) == [-1, 1, -11, 1, -12]", "assert order_by_points([-1000, -999, -998, -997, -996]) == [-996, -997, -998, -998, -999]", "assert order_by_points([-1, -11, -12, -111, -121212]) == [-1, -11, -12, -111, -121212]", "assert order_by_points([1, 11, -1, -11, -12]) == [-1, -11, -12, -111, -121212]", "assert order_by_points([-1, 1, 1, -1, -11, -12]) == [1, -1, -11, 1, 1, -12]", "assert order_by_points([1, 11, 111, 1111, 11111, 111111]) == [1, 11, 111, 1111, 11111, 111111]", "assert order_by_points([1, 11, 111, 1111, 11111, 111111, 1111111]) == [1, 11, 111, 1111, 11111, 111111, 1111111]", "assert order_by_points([-1000, -900, -800, -700, -600]) == [-1000, -900, -800, -700, -600]", "assert order_by_points([1, 11, -1, -11, -12, -2, -3, -4, -5, -100, -101, 1, 11, 12, 2, 3, 4, 5, 100, 101]) == [1, 11, -1, -11, -12, -2, -3, -4, -5, -100, -101, 1, 11, 12, 2, 3, 4, 5, 100, 101]", "assert order_by_points([1, 11, 111, 112]) == [1, 11, 111, 112]", "assert order_by_points([1, 11, 111, 112, 113]) == [1, 11, 111, 112, 113]", "assert order_by_points([-1, -11, -12, -111, -112, -113]) == [-1, -11, -12, -111, -112, -113]", "assert order_by_points([1, 11, 111, 112, 113, 114]) == [1, 11, 111, 112, 113, 114]", "assert order_by_points([5, 23, 10, 11, 12]) == [10, 11, 12, 13, 14]", "assert order_by_points([-9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == [-1, -11, 1, -12, 11, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9]", "assert order_by_points([-1000, -900, -800, -700, -600, -500, -400, -300, -200, -100, 100, 200, 300, 400, 500, 600, 700, 800, 900, 1000]) == [-1000, -900, -800, -700, -600, -500, -400, -300, -200, -100, 100, 200, 300, 400, 500, 600, 700, 800, 900, 1000]", "assert order_by_points([1, 11, 12, 111, 121]) == [1, 11, 12, 111, 121]", "assert order_by_points([-1, -10, -11, -12, -13]) == [-1, -11, -12, -13, -10]", "assert order_by_points([-9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == [-1, -7, -3, -2, -1, 0, 1, 2, 4, 5, 6, 8, 9]", "assert order_by_points([-1, -1, -1, -1, -1, -1, -1, -1, -1]) == [-1, -1, -1, -1, -1, -1, -1, -1, -1]", "assert order_by_points([0, 0, 0, 0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0, 0, 0, 0]", "assert order_by_points([-1000, -1, 1, 1000, 10, 100]) == [-1, 1, 10, 100, 1000, 100, 1, 10, -1000]"]}
{"HumanEval/146": ["assert specialFilter([15, -73, 14, -15]) == 1", "assert specialFilter([33, -2, -3, 45, 21, 109]) == 2", "assert specialFilter([-10, 5, -3, 15, 8, -2]) == 0", "assert specialFilter([-100, 5, -3, 15, 8, -2]) == 0", "assert specialFilter([15, -73, 14, -15, 33, -2, -3, 45, 21, 109]) == 2", "assert specialFilter([-15, 15, 15, -15, 15, 15]) == 1", "assert specialFilter([-2, 2, 2, -2, -2, 2]) == 1", "assert specialFilter([15, 15, 15, 15, 15, 15]) == 1", "assert specialFilter([-15, -15, -15, -15, -15, -15]) == 1", "assert specialFilter([-2, -2, -2, -2, -2, -2]) == 1", "assert specialFilter([15, -73, 14, -15, -73, -15]) == 1", "assert specialFilter([33, -2, -3, 45, 21, 109, 109]) == 2", "assert specialFilter([-10, 2, 1, 3, 8, 4]) == 0", "assert specialFilter([-2, -1, 1, 3, 7, 9]) == 1", "assert specialFilter([-1, -1, 1, 3, 7, 9]) == 0", "assert specialFilter([-15, 15, 10, -3, 15, -5]) == 1", "assert specialFilter([-10, 10, 10, -10, 10, 10]) == 0", "assert specialFilter([10, 10, 10, 10, 10, 10]) == 0", "assert specialFilter([-10, -10, -10, -10, -10, -10]) == 0", "assert specialFilter([-10, 10, 10, -10, -10, 10]) == 0", "assert specialFilter([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 0", "assert specialFilter([-12, 2, 1, 3, 1, 4]) == 0", "assert specialFilter([-23, 18, 2, 3, 1, 4]) == 0", "assert specialFilter([1, 2, 3, 4, 5, 6]) == 0", "assert specialFilter([-8, 2, 1, 12, -10, 3]) == 0", "assert specialFilter([10, 20, 30, 40, 50, 60]) == 0", "assert specialFilter([-10, -20, -30, -40, -50, -60]) == 0", "assert specialFilter([-12, 12, 1, -3, -5, 7]) == 0", "assert specialFilter([-23, 18, -12, 5, 15, -7]) == 0", "assert specialFilter([1, 3, 5, 7, 9]) == 2", "assert specialFilter([-1, -3, -5, -7, -9]) == 0", "assert specialFilter([-10, 2, 3, 4, 5, 10, 18, 20, 22, 23, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]) == 0", "assert specialFilter([-73, 14, -15, 33, -2, -3, 45, 21, 109]) == 1", "assert specialFilter([15, -73, 14, -15, 33, -2, -3, 45, 21, 109]) == 1", "assert specialFilter([-15, 33, -2, -3, 45, 21, 109, 15, -73]) == 1", "assert specialFilter([-73, 14, -15, 33, -2, -3, 45, 21, 109, 15, -73]) == 1", "assert specialFilter([-15, 33, -2, -3, 45, 21, 109, 15, -73, -15]) == 1", "assert specialFilter([-73, 14, -15, 33, -2, -3, 45, 21, 109, 15, -73, -15]) == 1", "assert specialFilter([-12, 0, 1, 3, 4]) == 1", "assert specialFilter([-10, -11, -12, -13, -14, -15]) == 0", "assert specialFilter([-15, -14, -13, -12, -11, -10]) == 1", "assert specialFilter([-10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 0", "assert specialFilter([10, 10, 10, -10, -10, 10]) == 0", "assert specialFilter([-12, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 0", "assert specialFilter([-12, 18, 10, 10, 12, 20]) == 0", "assert specialFilter([-10, -5, 0, 5, 10, 15]) == 0", "assert specialFilter([-8, 12, 17, -18, 2, 13]) == 0", "assert specialFilter([-12, 0, 1, 3, 4, 11]) == 0", "assert specialFilter([-15, -20, 10, -12, 15, 25]) == 0", "assert specialFilter([-10, 2, 15, -15, 10, -10]) == 0", "assert specialFilter([1, 3, 5, 7, 9]) == 1", "assert specialFilter([-15, 73, 14, -3, 45, 21, 109]) == 1", "assert specialFilter([-10, 1, 2, 3, 4, 5]) == 0", "assert specialFilter([-8, 2, 1, -3, 5, 9]) == 0", "assert specialFilter([1, 2, 3, 4, 5]) == 0", "assert specialFilter([-10, -20, -30, -40, -50]) == 0", "assert specialFilter([-100, -200, -300, -400, -500]) == 0", "assert specialFilter([15, 1, 3, 5, 7, 9, -73, -15, 33, 45, 21, 109]) == 2", "assert specialFilter([-15, 33, 45, 21, 109, 1, 7, 9, -73, -15, 3]) == 0", "assert specialFilter([-15, 33, 45, 21, 109, 1, 7, 9, -73, -15, 3, 15, 1, 3, 5, 7, 9]) == 0", "assert specialFilter([-73, 14, -15, 33, -2, -3, 45, 21, 109, 1, 7, 9, -73, -15, 3, 15, 1, 3, 5, 7, 9]) == 0", "assert specialFilter([-73, 15, -15, 33, 21, 109]) == 1", "assert specialFilter([-15, 33, -2, 45, 21, 109]) == 1", "assert specialFilter([15, -73, 14, -15, 33, 21]) == 1", "assert specialFilter([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]) == 0", "assert specialFilter([-10, -20, -30, -40, -50, -60, -70, -80, -90, -100]) == 0", "assert specialFilter([15, 33, -2, -3, 45, 21, 109]) == 0", "assert specialFilter([-10, -1, 1, 11, 12, 13]) == 0", "assert specialFilter([-100, -1000, -10000, -100000, -1000000]) == 0", "assert specialFilter([15, 33, -2, -3, 45, 21, 109]) == 1", "assert specialFilter([-10, 20, 30, 40, 50]) == 0", "assert specialFilter([-5, -15, -25, -35, -45, -55]) == 0", "assert specialFilter([10, 20, 30, 40, 50]) == 1", "assert specialFilter([-10, -15, -20, -30, -40, -50]) == 0", "assert specialFilter([-100, -150, -200, -300, -400, -500]) == 0", "assert specialFilter([-10, 1, 3, 5, 7, 9]) == 1", "assert specialFilter([-15, 20, 30, 45, 55, 65]) == 0", "assert specialFilter([-12, 12, 18, 22, 28, 38]) == 0", "assert specialFilter([-1, 2, 4, 6, 8, 10]) == 1", "assert specialFilter([-100, 100, 110, 120, 130, 140]) == 0", "assert specialFilter([-23, 10, 18, -2, 21, 10]) == 0", "assert specialFilter([-15, 23, 10, -12, 10, -2]) == 0", "assert specialFilter([15, 15, 15, 15, 15, 15, 15, 15, 15]) == 0", "assert specialFilter([1, 3, 5, 7, 9, 11, 13, 15, 17, 19]) == 0", "assert specialFilter([15, 17, 19, 21, 23, 25, 27, 29, 31, 33]) == 0", "assert specialFilter([-8, -5, 2, 1, 3, 12]) == 0", "assert specialFilter([1, 3, 5, 7, 9, 11]) == 0", "assert specialFilter([-1, -3, -5, -7, -9, -11]) == 0", "assert specialFilter([-10, 12, 3, 4, -15]) == 0", "assert specialFilter([-2, 8, 10, 12, 15, -10]) == 0", "assert specialFilter([-3, 7, 11, 13, 15, -5]) == 0", "assert specialFilter([-15, 12, 14, 17, 19, -13]) == 0", "assert specialFilter([-12, 2, 4, 8, 10, 15]) == 1", "assert specialFilter([-2, 1, 3, 5, 7, 9]) == 1", "assert specialFilter([-3, -5, -7, -9, -11, -13]) == 0", "assert specialFilter([1, 3, 5, 7, 9, 11]) == 1", "assert specialFilter([-8, 1, 2, 3, 4, 5]) == 0", "assert specialFilter([-10, -5, -3, -2, -1, -1]) == 0", "assert specialFilter([-73, 14, -15]) == 0", "assert specialFilter([-15, 1, 3, 5, 7, 9]) == 0", "assert specialFilter([-2, -3, 45, 21, 109, 15]) == 0", "assert specialFilter([15, -73, 14, -15, 33, -2, -3]) == 0", "assert specialFilter([-10, 10, 10, 10, 10]) == 0", "assert specialFilter([10, 10, 10, 10, 10]) == 0", "assert specialFilter([-10, -10, -10, -10, -10]) == 0", "assert specialFilter([-10, 10, 10, 10, 10]) == 1", "assert specialFilter([10, 10, 10, 10, 10]) == 1", "assert specialFilter([-10, 12, 18, -20]) == 0", "assert specialFilter([-15, 10, 12, -25, 20, -30]) == 0", "assert specialFilter([-10, 12, 18, -20, 15, -30]) == 1", "assert specialFilter([-15, 10, 12, -25, 20, -30, 25]) == 1", "assert specialFilter([15, -73, 14, -15, 12, -30]) == 0"]}
{"HumanEval/147": ["assert get_max_triples(3) == 1", "assert get_max_triples(4) == 2", "assert get_max_triples(5) == 1", "assert get_max_triples(6) == 2", "assert get_max_triples(7) == 3", "assert get_max_triples(8) == 4", "assert get_max_triples(9) == 5", "assert get_max_triples(10) == 6", "assert get_max_triples(1) == 0", "assert get_max_triples(2) == 1", "assert get_max_triples(4) == 1", "assert get_max_triples(6) == 0", "assert get_max_triples(6) == 1", "assert get_max_triples(7) == 1", "assert get_max_triples(8) == 1", "assert get_max_triples(9) == 1", "assert get_max_triples(10) == 1", "assert get_max_triples(11) == 1", "assert get_max_triples(12) == 1", "assert get_max_triples(13) == 1", "assert get_max_triples(14) == 1", "assert get_max_triples(15) == 1", "assert get_max_triples(16) == 1", "assert get_max_triples(17) == 1", "assert get_max_triples(18) == 1", "assert get_max_triples(19) == 1", "assert get_max_triples(20) == 1", "assert get_max_triples(6) == 3", "assert get_max_triples(7) == 4", "assert get_max_triples(8) == 5", "assert get_max_triples(9) == 6", "assert get_max_triples(2) == 0", "assert get_max_triples(7) == 0", "assert get_max_triples(3) == 2", "assert get_max_triples(4) == 3", "assert get_max_triples(7) == 2", "assert get_max_triples(8) == 2", "assert get_max_triples(9) == 3", "assert get_max_triples(10) == 3", "assert get_max_triples(10) == 7", "assert get_max_triples(21) == 1", "assert get_max_triples(22) == 1", "assert get_max_triples(23) == 1", "assert get_max_triples(8) == 3", "assert get_max_triples(9) == 2", "assert get_max_triples(10) == 2", "assert get_max_triples(8) == 0", "assert get_max_triples(9) == 0", "assert get_max_triples(9) == 4", "assert get_max_triples(10) == 5", "assert get_max_triples(10) == 4"]}
{"HumanEval/148": ["assert bf(\"Jupiter\", \"Neptune\") == ((\"Saturn\", \"Uranus\"),)", "assert bf(\"Earth\", \"Mercury\") == (\"Venus\",)", "assert bf(\"Mercury\", \"Uranus\") == (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")", "assert bf(\"Jupiter\", \"Saturn\") == ()", "assert bf(\"Mercury\", \"Venus\") == ()", "assert bf(\"Saturn\", \"Jupiter\") == ()", "assert bf(\"Uranus\", \"Neptune\") == ()", "assert bf(\"Earth\", \"Mercury\") == (\"Venus\")", "assert bf(\"Jupiter\", \"Venus\") == ()", "assert bf(\"Saturn\", \"Pluto\") == ()", "assert bf(\"Neptune\", \"Earth\") == ()", "assert bf(\"Jupiter\", \"Neptune\") == ((\"Saturn\", \"Uranus\"))", "assert bf(\"Sun\", \"Jupiter\") == ()", "assert bf(\"Jupiter\", \"Sun\") == ()", "assert bf(\"Neptune\", \"Sun\") == ()", "assert bf(\"Mercury\", \"Mars\") == ()", "assert bf(\"Saturn\", \"Uranus\") == ()", "assert bf(\"Earth\", \"Jupiter\") == ()", "assert bf(\"Jupiter\", \"Neptune\") == (\"Saturn\", \"Uranus\")", "assert bf(\"Jupiter\", \"Uranus\") == ()", "assert bf(\"Saturn\", \"Neptune\") == ()", "assert bf(\"jupiter\", \"neptune\") == ((\"saturn\", \"uranus\"),)", "assert bf(\"earth\", \"mercury\") == (\"venus\",)", "assert bf(\"mercury\", \"uranus\") == (\"venus\", \"earth\", \"mars\", \"jupiter\", \"saturn\")", "assert bf(\"Jupiter\", \"Venus\") == (\"Saturn\", \"Uranus\")", "assert bf(\"Earth\", \"Mars\") == (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")", "assert bf(\"Mercury\", \"Jupiter\") == (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")", "assert bf(\"Saturn\", \"Neptune\") == (\"Uranus\", \"Pluto\")", "assert bf(\"Pluto\", \"Neptune\") == ()", "assert bf(\"Jupiter\", \"Saturn\") == (\"Uranus\", \"Neptune\")", "assert bf(\"Mercury\", \"Mercury\") == ()", "assert bf(\"Venus\", \"Venus\") == ()", "assert bf(\"Jupiter\", \"Jupiter\") == ()", "assert bf(\"Pluto\", \"Sun\") == ()", "assert bf(\"Earth\", \"Venus\") == (\"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")", "assert bf(\"Mercury\", \"Venus\") == (\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")", "assert bf(\"Jupiter\", \"Venus\") == (\"Saturn\", \"Uranus\", \"Neptune\")", "assert bf(\"Mercury\", \"Saturn\") == (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Uranus\", \"Neptune\")", "assert bf(\"Venus\", \"Jupiter\") == (\"Saturn\", \"Uranus\", \"Neptune\")", "assert bf(\"Earth\", \"Jupiter\") == (\"Venus\", \"Saturn\", \"Uranus\", \"Neptune\")", "assert bf(\"Mercury\", \"Jupiter\") == (\"Venus\", \"Saturn\", \"Uranus\", \"Neptune\")", "assert bf(\"Uranus\", \"Saturn\") == ()", "assert bf(\"Neptune\", \"Neptune\") == ()", "assert bf(\"Earth\", \"Mars\") == ()", "assert bf(\"Neptune\", \"Pluto\") == ()", "assert bf(\"jupiter\", \"neptune\") == ((\"saturn\", \"uranus\"))", "assert bf(\"earth\", \"venus\") == (\"venus\")", "assert bf(\"jupiter\", \"neptune\") == (\"saturn\", \"uranus\")", "assert bf(\"Earth\", \"Venus\") == (\"Venus\")", "assert bf(\"Mercury\", \"Mars\") == (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")", "assert bf(\"Earth\", \"Earth\") == ()", "assert bf(\"earth\", \"mercury\") == (\"venus\")", "assert bf(\"Sun\", \"Moon\") == ()", "assert bf(\"Mercury\", \"Sun\") == ()", "assert bf(\"Saturn\", \"Sun\") == ()", "assert bf(\"Uranus\", \"Sun\") == ()", "assert bf(\"Sun\", \"Mercury\") == ()", "assert bf(\"Mercury\", \"Moon\") == ()", "assert bf(\"Neptune\", \"Uranus\") == ()", "assert bf(\"Venus\", \"Mars\") == ()", "assert bf(\"Mars\", \"Jupiter\") == ()", "assert bf(\"Venus\", \"Earth\") == ()", "assert bf(\"Pluto\", \"Moon\") == ()", "assert bf(\"Uranus\", \"Earth\") == ()", "assert bf(\"Venus\", \"Jupiter\") == (\"Saturn\", \"Uranus\")", "assert bf(\"Earth\", \"Venus\") == (\"Venus\", \"Earth\")", "assert bf(\"Mercury\", \"Pluto\") == ()", "assert bf(\"Venus\", \"Jupiter\") == ()", "assert bf(\"earth\", \"venus\") == (\"mercury\")", "assert bf(\"Mercury\", \"Saturn\") == ()", "assert bf(\"Jupiter\", \"Mars\") == ()", "assert bf(\"Jupiter\", \"Mercury\") == (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")", "assert bf(\"Saturn\", \"Uranus\") == (\"Neptune\", \"Jupiter\")", "assert bf(\"Venus\", \"Mars\") == (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")", "assert bf(\"Earth\", \"Jupiter\") == (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")", "assert bf(\"Mercury\", \"Earth\") == (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")", "assert bf(\"Venus\", \"Mercury\") == (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")", "assert bf(\"Mars\", \"Saturn\") == (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")", "assert bf(\"Neptune\", \"Saturn\") == ()", "assert bf(\"Pluto\", \"Mars\") == ()", "assert bf(\"Jupiter\", \"Saturn\") == (\"Jupiter\", \"Uranus\", \"Earth\", \"Venus\", \"Mars\", \"Neptune\")", "assert bf(\"Mercury\", \"Venus\") == (\"Venus\", \"Mercury\")", "assert bf(\"Saturn\", \"Uranus\") == (\"Saturn\", \"Uranus\")", "assert bf(\"Earth\", \"Mercury\") == ()", "assert bf(\"Earth\", \"Moon\") == ()", "assert bf(\"Jupiter\", \"Pluto\") == ()", "assert bf(\"Saturn\", \"Uranus\") == (\"Neptune\", \"Pluto\")", "assert bf(\"Jupiter\", \"Moon\") == ()", "assert bf(\"Saturn\", \"Saturn\") == ()", "assert bf(\"Pluto\", \"Saturn\") == ()", "assert bf(\"Saturn\", \"Jupiter\") == (\"Uranus\", \"Neptune\")", "assert bf(\"Earth\", \"Mars\") == (\"Venus\", \"Jupiter\", \"Saturn\")", "assert bf(\"Mars\", \"Jupiter\") == (\"Venus\", \"Earth\", \"Saturn\")", "assert bf(\"Uranus\", \"Saturn\") == (\"Neptune\", \"Jupiter\")", "assert bf(\"Moon\", \"Sun\") == ()", "assert bf(\"mercury\", \"uranus\") == ((\"venus\", \"earth\", \"mars\", \"jupiter\", \"saturn\"),)", "assert bf(\"Earth\", \"Sun\") == ()", "assert bf(\"Venus\", \"Sun\") == ()", "assert bf(\"Jupiter\", \"Earth\") == (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")", "assert bf(\"Venus\", \"Mars\") == (\"Mars\", \"Venus\", \"Earth\", \"Jupiter\", \"Saturn\")", "assert bf(\"Earth\", \"Jupiter\") == (\"Venus\", \"Mars\", \"Jupiter\", \"Saturn\")", "assert bf(\"Venus\", \"Earth\") == (\"Venus\", \"Earth\")", "assert bf(\"Mercury\", \"Venus\") == (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")"]}
{"HumanEval/149": ["assert sorted_list_sum([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]", "assert sorted_list_sum([\"ab\", \"a\", \"aaa\", \"cd\"]) == [\"ab\", \"cd\"]", "assert sorted_list_sum([\"aa\", \"a\", \"aaa\", \"cc\"]) == [\"aa\", \"aaa\", \"cc\"]", "assert sorted_list_sum([\"aa\", \"a\", \"aaa\", \"aa\", \"aaa\"]) == [\"aa\", \"aaa\", \"aa\"]", "assert sorted_list_sum([\"a\", \"b\", \"c\", \"d\"]) == [\"a\", \"b\", \"c\", \"d\"]", "assert sorted_list_sum([\"a\", \"a\", \"a\", \"a\", \"a\"]) == [\"a\"]", "assert sorted_list_sum([\"a\", \"a\", \"a\", \"a\", \"b\"]) == [\"a\", \"b\"]", "assert sorted_list_sum([\"a\", \"b\", \"c\", \"d\", \"e\"]) == [\"a\", \"b\", \"c\", \"d\", \"e\"]", "assert sorted_list_sum([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]) == [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]", "assert sorted_list_sum([\"aa\", \"a\", \"aaa\", \"ac\", \"ca\"]) == [\"aa\", \"aaa\", \"ac\", \"ca\"]", "assert sorted_list_sum([\"aa\", \"a\", \"aaa\", \"ac\", \"ca\", \"c\"]) == [\"aa\", \"aaa\", \"ac\", \"ca\", \"c\"]", "assert sorted_list_sum([\"aa\", \"a\", \"aaa\", \"ac\", \"ca\", \"c\", \"c\"]) == [\"aa\", \"aaa\", \"ac\", \"ca\", \"c\", \"c\"]", "assert sorted_list_sum([\"aa\", \"a\", \"aaa\", \"ac\", \"ca\", \"c\", \"c\", \"c\", \"c\"]) == [\"aa\", \"aaa\", \"ac\", \"ca\", \"c\", \"c\", \"c\", \"c\"]", "assert sorted_list_sum([\"a\", \"aa\", \"aaa\"]) == [\"aa\"]", "assert sorted_list_sum([\"a\", \"aaa\", \"aa\", \"aaaa\"]) == [\"aa\", \"aaa\"]", "assert sorted_list_sum([\"aa\", \"aaa\", \"aaa\", \"aaa\", \"aaa\"]) == [\"aa\", \"aaa\", \"aaa\", \"aaa\"]", "assert sorted_list_sum([\"aa\", \"aaa\", \"aaa\", \"aaa\", \"aaa\", \"aaa\"]) == [\"aa\", \"aaa\", \"aaa\", \"aaa\", \"aaa\"]", "assert sorted_list_sum([\"aa\", \"aaa\", \"aaa\", \"aaa\", \"aaa\", \"aaa\", \"aaa\"]) == [\"aa\", \"aaa\", \"aaa\", \"aaa\", \"aaa\", \"aaa\"]", "assert sorted_list_sum([\"aa\", \"aaa\", \"aaa\", \"aaa\", \"aaa\", \"aaa\", \"aaa\", \"aaa\"]) == [\"aa\", \"aaa\", \"aaa\", \"aaa\", \"aaa\", \"aaa\", \"aaa\"]", "assert sorted_list_sum([\"aa\", \"aaa\", \"aaa\", \"aaa\", \"aaa\", \"aaa\", \"aaa\", \"aaa\", \"aaa\"]) == [\"aa\", \"aaa\", \"aaa\", \"aaa\", \"aaa\", \"aaa\", \"aaa\", \"aaa\"]", "assert sorted_list_sum([\"aa\", \"a\", \"aaa\", \"aa\", \"aaa\"]) == [\"aa\", \"aaa\"]", "assert sorted_list_sum([\"aa\", \"a\", \"aaa\", \"aa\", \"aaa\", \"aaa\"]) == [\"aa\", \"aaa\"]", "assert sorted_list_sum([\"aa\", \"a\", \"aaa\", \"aa\", \"aaa\", \"aaa\", \"aaa\"]) == [\"aa\", \"aaa\"]", "assert sorted_list_sum([\"a\", \"aa\", \"aaa\", \"aaa\"]) == [\"aaa\"]", "assert sorted_list_sum([\"a\", \"aa\", \"aaa\", \"aaa\", \"aaaa\"]) == [\"aaaa\"]", "assert sorted_list_sum([\"a\", \"aa\", \"aaa\", \"aaa\", \"aaa\", \"aaaa\"]) == [\"aaaa\"]", "assert sorted_list_sum([\"a\", \"aa\", \"aaa\", \"aaa\", \"aaa\", \"aaaa\", \"aaaaa\"]) == [\"aaaaa\"]", "assert sorted_list_sum([\"a\", \"aa\", \"aaa\", \"aaa\", \"aaa\", \"aaa\", \"aaaaa\", \"aaaaaa\"]) == [\"aaaaaa\"]", "assert sorted_list_sum([\"a\", \"b\", \"c\", \"d\", \"e\"]) == [\"b\", \"c\", \"d\", \"e\"]", "assert sorted_list_sum([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]) == [\"b\", \"c\", \"d\", \"e\", \"f\"]", "assert sorted_list_sum([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"]) == [\"b\", \"c\", \"d\", \"e\", \"f\", \"g\"]", "assert sorted_list_sum([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"]) == [\"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"]", "assert sorted_list_sum([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\"]) == [\"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\"]", "assert sorted_list_sum([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"]) == [\"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"]", "assert sorted_list_sum([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\"]) == [\"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\"]", "assert sorted_list_sum([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\"]) == [\"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\"]", "assert sorted_list_sum([\"a\", \"b\", \"c\", \"d\"]) == [\"b\", \"c\", \"d\"]", "assert sorted_list_sum([\"a\", \"a\", \"a\", \"a\", \"b\", \"b\"]) == [\"a\", \"b\"]", "assert sorted_list_sum([\"aa\", \"a\", \"aaa\", \"aa\", \"aaa\", \"aaa\", \"aaa\", \"aaa\"]) == [\"aa\", \"aaa\"]", "assert sorted_list_sum([\"a\", \"a\", \"a\", \"b\", \"c\", \"d\"]) == [\"a\", \"a\", \"b\", \"c\", \"d\"]", "assert sorted_list_sum([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"]) == [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"]", "assert sorted_list_sum([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\"]) == [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\"]", "assert sorted_list_sum([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"]) == [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"]", "assert sorted_list_sum([\"aa\", \"a\", \"aaa\", \"cc\", \"ddd\"]) == [\"aa\", \"aaa\", \"cc\", \"ddd\"]", "assert sorted_list_sum([\"aa\", \"a\", \"aaa\", \"cc\", \"ddd\", \"eee\"]) == [\"aa\", \"aaa\", \"cc\", \"ddd\", \"eee\"]", "assert sorted_list_sum([\"aa\", \"a\", \"aaa\", \"aaa\"]) == [\"aa\", \"aaa\"]", "assert sorted_list_sum([\"aa\", \"a\", \"aaa\", \"aaa\", \"aaa\"]) == [\"aa\", \"aaa\"]", "assert sorted_list_sum([\"aa\", \"a\", \"aaa\", \"aaa\", \"aaa\", \"aaa\"]) == [\"aa\", \"aaa\"]", "assert sorted_list_sum([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"]) == [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"]", "assert sorted_list_sum([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\"]) == [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\"]", "assert sorted_list_sum([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\"]) == [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\"]", "assert sorted_list_sum([\"aa\", \"a\", \"aaa\", \"aaa\"]) == [\"aaa\"]", "assert sorted_list_sum([\"aa\", \"a\", \"aaa\", \"aaa\", \"aaa\"]) == [\"aaa\"]", "assert sorted_list_sum([\"aa\", \"a\", \"aaa\", \"aaa\", \"aaa\", \"aaa\"]) == [\"aaa\"]", "assert sorted_list_sum([\"aa\", \"a\", \"aaa\", \"aaa\", \"aaa\", \"aaa\", \"aaa\"]) == [\"aaa\"]", "assert sorted_list_sum([\"aa\", \"a\", \"aaa\", \"aaa\", \"aaa\", \"aaa\", \"aaa\", \"aaa\"]) == [\"aaa\"]", "assert sorted_list_sum([\"a\", \"aaa\", \"aa\", \"aaa\"]) == [\"aa\", \"aaa\"]", "assert sorted_list_sum([\"a\", \"aaa\", \"aa\", \"aaa\", \"aaa\"]) == [\"aa\", \"aaa\"]", "assert sorted_list_sum([\"a\", \"aaa\", \"aa\", \"aaa\", \"aaa\", \"aaa\"]) == [\"aa\", \"aaa\"]", "assert sorted_list_sum([\"a\", \"aaa\", \"aa\", \"aaa\", \"aaa\", \"aaa\", \"aaa\"]) == [\"aa\", \"aaa\"]", "assert sorted_list_sum([\"a\", \"aaa\", \"aa\", \"aaa\", \"aaa\", \"aaa\", \"aaa\", \"aaa\"]) == [\"aa\", \"aaa\"]", "assert sorted_list_sum([\"a\", \"aaa\", \"aa\", \"aaa\", \"aaa\", \"aaa\", \"aaa\", \"aaa\", \"aaa\"]) == [\"aa\", \"aaa\"]", "assert sorted_list_sum([\"a\", \"aaa\", \"aa\", \"aaa\", \"aaa\", \"aaa\", \"aaa\", \"aaa\", \"aaa\", \"aaa\"]) == [\"aa\", \"aaa\"]", "assert sorted_list_sum([\"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\"]) == [\"a\"]", "assert sorted_list_sum([\"aa\", \"a\", \"aaa\", \"cc\", \"aaa\"]) == [\"aa\", \"aaa\", \"cc\"]", "assert sorted_list_sum([\"aa\", \"a\", \"aaa\", \"cc\", \"aaaa\"]) == [\"aa\", \"aaa\", \"cc\"]", "assert sorted_list_sum([\"a\", \"a\", \"b\", \"c\", \"d\"]) == [\"a\", \"b\", \"c\", \"d\"]", "assert sorted_list_sum([\"a\", \"a\", \"a\", \"a\", \"b\", \"c\", \"d\"]) == [\"a\", \"a\", \"a\", \"b\", \"c\", \"d\"]", "assert sorted_list_sum([\"a\", \"a\", \"a\", \"a\", \"a\", \"b\", \"c\", \"d\"]) == [\"a\", \"a\", \"a\", \"a\", \"b\", \"c\", \"d\"]", "assert sorted_list_sum([\"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"b\", \"c\", \"d\"]) == [\"a\", \"a\", \"a\", \"a\", \"a\", \"b\", \"c\", \"d\"]", "assert sorted_list_sum([\"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"b\", \"c\", \"d\"]) == [\"a\", \"a\", \"a\", \"a\", \"a\", \"b\", \"c\", \"d\"]", "assert sorted_list_sum([\"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"b\", \"c\", \"d\"]) == [\"a\", \"a\", \"a\", \"a\", \"a\", \"b\", \"c\", \"d\"]", "assert sorted_list_sum([\"aa\", \"a\", \"aaa\", \"cc\"]) == [\"aa\", \"aaa\"]", "assert sorted_list_sum([\"aa\", \"a\", \"aaa\", \"cc\", \"cc\"]) == [\"aa\", \"aaa\"]", "assert sorted_list_sum([\"aa\", \"a\", \"aaa\", \"aaaa\"]) == [\"aa\", \"aaa\"]", "assert sorted_list_sum([\"aa\", \"a\", \"aaa\", \"aaaa\", \"aaaaa\"]) == [\"aa\", \"aaa\"]", "assert sorted_list_sum([\"aa\", \"a\", \"aaa\", \"ac\", \"cc\"]) == [\"aa\", \"aaa\", \"ac\", \"cc\"]", "assert sorted_list_sum([\"aa\", \"a\", \"aaa\", \"cc\", \"cc\"]) == [\"aa\", \"aaa\", \"cc\", \"cc\"]", "assert sorted_list_sum([\"aa\", \"a\", \"aaa\", \"ac\", \"cc\", \"cc\"]) == [\"aa\", \"aaa\", \"cc\", \"cc\", \"cc\"]", "assert sorted_list_sum([\"a\", \"a\", \"b\", \"c\", \"c\"]) == [\"a\", \"b\", \"c\"]", "assert sorted_list_sum([\"a\", \"a\", \"b\", \"c\", \"c\", \"d\"]) == [\"a\", \"b\", \"c\", \"d\"]", "assert sorted_list_sum([\"a\", \"a\", \"b\", \"c\", \"c\", \"d\", \"e\"]) == [\"a\", \"b\", \"c\", \"d\", \"e\"]", "assert sorted_list_sum([\"a\", \"a\", \"a\", \"b\", \"b\", \"b\", \"b\", \"b\", \"b\"]) == [\"a\", \"b\"]", "assert sorted_list_sum([\"aa\", \"a\", \"aaa\", \"cc\", \"aaa\", \"ccc\"]) == [\"aa\", \"aaa\", \"cc\", \"ccc\"]", "assert sorted_list_sum([\"aa\", \"a\", \"aaa\", \"cc\", \"aaa\", \"ccc\", \"cccc\"]) == [\"aa\", \"aaa\", \"cc\", \"ccc\", \"cccc\"]", "assert sorted_list_sum([\"aa\", \"a\", \"aaa\", \"cc\", \"aaa\", \"ccc\", \"cccc\", \"ccc\"]) == [\"aa\", \"aaa\", \"cc\", \"ccc\", \"cccc\", \"ccc\"]", "assert sorted_list_sum([\"aa\", \"a\", \"aaa\", \"aa\", \"aaa\", \"aaa\", \"aaa\", \"aaa\", \"aaa\"]) == [\"aa\", \"aaa\"]", "assert sorted_list_sum([\"aa\", \"a\", \"aaa\", \"aa\", \"aaa\", \"aaa\", \"aaa\", \"aaa\", \"aaa\", \"aaa\", \"aaa\"]) == [\"aa\", \"aaa\"]", "assert sorted_list_sum([\"a\", \"bb\", \"cc\"]) == [\"b\", \"c\"]", "assert sorted_list_sum([\"a\", \"aaa\", \"aaa\"]) == [\"aaa\"]", "assert sorted_list_sum([\"a\", \"aaa\", \"aaa\", \"aaa\"]) == [\"aaa\"]", "assert sorted_list_sum([\"a\", \"aaa\", \"aaa\", \"aaa\", \"aaa\"]) == [\"aaa\"]", "assert sorted_list_sum([\"a\", \"aaa\", \"aaa\", \"aaa\", \"aaa\", \"aaa\"]) == [\"aaa\"]", "assert sorted_list_sum([\"a\", \"aaa\", \"aaa\", \"aaa\", \"aaa\", \"aaa\", \"aaa\"]) == [\"aaa\"]", "assert sorted_list_sum([\"a\", \"a\", \"a\", \"b\", \"c\", \"d\"]) == [\"a\", \"a\", \"a\", \"b\", \"c\", \"d\"]", "assert sorted_list_sum([\"a\", \"a\", \"a\", \"b\", \"c\", \"d\", \"e\"]) == [\"a\", \"a\", \"a\", \"b\", \"c\", \"d\", \"e\"]", "assert sorted_list_sum([\"a\", \"a\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]) == [\"a\", \"a\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]", "assert sorted_list_sum([\"aa\", \"a\", \"aaa\", \"cc\", \"aa\"]) == [\"aa\", \"aaa\"]", "assert sorted_list_sum([\"aa\", \"a\", \"aaa\", \"cc\", \"ac\"]) == [\"aa\", \"aaa\"]", "assert sorted_list_sum([\"aa\", \"aaa\", \"aaa\", \"aaa\"]) == [\"aaa\"]", "assert sorted_list_sum([\"aa\", \"aaa\", \"aaa\", \"aaa\", \"aaa\"]) == [\"aaa\"]", "assert sorted_list_sum([\"aa\", \"aaa\", \"aaa\", \"aaa\", \"aaa\", \"aaa\"]) == [\"aaa\"]", "assert sorted_list_sum([\"aa\", \"aaa\", \"aaa\", \"aaa\", \"aaa\", \"aaa\", \"aaa\"]) == [\"aaa\"]", "assert sorted_list_sum([\"aa\", \"aaa\", \"aaa\", \"aaa\", \"aaa\", \"aaa\", \"aaa\", \"aaa\"]) == [\"aaa\"]", "assert sorted_list_sum([\"aa\", \"aaa\", \"aaa\", \"aaa\", \"aaa\", \"aaa\", \"aaa\", \"aaa\", \"aaa\"]) == [\"aaa\"]", "assert sorted_list_sum([\"a\", \"a\", \"a\", \"b\", \"b\", \"b\", \"b\", \"b\", \"b\", \"b\"]) == [\"a\", \"b\"]", "assert sorted_list_sum([\"aa\", \"a\", \"aaa\", \"cc\", \"ddd\"]) == [\"aa\", \"aaa\"]", "assert sorted_list_sum([\"aa\", \"a\", \"aaa\", \"cc\", \"ddd\", \"eee\"]) == [\"aa\", \"aaa\"]", "assert sorted_list_sum([\"aa\", \"a\", \"aaa\", \"cc\", \"ddd\", \"eee\", \"fff\"]) == [\"aa\", \"aaa\"]", "assert sorted_list_sum([\"aa\", \"a\", \"aaa\", \"cc\", \"ddd\", \"eee\", \"fff\", \"ggg\"]) == [\"aa\", \"aaa\"]", "assert sorted_list_sum([\"a\", \"aa\", \"aaa\", \"aaaaa\"]) == [\"aa\", \"aaa\", \"aaaaa\"]", "assert sorted_list_sum([\"a\", \"aa\", \"aaa\", \"aaaaa\", \"aaaaaa\"]) == [\"aa\", \"aaa\", \"aaaaa\", \"aaaaaa\"]", "assert sorted_list_sum([\"a\", \"aa\", \"aaa\", \"aaaaa\", \"aaaaaa\", \"aaaaa\"]) == [\"aa\", \"aaa\", \"aaaaa\", \"aaaaaa\", \"aaaaaa\"]"]}
{"HumanEval/150": ["assert x_or_y(2, 12, 5) == 5", "assert x_or_y(19, 10, 15) == 15", "assert x_or_y(17, 14, 11) == 11", "assert x_or_y(13, 10, 7) == 10", "assert x_or_y(29, 17, 13) == 17", "assert x_or_y(11, 19, 23) == 23", "assert x_or_y(15, 12, 10) == 10", "assert x_or_y(23, 19, 13) == 13", "assert x_or_y(11, 9, 3) == 9", "assert x_or_y(17, 11, 5) == 5", "assert x_or_y(23, 17, 3) == 17", "assert x_or_y(31, 23, 7) == 23", "assert x_or_y(37, 31, 11) == 31", "assert x_or_y(43, 37, 17) == 17", "assert x_or_y(53, 43, 23) == 23", "assert x_or_y(59, 53, 29) == 29", "assert x_or_y(67, 59, 31) == 31", "assert x_or_y(2, 12, 3) == 12", "assert x_or_y(7, 21, 17) == 21", "assert x_or_y(19, 11, 5) == 5", "assert x_or_y(17, 13, 7) == 13", "assert x_or_y(13, 17, 11) == 17", "assert x_or_y(11, 19, 13) == 11", "assert x_or_y(13, 17, 7) == 7", "assert x_or_y(17, 13, 11) == 11", "assert x_or_y(11, 10, 10) == 10", "assert x_or_y(17, 17, 17) == 17", "assert x_or_y(19, 13, 13) == 13", "assert x_or_y(23, 17, 11) == 11", "assert x_or_y(13, 13, 17) == 17", "assert x_or_y(17, 13, 13) == 17", "assert x_or_y(11, 13, 13) == 13", "assert x_or_y(13, 13, 11) == 11", "assert x_or_y(11, 10, 5) == 5", "assert x_or_y(17, 17, 13) == 17", "assert x_or_y(19, 11, 7) == 11", "assert x_or_y(23, 19, 11) == 11", "assert x_or_y(29, 22, 17) == 22", "assert x_or_y(31, 28, 21) == 28", "assert x_or_y(37, 34, 29) == 34", "assert x_or_y(41, 41, 37) == 37", "assert x_or_y(2, 10, 5) == 5", "assert x_or_y(11, 29, 17) == 17", "assert x_or_y(3, 17, 11) == 11", "assert x_or_y(29, 21, 17) == 21", "assert x_or_y(2, 17, 11) == 11", "assert x_or_y(17, 2, 11) == 11", "assert x_or_y(17, 2, 5) == 5", "assert x_or_y(17, 2, 17) == 17", "assert x_or_y(11, 17, 5) == 17", "assert x_or_y(19, 11, 7) == 7", "assert x_or_y(13, 7, 11) == 11", "assert x_or_y(17, 13, 17) == 13", "assert x_or_y(11, 11, 11) == 11", "assert x_or_y(11, 11, 13) == 13", "assert x_or_y(17, 17, 13) == 13", "assert x_or_y(11, 11, 17) == 17", "assert x_or_y(17, 17, 11) == 11", "assert x_or_y(2, 5, 10) == 5", "assert x_or_y(7, 17, 11) == 17", "assert x_or_y(19, 2, 3) == 3", "assert x_or_y(3, 4, 5) == 5", "assert x_or_y(19, 19, 11) == 11", "assert x_or_y(19, 19, 19) == 19", "assert x_or_y(11, 12, 5) == 12", "assert x_or_y(17, 19, 3) == 19", "assert x_or_y(13, 17, 11) == 11", "assert x_or_y(19, 13, 7) == 7", "assert x_or_y(13, 13, 13) == 13", "assert x_or_y(11, 17, 7) == 17", "assert x_or_y(19, 13, 11) == 11", "assert x_or_y(17, 19, 3) == 3", "assert x_or_y(11, 17, 11) == 11", "assert x_or_y(15, 8, 5) == 5", "assert x_or_y(10, 10, 10) == 10", "assert x_or_y(100, 100, 100) == 100", "assert x_or_y(101, 101, 101) == 101", "assert x_or_y(102, 102, 102) == 102", "assert x_or_y(103, 103, 103) == 103", "assert x_or_y(104, 104, 104) == 104", "assert x_or_y(105, 105, 105) == 105", "assert x_or_y(2, 34, 12) == 34", "assert x_or_y(7, 17, 3) == 17", "assert x_or_y(19, 21, 4) == 21", "assert x_or_y(10, 17, 10) == 17", "assert x_or_y(23, 23, 12) == 12", "assert x_or_y(23, 23, 11) == 11", "assert x_or_y(23, 23, 10) == 10", "assert x_or_y(10, 2, 5) == 5", "assert x_or_y(19, 7, 3) == 7", "assert x_or_y(29, 17, 2) == 17", "assert x_or_y(47, 13, 11) == 11", "assert x_or_y(59, 11, 10) == 11", "assert x_or_y(67, 17, 5) == 17", "assert x_or_y(79, 19, 3) == 19", "assert x_or_y(89, 29, 11) == 29", "assert x_or_y(97, 13, 7) == 13", "assert x_or_y(19, 23, 11) == 23", "assert x_or_y(13, 19, 7) == 7", "assert x_or_y(23, 23, 23) == 23", "assert x_or_y(10, 10, 5) == 5", "assert x_or_y(14, 14, 14) == 14", "assert x_or_y(15, 15, 15) == 15", "assert x_or_y(16, 16, 16) == 16", "assert x_or_y(18, 18, 18) == 18", "assert x_or_y(7, 17, 13) == 13"]}
{"HumanEval/151": ["assert double_the_difference([1, 3, 2, 0]) == 10", "assert double_the_difference([-1, -2, 0]) == 0", "assert double_the_difference([9, -2]) == 81", "assert double_the_difference([0]) == 0", "assert double_the_difference([-1, 2, 3, 4, 5]) == 0", "assert double_the_difference([1, 2, 3, 4, 5]) == 15", "assert double_the_difference([-1, -2, -3, -4, -5]) == 0", "assert double_the_difference([1, 2, 3, 4]) == 10", "assert double_the_difference([1, 2, 3, 4, 5]) == 10", "assert double_the_difference([1, 2, 3, 4]) == 25", "assert double_the_difference([-1, -2, -3, -4]) == 0", "assert double_the_difference([-1, 2, 3, 4]) == 0", "assert double_the_difference([-1, -2, 0, 1]) == 0", "assert double_the_difference([-1, -2, 0, 1, 2]) == 0", "assert double_the_difference([-1, -2, 0, 1, 2, 3]) == 0", "assert double_the_difference([1, 2, 3, 4, 5]) == 30", "assert double_the_difference([-1, -2, -3, -4, -5]) == 10", "assert double_the_difference([-1, -2, 0, 0]) == 0", "assert double_the_difference([-1, 2, 3, 4]) == 21", "assert double_the_difference([1, 2, 3, 4]) == 14", "assert double_the_difference([-1, -2, -3, -4]) == 16", "assert double_the_difference([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 100", "assert double_the_difference([-1, -2, -3, -4]) == -16", "assert double_the_difference([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 55", "assert double_the_difference([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]) == -45", "assert double_the_difference([1, 2, 3, 4, 5]) == 25", "assert double_the_difference([-1, -2, -3, -4, -5]) == 65", "assert double_the_difference([1, 2, 3, 4]) == 21", "assert double_the_difference([-1, -2, -3, -4, -5]) == 16", "assert double_the_difference([-1, -2, -3, -4, -5, -6]) == 16", "assert double_the_difference([-1, -2, -3, -4, -5]) == 60", "assert double_the_difference([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 135", "assert double_the_difference([-1, -2, -3, -4, -5, -6, -7, -8, -9]) == 45", "assert double_the_difference([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 105", "assert double_the_difference([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == 1176", "assert double_the_difference([-1, -2, 0, 0, 0]) == 0", "assert double_the_difference([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 105", "assert double_the_difference([1, 2, 3, 4]) == 12", "assert double_the_difference([-1, -2, -3, -4, -5, -6]) == 0", "assert double_the_difference([-1, 2, 3, 4]) == 10", "assert double_the_difference([1, 2, 3, 4, 5]) == 20", "assert double_the_difference([-1, -2, -3, -4, -5]) == 15", "assert double_the_difference([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 15", "assert double_the_difference([-1, -2, 3, 4]) == 0", "assert double_the_difference([-1, 2, 3, 4]) == 16", "assert double_the_difference([-2, -3, -4, -5]) == 120", "assert double_the_difference([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 111", "assert double_the_difference([-1, -2, -3, -4, -5]) == 100", "assert double_the_difference([1, 2, 3, 4]) == 0", "assert double_the_difference([-1, 2, 3, 4, 5]) == 15", "assert double_the_difference([1, 2, 3, 4, 5]) == 34", "assert double_the_difference([-1, -2, 0, 0, 0, 0]) == 0", "assert double_the_difference([-1, -2, 0, 0, 0, 0, 0]) == 0", "assert double_the_difference([1, 2, 3, 4]) == 20", "assert double_the_difference([-1, -2, -3, -4]) == 12", "assert double_the_difference([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == 66", "assert double_the_difference([1, 2, 3, 4, 5]) == 22", "assert double_the_difference([-1, 2, 3, 4, 5]) == 10", "assert double_the_difference([-1, -2, -3, -4, -5]) == 20", "assert double_the_difference([1, 2, 3, 4, 5]) == 35", "assert double_the_difference([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 126", "assert double_the_difference([1, 2, 3, 4]) == 24", "assert double_the_difference([-1, -2, -3, -4]) == 64", "assert double_the_difference([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 240", "assert double_the_difference([1, 2, 3, 4, 5]) == 40", "assert double_the_difference([1, 2, 3, 4, 5, 6]) == 44", "assert double_the_difference([-1, 2, 3, 4, 5]) == 14", "assert double_the_difference([-1, -2, -3, -4, -5]) == 14", "assert double_the_difference([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 256", "assert double_the_difference([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == 1372", "assert double_the_difference([1, 2, 3, 4, 5, 6]) == 49", "assert double_the_difference([-1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == 105", "assert double_the_difference([-1, -2, -3, -4]) == -12", "assert double_the_difference([-1, 2, 3, 4]) == -2", "assert double_the_difference([-1, -2, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 10", "assert double_the_difference([-1, -2, -3, -4, -5]) == 64", "assert double_the_difference([-1, -2, -3, -4, -5, -6, -7, -8, -9]) == 555", "assert double_the_difference([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 204", "assert double_the_difference([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]) == 0", "assert double_the_difference([-2, -3, -4]) == 12", "assert double_the_difference([1, 3, 2, 0, 1]) == 10", "assert double_the_difference([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 150", "assert double_the_difference([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == 1200", "assert double_the_difference([-1, -2, 3, 4]) == 14", "assert double_the_difference([-1, -2, -3, -4]) == 65", "assert double_the_difference([-1, -2, -3, -4, -5]) == 130", "assert double_the_difference([-1, -2, -3, -4, -5, -6]) == 195", "assert double_the_difference([-1, -2, 3, 4]) == 81", "assert double_the_difference([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 225", "assert double_the_difference([-1, 2, 3, 4]) == 12", "assert double_the_difference([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 120", "assert double_the_difference([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 232", "assert double_the_difference([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == 220", "assert double_the_difference([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) == 220", "assert double_the_difference([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]) == 220", "assert double_the_difference([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 220"]}
{"HumanEval/152": ["assert compare([1,2,3,4,5], [1,2,3,4,2,-2]) == [0,0,0,0,3,3]", "assert compare([0,5,0,0,0,4], [4,1,1,0,0,-2]) == [4,4,1,0,0,6]", "assert compare([1,2,3,4,5], [1,2,3,4,5]) == [0,0,0,0,0,0]", "assert compare([1,2,3,4,5], [1,2,3,4,6]) == [6,6,6,6,6,6]", "assert compare([1,2,3,4,5], [1,2,3,4,0]) == [6,6,6,6,6,0]", "assert compare([1,2,3,4,5], [1,2,3,4,1,-1]) == [0,0,0,0,3,3]", "assert compare([1, 2, 3, 4, 5], [1, 2, 3, 4, 2]) == [0, 0, 0, 0, 3]", "assert compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2]) == [4, 4, 1, 0, 0, 6]", "assert compare([1, 2, 3, 4, 5], [1, 2, 3, 4, 2, 2]) == [0, 0, 0, 0, 3, 3]", "assert compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2, -2]) == [4, 4, 1, 0, 0, 6]", "assert compare([1,2,3,4,5], [2,2,2,2,2,2]) == [0,0,0,0,0,0]", "assert compare([1,2,3,4,5], [2,2,2,2,2,2]) == [1,1,1,1,1,1]", "assert compare([1, 2, 3, 4, 5], [1, 2, 3, 5, 2]) == [0, 0, 0, 0, 3]", "assert compare([1, 2, 3, 4, 5], [1, 2, 3, 5, 2]) == [0, 0, 0, 0, 5]", "assert compare([1,2,3,4,5], [3,3,3,3,3,3]) == [0,0,0,0,0,0]", "assert compare([1,2,3,4,5], [1,2,3,4,6]) == [-6, -6, -6, -6, -6, -6]", "assert compare([1,2,3,4,5], [1,2,3,4,1]) == [0,0,0,0,3,3]", "assert compare([1,2,3,4,5], [1,2,3,4,0]) == [0,0,0,0,3,3]", "assert compare([1,2,3,4,5], [1,2,3,4,-1]) == [0,0,0,0,2,2]", "assert compare([1,2,3,4,5], [1,2,3,4,2]) == [0,0,0,0,1,1]", "assert compare([1,2,3,4,5], [1,2,3,4,1,-1]) == [0,0,0,0,2,2]", "assert compare([1,2,3,4,5], [1,2,3,4,1,-2]) == [0,0,0,0,2,2]", "assert compare([0,5,0,0,0,4], [4,1,1,0,0,2]) == [4,4,1,0,0,6]", "assert compare([1,2,3,4,5], [1,2,3,4,3,-2]) == [0,0,0,0,2,2]", "assert compare([0,5,0,0,0,4], [5,5,5,5,5,5]) == [5,5,5,5,5,5]", "assert compare([1,2,3,4,5], [1,2,3,4,3,-2]) == [0,0,0,0,3,1]", "assert compare([1,2,3,4,5], [1,2,3,4,4,-1]) == [0,0,0,0,0,4]", "assert compare([1,2,3,4,5], [1,2,3,4,5,-1]) == [-1,0,0,0,0,0]", "assert compare([1, 2, 3, 4, 5], [1, 2, 3, 4, 2, 1]) == [0, 0, 0, 0, 3, 1]", "assert compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2, 1]) == [4, 4, 1, 0, 0, 6, 1]", "assert compare([1, 2, 3, 4, 5], [1, 2, 3, 4, 3]) == [0, 0, 0, 0, 2]", "assert compare([1, 2, 3, 4, 5], [1, 2, 3, 4, 1]) == [0, 0, 0, 0, 3]", "assert compare([1,2,3,4,5], [1,2,3,4,3,-1]) == [0,0,0,0,2,1]", "assert compare([1,2,3,4,5], [1,2,3,4,4,0]) == [0,0,0,0,0,0]", "assert compare([1,2,3,4,5], [1,2,3,4,5,0]) == [0,0,0,0,0,0]", "assert compare([1,2,3,4,5], [1,2,3,4,6,0]) == [0,0,0,0,0,0]", "assert compare([1,2,3,4,5], [1,2,3,4,7,0]) == [0,0,0,0,0,0]", "assert compare([1,2,3,4,5], [1,2,3,4,8,0]) == [0,0,0,0,0,0]", "assert compare([1,2,3,4,5], [1,2,3,4,6]) == [0,0,0,0,0,6]", "assert compare([1,2,3,4,5], [1,2,3,4,5,6]) == [0,0,0,0,0,6]", "assert compare([1,2,3,4,5], [1,2,3,4,5,5]) == [0,0,0,0,0,0]", "assert compare([1, 2, 3, 4, 5], [1, 2, 3, 4, 2, 1]) == [0, 0, 0, 0, 3]", "assert compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2, 1]) == [4, 4, 1, 0, 0, 6]", "assert compare([1, 2, 3, 4, 5], [1, 2, 3, 4, 2, 3]) == [0, 0, 0, 0, 3]", "assert compare([1,2,3,4,5], [1,2,3,4,1,-1]) == [-1,0,0,0,0,1]", "assert compare([1,2,3,4,5], [1,2,3,4,1,-2]) == [0,0,0,0,3,3]", "assert compare([1,2,3,4,5], [1,2,3,4,5,1]) == [0,0,0,0,0,0]", "assert compare([1,2,3,4,5], [1,2,3,4,5,2,-2]) == [0,0,0,0,3,3]", "assert compare([1,2,3,4,5], [1,2,3,4,3,3]) == [0,0,0,0,2,2]", "assert compare([1,2,3,4,5], [1,2,3,4,4,4]) == [0,0,0,0,0,0]", "assert compare([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]) == [0, 0, 0, 0, 0]", "assert compare([0,5,0,0,0,4], [0,0,0,0,0,0]) == [0,0,0,0,0,0]", "assert compare([1,2,3,4,5], [5,5,5,5,5,5]) == [0,0,0,0,0,0]", "assert compare([1,2,3,4,5], [2,2,2,2,2,5]) == [1,1,1,1,1,4]", "assert compare([1, 2, 3, 4, 5], [1, 2, 3, 4, 1]) == [0, 0, 0, 0, 2]", "assert compare([1,2,3,4,5], [1,2,3,4,5,-1]) == [0,0,0,0,0,0]", "assert compare([1,2,3,4,5], [1,2,3,4,5,2]) == [0,0,0,0,0,0]", "assert compare([1, 2, 3, 4, 5], [1, 2, 3, 4, 4]) == [0, 0, 0, 0, 0]", "assert compare([1,2,3,4,5], [2,2,2,2,2,2]) == [0,0,0,0,3,3]", "assert compare([1,2,3,4,5], [3,3,3,3,3,3]) == [0,0,0,0,3,3]", "assert compare([1,2,3,4,5], [4,4,4,4,4,4]) == [0,0,0,0,3,3]", "assert compare([1,2,3,4,5], [5,5,5,5,5,5]) == [0,0,0,0,3,3]", "assert compare([0,5,0,0,0,4], [4,1,1,0,0,-2]) == [-2,1,1,0,0,6]", "assert compare([1,2,3,4,5], [2,2,2,2,2,-2]) == [0,0,0,0,3,3]", "assert compare([1,2,3,4,5], [1,2,3,4,3,-2]) == [0,0,0,0,3,3]", "assert compare([1,2,3,4,5], [1,2,3,4,4,-2]) == [0,0,0,0,3,3]", "assert compare([1,2,3,4,5], [1,2,3,4,5,-2]) == [0,0,0,0,3,3]", "assert compare([1,2,3,4,5], [1,2,3,4,6,-2]) == [-3,0,0,0,0,3]", "assert compare([1,2,3,4,5], [1,2,3,4,7,-2]) == [-3,0,0,0,0,3]", "assert compare([1,2,3,4,5], [2,2,2,2,2,-2]) == [1,1,1,1,1,0]", "assert compare([1,2,3,4,5], [1,2,3,4,3,-2]) == [0,0,0,0,1,1]", "assert compare([1,2,3,4,5], [1,2,3,4,4,-1]) == [0,0,0,0,0,0]", "assert compare([1,2,3,4,5], [1,2,3,4,3,4]) == [0,0,0,0,1,1]", "assert compare([1,2,3,4,5], [1,2,3,4,4,3]) == [0,0,0,0,0,1]", "assert compare([1,2,3,4,5], [1,2,3,4,5,4]) == [0,0,0,0,0,0]", "assert compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2, 2]) == [4, 4, 1, 0, 0, 6]", "assert compare([1,2,3,4,5], [1,2,3,4,4,-2]) == [0,0,0,0,0,0]", "assert compare([0,5,0,0,0,4], [4,1,1,0,0,0]) == [4,4,1,0,0,6]", "assert compare([0,5,0,0,0,4], [4,1,1,0,0,4]) == [4,4,1,0,0,6]", "assert compare([1, 2, 3, 4, 5], [1, 2, 3, 4, 3]) == [0, 0, 0, 0, 3]", "assert compare([1, 2, 3, 4, 5], [1, 2, 3, 4, 6]) == [0, 0, 0, 0, 1]", "assert compare([1, 2, 3, 4, 5], [1, 2, 3, 4, 8]) == [0, 0, 0, 0, 7]", "assert compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2]) == [-4, -4, -4, -4, 0, 0]", "assert compare([0,5,0,0,0,4], [5,5,5,5,5,5]) == [0,0,0,0,0,0]", "assert compare([1, 2, 3, 4, 5], [1, 2, 3, 4, 6]) == [0, 0, 0, 0, 6]", "assert compare([1, 2, 3, 4, 5], [1, 2, 3, 4, 7]) == [0, 0, 0, 0, 7]", "assert compare([1, 2, 3, 4, 5], [1, 2, 3, 4, 8]) == [0, 0, 0, 0, 8]", "assert compare([1, 2, 3, 4, 5], [1, 2, 3, 4, 9]) == [0, 0, 0, 0, 9]", "assert compare([1, 2, 3, 4, 5], [1, 2, 3, 4, 10]) == [0, 0, 0, 0, 10]", "assert compare([1,2,3,4,5], [1,2,3,4,1,-1]) == [0,0,0,0,1,2]", "assert compare([1,2,3,4,5], [1,2,3,4,5,1,1]) == [0,0,0,0,0,0]", "assert compare([1,2,3,4,5], [1,2,3,4,5,1,1,1]) == [0,0,0,0,0,0]", "assert compare([1,2,3,4,5], [2,2,2,2,2,-2]) == [1,1,1,1,4]", "assert compare([1, 2, 3, 4, 5], [1, 2, 3, 4, 1]) == [0, 0, 0, 0, 4]", "assert compare([1, 2, 3, 4, 5], [1, 2, 3, 5, 4]) == [0, 0, 0, 0, 1]", "assert compare([1,2,3,4,5], [1,2,3,4,1,-1]) == [0,0,0,0,3,2]", "assert compare([1, 2, 3, 4, 5], [1, 2, 3, 4, 2, 3]) == [0, 0, 0, 0, 3, 3]", "assert compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2, 4]) == [4, 4, 1, 0, 0, 6]", "assert compare([1, 2, 3, 4, 5], [1, 2, 3, 4, 2, 3, 4]) == [0, 0, 0, 0, 3, 3, 3]", "assert compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2, 4, 4]) == [4, 4, 1, 0, 0, 6, 6]", "assert compare([1,2,3,4,5], [5,5,5,5,5,5]) == [5,5,5,5,5,5]"]}
{"HumanEval/153": ["assert Strongest_Extension('MyClass', ['MyFirstExtension', 'MySecondExtension', 'MyThirdExtension']) == 'MyClass.MyFirstExtension'", "assert Strongest_Extension('MyClass', ['MyFirstExtension', 'MySecondExtension', 'MyThirdExtension', 'MyFourthExtension']) == 'MyClass.MyFirstExtension'", "assert Strongest_Extension('MyClass', ['MyFirstExtension', 'MySecondExtension', 'MyThirdExtension', 'MyFourthExtension', 'MyFifthExtension']) == 'MyClass.MyFirstExtension'", "assert Strongest_Extension('MyClass', ['MyFirstExtension', 'MySecondExtension', 'MyThirdExtension', 'MyFourthExtension', 'MyFifthExtension', 'MySixthExtension']) == 'MyClass.MyFirstExtension'", "assert Strongest_Extension('MyClass', ['MyFirstExtension', 'MySecondExtension', 'MyThirdExtension', 'MyFourthExtension', 'MyFifthExtension', 'MySixthExtension', 'MySeventhExtension']) == 'MyClass.MyFirstExtension'", "assert Strongest_Extension('MyClass', ['A', 'B', 'C']) == 'MyClass.A'", "assert Strongest_Extension('MyClass', ['a', 'b', 'c']) == 'MyClass.a'", "assert Strongest_Extension('MyClass', ['Abc', 'abc', 'AbC']) == 'MyClass.AbC'", "assert Strongest_Extension('MyClass', ['Aa', 'Bb', 'Cc']) == 'MyClass.Aa'", "assert Strongest_Extension('MyClass', ['Aa', 'Ab', 'Ac']) == 'MyClass.Ab'", "assert Strongest_Extension('MyClass', ['aA', 'bB', 'cC']) == 'MyClass.aA'", "assert Strongest_Extension('MyClass', ['A', 'B', 'c']) == 'MyClass.A'", "assert Strongest_Extension('MyClass', ['abc']) == 'MyClass.abc'", "assert Strongest_Extension('MyClass', ['aBc']) == 'MyClass.Abc'", "assert Strongest_Extension('MyClass', ['A', 'B', 'c']) == 'MyClass.AB'", "assert Strongest_Extension('MyClass', ['A', 'b', 'C']) == 'MyClass.ABC'", "assert Strongest_Extension('MyClass', ['a', 'b', 'C']) == 'MyClass.AbC'", "assert Strongest_Extension('MyClass', ['a', 'B', 'c']) == 'MyClass.AbC'", "assert Strongest_Extension('my_class', ['SErviNGSliCes', 'Cheese', 'StuFfed']) == 'my_class.SErviNGSliCes'", "assert Strongest_Extension('my_class', ['Cheese', 'StuFfed', 'SErviNGSliCes']) == 'my_class.Cheese'", "assert Strongest_Extension('my_class', ['Cheese', 'StuFFed', 'SErviNGSliCeS']) == 'my_class.Cheese'", "assert Strongest_Extension('my_class', ['StuFFED', 'SErviNGSliCEs', 'ChEEse']) == 'my_class.StuFFED'", "assert Strongest_Extension('my_class', ['SlicES', 'CheEse', 'stUffEd']) == 'my_class.SlicES'", "assert Strongest_Extension('my_class', ['SlicEs', 'CheEse', 'stUffed']) == 'my_class.SlicEs'", "assert Strongest_Extension('my_class', ['SliceS', 'CheEse', 'stUffed']) == 'my_class.SliceS'", "assert Strongest_Extension('MyClass', ['A', 'b', 'c']) == 'MyClass.A'", "assert Strongest_Extension('MyClass', ['A', 'B', 'C', 'D']) == 'MyClass.BC'", "assert Strongest_Extension('MyClass', ['A', 'B', 'C', 'd']) == 'MyClass.ABCD'", "assert Strongest_Extension('MyClass', ['Mega', 'Giga', 'Tera']) == 'MyClass.Mega'", "assert Strongest_Extension('MyClass', ['Small', 'Medium', 'Large']) == 'MyClass.Small'", "assert Strongest_Extension('MyClass', ['Big', 'Bigger', 'Biggest']) == 'MyClass.Big'", "assert Strongest_Extension('MyClass', ['Low', 'High', 'VeryHigh']) == 'MyClass.High'", "assert Strongest_Extension('MyClass', ['Slow', 'Fast', 'Faster']) == 'MyClass.Fast'", "assert Strongest_Extension('MyClass', ['My', 'Ext', 'Enhancement']) == 'MyClass.My'", "assert Strongest_Extension('MyClass', ['My', 'Ext', 'Enhancement', 'New']) == 'MyClass.My'", "assert Strongest_Extension('MyClass', ['My', 'Ext', 'Enhancement', 'New', 'Another']) == 'MyClass.My'", "assert Strongest_Extension('MyClass', ['My', 'Ext', 'Enhancement', 'New', 'Another', 'Last']) == 'MyClass.My'", "assert Strongest_Extension('MyClass', ['My', 'Ext', 'Enhancement', 'New', 'Another', 'Last', 'One']) == 'MyClass.My'", "assert Strongest_Extension('MyClass', ['My', 'Ext', 'Enhancement', 'New', 'Another', 'Last', 'One', 'Two']) == 'MyClass.My'", "assert Strongest_Extension('MyClass', ['My', 'Ext', 'Enhancement', 'New', 'Another', 'Last', 'One', 'Two', 'Three']) == 'MyClass.My'", "assert Strongest_Extension('MyClass', ['My', 'Ext', 'Enhancement', 'New', 'Another', 'Last', 'One', 'Two', 'Three', 'Four']) == 'MyClass.My'", "assert Strongest_Extension('MyClass', ['My', 'Ext', 'Enhancement', 'New', 'Another', 'Last', 'One', 'Two', 'Three', 'Four', 'Five']) == 'MyClass.My'", "assert Strongest_Extension('MyClass', ['MyClassExtensions', 'MyOtherExtensions', 'MyYetAnotherExtensions']) == 'MyClass.MyClassExtensions'", "assert Strongest_Extension('MyClass', ['MyClassExtensions', 'MyOtherExtensions', 'MyYetAnotherExtensions', 'MyStrongerExtensions']) == 'MyClass.MyStrongerExtensions'", "assert Strongest_Extension('MyClass', ['MyClassExtensions', 'MyOtherExtensions', 'MyYetAnotherExtensions', 'MyStrongerExtensions', 'MyWeakestExtensions']) == 'MyClass.MyStrongerExtensions'", "assert Strongest_Extension('my_class', ['B', 'c', 'D']) == 'my_class.B'", "assert Strongest_Extension('my_class', ['aa', 'Aa', 'aaa']) == 'my_class.aa'", "assert Strongest_Extension('my_class', ['Abc', 'abc', 'ABC']) == 'my_class.Abc'", "assert Strongest_Extension('MyClass', ['Strong', 'Weak', 'Medium']) == 'MyClass.Strong'", "assert Strongest_Extension('my_class', ['A', 'B', 'C', 'D']) == 'my_class.A'", "assert Strongest_Extension('my_class', ['a', 'b', 'c', 'd']) == 'my_class.a'", "assert Strongest_Extension('my_class', ['aa', 'bb', 'cc', 'dd']) == 'my_class.aa'", "assert Strongest_Extension('my_class', ['Abc', 'def', 'ghi', 'jkl']) == 'my_class.Abc'", "assert Strongest_Extension('my_class', ['abc', 'def', 'ghi', 'jklm']) == 'my_class.abc'", "assert Strongest_Extension('my_class', ['AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz']) == 'my_class.AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz'", "assert Strongest_Extension('my_class', ['Cheese', 'Stuffed', 'ServingSlicES']) == 'my_class.Cheese'", "assert Strongest_Extension('my_class', ['Cheese', 'stUffed', 'servingSlicEs']) == 'my_class.Cheese'", "assert Strongest_Extension('MyClass', ['My', 'First', 'Extensions']) == 'MyClass.My'", "assert Strongest_Extension('MyClass', ['Ab', 'Bb', 'Cc']) == 'MyClass.Ab'", "assert Strongest_Extension('MyClass', ['Aa', 'Bb', 'Cc', 'Dd']) == 'MyClass.Aa'", "assert Strongest_Extension('MyClass', ['Aa', 'Bb', 'Cc', 'Dd', 'Ee']) == 'MyClass.Aa'", "assert Strongest_Extension('MyClass', ['Aa', 'Bb', 'Cc', 'Dd', 'Ee', 'Ff']) == 'MyClass.Aa'", "assert Strongest_Extension('MyClass', ['Aa', 'Bb', 'Cc', 'Dd', 'Ee', 'Ff', 'Gg']) == 'MyClass.Aa'", "assert Strongest_Extension('MyClass', ['Aa', 'Bb', 'Cc', 'Dd', 'Ee', 'Ff', 'Gg', 'Hh']) == 'MyClass.Aa'", "assert Strongest_Extension('MyClass', ['Mega', 'Small', 'Mini']) == 'MyClass.Mega'", "assert Strongest_Extension('MyClass', ['My', 'First', 'Extensions', 'Second']) == 'MyClass.My'", "assert Strongest_Extension('MyClass', ['My', 'First', 'Extensions', 'Third']) == 'MyClass.My'", "assert Strongest_Extension('MyClass', ['My', 'First', 'Extensions', 'Fourth']) == 'MyClass.My'", "assert Strongest_Extension('MyClass', ['My', 'First', 'Extensions', 'Fifth']) == 'MyClass.My'", "assert Strongest_Extension('MyClass', ['My', 'First', 'Extensions', 'Sixth']) == 'MyClass.My'", "assert Strongest_Extension('MyClass', ['My', 'First', 'Extensions', 'Seventh']) == 'MyClass.My'", "assert Strongest_Extension('MyClass', ['My', 'First', 'Extensions', 'Eighth']) == 'MyClass.My'", "assert Strongest_Extension('MyClass', ['My', 'First', 'Extensions', 'Ninth']) == 'MyClass.My'", "assert Strongest_Extension('MyClass', ['My', 'First', 'Extensions', 'Tenth']) == 'MyClass.My'", "assert Strongest_Extension('MyClass', ['A', 'B', 'C', 'D']) == 'MyClass.A'", "assert Strongest_Extension('MyClass', ['a', 'b', 'c', 'd']) == 'MyClass.a'", "assert Strongest_Extension('myClass', ['A', 'B', 'C']) == 'myClass.A'", "assert Strongest_Extension('myClass', ['a', 'b', 'c']) == 'myClass.a'", "assert Strongest_Extension('myClass', ['AbCdEfGhIjKlMnO', 'a', 'b', 'c']) == 'myClass.AbCdEfGhIjKlMnO'", "assert Strongest_Extension('myClass', ['AbCdEfGhIjKlMnO', 'A', 'b', 'c']) == 'myClass.AbCdEfGhIjKlMnO'", "assert Strongest_Extension('myClass', ['AbCdEfGhIjKlMnO', 'AbCdEfGhIjKlMnO', 'a', 'b', 'c']) == 'myClass.AbCdEfGhIjKlMnO'", "assert Strongest_Extension('my_class', ['A', 'B', 'C']) == 'my_class.A'", "assert Strongest_Extension('my_class', ['a', 'b', 'c']) == 'my_class.a'", "assert Strongest_Extension('my_class', ['aa', 'bb', 'cc']) == 'my_class.aa'", "assert Strongest_Extension('my_class', ['Aa', 'Bb', 'Cc']) == 'my_class.Aa'", "assert Strongest_Extension('my_class', ['aaa', 'bbb', 'ccc']) == 'my_class.aaa'", "assert Strongest_Extension('my_class', ['AAAA', 'BBB', 'CCCC']) == 'my_class.AAAA'", "assert Strongest_Extension('my_class', ['StuFfed', 'SErviNGSliCes', 'Cheese']) == 'my_class.StuFfed'", "assert Strongest_Extension('my_class', ['SErviNGSliCes', 'Cheese', 'StuFfed', 'my_class']) == 'my_class.SErviNGSliCes'", "assert Strongest_Extension('my_class', ['SErviNGSliCes', 'StuFfed', 'Cheese']) == 'my_class.SErviNGSliCes'", "assert Strongest_Extension('MyClass', ['First', 'Second', 'Third']) == 'MyClass.First'", "assert Strongest_Extension('MyClass', ['first', 'second', 'third']) == 'MyClass.second'", "assert Strongest_Extension('MyClass', ['First', 'Second', 'Third', 'fourth']) == 'MyClass.Second'", "assert Strongest_Extension('MyClass', ['First', 'second', 'third', 'fourth']) == 'MyClass.Third'", "assert Strongest_Extension('MyClass', ['first', 'second', 'third', 'fourth', 'fifth']) == 'MyClass.Fourth'", "assert Strongest_Extension('MyClass', ['Mega', 'XL', 'Small']) == 'MyClass.Mega'", "assert Strongest_Extension('MyClass', ['FirstExtensions', 'SecondExtensions', 'ThirdExtensions']) == 'MyClass.FirstExtensions'", "assert Strongest_Extension('MyClass', ['firstExtensions', 'secondExtensions', 'thirdExtensions']) == 'MyClass.firstExtensions'", "assert Strongest_Extension('MyClass', ['firstExtensions', 'secondExtensions', 'thirdExtensions', 'fourthExtensions']) == 'MyClass.firstExtensions'", "assert Strongest_Extension('MyClass', ['firstExtensions', 'secondExtensions', 'thirdExtensions', 'fourthExtensions', 'fifthExtensions']) == 'MyClass.firstExtensions'", "assert Strongest_Extension('MyClass', ['First', 'second', 'third']) == 'MyClass.first'", "assert Strongest_Extension('MyClass', ['First', 'Second', 'Third']) == 'MyClass.Second'", "assert Strongest_Extension('MyClass', ['First', 'Second', 'Third']) == 'MyClass.Third'"]}
{"HumanEval/154": ["assert cycpattern_check(\"hello\", \"ell\") == True", "assert cycpattern_check(\"whassup\", \"psus\") == False", "assert cycpattern_check(\"abab\", \"baa\") == True", "assert cycpattern_check(\"efef\", \"eeff\") == False", "assert cycpattern_check(\"himenss\", \"simen\") == True", "assert cycpattern_check(\"abcd\", \"abd\") == False"]}
{"HumanEval/155": ["assert even_odd_count(123) == (1, 2)", "assert even_odd_count(987) == (2, 0)", "assert even_odd_count(10) == (0, 1)", "assert even_odd_count(12345) == (1, 4)", "assert even_odd_count(-12345) == (1, 4)", "assert even_odd_count(0) == (0, 1)", "assert even_odd_count(123456789) == (9, 0)", "assert even_odd_count(-123456789) == (9, 0)", "assert even_odd_count(-12) == (1, 1)", "assert even_odd_count(0) == (0, 0)", "assert even_odd_count(120) == (1, 0)", "assert even_odd_count(-120) == (1, 0)", "assert even_odd_count(12345) == (2, 3)", "assert even_odd_count(-12345) == (2, 3)", "assert even_odd_count(999) == (0, 1)", "assert even_odd_count(5678) == (2, 3)", "assert even_odd_count(-10) == (1, 0)", "assert even_odd_count(123456789) == (0, 9)", "assert even_odd_count(5) == (2, 0)", "assert even_odd_count(1000) == (0, 0)", "assert even_odd_count(-1000) == (0, 0)", "assert even_odd_count(-12345) == (1, 1)", "assert even_odd_count(10) == (1, 0)", "assert even_odd_count(12) == (1, 1)", "assert even_odd_count(123456) == (2, 4)", "assert even_odd_count(-123456) == (2, 4)", "assert even_odd_count(5) == (1, 1)", "assert even_odd_count(100) == (2, 0)", "assert even_odd_count(123456789) == (2, 6)", "assert even_odd_count(10) == (2, 0)", "assert even_odd_count(54321) == (1, 1)", "assert even_odd_count(1000000000) == (0, 9)", "assert even_odd_count(10) == (0, 0)", "assert even_odd_count(5) == (1, 0)", "assert even_odd_count(-5) == (0, 1)", "assert even_odd_count(100) == (0, 0)", "assert even_odd_count(-100) == (0, 0)", "assert even_odd_count(12) == (2, 2)", "assert even_odd_count(-5) == (1, 1)", "assert even_odd_count(100) == (4, 0)", "assert even_odd_count(-10) == (0, 2)", "assert even_odd_count(100) == (2, 8)", "assert even_odd_count(-100) == (0, 9)", "assert even_odd_count(9) == (1, 0)", "assert even_odd_count(8) == (1, 1)", "assert even_odd_count(10) == (0, 2)", "assert even_odd_count(11) == (0, 1)", "assert even_odd_count(3) == (1, 1)", "assert even_odd_count(12) == (2, 0)", "assert even_odd_count(100) == (0, 4)", "assert even_odd_count(0) == (0, 2)", "assert even_odd_count(-1000) == (-1, -1)", "assert even_odd_count(-12345) == (1, 2)", "assert even_odd_count(123456789) == (9, 8)", "assert even_odd_count(1234567890) == (8, 9)", "assert even_odd_count(1234) == (2, 2)", "assert even_odd_count(-12345) == (1, 3)", "assert even_odd_count(123456789) == (3, 5)", "assert even_odd_count(-123456789) == (3, 5)", "assert even_odd_count(-1234) == (2, 2)", "assert even_odd_count(-10) == (0, 1)", "assert even_odd_count(100) == (0, 2)", "assert even_odd_count(5) == (2, 2)", "assert even_odd_count(10) == (2, 2)", "assert even_odd_count(12345) == (9, 5)", "assert even_odd_count(123456789) == (0, 10)", "assert even_odd_count(1234567890) == (0, 10)", "assert even_odd_count(-12345) == (0, 5)", "assert even_odd_count(123456) == (1, 5)", "assert even_odd_count(-123456) == (5, 1)", "assert even_odd_count(100) == (0, 1)", "assert even_odd_count(123456) == (3, 4)", "assert even_odd_count(-123) == (0, 1)", "assert even_odd_count(12345) == (3, 3)", "assert even_odd_count(123456) == (4, 4)", "assert even_odd_count(123456789) == (5, 5)", "assert even_odd_count(120) == (2, 0)", "assert even_odd_count(1000) == (0, 1000)", "assert even_odd_count(-1000) == (0, -1000)", "assert even_odd_count(123456789) == (3, 6)", "assert even_odd_count(1234567890) == (4, 6)", "assert even_odd_count(12345678901) == (5, 6)", "assert even_odd_count(9) == (1, 1)", "assert even_odd_count(1234567890) == (0, 1)", "assert even_odd_count(1234) == (2, 0)", "assert even_odd_count(12345) == (4, 0)", "assert even_odd_count(-12345) == (4, 0)", "assert even_odd_count(123456) == (5, 1)", "assert even_odd_count(1234) == (1, 3)", "assert even_odd_count(12345) == (2, 2)", "assert even_odd_count(123456) == (2, 3)", "assert even_odd_count(1234567) == (3, 4)", "assert even_odd_count(-123456789) == (3, 4)", "assert even_odd_count(-123456) == (2, 3)", "assert even_odd_count(-123456789) == (9, 8)", "assert even_odd_count(123456789) == (3, 7)", "assert even_odd_count(1234567890) == (7, 0)", "assert even_odd_count(10) == (1, 1)", "assert even_odd_count(11) == (1, 1)", "assert even_odd_count(12) == (2, 1)", "assert even_odd_count(13) == (1, 2)", "assert even_odd_count(14) == (2, 2)", "assert even_odd_count(15) == (2, 2)", "assert even_odd_count(16) == (2, 2)", "assert even_odd_count(17) == (2, 2)", "assert even_odd_count(18) == (2, 2)", "assert even_odd_count(19) == (2, 2)", "assert even_odd_count(1234) == (1, 2)", "assert even_odd_count(12345) == (1, 3)", "assert even_odd_count(-123456789) == (8, 9)", "assert even_odd_count(12) == (0, 2)", "assert even_odd_count(123456) == (3, 3)", "assert even_odd_count(50) == (2, 2)", "assert even_odd_count(-50) == (2, 2)"]}
{"HumanEval/156": ["assert int_to_mini_roman(1) == 'i'", "assert int_to_mini_roman(5) == 'v'", "assert int_to_mini_roman(10) == 'x'", "assert int_to_mini_roman(19) == 'xix'", "assert int_to_mini_roman(152) == 'clii'", "assert int_to_mini_roman(426) == 'cdxxvi'", "assert int_to_mini_roman(2000) == 'm'", "assert int_to_mini_roman(-1000) == '-m'", "assert int_to_mini_roman(50) == 'l'", "assert int_to_mini_roman(99) == 'xc'", "assert int_to_mini_roman(100) == 'c'", "assert int_to_mini_roman(400) == 'cd'", "assert int_to_mini_roman(1000) == 'm'", "assert int_to_mini_roman(0) == 'zero'", "assert int_to_mini_roman(-500) == '-d'", "assert int_to_mini_roman(-1) == '-i'", "assert int_to_mini_roman(2) == 'ii'", "assert int_to_mini_roman(3) == 'iii'", "assert int_to_mini_roman(4) == 'iv'", "assert int_to_mini_roman(6) == 'vi'", "assert int_to_mini_roman(7) == 'vii'", "assert int_to_mini_roman(8) == 'viii'", "assert int_to_mini_roman(9) == 'ix'", "assert int_to_mini_roman(101) == 'xi'", "assert int_to_mini_roman(199) == 'xc'", "assert int_to_mini_roman(200) == 'cc'", "assert int_to_mini_roman(201) == 'cx'", "assert int_to_mini_roman(299) == 'cxii'", "assert int_to_mini_roman(300) == 'ccc'", "assert int_to_mini_roman(999) == 'cmxciv'", "assert int_to_mini_roman(-1) == 'minusone'", "assert int_to_mini_roman(-1000) == '-hundred'", "assert int_to_mini_roman(102) == 'xii'", "assert int_to_mini_roman(103) == 'xxx'", "assert int_to_mini_roman(0) == ''", "assert int_to_mini_roman(-1) == ''", "assert int_to_mini_roman(1234) == 'mxliv'", "assert int_to_mini_roman(-1) == '-one'", "assert int_to_mini_roman(199) == 'cxix'", "assert int_to_mini_roman(200) == 'd'", "assert int_to_mini_roman(299) == 'xcxxix'", "assert int_to_mini_roman(846) == 'dxc'", "assert int_to_mini_roman(379) == 'cclxxix'", "assert int_to_mini_roman(589) == 'lxxxix'", "assert int_to_mini_roman(0) == '0'", "assert int_to_mini_roman(199) == 'xciv'", "assert int_to_mini_roman(201) == 'xxi'", "assert int_to_mini_roman(85) == 'lxxxv'", "assert int_to_mini_roman(12) == 'xiic'", "assert int_to_mini_roman(0) == 'null'", "assert int_to_mini_roman(-1000) == '-xc'", "assert int_to_mini_roman(58) == 'li'", "assert int_to_mini_roman(1001) == 'mm'", "assert int_to_mini_roman(1002) == 'mmm'", "assert int_to_mini_roman(1003) == 'mmmm'", "assert int_to_mini_roman(846) == 'dxxxviii'", "assert int_to_mini_roman(120) == 'xc'", "assert int_to_mini_roman(50) == 'li'", "assert int_to_mini_roman(492) == 'clxii'", "assert int_to_mini_roman(199) == 'xcix'", "assert int_to_mini_roman(-152) == '-clii'", "assert int_to_mini_roman(-426) == '-cdxxvi'", "assert int_to_mini_roman(-100000) == '-l'", "assert int_to_mini_roman(-19) == '-xix'", "assert int_to_mini_roman(-8) == '-viii'", "assert int_to_mini_roman(-5) == '-v'", "assert int_to_mini_roman(500) == 'd'", "assert int_to_mini_roman(18) == 'xviii'", "assert int_to_mini_roman(12) == 'xiii'", "assert int_to_mini_roman(11) == 'xi'", "assert int_to_mini_roman(12) == 'xii'", "assert int_to_mini_roman(13) == 'xiii'", "assert int_to_mini_roman(14) == 'xiv'", "assert int_to_mini_roman(15) == 'xv'", "assert int_to_mini_roman(16) == 'xvi'", "assert int_to_mini_roman(17) == 'xvii'", "assert int_to_mini_roman(20) == 'xx'", "assert int_to_mini_roman(21) == 'xxi'", "assert int_to_mini_roman(22) == 'xxii'", "assert int_to_mini_roman(23) == 'xxiii'", "assert int_to_mini_roman(24) == 'xxiv'", "assert int_to_mini_roman(25) == 'xxv'", "assert int_to_mini_roman(26) == 'xxvi'", "assert int_to_mini_roman(10) == 'xi'", "assert int_to_mini_roman(-1) == 'x'", "assert int_to_mini_roman(37) == 'xxxvii'", "assert int_to_mini_roman(999) == 'mmmc'", "assert int_to_mini_roman(1001) == 'm'", "assert int_to_mini_roman(1002) == 'mm'", "assert int_to_mini_roman(1003) == 'mmm'", "assert int_to_mini_roman(1004) == 'mmmm'", "assert int_to_mini_roman(500) == 'c'", "assert int_to_mini_roman(100) == 'xc'", "assert int_to_mini_roman(-1) == '-xii'", "assert int_to_mini_roman(846) == 'dxciv'", "assert int_to_mini_roman(31) == 'xxxii'", "assert int_to_mini_roman(100) == 'xl'", "assert int_to_mini_roman(1001) == 'm+1'", "assert int_to_mini_roman(1003) == 'mm+1'", "assert int_to_mini_roman(1004) == 'mm+2'", "assert int_to_mini_roman(199) == 'cxcix'", "assert int_to_mini_roman(299) == 'xcxi'", "assert int_to_mini_roman(600) == 'dc'", "assert int_to_mini_roman(700) == 'dd'", "assert int_to_mini_roman(800) == 'dx'", "assert int_to_mini_roman(900) == 'cxc'"]}
{"HumanEval/157": ["assert right_angle_triangle(3, 4, 5) == True", "assert right_angle_triangle(1, 2, 3) == False", "assert right_angle_triangle(5, 1, 2) == False", "assert right_angle_triangle(3, 5, 1) == False", "assert right_angle_triangle(4, 2, 3) == False", "assert right_angle_triangle(2, 4, 1) == False", "assert right_angle_triangle(5, 3, 2) == False", "assert right_angle_triangle(4, 5, 6) == False", "assert right_angle_triangle(10, 11, 12) == False", "assert right_angle_triangle(3, 4, 6) == False", "assert right_angle_triangle(1, 2, 10) == False", "assert right_angle_triangle(1, 1, 1) == True", "assert right_angle_triangle(10, 10, 10) == True", "assert right_angle_triangle(1, 10, 10) == False", "assert right_angle_triangle(10, 1, 10) == False", "assert right_angle_triangle(10, 10, 1) == False", "assert right_angle_triangle(4, 5, 6) == True", "assert right_angle_triangle(8, 12, 16) == False", "assert right_angle_triangle(1, 2, 4) == False", "assert right_angle_triangle(10, 11, 12) == True", "assert right_angle_triangle(15, 16, 17) == False", "assert right_angle_triangle(2, 5, 8) == True", "assert right_angle_triangle(4, 1, 7) == False", "assert right_angle_triangle(10, 5, 3) == True", "assert right_angle_triangle(3, 1, 10) == False", "assert right_angle_triangle(1, 5, 15) == False", "assert right_angle_triangle(1, 2, 3.5) == False", "assert right_angle_triangle(8, 10, 12) == True", "assert right_angle_triangle(2, 3, 4) == False", "assert right_angle_triangle(5, 6, 7) == False", "assert right_angle_triangle(5, 12, 13) == True", "assert right_angle_triangle(1, 3, 4) == False", "assert right_angle_triangle(4, 2, 1) == False", "assert right_angle_triangle(5, 8, 11) == True", "assert right_angle_triangle(2, 1, 4) == False", "assert right_angle_triangle(3, 1, 2) == False", "assert right_angle_triangle(5, 2, 3) == False", "assert right_angle_triangle(1, 2, 5) == False", "assert right_angle_triangle(6, 7, 8) == False", "assert right_angle_triangle(5, 6, 7) == True", "assert right_angle_triangle(3, 2, 4) == False", "assert right_angle_triangle(1, 3, 2) == False", "assert right_angle_triangle(3, 5, 7) == True", "assert right_angle_triangle(4, 1, 2) == False", "assert right_angle_triangle(5, 3, 7) == True", "assert right_angle_triangle(1, 4, 2) == False", "assert right_angle_triangle(1, 1, 10) == False", "assert right_angle_triangle(10, 10, 100) == False", "assert right_angle_triangle(5, 4, 1) == False", "assert right_angle_triangle(3, 4, 2) == False", "assert right_angle_triangle(5, 1, 3) == False", "assert right_angle_triangle(1, 2, 2) == True", "assert right_angle_triangle(3, 3, 3) == True", "assert right_angle_triangle(5, 5, 5) == True", "assert right_angle_triangle(4, 3, 1) == False", "assert right_angle_triangle(1, 1, 1) == False", "assert right_angle_triangle(3, 10, 13) == False", "assert right_angle_triangle(3, 4, 4) == False", "assert right_angle_triangle(3, 2, 1) == False", "assert right_angle_triangle(5, 1, 1) == False", "assert right_angle_triangle(5, 2, 2) == False", "assert right_angle_triangle(3, 4, 5.5) == True", "assert right_angle_triangle(10, 20, 30) == True", "assert right_angle_triangle(5, 10, 15) == True", "assert right_angle_triangle(3, 5, 15) == False", "assert right_angle_triangle(10, 5, 10) == False", "assert right_angle_triangle(2, 4, 8) == False", "assert right_angle_triangle(1, 3, 9) == False", "assert right_angle_triangle(5, 6, 10) == False", "assert right_angle_triangle(3, 2, 5) == False", "assert right_angle_triangle(4, 1, 3) == False", "assert right_angle_triangle(5, 3, 1) == False", "assert right_angle_triangle(3, 1, 5) == False", "assert right_angle_triangle(4, 3, 2) == False", "assert right_angle_triangle(1, 1, 2) == False", "assert right_angle_triangle(10, 8, 6) == False", "assert right_angle_triangle(3, 5, 2) == False", "assert right_angle_triangle(2, 1, 3) == False", "assert right_angle_triangle(1, 2, 2) == False", "assert right_angle_triangle(8, 9, 10) == True", "assert right_angle_triangle(5, 3, 6) == False", "assert right_angle_triangle(6, 5, 4) == False", "assert right_angle_triangle(10, 20, 30) == False", "assert right_angle_triangle(10, 1, 1) == False", "assert right_angle_triangle(1, 10, 1) == False", "assert right_angle_triangle(1, 5, 1) == False", "assert right_angle_triangle(3, 6, 7) == False", "assert right_angle_triangle(3, 4, 8) == False", "assert right_angle_triangle(4, 5, 6.789) == False", "assert right_angle_triangle(5, 3, 4) == False", "assert right_angle_triangle(8, 12, 15) == False", "assert right_angle_triangle(2, 3, 4) == True", "assert right_angle_triangle(8, 9, 10) == False", "assert right_angle_triangle(2, 4, 6) == False", "assert right_angle_triangle(5, 12, 14) == False", "assert right_angle_triangle(3, 4, 4) == True", "assert right_angle_triangle(3, 4, 11) == False", "assert right_angle_triangle(4, 5, 6.5) == False", "assert right_angle_triangle(10, 11, 12.5) == False", "assert right_angle_triangle(3, 4, 10) == False", "assert right_angle_triangle(10, 8, 6) == True", "assert right_angle_triangle(5, 2, 10) == False", "assert right_angle_triangle(10, 5, 15) == True", "assert right_angle_triangle(3, 1, 7) == False"]}
{"HumanEval/158": ["assert find_max([\"hello\", \"world\", \"python\"]) == \"world\"", "assert find_max([\"hello\", \"world\", \"javascript\"]) == \"hello\"", "assert find_max([\"hello\", \"world\"]) == \"llo\"", "assert find_max([\"hello\", \"world\", \"hello\"]) == \"lll\"", "assert find_max([\"hello\", \"world\", \"hello\", \"world\"]) == \"hll\"", "assert find_max([\"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\"]) == \"hhll\"", "assert find_max([\"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\"]) == \"hhll\"", "assert find_max([\"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\"]) == \"hhll\"", "assert find_max([\"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\"]) == \"hhll\"", "assert find_max([\"hello\", \"world\", \"how\", \"are\", \"you\"]) == \"world\"", "assert find_max([\"hello\", \"world\"]) == \"world\"", "assert find_max([\"hello\", \"world\", \"hello\"]) == \"hello\"", "assert find_max([\"hello\", \"world\", \"hello\", \"world\"]) == \"hello\"", "assert find_max([\"hello\", \"world\", \"hello\", \"world\", \"hello\"]) == \"hello\"", "assert find_max([\"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\"]) == \"hello\"", "assert find_max([\"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\"]) == \"hello\"", "assert find_max([\"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\"]) == \"hello\"", "assert find_max([\"hello\", \"wor\", \"ld\"]) == \"wor\"", "assert find_max([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"", "assert find_max([\"hello\", \"world\", \"world\"]) == \"world\"", "assert find_max([\"hello\", \"wor\", \"ld\", \"wor\", \"ld\"]) == \"wor\"", "assert find_max([\"hello\", \"world\", \"wor\", \"ld\", \"wor\", \"ld\"]) == \"wor\"", "assert find_max([\"hello\", \"wor\", \"ld\", \"wor\", \"ld\", \"wor\", \"ld\"]) == \"wor\"", "assert find_max([\"hello\", \"world\", \"world\", \"world\"]) == \"world\"", "assert find_max([\"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\"]) == \"hello\"", "assert find_max([\"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\"]) == \"hello\"", "assert find_max([\"hello\", \"world\", \"c++\"]) == \"world\"", "assert find_max([\"hello\", \"world\", \"java\"]) == \"world\"", "assert find_max([\"hello\", \"world\", \"goodbye\"]) == \"world\"", "assert find_max([\"hello\", \"world\", \"goodbye\", \"hi\"]) == \"hello\"", "assert find_max([\"hello\", \"world\", \"goodbye\", \"hi\", \"hey\"]) == \"hello\"", "assert find_max([\"hello\", \"world\", \"goodbye\", \"hi\", \"hey\", \"how\"]) == \"hello\"", "assert find_max([\"hello\", \"world\", \"goodbye\", \"hi\", \"hey\", \"how\", \"hi\"]) == \"hello\"", "assert find_max([\"hello\", \"world\", \"goodbye\", \"hi\", \"hey\", \"how\", \"hi\", \"hello\"]) == \"hello\"", "assert find_max([\"hello\", \"world\", \"goodbye\", \"hi\", \"hey\", \"how\", \"hi\", \"hello\", \"world\"]) == \"hello\"", "assert find_max([\"hello\", \"world\", \"goodbye\", \"hi\", \"hey\", \"how\", \"hi\", \"hello\", \"world\", \"goodbye\"]) == \"hello\"", "assert find_max([\"hello\", \"world\", \"hi\"]) == \"llo\"", "assert find_max([\"hello\", \"world\", \"he\", \"wo\", \"ld\"]) == \"he\"", "assert find_max([\"hello\", \"world\", \"he\", \"wo\", \"ld\", \"hi\"]) == \"h\"", "assert find_max([\"hello\", \"world\", \"he\", \"wo\", \"ld\", \"hi\", \"ll\"]) == \"llo\"", "assert find_max([\"hello\", \"world\", \"he\", \"wo\", \"ld\", \"hi\", \"ll\", \"o\"]) == \"ll\"", "assert find_max([\"hello\", \"world\", \"he\", \"wo\", \"ld\", \"hi\", \"ll\", \"o\", \"l\"]) == \"ol\"", "assert find_max([\"hello\", \"world\", \"he\", \"wo\", \"ld\", \"hi\", \"ll\", \"o\", \"l\", \"l\"]) == \"ll\"", "assert find_max([\"hello\", \"world\", \"he\", \"wo\", \"ld\", \"hi\", \"ll\", \"o\", \"l\", \"l\", \"l\"]) == \"ll\"", "assert find_max([\"hello\", \"world\", \"goodbye\", \"hello\"]) == \"hello\"", "assert find_max([\"hello\", \"world\", \"goodbye\", \"hello\", \"hi\"]) == \"hello\"", "assert find_max([\"hello\", \"world\", \"goodbye\", \"hello\", \"hi\", \"hey\"]) == \"hello\"", "assert find_max([\"hello\", \"world\", \"goodbye\", \"hello\", \"hi\", \"hey\", \"heyyy\"]) == \"hello\"", "assert find_max([\"hello\", \"world\", \"goodbye\", \"hello\", \"hi\", \"hey\", \"heyyy\", \"heyyyyy\"]) == \"hello\"", "assert find_max([\"hello\", \"world\", \"goodbye\", \"hello\", \"hi\", \"hey\", \"heyyy\", \"heyyyyy\", \"heyyyyyyy\"]) == \"hello\"", "assert find_max([\"hello\", \"world\", \"goodbye\", \"hi\"]) == \"hi\"", "assert find_max([\"hello\", \"world\", \"goodbye\", \"hi\", \"how\"]) == \"how\"", "assert find_max([\"hello\", \"world\", \"goodbye\", \"hi\", \"how\", \"are\"]) == \"you\"", "assert find_max([\"hello\", \"world\", \"hello\"]) == \"llo\"", "assert find_max([\"hello\", \"world\", \"hello\", \"world\"]) == \"llo\"", "assert find_max([\"hello\", \"world\", \"hello\", \"world\", \"hello\"]) == \"llo\"", "assert find_max([\"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\"]) == \"llo\"", "assert find_max([\"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\"]) == \"llo\"", "assert find_max([\"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\"]) == \"llo\"", "assert find_max([\"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\"]) == \"llo\"", "assert find_max([\"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\"]) == \"llo\"", "assert find_max([\"hello\", \"world\", \"javascript\"]) == \"world\"", "assert find_max([\"hello\", \"world\", \"go\"]) == \"world\"", "assert find_max([\"hello\", \"world\", \"php\"]) == \"world\"", "assert find_max([\"hello\", \"world\", \"swift\"]) == \"world\"", "assert find_max([\"hello\", \"world\", \"lua\"]) == \"world\"", "assert find_max([\"hello\", \"world\", \"css\"]) == \"world\"", "assert find_max([\"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\"]) == \"llo\"", "assert find_max([\"hello\", \"world\", \"asd\"]) == \"world\"", "assert find_max([\"hello\", \"wor\", \"ld\", \"asd\"]) == \"wor\"", "assert find_max([\"hello\", \"wor\", \"ld\", \"asd\", \"fgh\"]) == \"asd\"", "assert find_max([\"hello\", \"wor\", \"ld\", \"asd\", \"fgh\", \"ij\"]) == \"fgh\"", "assert find_max([\"hello\", \"wor\", \"ld\", \"asd\", \"fgh\", \"ij\", \"klm\"]) == \"klm\"", "assert find_max([\"hello\", \"world\", \"goodbye\", \"hi\", \"hey\", \"how\", \"what\"]) == \"hello\"", "assert find_max([\"hello\", \"world\", \"goodbye\", \"hi\", \"hey\", \"how\", \"what\", \"why\"]) == \"hello\"", "assert find_max([\"hello\", \"world\", \"goodbye\", \"hi\", \"hey\", \"how\", \"what\", \"why\", \"who\"]) == \"hello\"", "assert find_max([\"hello\", \"world\", \"goodbye\", \"hi\", \"hey\", \"how\", \"what\", \"why\", \"who\", \"when\"]) == \"hello\"", "assert find_max([\"hello\", \"world\", \"hello\", \"wor\", \"ld\"]) == \"wor\"", "assert find_max([\"hello\", \"world\", \"hello\", \"wor\", \"ld\", \"hello\", \"wor\", \"ld\"]) == \"wor\"", "assert find_max([\"hello\", \"world\", \"hello\", \"wor\", \"ld\", \"hello\", \"wor\", \"ld\", \"hello\", \"wor\", \"ld\"]) == \"wor\"", "assert find_max([\"hello\", \"world\", \"c++\"]) == \"hello\"", "assert find_max([\"hello\", \"wor\", \"ld\", \"asd\"]) == \"asd\"", "assert find_max([\"hello\", \"wor\", \"ld\", \"asd\", \"fgh\"]) == \"fgh\"", "assert find_max([\"hello\", \"wor\", \"ld\", \"asd\", \"fgh\", \"ij\"]) == \"ij\"", "assert find_max([\"hello\", \"wor\", \"ld\", \"asd\", \"fgh\", \"ij\", \"klm\", \"opqrstuvwxyz\"]) == \"z\"", "assert find_max([\"hello\", \"world\", \"css\"]) == \"hello\"", "assert find_max([\"hello\", \"world\", \"java\"]) == \"hello\"", "assert find_max([\"hello\", \"world\", \"php\"]) == \"hello\"", "assert find_max([\"hello\", \"world\", \"goodbye\", \"hi\"]) == \"world\"", "assert find_max([\"hello\", \"world\", \"goodbye\", \"hi\", \"hey\"]) == \"world\"", "assert find_max([\"hello\", \"world\", \"goodbye\", \"hi\", \"hey\", \"how\"]) == \"world\"", "assert find_max([\"hello\", \"world\", \"goodbye\", \"hi\", \"hey\", \"how\", \"heyy\"]) == \"world\"", "assert find_max([\"hello\", \"world\", \"goodbye\", \"hi\", \"hey\", \"how\", \"heyy\", \"hello\"]) == \"hello\"", "assert find_max([\"hello\", \"world\", \"goodbye\", \"hi\", \"hey\", \"how\", \"heyy\", \"hello\", \"world\"]) == \"world\"", "assert find_max([\"hello\", \"world\", \"goodbye\"]) == \"wor\"", "assert find_max([\"hello\", \"world\", \"goodbye\", \"hi\"]) == \"hie\"", "assert find_max([\"hello\", \"world\", \"goodbye\", \"hi\", \"hey\"]) == \"hey\"", "assert find_max([\"hello\", \"world\", \"goodbye\", \"hi\", \"hey\", \"hi\"]) == \"hie\"", "assert find_max([\"hello\", \"world\", \"goodbye\", \"hi\", \"hey\", \"hi\", \"hello\"]) == \"hello\"", "assert find_max([\"hello\", \"world\", \"goodbye\", \"hi\", \"hey\", \"hi\", \"hello\", \"world\"]) == \"hello\"", "assert find_max([\"hello\", \"world\", \"goodbye\", \"hi\", \"hey\", \"hi\", \"hello\", \"world\", \"goodbye\"]) == \"hello\"", "assert find_max([\"hello\", \"world\", \"heLLo\"]) == \"HELLO\"", "assert find_max([\"hello\", \"world\", \"hello\", \"world\"]) == \"HELLO\"", "assert find_max([\"hello\", \"world\", \"hello\", \"world\", \"hello\"]) == \"HELLO\"", "assert find_max([\"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\"]) == \"HELLO\"", "assert find_max([\"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\"]) == \"HELLO\"", "assert find_max([\"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\"]) == \"HELLO\""]}
{"HumanEval/159": ["assert eat(5, 6, 10) == (11, 4)", "assert eat(4, 8, 9) == (12, 1)", "assert eat(1, 10, 10) == (11, 0)", "assert eat(2, 11, 5) == (7, 0)", "assert eat(3, 12, 10) == (13, 0)", "assert eat(1, 1, 10) == (11, 0)", "assert eat(5, 5, 10) == (16, 0)", "assert eat(10, 10, 10) == (20, 0)", "assert eat(5, 6, 11) == (16, 1)", "assert eat(1, 1, 9) == (11, 0)", "assert eat(1, 2, 3) == (2, 1)", "assert eat(10, 2, 1) == (9, 1)", "assert eat(100, 10, 10) == (110, 0)", "assert eat(100, 100, 100) == (110, 0)", "assert eat(5, 6, 10) == [11, 4]", "assert eat(4, 8, 9) == [12, 1]", "assert eat(1, 10, 10) == [11, 0]", "assert eat(2, 11, 5) == [7, 0]", "assert eat(5, 10, 15) == [16, 5]", "assert eat(2, 8, 12) == [10, 2]", "assert eat(10, 5, 0) == [15, 0]", "assert eat(0, 0, 0) == [0, 0]", "assert eat(1, 1, 10) == (2, 9)", "assert eat(2, 2, 9) == (4, 1)", "assert eat(3, 3, 8) == (7, 1)", "assert eat(4, 4, 7) == (11, 0)", "assert eat(5, 6, 0) == [6, 0]", "assert eat(2, 2, 5) == [3, 5]", "assert eat(10, 10, 10) == [0, 0]", "assert eat(1, 1, 10) == (2, 0)", "assert eat(5, 6, 0) == (5, 0)", "assert eat(10, 0, 10) == (10, 0)", "assert eat(1, 1, 10) == [11, 0]", "assert eat(10, 1, 10) == [11, 0]", "assert eat(10, 10, 10) == [11, 0]", "assert eat(10, 10, 0) == [11, 0]", "assert eat(3, 12, 7) == [10, 0]", "assert eat(1, 9, 5) == [11, 1]", "assert eat(5, 7, 3) == [12, 2]", "assert eat(8, 12, 4) == [16, 0]", "assert eat(3, 12, 6) == [10, 0]", "assert eat(3, 7, 8) == [10, 2]", "assert eat(6, 5, 12) == [16, 0]", "assert eat(8, 6, 6) == [24, 0]", "assert eat(10, 3, 0) == [10, 0]", "assert eat(5, 7, 10) == [16, 0]", "assert eat(2, 3, 8) == [5, 0]", "assert eat(7, 10, 10) == [17, 0]", "assert eat(10, 20, 10) == [30, 0]", "assert eat(5, 7, 8) == (13, 2)", "assert eat(10, 10, 10) == (0, 0)", "assert eat(3, 7, 8) == (10, 2)", "assert eat(6, 5, 15) == (11, 4)", "assert eat(10, 2, 5) == (11, 0)", "assert eat(1, 2, 9) == [2, 7]", "assert eat(10, 8, 8) == [18, 0]", "assert eat(5, 5, 5) == [10, 0]", "assert eat(1, 2, 10) == (2, 9)", "assert eat(2, 2, 2) == (4, 0)", "assert eat(1, 1, 1) == (2, 0)", "assert eat(10, 10, 10) == (10, 0)", "assert eat(5, 7, 8) == [12, 2]", "assert eat(10, 5, 3) == [15, 1]", "assert eat(1, 1, 10) == [1, 9]", "assert eat(5, 8, 15) == (13, 1)", "assert eat(3, 7, 12) == (10, 2)", "assert eat(7, 6, 2) == (10, 0)", "assert eat(10, 1, 1) == (10, 0)", "assert eat(10, 10, 5) == [10, 0]", "assert eat(5, 10, 5) == [15, 0]", "assert eat(5, 7, 10) == (11, 0)", "assert eat(6, 8, 8) == (13, 2)", "assert eat(3, 4, 10) == (7, 0)", "assert eat(5, 8, 12) == [17, 2]", "assert eat(3, 12, 7) == [12, 5]", "assert eat(7, 8, 5) == [15, 5]", "assert eat(5, 10, 10) == [11, 0]", "assert eat(6, 8, 5) == [11, 0]", "assert eat(1, 8, 5) == [7, 0]", "assert eat(10, 5, 5) == [11, 0]", "assert eat(6, 8, 5) == [11, 5]", "assert eat(2, 5, 2) == [7, 2]", "assert eat(1, 2, 0) == [1, 0]", "assert eat(3, 7, 10) == [10, 1]", "assert eat(1, 5, 5) == [6, 0]", "assert eat(5, 6, 5) == [11, 0]", "assert eat(5, 6, 1000) == [11, 0]", "assert eat(3, 12, 3) == (10, 1)", "assert eat(6, 13, 2) == (12, 0)", "assert eat(10, 15, 1) == (14, 0)", "assert eat(20, 20, 0) == (20, 0)", "assert eat(5, 8, 10) == [13, 0]", "assert eat(2, 5, 8) == [7, 2]", "assert eat(6, 10, 5) == [12, 5]", "assert eat(10, 2, 0) == [10, 0]", "assert eat(5, 8, 10) == (13, 2)", "assert eat(3, 7, 15) == (10, 5)", "assert eat(6, 12, 20) == (18, 8)", "assert eat(7, 13, 10) == (17, 2)", "assert eat(3, 12, 10) == (13, 1)", "assert eat(10, 10, 10) == (11, 0)", "assert eat(1, 5, 5) == (6, 0)", "assert eat(1, 1, 0) == (1, 0)", "assert eat(5, 7, 15) == (16, 5)", "assert eat(1, 2, 10) == (2, 0)", "assert eat(2, 2, 2) == (2, 0)"]}
{"HumanEval/160": ["assert do_algebra(['**', '/'], [2, 3, 4]) == 2 ** 3 / 4", "assert do_algebra(['+', '*'], [2, 3, 4, 5]) == 9", "assert do_algebra(['-', '*'], [2, 3, 4, 5]) == 4", "assert do_algebra(['+', '*', '*'], [2, 3, 4, 5]) == 24", "assert do_algebra(['+', '*', '*', '*'], [2, 3, 4, 5]) == 240", "assert do_algebra(['-', '*', '*', '*'], [2, 3, 4, 5]) == 8", "assert do_algebra(['/', '//'], [2, 3, 4, 5]) == 6", "assert do_algebra(['**'], [2, 3, 4, 5]) == 24", "assert do_algebra(['-', '*'], [2, 3, 4, 5]) == 8", "assert do_algebra(['+', '*'], [2, 3, 4]) == 10", "assert do_algebra(['-', '*'], [2, 3, 4]) == 6", "assert do_algebra(['+', '*', '*'], [2, 3, 4]) == 24", "assert do_algebra(['+', '*', '*', '*'], [2, 3, 4]) == 80", "assert do_algebra(['-', '*', '*', '*'], [2, 3, 4]) == 48", "assert do_algebra(['/', '//'], [2, 3, 4]) == 6", "assert do_algebra(['**'], [2, 3, 4]) == 24", "assert do_algebra(['+'], [1, 2, 3]) == 6", "assert do_algebra(['-'], [1, 2, 3]) == 1", "assert do_algebra(['/'], [10, 2, 3]) == 6", "assert do_algebra(['-', '*', '*'], [2, 3, 4, 5]) == 20", "assert do_algebra(['+', '+', '+'], [2, 3, 4, 5]) == 10", "assert do_algebra(['-', '-', '-'], [2, 3, 4, 5]) == 1", "assert do_algebra(['/', '/', '/'], [2, 3, 4, 5]) == 6", "assert do_algebra(['**', '**', '**'], [2, 3, 4, 5]) == 24", "assert do_algebra(['+'], [2, 3]) == 5", "assert do_algebra(['-'], [2, 3]) == 1", "assert do_algebra(['/'], [2, 3]) == 1.5", "assert do_algebra(['//'], [2, 3]) == 1", "assert do_algebra(['**'], [2, 3]) == 8", "assert do_algebra(['+', '*'], [2, 3]) == 6", "assert do_algebra(['-', '*'], [2, 3]) == 1", "assert do_algebra(['+', '/'], [2, 3]) == 1.5", "assert do_algebra(['-', '*'], [2, 3, 4]) == 11", "assert do_algebra(['+', '*'], [2, 3, 4, 5]) == 18", "assert do_algebra(['-', '*'], [2, 3, 4, 5]) == 12", "assert do_algebra(['+', '*'], [2, 3, 4, 5, 6]) == 27", "assert do_algebra(['-', '*'], [2, 3, 4, 5, 6]) == 15", "assert do_algebra(['+', '*'], [2, 3, 4, 5, 6, 7]) == 36", "assert do_algebra(['-', '*'], [2, 3, 4, 5]) == 18", "assert do_algebra(['+'], [1, 2]) == 3", "assert do_algebra(['-'], [1, 2]) == 1", "assert do_algebra(['/'], [10, 2]) == 5", "assert do_algebra(['//'], [10, 2]) == 5", "assert do_algebra(['+', '*'], [1, 2]) == 3", "assert do_algebra(['-', '*'], [1, 2]) == 1", "assert do_algebra(['+', '/'], [2, 3]) == 5", "assert do_algebra(['+', '*', '*'], [2, 3, 4, 5]) == 36", "assert do_algebra(['-', '*'], [2, 3, 4]) == 5", "assert do_algebra(['-', '*', '*'], [2, 3, 4, 5]) == 18", "assert do_algebra(['+'], [1, 2, 3]) == 3", "assert do_algebra(['/'], [2, 3, 4]) == 6", "assert do_algebra(['//'], [2, 3, 4]) == 2", "assert do_algebra(['*'], [1, 2, 3]) == 6", "assert do_algebra(['/'], [10, 3]) == 3", "assert do_algebra(['+', '*'], [2, 3, 4, 5]) == 27", "assert do_algebra(['/', '*'], [2, 3, 4, 5]) == 12", "assert do_algebra(['//'], [2, 3, 4]) == 6", "assert do_algebra(['+', '*'], [1, 2, 3]) == 6", "assert do_algebra(['/'], [2, 3]) == 1", "assert do_algebra(['+', '/'], [1, 2]) == 1", "assert do_algebra(['-', '*'], [2, 3, 4, 5]) == 6", "assert do_algebra(['/', '*'], [2, 3, 4]) == 12", "assert do_algebra(['**', '*'], [2, 3, 4]) == 24", "assert do_algebra(['//', '*'], [2, 3, 4]) == 6", "assert do_algebra(['-'], [1, 2, 3]) == 5", "assert do_algebra(['//'], [2, 3]) == 2", "assert do_algebra(['**'], [1, 2]) == 2", "assert do_algebra(['-', '*'], [2, 3, 4, 5]) == 14", "assert do_algebra(['+', '*', '*'], [2, 3, 4, 5]) == 18", "assert do_algebra(['-', '*', '*'], [2, 3, 4, 5]) == 24", "assert do_algebra(['+', '*', '*', '*'], [2, 3, 4, 5]) == 36", "assert do_algebra(['-', '*', '*', '*'], [2, 3, 4, 5]) == 48", "assert do_algebra(['+', '*', '*', '/'], [2, 3, 4, 5]) == 25", "assert do_algebra(['-', '*', '*', '/'], [2, 3, 4, 5]) == 20", "assert do_algebra(['+', '*', '*', '**'], [2, 3, 4, 5]) == 24", "assert do_algebra(['-', '*', '*'], [2, 3, 4, 5]) == 6", "assert do_algebra(['+', '*'], [1, 2, 3]) == 7", "assert do_algebra(['-', '*'], [1, 2, 3]) == 6", "assert do_algebra(['//'], [1, 2]) == 1", "assert do_algebra(['+', '*', '+'], [1, 2, 3]) == 7", "assert do_algebra(['+', '*', '*', '/'], [2, 3, 4, 5]) == 8", "assert do_algebra(['+', '*', '*', '*', '*', '*'], [2, 3, 4, 5]) == 800", "assert do_algebra(['+', '*', '*', '*', '*', '*', '*', '*'], [2, 3, 4, 5]) == 8000", "assert do_algebra(['-', '*'], [1, 2]) == -1", "assert do_algebra(['+', '/'], [2, 3]) == 1", "assert do_algebra(['+', '*'], [2, 3, 4]) == 14", "assert do_algebra(['+', '*'], [2, 3, 4, 5]) == 38", "assert do_algebra(['-', '*'], [2, 3, 4]) == 12", "assert do_algebra(['**'], [2, 3, 4]) == 80", "assert do_algebra(['-'], [1, 2, 3]) == 2", "assert do_algebra(['/'], [10, 2, 3]) == 16", "assert do_algebra(['//'], [10, 2, 3]) == 3", "assert do_algebra(['+', '*'], [1, 2, 3]) == 5", "assert do_algebra(['-', '*'], [1, 2, 3]) == 1"]}
{"HumanEval/161": ["assert solve(\"AbCdEf\") == \"ABCDEF\"", "assert solve(\"hello world\") == \"hElLo WoRlD\"", "assert solve(\"12345\") == \"4321\"", "assert solve(\"!@#$%^&*()_+-=[]{}|\\\\;':\\\"'<>,.?/~`\") == \"$%^&*(){}[]<>./?~`@#@$@#$%\"", "assert solve(\"\") == \"\"", "assert solve(\"1234567890\") == \"1234567890\"", "assert solve(\"abcdefghijklmnopqrstuvwxyz\") == \"abcdefghijklmnopqrstuvwxyz\"", "assert solve(\"hello world\") == \"HELLO WORLD\"", "assert solve(\"Abc\") == \"ABC\"", "assert solve(\"$%^&*()_+-={}[]|\\\\:;'<>,.?/~`\") == \"$%^&*()_+-={}[]|\\\\:;'<>,.?/~`\"", "assert solve(\"abcdefghijklmnopqrstuvwxyz\") == \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"", "assert solve(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") == \"abcdefghijklmnopqrstuvwxyz\"", "assert solve(\"1234\") == \"4321\"", "assert solve(\"Ab\") == \"AB\"", "assert solve(\"12345\") == \"43215\"", "assert solve(\"ABC\") == \"abc\"", "assert solve(\"123456789\") == \"987654321\"", "assert solve(\"abcdefg\") == \"FGCDABCE\"", "assert solve(\"1234567890\") == \"9876543210\"", "assert solve(\"HELLO WORLD\") == \"hElLo wOrLd\"", "assert solve(\"Ab\") == \"Ab\"", "assert solve(\"1#a@c\") == \"#a@c\"", "assert solve(\"abc\") == \"ABC\"", "assert solve(\"123456789\") == \"123456789\"", "assert solve(\"1234abcde\") == \"1234abcde\"", "assert solve(\"1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ\") == \"6543210123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"", "assert solve(\"a\") == \"a\"", "assert solve(\"A\") == \"A\"", "assert solve(\"!@#$%^&*()_+-={}[]|\\\\:;'<>,.?/~`\") == \"~`@#$%^&*()_+-={}[]|\\\\:;'<>.,?/~`\"", "assert solve(\"hello world\") == \"Hello World\"", "assert solve(\"!@#$%^&*()_+-=[]{}|;':\\\"'<>,.?/~`\") == \"\\n@#$%^&*()_+-=[]{}|;':\\\"'<>,.?/~`\"", "assert solve(\"AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\") == \"AAABBCBCDDDDEEEFFGGHIJJKKLMNNNOOPPPQQRRSTTUUVVWWXYZZ\"", "assert solve(\"AbC\") == \"ABC\"", "assert solve(\"!@#$%^&*()_+-={}[]|\\\\:;'\\\"<>,.?/~`\") == \"$%^&*()_+-={}[]|\\\\:;'\\\"<>,.?/~`\"", "assert solve(\"hello\") == \"Hello\"", "assert solve(\"#a@c\") == \"#A@c\"", "assert solve(\"AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\") == \"ZyxWvUTwOqpRsDdHyJlGjNfBeEaKcLbFdAaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\"", "assert solve(\"AaBb\") == \"AaBb\"", "assert solve(\"!@#$%^&*()_+-=[]{}|\\\\;':\\\"'<>,.?/~`\") == \"~`\"\"\"", "assert solve(\"A\") == \"a\"", "assert solve(\"AbCd\") == \"ABCd\"", "assert solve(\"1#a@c\") == \"#A@c\"", "assert solve(\"123456\") == \"432156\"", "assert solve(\"123456789\") == \"432156789\"", "assert solve(\"abcdefg\") == \"ABCDEFG\"", "assert solve(\"123456789012\") == \"987654321012\"", "assert solve(\"   \") == \"   \"", "assert solve(\"hello world\") == \"hOwOrLd\"", "assert solve(\"Hello World\") == \"HoWoRlD\"", "assert solve(\"Abc\") == \"AbC\"", "assert solve(\"   \") == \"\"", "assert solve(\"   hello world\") == \"hello world\"", "assert solve(\"   Abc\") == \"AbC\"", "assert solve(\"   abc\") == \"ABC\"", "assert solve(\"Hello World\") == \"HELLO WORLD\"", "assert solve(\"aBc\") == \"bAC\"", "assert solve(\"1234567890\") == \"987654321\"", "assert solve(\"abc\") == \"abc\"", "assert solve(\"AaBb\") == \"AbA\"", "assert solve(\"1234567890abcde\") == \"9876543210ABCDE\"", "assert solve(\"1234567890abcdefg\") == \"9876543210abcdefg\"", "assert solve(\"1234567890abcdefghijklmnopqrstuvwxyz\") == \"9876543210abcdefghijklmnopqrstuvwxyz\"", "assert solve(\"1234567890abcdefghiJkLmNopQrStUvWxyZ\") == \"9876543210abcdefghiJkLmNopQrStUvWxyZ\"", "assert solve(\"hello\") == \"HElLo\"", "assert solve(\"world\") == \"WoRlD\"", "assert solve(\"Abc\") == \"abc\"", "assert solve(\"!@#$%^&*()_+-=[]{}|\\\\;',\\\"'<>?`~\") == \"!@#$%^&*()_+-=[]{}|\\\\;',\\\"'<>?`~\"", "assert solve(\"AbCd\") == \"AbCd\"", "assert solve(\"aBc\") == \"aBc\"", "assert solve(\"hello world\") == \"HElLo WoRlD\"", "assert solve(\"HeLLo WORLD\") == \"HELLO WORLD\"", "assert solve(\"123456789\") == \"789654321\"", "assert solve(\"hello\") == \"HELLO\"", "assert solve(\"1234abc\") == \"4321abc\"", "assert solve(\"12345abc\") == \"43215abc\"", "assert solve(\"12345abcde\") == \"43215abcde\"", "assert solve(\"123456abcde\") == \"432156abcde\"", "assert solve(\"1234567890abcde\") == \"4321567890abcde\"", "assert solve(\"aBc\") == \"BC\"", "assert solve(\"$%#@!\") == \"$%#@!\"", "assert solve(\"!@#$%^&*()_+-=[]{}|\\\\;'<>,.?/~`\") == \"$%^&*()_+-=[]{}|\\\\;'<>,.?/~`\"", "assert solve(\"hello world\") == \"hELLO wORLD\"", "assert solve(\"hello\") == \"hello\"", "assert solve(\"123456789abc\") == \"987654321abc\"", "assert solve(\"@abc\") == \"@ABC\"", "assert solve(\"!@#$%^&*()_+-={}[]|\\\\:;'\\\"`~\") == \"!@#$%^&*()_+-={}[]|\\\\:;'\\\"`~\"", "assert solve(\"1234567890\") == \"4321567890\"", "assert solve(\"world\") == \"World\"", "assert solve(\"Abcd\") == \"Abcd\"", "assert solve(\"123456789abcdef\") == \"987654321abcdef\"", "assert solve(\"HeLLo WORLD\") == \"hELLO wOrLd\"", "assert solve(\"@abcdefghijklmnopqrstuvwxyz\") == \"@abcdefghijklmnopqrstuvwxyz\"", "assert solve(\"123456789012\") == \"123456789012\"", "assert solve(\"!@#$%^&*()_+-=[]{}|\\\\;'<>,.?/~`\") == \"`~`\"", "assert solve(\"1234 1234\") == \"4321 1234\"", "assert solve(\"a@b\") == \"aB\"", "assert solve(\"HeLlO WORLD\") == \"HELLO WORLD\"", "assert solve(\"!@#$%^&*()_+-=[]{}|;':\\\"'<>,.?/~`\") == \"!@#$%^&*()_+-=[]{}|;':\\\"'<>,.?/~`\"", "assert solve(\"@#CcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\") == \"@#CcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\"", "assert solve(\"!@#$%^&*()_+-=[]{}|\\\\;'<>,.?/~`\") == \"\"", "assert solve(\"AaBb\") == \"ABB\"", "assert solve(\"aBc\") == \"BCA\"", "assert solve(\"aAb\") == \"ABB\"", "assert solve(\"aAbc\") == \"ABC\"", "assert solve(\"HeLlO WoRld\") == \"HELLO WORLD\"", "assert solve(\"AbCdEfGhIjKlMnOpQrStUvWxYz\") == \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"", "assert solve(\"AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\") == \"AAABBCBCDCDFDFGHIJJKKLMNNOPORPRSSSTTUUVVWXYZZ\"", "assert solve(\"123abc\") == \"321a1\"", "assert solve(\"123456789012\") == \"9012345678\"", "assert solve(\"!@#$%^&*()_+-=[]{}|;'<>,.?/~`\") == \"!@#$%^&*()_+-=[]{}|;'<>,.?/~`\"", "assert solve(\"world\") == \"WORLD\""]}
{"HumanEval/162": ["assert string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'", "assert string_to_md5('') == None", "assert string_to_md5('Hello') == None", "assert string_to_md5('world') == None", "assert string_to_md5('hello world') == None", "assert string_to_md5('hello world') == 'fdfbf8d6d6e6b36916d623d5b7c1d'", "assert string_to_md5('hello world') == '8d46d99c3f24f1d5c80316d496d868d9'", "assert string_to_md5('hello\\nworld') == '6b9299e5c247695c6eef34e5f67b7d6b'", "assert string_to_md5('hello') == None", "assert string_to_md5('World') == None", "assert string_to_md5('Hell') == None", "assert string_to_md5('hello world') == 'd8f7cbfb8e89fc31f5d6bcf01b43d46'", "assert string_to_md5('hello world') == '8f1d63e78a3a7b438cb878a887d958f'", "assert string_to_md5('hello world') == 'f8b1d8fb3c3c33676d5fbfc5633666b'", "assert string_to_md5('hello world') == 'f8b4d8a52f3fc9ceb219b21bb8a444b'", "assert string_to_md5('hello world ') == None", "assert string_to_md5('Hello, world!') == '7f8acd6a3b1143e6a1b7b27d42cc8d9'", "assert string_to_md5('Hello World') == '7f8acd6a3b1143e6a1b7b27d42cc8d9'", "assert string_to_md5('Hello ') == None", "assert string_to_md5('hello world') == '78f8d36e8ab4b6816464d456bb0e5d'", "assert string_to_md5('hello') == '7eb6d3fad399ca885b6e8a32f8a96'", "assert string_to_md5('world') == '2d769b5ef523b3e6d5f3d3b2b7d97'", "assert string_to_md5('hello\\nworld') == '78f8d36e8ab4b6816464d456bb0e5d'", "assert string_to_md5('Hallo') == 'd4f7cbea68e96a74e199e123a5a6d'", "assert string_to_md5('World') == '93c5d63b2a92c034f1611c1f8a527b'", "assert string_to_md5('Python') == '2e4e68e9d6d96d2d624a0c4d93732b'", "assert string_to_md5('Python\\n\\t') == '9c10c833d3c3d4b2d4f7e2a6a73a'", "assert string_to_md5('Hallo') == '8d9d152f4f1a4a57d63f6a3a7c6f3e'", "assert string_to_md5('hello world') == '14c86dbcef8f6c83b3c7a1b6cbbcf5e'", "assert string_to_md5('hello world') == '8d1a7f449683f7b446c7b4c5dc3b4e8e'", "assert string_to_md5('world\\n') == None", "assert string_to_md5('Hellowrld') == None", "assert string_to_md5('HelloWorld') == None", "assert string_to_md5('hello world') == '8dcec1e7ef64f41682ee01d4a6f2d8a'", "assert string_to_md5('Hallo') == '7d86f2a7fde123d45b4f2c97664193'", "assert string_to_md5('hello world') == '3e25960a79dbc69b674cd4ec67a72c62'", "assert string_to_md5('world') == '3e25960a79dbc69b674cd4ec67a72c62'", "assert string_to_md5('hello') == '7d86f2a7fde123d45b4f2c97664193'", "assert string_to_md5('hello world ') == '7d86f2a7fde123d45b4f2c97664193'", "assert string_to_md5('hello world') == 'd4c85ad6e6eef65cc264cbce5a2f884d'", "assert string_to_md5('Helloworld') == 'f8b1d8b0d4ef517f78d19e1d0a191d1'", "assert string_to_md5('hello world\\n') == 'f8b1d8b0d4ef517f78d19e1d0a191d1'", "assert string_to_md5('Helloworld') == 'd8f267ee5c3fa95c7d7dd45191b6e87b'", "assert string_to_md5('hello world') == '7d8c5befbded686d91d661d824d46e'", "assert string_to_md5('Helloworld') == '4d18d60f732b1744e16c77136b67a6a'", "assert string_to_md5('hello world') == '8f32d7f30318b45a7d9e7816a8c92b'", "assert string_to_md5('hello world\\n') == '8f32d7f30318b45a7d9e7816a8c92b'", "assert string_to_md5('hello world\\r') == '8f32d7f30318b45a7d9e7816a8c92b'", "assert string_to_md5('hello world\\t') == '8f32d7f30318b45a7d9e7816a8c92b'", "assert string_to_md5('hello world\\v') == '8f32d7f30318b45a7d9e7816a8c92b'", "assert string_to_md5('hello world') == '8e3d4c5cbf2cbc74f4d5e4c2b4bb888'", "assert string_to_md5('hello world\\n') == '8e3d4c5cbf2cbc74f4d5e4c2b4bb888'", "assert string_to_md5('hello world'.upper()) == 'd82bfdc119e3f0aae7c8f8bad36c5e6'", "assert string_to_md5('hello world'.lower()) == 'd82bfdc119e3f0aae7c8f8bad36c5e6'", "assert string_to_md5('hello world'.capitalize()) == 'D82BFDC119E3F0AAE7C8FBAD36C5E6'", "assert string_to_md5('hello world\\n') == None", "assert string_to_md5('hello world\\r') == None", "assert string_to_md5('hello world\\t') == None", "assert string_to_md5('hello world') == '7f8dccd5b29bbbf6d93c5c34f4a4f6'", "assert string_to_md5('hello world\\n') == '9216d68d9e3e3d8c577417e561a562'", "assert string_to_md5('hello world\\r\\n') == '67aab6e8f51c64912463b33675262'", "assert string_to_md5('hello world') == '7d8bb6fde32a5c6e5619b4c3d5a63b2'", "assert string_to_md5('hello world\\n') == '96629aa016a4f082d47e4c31626f77f'", "assert string_to_md5('hello world') == '8f8d8c8a911f466e57c4b333d8bbb438'", "assert string_to_md5('hello world') == 'f8b1d7db81e5958ca73976d43aa598972'", "assert string_to_md5('hello world\\n') == 'f8b1d7db81e5958ca73976d43aa598972'", "assert string_to_md5('hello world') == 'f9c8a0d7f2c51a0389c513c67687c2d'", "assert string_to_md5('Helloworld') == 'f7d6f80e6bb8ae2e34d4cfc678b62e'", "assert string_to_md5('hello world') == 'f7d6f80e6bb8ae2e34d4cfc678b62e'", "assert string_to_md5('hello world') == 'f8b7b7c4d8917067f9c83e1d4b698d01'", "assert string_to_md5('hello world') == '2f8eaa9d7c957bb277ebbd8a8eab6d'", "assert string_to_md5('hello world\\n') == '2f8eaa9d7c957bb277ebbd8a8eab6d'", "assert string_to_md5('hello world') == 'd4f7c2f89c128c88b44f45bc8a0618'", "assert string_to_md5('   hello world   ') == '864043e763298d9c49b44be194e57d76'", "assert string_to_md5('\\t\\nhello world\\t\\n') == '272e4563d671c4b5d6a5b5e571873'", "assert string_to_md5('hello world') == 'd5c8fcecbfc29121d5e8d60c3e6cb4c7a'", "assert string_to_md5('hello world') == '8d6d3f12b7f3a3f1c74c680877367b66'", "assert string_to_md5('hello world') == '8d6dc3e66ef1f67c8737c8ca46e937c'", "assert string_to_md5('   hello world\\n') == '8d6dc3e66ef1f67c8737c8ca46e937c'", "assert string_to_md5('Helloworld') == '8d1a5e8c5f9c528a5c79d94c6c52b2d6c'", "assert string_to_md5('hello world') == '8f1c6c2dcf7d7ca91aae84ebea0f9c2'", "assert string_to_md5('hello world') == '78f6ca53dbe80c81b47bdc0b137c7c96'", "assert string_to_md5('123456') == '9279f2fc16b7b7333cb89c6d3fde37d7f'", "assert string_to_md5('abc') == 'a94ff9eefc0fb27e458fd5b8ce497eb9'", "assert string_to_md5('hello world') == '8c4d6373d5fbc98474d3b33cb7d1c88a6'", "assert string_to_md5('Helloworld') == '8d2a1a4fbd5d1b213d76d3a30e1b1d4'", "assert string_to_md5('hello world') == '76dba1141a5b41332c843a137307c59'", "assert string_to_md5('Helloworld') == '8a8f24d88ab81fd95fbd5c8bc55fb65'", "assert string_to_md5('hello world') == 'fdfd6aae62a8f1b1e3993e64c61f2e'", "assert string_to_md5('hello   world') == None", "assert string_to_md5('Hallo') == '8d4c5e0f5b8655c336683c088e6d4e'", "assert string_to_md5('hello world') == 'e9b5dba581ee8ccda16f7c31389583'", "assert string_to_md5('hello world') == '8f7cb336d5cbbf17473d97978d82d1'", "assert string_to_md5('hello world\\n') == '8f7cb336d5cbbf17473d97978d82d1'", "assert string_to_md5('hello world\\t') == '8f7cb336d5cbbf17473d97978d82d1'", "assert string_to_md5('hello world\\r') == '8f7cb336d5cbbf17473d97978d82d1'", "assert string_to_md5('hello world\\n\\r') == '8f7cb336d5cbbf17473d97978d82d1'", "assert string_to_md5('hello world') == 'f8b4c7cbc2d41bd46931474d1b1feb5b'", "assert string_to_md5('Hallo world') == '782d1f2a934bb8c0a6b77eb433b61e6'", "assert string_to_md5('hello world') == '6578efd8336f07aa5485a23c3e6f0e'", "assert string_to_md5('hello world\\n') == '6578efd8336f07aa5485a23c3e6f0e'", "assert string_to_md5('hello world') == 'd8f6cddc117a741d687c669cc017481d'", "assert string_to_md5('hello world') == 'f8b7a08d13d98cc82f398d19d3eb3757'", "assert string_to_md5('hello world\\n') == '96aae39a9597f5c677c97c0bb73b69c'", "assert string_to_md5('Hallo Welt') == '9d4863a9d61462f19d93419df4eb7a6c'", "assert string_to_md5('Helloworld') == 'f4d8c6e2c217b862f714f8ce06a632b'", "assert string_to_md5('hello world') == 'd4ed87d883b7e5a15b7eb3270d4b771a'"]}
{"HumanEval/163": ["assert generate_integers(2, 8) == [2, 4, 6, 8]", "assert generate_integers(8, 2) == [2, 4, 6, 8]", "assert generate_integers(10, 14) == []", "assert generate_integers(1, 9) == []", "assert generate_integers(10, 1) == []", "assert generate_integers(2, 1) == []", "assert generate_integers(2, 10) == []", "assert generate_integers(10, 2) == []", "assert generate_integers(2, 3) == []", "assert generate_integers(8, 9) == []", "assert generate_integers(10, 12) == []", "assert generate_integers(1, 10) == []", "assert generate_integers(9, 1) == []", "assert generate_integers(1, 2) == []", "assert generate_integers(10, 9) == []", "assert generate_integers(3, 2) == []", "assert generate_integers(8, 10) == []", "assert generate_integers(10, 10) == []", "assert generate_integers(10, 8) == [8]", "assert generate_integers(100, 99) == []", "assert generate_integers(100, 101) == []", "assert generate_integers(101, 102) == []", "assert generate_integers(2, 100) == []", "assert generate_integers(10, 11) == [10]", "assert generate_integers(3, 9) == []", "assert generate_integers(2, 11) == [2]", "assert generate_integers(10, 8) == []", "assert generate_integers(12, 16) == []", "assert generate_integers(8, 1) == []", "assert generate_integers(100, 100) == []", "assert generate_integers(100, 101) == [100]", "assert generate_integers(101, 100) == []", "assert generate_integers(10, 11) == []", "assert generate_integers(10, 12) == [10]", "assert generate_integers(1, 1) == []", "assert generate_integers(10, 12) == [10, 11]", "assert generate_integers(100, 101) == [101]", "assert generate_integers(3, 8) == []", "assert generate_integers(3, 10) == []", "assert generate_integers(1, 100) == []", "assert generate_integers(100, 1) == []", "assert generate_integers(12, 14) == []", "assert generate_integers(10, 8) == [2, 4, 6, 8]", "assert generate_integers(10, 11) == [11]", "assert generate_integers(10, 9) == [10]", "assert generate_integers(100, 2) == []", "assert generate_integers(101, 102) == [101]", "assert generate_integers(102, 103) == [102]", "assert generate_integers(2, 3) == [2]", "assert generate_integers(10, 9) == [1]", "assert generate_integers(8, 9) == [8]", "assert generate_integers(10, 100) == []"]}
