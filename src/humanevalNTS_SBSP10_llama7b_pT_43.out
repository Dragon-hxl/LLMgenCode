multi:
  sample_num: 10
  debug:
    max_new_tokens: 512
    temperature: 1.0
    top_k: 50
    top_p: 0.95
    do_sample: true
    num_return_sequences: 10
codeT:
  base:
    temperature: 0.0
    top_p: 1.0
  debug:
    max_gen: 512
    temperature: 1.0
    top_p: 0.95
model_path: /lustre/S/hexiaolong/llama7b
output: ../res/humanevalNTS_SBSP10_llama7b_pT_43.jsonl
sample_num: 10
Strategy: NTS
dataset: humaneval

load dataset:humaneval
load dataset : humaneval
load 43 problems
{0: '67GiB', 1: '67GiB', 2: '67GiB', 3: '67GiB'}
load model from  /lustre/S/hexiaolong/llama7b
Loading checkpoint shards:   0%|          | 0/2 [00:00<?, ?it/s]Loading checkpoint shards:  50%|█████     | 1/2 [00:03<00:03,  3.56s/it]Loading checkpoint shards: 100%|██████████| 2/2 [00:04<00:00,  2.24s/it]Loading checkpoint shards: 100%|██████████| 2/2 [00:04<00:00,  2.43s/it]
Some weights of LlamaForCausalLM were not initialized from the model checkpoint at /lustre/S/hexiaolong/llama7b and are newly initialized: ['model.layers.0.mlp.cache_fix', 'model.layers.0.self_attn.k_cache', 'model.layers.0.self_attn.q_cache', 'model.layers.0.self_attn.v_cache', 'model.layers.1.mlp.cache_fix', 'model.layers.1.self_attn.k_cache', 'model.layers.1.self_attn.q_cache', 'model.layers.1.self_attn.v_cache', 'model.layers.10.mlp.cache_fix', 'model.layers.10.self_attn.k_cache', 'model.layers.10.self_attn.q_cache', 'model.layers.10.self_attn.v_cache', 'model.layers.11.mlp.cache_fix', 'model.layers.11.self_attn.k_cache', 'model.layers.11.self_attn.q_cache', 'model.layers.11.self_attn.v_cache', 'model.layers.12.mlp.cache_fix', 'model.layers.12.self_attn.k_cache', 'model.layers.12.self_attn.q_cache', 'model.layers.12.self_attn.v_cache', 'model.layers.13.mlp.cache_fix', 'model.layers.13.self_attn.k_cache', 'model.layers.13.self_attn.q_cache', 'model.layers.13.self_attn.v_cache', 'model.layers.14.mlp.cache_fix', 'model.layers.14.self_attn.k_cache', 'model.layers.14.self_attn.q_cache', 'model.layers.14.self_attn.v_cache', 'model.layers.15.mlp.cache_fix', 'model.layers.15.self_attn.k_cache', 'model.layers.15.self_attn.q_cache', 'model.layers.15.self_attn.v_cache', 'model.layers.16.mlp.cache_fix', 'model.layers.16.self_attn.k_cache', 'model.layers.16.self_attn.q_cache', 'model.layers.16.self_attn.v_cache', 'model.layers.17.mlp.cache_fix', 'model.layers.17.self_attn.k_cache', 'model.layers.17.self_attn.q_cache', 'model.layers.17.self_attn.v_cache', 'model.layers.18.mlp.cache_fix', 'model.layers.18.self_attn.k_cache', 'model.layers.18.self_attn.q_cache', 'model.layers.18.self_attn.v_cache', 'model.layers.19.mlp.cache_fix', 'model.layers.19.self_attn.k_cache', 'model.layers.19.self_attn.q_cache', 'model.layers.19.self_attn.v_cache', 'model.layers.2.mlp.cache_fix', 'model.layers.2.self_attn.k_cache', 'model.layers.2.self_attn.q_cache', 'model.layers.2.self_attn.v_cache', 'model.layers.20.mlp.cache_fix', 'model.layers.20.self_attn.k_cache', 'model.layers.20.self_attn.q_cache', 'model.layers.20.self_attn.v_cache', 'model.layers.21.mlp.cache_fix', 'model.layers.21.self_attn.k_cache', 'model.layers.21.self_attn.q_cache', 'model.layers.21.self_attn.v_cache', 'model.layers.22.mlp.cache_fix', 'model.layers.22.self_attn.k_cache', 'model.layers.22.self_attn.q_cache', 'model.layers.22.self_attn.v_cache', 'model.layers.23.mlp.cache_fix', 'model.layers.23.self_attn.k_cache', 'model.layers.23.self_attn.q_cache', 'model.layers.23.self_attn.v_cache', 'model.layers.24.mlp.cache_fix', 'model.layers.24.self_attn.k_cache', 'model.layers.24.self_attn.q_cache', 'model.layers.24.self_attn.v_cache', 'model.layers.25.mlp.cache_fix', 'model.layers.25.self_attn.k_cache', 'model.layers.25.self_attn.q_cache', 'model.layers.25.self_attn.v_cache', 'model.layers.26.mlp.cache_fix', 'model.layers.26.self_attn.k_cache', 'model.layers.26.self_attn.q_cache', 'model.layers.26.self_attn.v_cache', 'model.layers.27.mlp.cache_fix', 'model.layers.27.self_attn.k_cache', 'model.layers.27.self_attn.q_cache', 'model.layers.27.self_attn.v_cache', 'model.layers.28.mlp.cache_fix', 'model.layers.28.self_attn.k_cache', 'model.layers.28.self_attn.q_cache', 'model.layers.28.self_attn.v_cache', 'model.layers.29.mlp.cache_fix', 'model.layers.29.self_attn.k_cache', 'model.layers.29.self_attn.q_cache', 'model.layers.29.self_attn.v_cache', 'model.layers.3.mlp.cache_fix', 'model.layers.3.self_attn.k_cache', 'model.layers.3.self_attn.q_cache', 'model.layers.3.self_attn.v_cache', 'model.layers.30.mlp.cache_fix', 'model.layers.30.self_attn.k_cache', 'model.layers.30.self_attn.q_cache', 'model.layers.30.self_attn.v_cache', 'model.layers.31.mlp.cache_fix', 'model.layers.31.self_attn.k_cache', 'model.layers.31.self_attn.q_cache', 'model.layers.31.self_attn.v_cache', 'model.layers.4.mlp.cache_fix', 'model.layers.4.self_attn.k_cache', 'model.layers.4.self_attn.q_cache', 'model.layers.4.self_attn.v_cache', 'model.layers.5.mlp.cache_fix', 'model.layers.5.self_attn.k_cache', 'model.layers.5.self_attn.q_cache', 'model.layers.5.self_attn.v_cache', 'model.layers.6.mlp.cache_fix', 'model.layers.6.self_attn.k_cache', 'model.layers.6.self_attn.q_cache', 'model.layers.6.self_attn.v_cache', 'model.layers.7.mlp.cache_fix', 'model.layers.7.self_attn.k_cache', 'model.layers.7.self_attn.q_cache', 'model.layers.7.self_attn.v_cache', 'model.layers.8.mlp.cache_fix', 'model.layers.8.self_attn.k_cache', 'model.layers.8.self_attn.q_cache', 'model.layers.8.self_attn.v_cache', 'model.layers.9.mlp.cache_fix', 'model.layers.9.self_attn.k_cache', 'model.layers.9.self_attn.q_cache', 'model.layers.9.self_attn.v_cache']
You should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.
run not tree search.
Use prompt_tests.
get solution for task : HumanEval/43 with 5 tests.
/home/S/hexiaolong/anaconda3/envs/new_codex/lib/python3.9/site-packages/transformers/generation/configuration_utils.py:392: UserWarning: `do_sample` is set to `False`. However, `temperature` is set to `0` -- this flag is only used in sample-based generation modes. You should set `do_sample=True` or unset `temperature`.
  warnings.warn(
Model inference time is 0.2772942026456197 minutes
In generate step, the input tokens shape is 850, the output tokens shape is 1362
++++++++++++++++++++++++++solution++++++++++++++++++++++++++
    if len(l) == 0:
        return False
    elif len(l) == 1:
        return True
    else:
        for i in l:
            if i == 0:
                return False
            elif i == 1:
                return True
            else:
                if i + l[i] == 0:
                    return True
                else:
                    return False

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
=====start code===========
def pairs_sum_to_zero(l):

fix input length is torch.Size([1, 895])
check program : 
def pairs_sum_to_zero(l):
    if len(l) == 0:
        return False
    elif len(l) == 1:
        return True
    else:
        for i in l:
            if i == 0:
                return False
            elif i == 1:
                return True
            else:
                if i + l[i] == 0:
                    return True
                else:
                    return False

task:HumanEval/43, cir:0, gened 1 solutions, total nodes:1, total unique nodes:1, chosen nodes:1, left nodes:0
chosen nodes idx is [0]
chosen nodes's parent's idx is []
chosen nodes passT_rates [0.0]
probs are [-1.0]

begin to generate solutions for cir 1 with 10 sequences.
total input length is torch.Size([1, 1315])
run solution time is 0.0033472259839375813 mins, choose solution time is 4.6094258626302084e-07 mins, model inference time is 0.47875290314356483 mins.
average output length is 1677.4, every token time is 0.017124825358547157 s.
check program : 
def pairs_sum_to_zero(l):
    if len(l) == 0:
        return False
    elif len(l) == 1:
        return True
    else:
        for i in l:
            if i == 0:
                return False
            elif i == 1:
                return True
            else:
                if i + l[i] == 0:
                    return True
                else:
                    return False

task:HumanEval/43, cir:1, gened 10 solutions, total nodes:10, total unique nodes:9, chosen nodes:9, left nodes:0
chosen nodes idx is [8, 10, 6, 2, 7, 1, 5, 3, 4]
chosen nodes's parent's idx is [0, 0, 0, 0, 0, 0, 0, 0, 0]
chosen nodes passT_rates [0.6, 0.2, 0.2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
probs are [0.90901813716218, 0.9900049989024269, 0.9825865217153193, 0.979616286690163, 0.9504333022291918, 0.9471180204920405, 0.9113680500104661, 0.9072387988407065, 0.8833213419501467]

begin to generate solutions for cir 2 with 10 sequences.
total input length is torch.Size([1, 1327])
total input length is torch.Size([1, 1298])
total input length is torch.Size([1, 1349])
total input length is torch.Size([1, 1307])
total input length is torch.Size([1, 1318])
total input length is torch.Size([1, 1315])
total input length is torch.Size([1, 1415])
total input length is torch.Size([1, 1316])
total input length is torch.Size([1, 1323])
run solution time is 0.03257473707199097 mins, choose solution time is 9.5367431640625e-07 mins, model inference time is 4.328076144059499 mins.
average output length is 1771.1, every token time is 0.14662332654867602 s.
check program : 
def pairs_sum_to_zero(l):
    if len(l) == 0:
        return False
    elif len(l) == 1:
        return True
    else:
        for i in range(1, len(l)):
            if l[i-1] == 1 and l[i] == 1:
                return True
        for i in range(1, len(l)):
            if l[i-1] == -1 and l[i] == -1:
                return True
        return False

task:HumanEval/43, cir:2, gened 90 solutions, total nodes:90, total unique nodes:65, chosen nodes:10, left nodes:55
chosen nodes idx is [96, 53, 82, 90, 27, 23, 87, 11, 95, 20]
chosen nodes's parent's idx is [4, 7, 3, 3, 10, 10, 3, 8, 4, 8]
chosen nodes passT_rates [0.8, 0.8, 0.8, 0.8, 0.8, 0.8, 0.6, 0.6, 0.6, 0.6]
probs are [0.9563403956586645, 0.9422232489522334, 0.9178958043070107, 0.8975009652217072, 0.8920388995191473, 0.8603806189133182, 0.9555976686789481, 0.9334860566268434, 0.9266890563638897, 0.9157661505463214]

begin to generate solutions for cir 3 with 10 sequences.
total input length is torch.Size([1, 1314])
total input length is torch.Size([1, 1300])
total input length is torch.Size([1, 1334])
total input length is torch.Size([1, 1311])
total input length is torch.Size([1, 1284])
total input length is torch.Size([1, 1287])
total input length is torch.Size([1, 1291])
total input length is torch.Size([1, 1327])
total input length is torch.Size([1, 1323])
total input length is torch.Size([1, 1274])
run solution time is 0.28897064526875815 mins, choose solution time is 4.9869219462076826e-06 mins, model inference time is 4.752517422040303 mins.
average output length is 1771.35, every token time is 0.16097950814899362 s.
check program : 
def pairs_sum_to_zero(l):
    if len(l) == 0:
        return False
    elif len(l) == 1:
        return True
    elif len(l) > 1:
        for i in l:
            if i != 0:
                if i == 1:
                    return False
                if i == 1 + l[i]:
                    return False
                if i != 1 + l[i]:
                    return True

passn: 1.0
One node passed! Show it and it's parents.
++++++show parents of the node++++++
solution:
    if len(l) > 1:
        for i in l:
            if i != 0:
                if i == 1:
                    return False
                if i == 1 + l[i]:
                    return False
                if i != 1 + l[i]:
                    return True
    return False

passT_rate:1.0
prob:0.990410719162971

************************
++++++show parents of the node++++++
solution:
    if len(l) == 0:
        return False
    elif len(l) == 1:
        return True
    elif len(l) > 1:
        for i in l:
            if i != 0:
                if i == 1:
                    return False
                if i == 1 + l[i]:
                    return False
                if i != 1 + l[i]:
                    return True

passT_rate:0.8
prob:0.9563403956586645

************************
++++++show parents of the node++++++
solution:
    if len(l) == 0:
        return False
    elif len(l) == 1:
        return True
    elif len(l) > 1:
        for i in l:
            if i == 0:
                return False
            elif i == 1:
                return True
            elif i == 1 + l[i]:
                return True
            elif i != 1 + l[i]:
                return False

passT_rate:0.0
prob:0.8833213419501467

************************
++++++show parents of the node++++++
solution:
    if len(l) == 0:
        return False
    elif len(l) == 1:
        return True
    else:
        for i in l:
            if i == 0:
                return False
            elif i == 1:
                return True
            else:
                if i + l[i] == 0:
                    return True
                else:
                    return False

passT_rate:0.0
prob:-1.0

************************
task:HumanEval/43, cir:3, gened 100 solutions, total nodes:100, total unique nodes:75, chosen nodes:10, left nodes:65
chosen nodes idx is [109, 102, 101, 106, 105, 108, 103, 107, 136, 112]
chosen nodes's parent's idx is [96, 96, 96, 96, 96, 96, 96, 96, 90, 53]
chosen nodes passT_rates [1.0, 0.8, 0.8, 0.8, 0.8, 0.2, 0.0, 0.0, -1.0, -1.0]
probs are [0.990410719162971, 0.9431203485011189, 0.930458730514828, 0.9153949689060167, 0.8704269855505826, 0.9721060660941527, 0.9516034383787644, 0.9406180854804835, 0.9944197889039298, 0.9898710731585784]

Use prompt_tests.
get solution for task : HumanEval/44 with 3 tests.
Model inference time is 0.2600401520729065 minutes
In generate step, the input tokens shape is 713, the output tokens shape is 1225
++++++++++++++++++++++++++solution++++++++++++++++++++++++++
    if base == 10:
        return str(int(x) / base)
    elif base == 2:
        return str(int(x) / base)
    elif base == 8:
        return str(int(x) / base)
    else:
        return str(int(x) / base)

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
=====start code===========
def change_base(x: int, base: int):

fix input length is torch.Size([1, 760])
check program : 
def change_base(x: int, base: int):
    if base == 10:
        return str(int(x) / base)
    elif base == 2:
        return str(int(x) / base)
    elif base == 8:
        return str(int(x) / base)
    else:
        return str(int(x) / base)

task:HumanEval/44, cir:0, gened 1 solutions, total nodes:1, total unique nodes:1, chosen nodes:1, left nodes:0
chosen nodes idx is [0]
chosen nodes's parent's idx is []
chosen nodes passT_rates [0.0]
probs are [-1.0]

begin to generate solutions for cir 1 with 10 sequences.
total input length is torch.Size([1, 1023])
run solution time is 0.0029636581738789877 mins, choose solution time is 3.902117411295573e-06 mins, model inference time is 0.41688162883122765 mins.
average output length is 1466.5, every token time is 0.017056187142945375 s.
check program : 
def change_base(x: int, base: int):
    if base == 10:
        return str(int(x) / base)
    elif base == 2:
        return str(int(x) / base)
    elif base == 8:
        return str(int(x) / base)
    else:
        return str(int(x) / base)

task:HumanEval/44, cir:1, gened 10 solutions, total nodes:10, total unique nodes:6, chosen nodes:6, left nodes:0
chosen nodes idx is [4, 7, 8, 9, 1, 5]
chosen nodes's parent's idx is [0, 0, 0, 0, 0, 0]
chosen nodes passT_rates [0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
probs are [0.9919982174326554, 0.9544246554409315, 0.9092617638795415, 0.9041342231291879, 0.8934301870341042, 0.8391949716870469]

begin to generate solutions for cir 2 with 10 sequences.
total input length is torch.Size([1, 1011])
total input length is torch.Size([1, 956])
total input length is torch.Size([1, 1033])
total input length is torch.Size([1, 988])
total input length is torch.Size([1, 1023])
total input length is torch.Size([1, 990])
run solution time is 0.029905927181243897 mins, choose solution time is 1.0172526041666667e-06 mins, model inference time is 2.471142776807149 mins.
average output length is 1421.0166666666667, every token time is 0.10433978083445182 s.
check program : 
def change_base(x: int, base: int):
    if base == 10:
        return x / float(base)
    elif base == 2:
        return x / float(base)
    elif base == 8:
        return x / float(base)
    else:
        return float(x) / base

task:HumanEval/44, cir:2, gened 60 solutions, total nodes:60, total unique nodes:33, chosen nodes:10, left nodes:23
chosen nodes idx is [44, 39, 30, 47, 67, 45, 42, 24, 68, 31]
chosen nodes's parent's idx is [9, 8, 7, 9, 5, 9, 9, 7, 5, 8]
chosen nodes passT_rates [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
probs are [0.9890417071379698, 0.9872420454728367, 0.9797701313187988, 0.9787679022638766, 0.9777096300723046, 0.9621651513936066, 0.9539543447530241, 0.9373020070682471, 0.9261551204378564, 0.9223534536345069]

begin to generate solutions for cir 3 with 10 sequences.
total input length is torch.Size([1, 975])
total input length is torch.Size([1, 1035])
total input length is torch.Size([1, 976])
total input length is torch.Size([1, 960])
total input length is torch.Size([1, 1009])
total input length is torch.Size([1, 1164])
total input length is torch.Size([1, 1074])
total input length is torch.Size([1, 958])
total input length is torch.Size([1, 993])
total input length is torch.Size([1, 1033])
run solution time is 0.1801256577173869 mins, choose solution time is 3.250439961751302e-06 mins, model inference time is 4.156710739930471 mins.
average output length is 1445.88, every token time is 0.17249193990148443 s.
check program : 
def change_base(x: int, base: int):
    if base == 10:
        return x / float(base)
    elif x % base == 0:
        return x
    else:
        return base - 1

task:HumanEval/44, cir:3, gened 100 solutions, total nodes:100, total unique nodes:73, chosen nodes:10, left nodes:63
chosen nodes idx is [115, 152, 139, 82, 127, 131, 94, 120, 141, 77]
chosen nodes's parent's idx is [67, 68, 42, 39, 45, 42, 30, 67, 24, 44]
chosen nodes passT_rates [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
probs are [0.9913796648899222, 0.9905600563111443, 0.9902050650493794, 0.9898777395063737, 0.9898604626183711, 0.9876344407547668, 0.9843148432533476, 0.9838519056502835, 0.9810938852878646, 0.9795659266437744]

begin to generate solutions for cir 4 with 10 sequences.
total input length is torch.Size([1, 1009])
total input length is torch.Size([1, 993])
total input length is torch.Size([1, 1000])
total input length is torch.Size([1, 1035])
total input length is torch.Size([1, 1161])
total input length is torch.Size([1, 1424])
total input length is torch.Size([1, 979])
total input length is torch.Size([1, 1015])
total input length is torch.Size([1, 980])
total input length is torch.Size([1, 960])
run solution time is 0.2972082297007243 mins, choose solution time is 8.197625478108724e-06 mins, model inference time is 4.234254415829977 mins.
average output length is 1488.66, every token time is 0.17066037030426504 s.
check program : 
def change_base(x: int, base: int):
    if base == 10:
        return x // base
    elif base == 2:
        return (int(x) // base).to_str(2)
    elif base == 8:
        return (int(x) // base).to_str(8)
    else:
        return (int(x) // base).to_str(10)

task:HumanEval/44, cir:4, gened 100 solutions, total nodes:100, total unique nodes:74, chosen nodes:10, left nodes:64
chosen nodes idx is [226, 221, 191, 216, 222, 182, 202, 234, 247, 178]
chosen nodes's parent's idx is [131, 131, 139, 127, 131, 152, 82, 94, 120, 115]
chosen nodes passT_rates [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
probs are [0.997005158231305, 0.9948930637149251, 0.9935709930742876, 0.9921399591474603, 0.9914166715039161, 0.9905600563111443, 0.9898777395063737, 0.9892785703486294, 0.9892563033377302, 0.983727169742746]

begin to generate solutions for cir 5 with 10 sequences.
total input length is torch.Size([1, 1331])
total input length is torch.Size([1, 1424])
total input length is torch.Size([1, 1000])
total input length is torch.Size([1, 1161])
total input length is torch.Size([1, 1240])
total input length is torch.Size([1, 993])
total input length is torch.Size([1, 1035])
total input length is torch.Size([1, 979])
total input length is torch.Size([1, 1009])
total input length is torch.Size([1, 1096])
run solution time is 0.28819424311319985 mins, choose solution time is 5.956490834554037e-06 mins, model inference time is 4.382070259253184 mins.
average output length is 1571.57, every token time is 0.1673003563562669 s.
check program : 
def change_base(x: int, base: int):
    if base == 10:
        return str(int(x) / base)
    else:
        return x

task:HumanEval/44, cir:5, gened 100 solutions, total nodes:100, total unique nodes:80, chosen nodes:10, left nodes:70
chosen nodes idx is [286, 281, 272, 291, 306, 274, 282, 355, 322, 332]
chosen nodes's parent's idx is [221, 221, 226, 191, 216, 226, 221, 247, 182, 202]
chosen nodes passT_rates [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
probs are [0.997005158231305, 0.9948930637149251, 0.9940287237490272, 0.9935709930742876, 0.9921399591474603, 0.9917984272779902, 0.9914166715039161, 0.9913796648899222, 0.9905600563111443, 0.9898777395063737]

begin to generate solutions for cir 6 with 10 sequences.
total input length is torch.Size([1, 1331])
total input length is torch.Size([1, 1424])
total input length is torch.Size([1, 1209])
total input length is torch.Size([1, 1000])
total input length is torch.Size([1, 1161])
total input length is torch.Size([1, 1325])
total input length is torch.Size([1, 1240])
total input length is torch.Size([1, 1009])
total input length is torch.Size([1, 993])
total input length is torch.Size([1, 1035])
run solution time is 0.28021053473154706 mins, choose solution time is 6.846586863199869e-06 mins, model inference time is 4.478133018811544 mins.
average output length is 1637.21, every token time is 0.16411332966849257 s.
check program : 
def change_base(x: int, base: int):
    if base == 10:
        return str(int(x) / base)
    else:
        return x

task:HumanEval/44, cir:6, gened 100 solutions, total nodes:100, total unique nodes:82, chosen nodes:10, left nodes:72
chosen nodes idx is [391, 386, 397, 400, 398, 381, 372, 401, 395, 427]
chosen nodes's parent's idx is [272, 281, 272, 272, 272, 281, 286, 291, 272, 274]
chosen nodes passT_rates [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
probs are [0.9979048032947843, 0.997005158231305, 0.9964926069317954, 0.9961985783113277, 0.9956050195766216, 0.9948930637149251, 0.9940287237490272, 0.9935709930742876, 0.9928835470050553, 0.9923758982929899]

begin to generate solutions for cir 7 with 10 sequences.
total input length is torch.Size([1, 1323])
total input length is torch.Size([1, 1331])
total input length is torch.Size([1, 1230])
total input length is torch.Size([1, 1327])
total input length is torch.Size([1, 1320])
total input length is torch.Size([1, 1424])
total input length is torch.Size([1, 1209])
total input length is torch.Size([1, 1000])
total input length is torch.Size([1, 1323])
total input length is torch.Size([1, 1151])
run solution time is 0.2953847606976827 mins, choose solution time is 8.440017700195312e-06 mins, model inference time is 4.667829589049021 mins.
average output length is 1753.24, every token time is 0.1597441185704084 s.
check program : 
def change_base(x: int, base: int):
    if base == 10:
        return str(int(x) / base)
    else:
        if base in [8, 2]:
            return str(int(x) / base)
        else:
            return int(x)
    if base == 10:
        return str(int(x) / base)
    else:
        if base in [8, 2]:
            return str(int(x) / base)
        else:
            return int(x)
    if base == 10:
        return str(int(x) / base)
    else:
        if base in [8, 2]:
            return str(int(x) / base)
        else:
            return int(x)
    if base == 10:
        return str(int(x) / base)
    else:
        if base in [8, 2]:
            return str(int(x) / base)
        else:
            return int(x)
    if base == 10:
        return str(int(x) / base)
    else:
        if base in [8, 2]:
            return str(int(x) / base)
        else:
            return int(x)
    if base == 10:
        return str(int(x) / base)
    else:
        if base in [8, 2]:
            return str(int(x) / base)
        else:
            return int(x)
    if base == 10:
        return str(int(x) / base)
    else:
        if base in [8, 2]:
            return str(int(x) / base)
        else:
            return int(x)
    if base == 10:
        return str(int(x) / base)
    else:
        if base in [8, 2]:
            return str(int(x) / base)
        else:
            return int(x)
    if base == 10:
        return str(int(x) / base)
    else

task:HumanEval/44, cir:7, gened 100 solutions, total nodes:100, total unique nodes:75, chosen nodes:10, left nodes:65
chosen nodes idx is [515, 500, 471, 517, 480, 512, 494, 508, 499, 474]
chosen nodes's parent's idx is [398, 397, 391, 398, 391, 398, 397, 400, 397, 391]
chosen nodes passT_rates [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
probs are [0.9985414386049368, 0.9985066220478673, 0.9980013185132992, 0.9970843238811253, 0.9966697537514156, 0.9961805472217777, 0.9960886228505483, 0.9959038926694267, 0.9957327782955012, 0.9953359528526423]

begin to generate solutions for cir 8 with 10 sequences.
total input length is torch.Size([1, 1331])
total input length is torch.Size([1, 1424])
total input length is torch.Size([1, 1323])
total input length is torch.Size([1, 1230])
total input length is torch.Size([1, 1327])
total input length is torch.Size([1, 1232])
total input length is torch.Size([1, 1322])
total input length is torch.Size([1, 1320])
total input length is torch.Size([1, 1308])
total input length is torch.Size([1, 1322])
run solution time is 0.2905252695083618 mins, choose solution time is 7.657210032145182e-06 mins, model inference time is 4.766786523660024 mins.
average output length is 1815.82, every token time is 0.1575085747861845 s.
check program : 
def change_base(x: int, base: int):
    if base == 10:
        return str(int(x) / base)
    else:
        return x

task:HumanEval/44, cir:8, gened 100 solutions, total nodes:100, total unique nodes:74, chosen nodes:10, left nodes:64
chosen nodes idx is [645, 610, 591, 600, 627, 642, 584, 618, 609, 669]
chosen nodes's parent's idx is [508, 517, 471, 471, 512, 508, 500, 480, 517, 474]
chosen nodes passT_rates [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
probs are [0.9985414386049368, 0.9985066220478673, 0.9980013185132992, 0.9966697537514156, 0.9965108790670486, 0.9961805472217777, 0.9959071110671174, 0.9959038926694267, 0.9957327782955012, 0.9953765167763792]

begin to generate solutions for cir 9 with 10 sequences.
total input length is torch.Size([1, 1331])
total input length is torch.Size([1, 1424])
total input length is torch.Size([1, 1323])
total input length is torch.Size([1, 1327])
total input length is torch.Size([1, 1230])
total input length is torch.Size([1, 1232])
total input length is torch.Size([1, 1322])
total input length is torch.Size([1, 1320])
total input length is torch.Size([1, 1308])
total input length is torch.Size([1, 1416])
run solution time is 0.290860915184021 mins, choose solution time is 6.902217864990234e-06 mins, model inference time is 4.785673789183298 mins.
average output length is 1820.55, every token time is 0.15772180305022704 s.
check program : 
def change_base(x: int, base: int):
    if base == 10:
        return str(int(x) / base)
    else:
        return x

task:HumanEval/44, cir:9, gened 100 solutions, total nodes:100, total unique nodes:75, chosen nodes:10, left nodes:65
chosen nodes idx is [745, 720, 691, 700, 727, 742, 684, 708, 719, 694]
chosen nodes's parent's idx is [618, 627, 591, 591, 642, 618, 610, 600, 627, 591]
chosen nodes passT_rates [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
probs are [0.9985414386049368, 0.9985066220478673, 0.9980013185132992, 0.9966697537514156, 0.9965108790670486, 0.9961805472217777, 0.9959071110671174, 0.9959038926694267, 0.9957327782955012, 0.9953359528526423]

begin to generate solutions for cir 10 with 10 sequences.
total input length is torch.Size([1, 1331])
total input length is torch.Size([1, 1424])
total input length is torch.Size([1, 1323])
total input length is torch.Size([1, 1327])
total input length is torch.Size([1, 1230])
total input length is torch.Size([1, 1232])
total input length is torch.Size([1, 1322])
total input length is torch.Size([1, 1320])
total input length is torch.Size([1, 1308])
total input length is torch.Size([1, 1322])
run solution time is 0.2932872096697489 mins, choose solution time is 7.673104604085286e-06 mins, model inference time is 4.765808220704397 mins.
average output length is 1815.82, every token time is 0.1574762348793066 s.
check program : 
def change_base(x: int, base: int):
    if base == 10:
        return str(int(x) / base)
    else:
        return x

task:HumanEval/44, cir:10, gened 100 solutions, total nodes:100, total unique nodes:74, chosen nodes:10, left nodes:64
chosen nodes idx is [845, 820, 791, 800, 827, 842, 784, 808, 819, 869]
chosen nodes's parent's idx is [708, 727, 691, 691, 742, 708, 720, 700, 727, 694]
chosen nodes passT_rates [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
probs are [0.9985414386049368, 0.9985066220478673, 0.9980013185132992, 0.9966697537514156, 0.9965108790670486, 0.9961805472217777, 0.9959071110671174, 0.9959038926694267, 0.9957327782955012, 0.9953765167763792]

Use prompt_tests.
get solution for task : HumanEval/45 with 1 tests.
Model inference time is 0.26015410423278806 minutes
In generate step, the input tokens shape is 618, the output tokens shape is 1130
++++++++++++++++++++++++++solution++++++++++++++++++++++++++
    return (a * h) / 2

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
=====start code===========
def triangle_area(a, h):

fix input length is torch.Size([1, 661])
check program : 
def triangle_area(a, h):
    return (a * h) / 2

passn: 1.0
One node passed! Show it and it's parents.
++++++show parents of the node++++++
solution:
    return (a * h) / 2

passT_rate:1.0
prob:-1.0

************************
task:HumanEval/45, cir:0, gened 1 solutions, total nodes:1, total unique nodes:1, chosen nodes:1, left nodes:0
chosen nodes idx is [0]
chosen nodes's parent's idx is []
chosen nodes passT_rates [1.0]
probs are [-1.0]

Use prompt_tests.
get solution for task : HumanEval/46 with 3 tests.
Model inference time is 0.2610843857129415 minutes
In generate step, the input tokens shape is 767, the output tokens shape is 1279
++++++++++++++++++++++++++solution++++++++++++++++++++++++++
    if n == 0:
        return 0
    elif n == 1:
        return 0
    elif n == 2:
        return 2
    elif n == 3:
        return 0
    elif n == 4:
        return 2
    elif n == 5:
        return 4
    elif n == 6:
        return 8
    elif n == 7:
        return 14
    else:
        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
=====start code===========
def fib4(n: int):

fix input length is torch.Size([1, 809])
check program : 
def fib4(n: int):
    if n == 0:
        return 0
    elif n == 1:
        return 0
    elif n == 2:
        return 2
    elif n == 3:
        return 0
    elif n == 4:
        return 2
    elif n == 5:
        return 4
    elif n == 6:
        return 8
    elif n == 7:
        return 14
    else:
        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)

passn: 1.0
One node passed! Show it and it's parents.
++++++show parents of the node++++++
solution:
    if n == 0:
        return 0
    elif n == 1:
        return 0
    elif n == 2:
        return 2
    elif n == 3:
        return 0
    elif n == 4:
        return 2
    elif n == 5:
        return 4
    elif n == 6:
        return 8
    elif n == 7:
        return 14
    else:
        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)

passT_rate:1.0
prob:-1.0

************************
task:HumanEval/46, cir:0, gened 1 solutions, total nodes:1, total unique nodes:1, chosen nodes:1, left nodes:0
chosen nodes idx is [0]
chosen nodes's parent's idx is []
chosen nodes passT_rates [1.0]
probs are [-1.0]

Use prompt_tests.
get solution for task : HumanEval/47 with 2 tests.
Model inference time is 0.2602022329966227 minutes
In generate step, the input tokens shape is 690, the output tokens shape is 1202
++++++++++++++++++++++++++solution++++++++++++++++++++++++++
    if len(l) % 2 == 0:
        return (l[len(l) / 2 - 1] + l[len(l) / 2]) / 2
    else:
        return l[len(l) / 2]

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
=====start code===========
def median(l: list):

fix input length is torch.Size([1, 731])
check program : 
def median(l: list):
    if len(l) % 2 == 0:
        return (l[len(l) / 2 - 1] + l[len(l) / 2]) / 2
    else:
        return l[len(l) / 2]

task:HumanEval/47, cir:0, gened 1 solutions, total nodes:1, total unique nodes:1, chosen nodes:1, left nodes:0
chosen nodes idx is [0]
chosen nodes's parent's idx is []
chosen nodes passT_rates [0.0]
probs are [-1.0]

begin to generate solutions for cir 1 with 10 sequences.
total input length is torch.Size([1, 956])
run solution time is 0.0029586275418599446 mins, choose solution time is 6.119410196940105e-07 mins, model inference time is 0.40232543150583905 mins.
average output length is 1464.4, every token time is 0.01648424444091805 s.
check program : 
def median(l: list):
    if len(l) % 2 == 0:
        mid = l[len(l) / 2 - 1]
        x = (mid + l[len(l) / 2]) / 2
    else:
        mid = l[len(l) / 2]
        x = mid
    return x

task:HumanEval/47, cir:1, gened 10 solutions, total nodes:10, total unique nodes:8, chosen nodes:8, left nodes:0
chosen nodes idx is [6, 9, 3, 10, 1, 5, 2, 4]
chosen nodes's parent's idx is [0, 0, 0, 0, 0, 0, 0, 0]
chosen nodes passT_rates [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
probs are [0.9429004322408463, 0.9369484817697676, 0.9299962746154666, 0.8852786793674077, 0.883398234194184, 0.8261961344575168, 0.816466911418634, 0.7802868636569302]

begin to generate solutions for cir 2 with 10 sequences.
total input length is torch.Size([1, 883])
total input length is torch.Size([1, 945])
total input length is torch.Size([1, 968])
total input length is torch.Size([1, 905])
total input length is torch.Size([1, 972])
total input length is torch.Size([1, 955])
total input length is torch.Size([1, 956])
total input length is torch.Size([1, 961])
run solution time is 0.028385746479034423 mins, choose solution time is 1.0530153910319011e-06 mins, model inference time is 3.20229142109553 mins.
average output length is 1394.3, every token time is 0.13780213630089141 s.
check program : 
def median(l: list):
    if len(l) % 2 == 0:
        return (l[len(l) / 2 - 1] + l[len(l) / 2]) / 2
    else:
        return l[len(l) / 2]
def sort_int_list(a_list: list):
    return sorted(a_list, key=lambda x: float(x))

task:HumanEval/47, cir:2, gened 80 solutions, total nodes:80, total unique nodes:59, chosen nodes:10, left nodes:49
chosen nodes idx is [25, 51, 28, 60, 43, 22, 12, 49, 56, 20]
chosen nodes's parent's idx is [9, 1, 9, 1, 10, 9, 6, 10, 1, 6]
chosen nodes passT_rates [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
probs are [0.9930103640162815, 0.991179436609506, 0.9903770979097942, 0.9818720455596377, 0.9724550911491336, 0.9711038884383589, 0.9525577011501627, 0.9473554560913853, 0.9473444586951836, 0.9436129212749632]

begin to generate solutions for cir 3 with 10 sequences.
total input length is torch.Size([1, 945])
total input length is torch.Size([1, 972])
total input length is torch.Size([1, 943])
total input length is torch.Size([1, 950])
total input length is torch.Size([1, 973])
total input length is torch.Size([1, 981])
total input length is torch.Size([1, 972])
total input length is torch.Size([1, 908])
total input length is torch.Size([1, 1016])
total input length is torch.Size([1, 1051])
run solution time is 0.2329787770907084 mins, choose solution time is 4.57763671875e-06 mins, model inference time is 4.059658447901408 mins.
average output length is 1412.47, every token time is 0.1724493332496318 s.
check program : 
def median(l: list):
    if len(l) % 2 == 0:
        mid = l[len(l) / 2 - 1]
        x = 0
        y = l[len(l) / 2]
        for e in l:
            if e < mid:
                y = e
                mid = mid
            elif e > mid:
                x = e
                mid = mid
        return (x + y) / 2
    elif len(l) % 2 == 1:
        return l[len(l) / 2]
    return 0

task:HumanEval/47, cir:3, gened 100 solutions, total nodes:100, total unique nodes:87, chosen nodes:10, left nodes:77
chosen nodes idx is [163, 126, 122, 158, 168, 95, 134, 101, 98, 180]
chosen nodes's parent's idx is [49, 60, 60, 12, 49, 25, 43, 51, 25, 56]
chosen nodes passT_rates [0.5, 0.5, 0.5, 0.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
probs are [0.9750573409318628, 0.9257969120015711, 0.8443679058325992, 0.7908789154440082, 0.9930827779456678, 0.9930103640162815, 0.9927974818669187, 0.991179436609506, 0.9903770979097942, 0.9851188398874545]

begin to generate solutions for cir 4 with 10 sequences.
total input length is torch.Size([1, 948])
total input length is torch.Size([1, 915])
total input length is torch.Size([1, 911])
total input length is torch.Size([1, 917])
total input length is torch.Size([1, 905])
total input length is torch.Size([1, 945])
total input length is torch.Size([1, 961])
total input length is torch.Size([1, 972])
total input length is torch.Size([1, 943])
total input length is torch.Size([1, 938])
run solution time is 0.2920036196708679 mins, choose solution time is 6.202856699625651e-06 mins, model inference time is 3.9887843211491902 mins.
average output length is 1395.22, every token time is 0.17153356646751874 s.
check program : 
def median(l: list):
    "Return median of elements in the list l."
    if len(l) % 2 == 0:
        return (l[0] + l[-1])/2
    else:
        return l[0]

task:HumanEval/47, cir:4, gened 100 solutions, total nodes:100, total unique nodes:83, chosen nodes:10, left nodes:73
chosen nodes idx is [194, 226, 191, 208, 210, 221, 215, 201, 237, 224]
chosen nodes's parent's idx is [163, 158, 163, 126, 126, 158, 122, 126, 168, 158]
chosen nodes passT_rates [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5]
probs are [0.947005053169925, 0.9377944315606944, 0.9366353600659056, 0.9325772914756223, 0.9115879726532364, 0.9068838619534624, 0.9030186122426189, 0.9024674079720003, 0.8626221672541373, 0.8533077822593517]

begin to generate solutions for cir 5 with 10 sequences.
total input length is torch.Size([1, 936])
total input length is torch.Size([1, 921])
total input length is torch.Size([1, 948])
total input length is torch.Size([1, 931])
total input length is torch.Size([1, 921])
total input length is torch.Size([1, 917])
total input length is torch.Size([1, 962])
total input length is torch.Size([1, 914])
total input length is torch.Size([1, 932])
total input length is torch.Size([1, 942])
run solution time is 0.2895678440729777 mins, choose solution time is 6.079673767089844e-06 mins, model inference time is 3.979492890834808 mins.
average output length is 1393.14, every token time is 0.17138950491738086 s.
check program : 
def median(l: list):
    if len(l) % 2 == 0:
        return (l[0] + l[-1])/2
    else:
        return l[0]

task:HumanEval/47, cir:5, gened 100 solutions, total nodes:100, total unique nodes:73, chosen nodes:10, left nodes:63
chosen nodes idx is [299, 293, 352, 338, 368, 373, 341, 337, 331, 372]
chosen nodes's parent's idx is [194, 194, 215, 210, 201, 237, 221, 210, 210, 237]
chosen nodes passT_rates [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5]
probs are [0.9875201553035213, 0.9860409294732012, 0.9801714992052586, 0.9556057286292698, 0.9350139876958735, 0.9182571858566165, 0.9068838619534624, 0.9059472780776457, 0.9058456369628005, 0.9050886740847873]

begin to generate solutions for cir 6 with 10 sequences.
total input length is torch.Size([1, 961])
total input length is torch.Size([1, 948])
total input length is torch.Size([1, 953])
total input length is torch.Size([1, 921])
total input length is torch.Size([1, 931])
total input length is torch.Size([1, 943])
total input length is torch.Size([1, 917])
total input length is torch.Size([1, 918])
total input length is torch.Size([1, 914])
total input length is torch.Size([1, 944])
run solution time is 0.283176322778066 mins, choose solution time is 5.948543548583984e-06 mins, model inference time is 3.9855874220530194 mins.
average output length is 1390.61, every token time is 0.17196428912860764 s.
check program : 
def median(l: list):
    if len(l) % 2 == 0:
        return (l[0] + l[-1])/2
    else:
        return l[0] if len(l) % 2 == 1 else l[-1]

task:HumanEval/47, cir:6, gened 100 solutions, total nodes:100, total unique nodes:79, chosen nodes:10, left nodes:69
chosen nodes idx is [448, 444, 393, 395, 397, 428, 468, 449, 456, 478]
chosen nodes's parent's idx is [373, 373, 299, 299, 299, 338, 337, 373, 341, 331]
chosen nodes passT_rates [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5]
probs are [0.993874288198183, 0.9921619202656706, 0.9831517212938484, 0.9773533575445961, 0.9642433703893929, 0.9556057286292698, 0.9458357421846224, 0.942883522285488, 0.9377944315606944, 0.9350139876958735]

begin to generate solutions for cir 7 with 10 sequences.
total input length is torch.Size([1, 943])
total input length is torch.Size([1, 931])
total input length is torch.Size([1, 948])
total input length is torch.Size([1, 948])
total input length is torch.Size([1, 949])
total input length is torch.Size([1, 921])
total input length is torch.Size([1, 1002])
total input length is torch.Size([1, 931])
total input length is torch.Size([1, 921])
total input length is torch.Size([1, 931])
run solution time is 0.29016151825586955 mins, choose solution time is 5.598862965901693e-06 mins, model inference time is 4.002607699235281 mins.
average output length is 1388.81, every token time is 0.17292247923864204 s.
check program : 
def median(l: list):
    "Return median of elements in the list l."
    if len(l) is not 0:
        return (int(len(l) / 2.0) + 1)
    return -1

task:HumanEval/47, cir:7, gened 100 solutions, total nodes:100, total unique nodes:80, chosen nodes:10, left nodes:70
chosen nodes idx is [498, 494, 538, 539, 537, 562, 502, 548, 531, 514]
chosen nodes's parent's idx is [448, 448, 397, 397, 397, 449, 444, 428, 397, 393]
chosen nodes passT_rates [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5]
probs are [0.993874288198183, 0.9921619202656706, 0.9853434596078096, 0.9740306733823532, 0.967261361588521, 0.9588923645442011, 0.9587882307715139, 0.9556057286292698, 0.9479913237765448, 0.947005053169925]

begin to generate solutions for cir 8 with 10 sequences.
total input length is torch.Size([1, 943])
total input length is torch.Size([1, 931])
total input length is torch.Size([1, 954])
total input length is torch.Size([1, 981])
total input length is torch.Size([1, 950])
total input length is torch.Size([1, 928])
total input length is torch.Size([1, 928])
total input length is torch.Size([1, 921])
total input length is torch.Size([1, 949])
total input length is torch.Size([1, 936])
run solution time is 0.29270203510920206 mins, choose solution time is 5.650520324707031e-06 mins, model inference time is 3.999181632200877 mins.
average output length is 1370.11, every token time is 0.17513258204463034 s.
check program : 
def median(l: list):
    "Return median of elements in the list l."
    if len(l) is not 0:
        return (int(len(l) / 2.0) + 1)
    return -1

task:HumanEval/47, cir:8, gened 100 solutions, total nodes:100, total unique nodes:74, chosen nodes:10, left nodes:64
chosen nodes idx is [598, 594, 618, 649, 659, 689, 638, 643, 639, 623]
chosen nodes's parent's idx is [498, 498, 538, 562, 502, 514, 537, 562, 537, 539]
chosen nodes passT_rates [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5]
probs are [0.993874288198183, 0.9921619202656706, 0.989748126881918, 0.9889376601703954, 0.9887099577404035, 0.9875201553035213, 0.9854465283723425, 0.9834995978210441, 0.979910941922036, 0.9793840682610487]

begin to generate solutions for cir 9 with 10 sequences.
total input length is torch.Size([1, 943])
total input length is torch.Size([1, 931])
total input length is torch.Size([1, 954])
total input length is torch.Size([1, 932])
total input length is torch.Size([1, 932])
total input length is torch.Size([1, 961])
total input length is torch.Size([1, 954])
total input length is torch.Size([1, 944])
total input length is torch.Size([1, 979])
total input length is torch.Size([1, 948])
run solution time is 0.29242878357569374 mins, choose solution time is 5.638599395751953e-06 mins, model inference time is 4.010331650575002 mins.
average output length is 1378.28, every token time is 0.17457983966877988 s.
check program : 
def median(l: list):
    "Return median of elements in the list l."
    if len(l) is not 0:
        return (int(len(l) / 2.0) + 1)
    return -1

task:HumanEval/47, cir:9, gened 100 solutions, total nodes:100, total unique nodes:69, chosen nodes:10, left nodes:59
chosen nodes idx is [698, 694, 779, 718, 758, 743, 773, 745, 736, 747]
chosen nodes's parent's idx is [598, 598, 639, 618, 638, 689, 639, 689, 659, 689]
chosen nodes passT_rates [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5]
probs are [0.993874288198183, 0.9921619202656706, 0.9909749687977696, 0.989748126881918, 0.9897387355135109, 0.9831517212938484, 0.9775227782353524, 0.9773533575445961, 0.9768246842563044, 0.9642433703893929]

begin to generate solutions for cir 10 with 10 sequences.
total input length is torch.Size([1, 943])
total input length is torch.Size([1, 931])
total input length is torch.Size([1, 979])
total input length is torch.Size([1, 954])
total input length is torch.Size([1, 954])
total input length is torch.Size([1, 948])
total input length is torch.Size([1, 984])
total input length is torch.Size([1, 948])
total input length is torch.Size([1, 958])
total input length is torch.Size([1, 949])
run solution time is 0.29028622309366864 mins, choose solution time is 3.6001205444335937e-06 mins, model inference time is 4.024048395951589 mins.
average output length is 1371.06, every token time is 0.1760994471785551 s.
check program : 
def median(l: list):
    "Return median of elements in the list l."
    if len(l) is not 0:
        return (int(len(l) / 2.0) + 1)
    return -1

task:HumanEval/47, cir:10, gened 100 solutions, total nodes:100, total unique nodes:75, chosen nodes:10, left nodes:65
chosen nodes idx is [798, 794, 819, 828, 838, 854, 813, 889, 879, 802]
chosen nodes's parent's idx is [698, 698, 779, 718, 758, 773, 779, 747, 736, 694]
chosen nodes passT_rates [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5]
probs are [0.993874288198183, 0.9921619202656706, 0.9909749687977696, 0.989748126881918, 0.9897387355135109, 0.9891111685074867, 0.9775227782353524, 0.9740306733823532, 0.9593354504740071, 0.9587882307715139]

Use prompt_tests.
get solution for task : HumanEval/48 with 4 tests.
Model inference time is 0.2595566749572754 minutes
In generate step, the input tokens shape is 693, the output tokens shape is 1205
++++++++++++++++++++++++++solution++++++++++++++++++++++++++
    if len(text) == 0:
        return True
    else:
        return text == text[::-1]

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
=====start code===========
def is_palindrome(text: str):

fix input length is torch.Size([1, 738])
check program : 
def is_palindrome(text: str):
    if len(text) == 0:
        return True
    else:
        return text == text[::-1]

passn: 1.0
One node passed! Show it and it's parents.
++++++show parents of the node++++++
solution:
    if len(text) == 0:
        return True
    else:
        return text == text[::-1]

passT_rate:1.0
prob:-1.0

************************
task:HumanEval/48, cir:0, gened 1 solutions, total nodes:1, total unique nodes:1, chosen nodes:1, left nodes:0
chosen nodes idx is [0]
chosen nodes's parent's idx is []
chosen nodes passT_rates [1.0]
probs are [-1.0]

Use prompt_tests.
get solution for task : HumanEval/49 with 5 tests.
Model inference time is 0.2591800649960836 minutes
In generate step, the input tokens shape is 748, the output tokens shape is 1260
++++++++++++++++++++++++++solution++++++++++++++++++++++++++
    return (n % p)

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
=====start code===========
def modp(n: int, p: int):

fix input length is torch.Size([1, 794])
check program : 
def modp(n: int, p: int):
    return (n % p)

task:HumanEval/49, cir:0, gened 1 solutions, total nodes:1, total unique nodes:1, chosen nodes:1, left nodes:0
chosen nodes idx is [0]
chosen nodes's parent's idx is []
chosen nodes passT_rates [0.2]
probs are [-1.0]

begin to generate solutions for cir 1 with 10 sequences.
total input length is torch.Size([1, 1057])
run solution time is 0.002723828951517741 mins, choose solution time is 5.523363749186198e-07 mins, model inference time is 0.4252460757891337 mins.
average output length is 1531.8, every token time is 0.01665672164530492 s.
check program : 
def modp(n: int, p: int):
    return (n % p)

task:HumanEval/49, cir:1, gened 10 solutions, total nodes:10, total unique nodes:8, chosen nodes:8, left nodes:0
chosen nodes idx is [1, 8, 7, 6, 5, 10, 9, 2]
chosen nodes's parent's idx is [0, 0, 0, 0, 0, 0, 0, 0]
chosen nodes passT_rates [0.2, 0.2, 0.2, 0.0, 0.0, 0.0, 0.0, 0.0]
probs are [0.902278978658495, 0.8898383173289482, 0.8290251675904404, 0.9732943151547688, 0.9125721926188962, 0.9010215121524138, 0.8988102487843607, 0.8438359798088443]

begin to generate solutions for cir 2 with 10 sequences.
total input length is torch.Size([1, 1057])
total input length is torch.Size([1, 1055])
total input length is torch.Size([1, 1343])
total input length is torch.Size([1, 1066])
total input length is torch.Size([1, 942])
total input length is torch.Size([1, 900])
total input length is torch.Size([1, 1127])
total input length is torch.Size([1, 1198])
run solution time is 0.04628988107045492 mins, choose solution time is 1.1285146077473958e-06 mins, model inference time is 3.44205109278361 mins.
average output length is 1551.0, every token time is 0.13315478268936323 s.
check program : 
def modp(n: int, p: int):
    return (n % p)

passn: 1.0
One node passed! Show it and it's parents.
++++++show parents of the node++++++
solution:
    return 2**n%p
def is_prime_divs(n: int):
    for i in range(n):
        if n % i == 0:
            return False
    return True

passT_rate:1.0
prob:0.923673735832428

************************
++++++show parents of the node++++++
solution:
    def sort_and_return_sorted_by_key(xs: list, sort_key: int):
        return list(sorted(xs, key=lambda e: sort_key if e[sort_key] < 1 else 0))
    
    
    assert sort_and_return_sorted_by_key([1, 2, 3], 3) == [[1, 2, 3]]
    
    assert sort_and_return_sorted_by_key([1, 2, 3], 4) == [[2, 1, 3], [1, 3], [3, 2]]
    
    assert sort_and_

passT_rate:0.0
prob:0.8438359798088443

************************
++++++show parents of the node++++++
solution:
    return (n % p)

passT_rate:0.2
prob:-1.0

************************
task:HumanEval/49, cir:2, gened 80 solutions, total nodes:80, total unique nodes:66, chosen nodes:10, left nodes:56
chosen nodes idx is [90, 59, 45, 89, 33, 38, 85, 31, 36, 48]
chosen nodes's parent's idx is [2, 5, 6, 2, 7, 7, 2, 7, 7, 6]
chosen nodes passT_rates [1.0, 0.4, 0.4, 0.4, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2]
probs are [0.923673735832428, 0.8968445988996876, 0.8839937656821674, 0.8520017111492445, 0.9891008167546591, 0.9779627526052107, 0.9603301391465343, 0.9297311112819058, 0.9221786541910021, 0.9040691858314981]

Use prompt_tests.
get solution for task : HumanEval/50 with 1 tests.
Model inference time is 0.26023338238398236 minutes
In generate step, the input tokens shape is 675, the output tokens shape is 1187
++++++++++++++++++++++++++solution++++++++++++++++++++++++++
    def encode_shift(s):
        return "".join([chr(((ord(ch) + 5 - ord("a")) % 26) + ord("a")) for ch in s])
    return "".join([chr(ord(ch) - 5 + ord("a")) for ch in s])

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
=====start code===========
def encode_shift(s: str):
    """
    returns encoded string by shifting every character by 5 in the alphabet.
    """
    return "".join([chr(((ord(ch) + 5 - ord("a")) % 26) + ord("a")) for ch in s])
def decode_shift(s: str):

fix input length is torch.Size([1, 788])
check program : 
def encode_shift(s: str):
    """
    returns encoded string by shifting every character by 5 in the alphabet.
    """
    return "".join([chr(((ord(ch) + 5 - ord("a")) % 26) + ord("a")) for ch in s])
def decode_shift(s: str):
    def encode_shift(s):
        return "".join([chr(((ord(ch) + 5 - ord("a")) % 26) + ord("a")) for ch in s])
    return "".join([chr(ord(ch) - 5 + ord("a")) for ch in s])

task:HumanEval/50, cir:0, gened 1 solutions, total nodes:1, total unique nodes:1, chosen nodes:1, left nodes:0
chosen nodes idx is [0]
chosen nodes's parent's idx is []
chosen nodes passT_rates [0.0]
probs are [-1.0]

begin to generate solutions for cir 1 with 10 sequences.
total input length is torch.Size([1, 933])
run solution time is 0.0028620362281799316 mins, choose solution time is 4.6531359354654946e-06 mins, model inference time is 0.3989046931266785 mins.
average output length is 1421.4, every token time is 0.016838527688568146 s.
check program : 
def encode_shift(s: str):
    """
    returns encoded string by shifting every character by 5 in the alphabet.
    """
    return "".join([chr(((ord(ch) + 5 - ord("a")) % 26) + ord("a")) for ch in s])
def decode_shift(s: str):
    return "".join([chr(ord(ch) - 5 + ord("a")) for ch in s])
def find_palindrome(s: List[str], i: int) -> str:
    takes as input a non empty string s,
    and prints a space separated string of all characters from s that are palindromes when they are reversed.

task:HumanEval/50, cir:1, gened 10 solutions, total nodes:10, total unique nodes:10, chosen nodes:10, left nodes:0
chosen nodes idx is [2, 10, 6, 7, 8, 9, 5, 3, 1, 4]
chosen nodes's parent's idx is [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
chosen nodes passT_rates [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
probs are [0.8926961509454401, 0.8900211504351142, 0.880980481628137, 0.8692743216264976, 0.8688831149236858, 0.8630567197793754, 0.8505224025240826, 0.8357717170896077, 0.8259604199976117, 0.8044284981584778]

begin to generate solutions for cir 2 with 10 sequences.
total input length is torch.Size([1, 1136])
total input length is torch.Size([1, 1002])
total input length is torch.Size([1, 1055])
total input length is torch.Size([1, 895])
total input length is torch.Size([1, 902])
total input length is torch.Size([1, 948])
total input length is torch.Size([1, 1084])
total input length is torch.Size([1, 890])
total input length is torch.Size([1, 935])
total input length is torch.Size([1, 1296])
run solution time is 0.030536202589670818 mins, choose solution time is 1.339117685953776e-06 mins, model inference time is 4.147605454921722 mins.
average output length is 1496.47, every token time is 0.1662955696472369 s.
check program : 
def encode_shift(s: str):
    """
    returns encoded string by shifting every character by 5 in the alphabet.
    """
    return "".join([chr(((ord(ch) + 5 - ord("a")) % 26) + ord("a")) for ch in s])
def decode_shift(s: str):
    assert add_str("", "hello", 1) ==  "h1ello"
    
    def add_str(s: str, n: str):
        
        return s + n
    def add_str(s: str, n: str, s_len: int):
        
        return s + n
    def add_str(s: str, n: str, s_len: int, n_len: int):
        
        return s + n
    def add_str_with_n_length(n_len: int):
        
        n_str = ""
        n_len = n_len
        for i in range(n_len):
            n_str += n
        return s + n_str
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    def add_str_with_n_length(

task:HumanEval/50, cir:2, gened 100 solutions, total nodes:100, total unique nodes:89, chosen nodes:10, left nodes:79
chosen nodes idx is [105, 104, 101, 64, 79, 108, 22, 16, 107, 99]
chosen nodes's parent's idx is [4, 4, 4, 9, 5, 4, 10, 2, 4, 1]
chosen nodes passT_rates [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
probs are [0.9962489302056675, 0.9959572232453229, 0.995703926224639, 0.9940268123222706, 0.9895125093197499, 0.9886063382361908, 0.9831129596741581, 0.98239310434365, 0.9822695073763604, 0.9796483271048404]

begin to generate solutions for cir 3 with 10 sequences.
total input length is torch.Size([1, 1274])
total input length is torch.Size([1, 1296])
total input length is torch.Size([1, 1270])
total input length is torch.Size([1, 948])
total input length is torch.Size([1, 1017])
total input length is torch.Size([1, 1305])
total input length is torch.Size([1, 987])
total input length is torch.Size([1, 1366])
total input length is torch.Size([1, 1256])
total input length is torch.Size([1, 996])
run solution time is 0.2950370629628499 mins, choose solution time is 6.421407063802083e-06 mins, model inference time is 4.47028288046519 mins.
average output length is 1641.0, every token time is 0.16344727240707146 s.
check program : 
def encode_shift(s: str):
    """
    returns encoded string by shifting every character by 5 in the alphabet.
    """
    return "".join([chr(((ord(ch) + 5 - ord("a")) % 26) + ord("a")) for ch in s])
def decode_shift(s: str):
    def encode_shift(s):
    def encode_shift(s):
    def encode_shift(s):
    s = s.replace("áÄÉÍÓÓÒÓÔÖØÛÝÇÇÃÒÃÏÀ", "àáäéíóóôöøüççãõãõïà")
    r = ""
    if s.startswith("àáÄÓÂÃÍÉ"):
        r = s[4:]
    elif s.startswith("ÀÄÄÊËÜÉÑÓÃÌ"):
        r = s[5:]
    elif s.startswith("ÀÄÂÎËÜÉ"):
        r = s[3:]
    elif s.startswith("ÃÂÃÉÄÈÊËÜÉÎ"):
        r = s[4:]
    elif s.startswith("ÃÄÂÈËÜÉÎ"):
        r = s[3:]
    elif s.startswith("ÃÄÈÈËÜÉÎ"):
        r = s[4:]
    elif s.startswith("ÈÂÈËÜÉÎ"):
        r = s[4:]
    elif s.startswith("ÈËÜÉÎ"):
        r = s[4:]
    elif s.startswith("ÌÂÃÈÉÊ"):
        r = s[4:]
    elif s.startswith("ÎÂÈÎÀ"):
        r = s[4:]
    elif s.startswith("ÌÈÎÀ"):
        r = s[4:]
    elif s.startswith("ÌÈÊ"):
        r = s[4:]
    elif s.startswith("ÈÊ"):
        r = s[4:]
    elif s.startswith("ÈÈ"):
        r = s[4:]
    elif s.startswith

task:HumanEval/50, cir:3, gened 100 solutions, total nodes:100, total unique nodes:84, chosen nodes:10, left nodes:74
chosen nodes idx is [167, 125, 124, 121, 131, 111, 144, 199, 119, 134]
chosen nodes's parent's idx is [108, 104, 104, 104, 101, 105, 64, 107, 105, 101]
chosen nodes passT_rates [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
probs are [0.996591651328786, 0.9962489302056675, 0.9959572232453229, 0.995703926224639, 0.9945879967395683, 0.9945879825249206, 0.9940268123222706, 0.9934215085103776, 0.9933498603863153, 0.9927857976597546]

begin to generate solutions for cir 4 with 10 sequences.
total input length is torch.Size([1, 1262])
total input length is torch.Size([1, 1274])
total input length is torch.Size([1, 1296])
total input length is torch.Size([1, 1270])
total input length is torch.Size([1, 1291])
total input length is torch.Size([1, 1283])
total input length is torch.Size([1, 948])
total input length is torch.Size([1, 1201])
total input length is torch.Size([1, 855])
total input length is torch.Size([1, 1291])
run solution time is 0.29451558987299603 mins, choose solution time is 8.249282836914063e-06 mins, model inference time is 4.5298611402511595 mins.
average output length is 1660.88, every token time is 0.16364317171479814 s.
check program : 
def encode_shift(s: str):
    """
    returns encoded string by shifting every character by 5 in the alphabet.
    """
    return "".join([chr(((ord(ch) + 5 - ord("a")) % 26) + ord("a")) for ch in s])
def decode_shift(s: str):
    def encode_shift(s):
    s = "".join([chr(((ord(ch) + 5 - ord("a")) % 26) + ord("a")) for ch in s])
    for i in range(len(s)):
        if s[i] in set(["àáÄÓÂÃÍÉ" "ÀÄÄÊËÜÉÑÓÃÌ " ÀÄÂÎËÜÉ "ÃÂÃÉÄÈÊËÜÉÎ "ÃÄÂÈËÜÉÎ "ÈÂÈËÜÉÎ "ÈËÜÉÎ "ÌÂÃÈÉÊ "ÎÂÈÎÀ "ÌÈÎÀ "ÌÈÊ "ÈÊ "ÈÈ "ÌÉ "ÈÈ "ÍÉ "ÃÁÀÃÁÈÁ "ÏÀÀÏ "ÌÀÌÀ "ÌÀÈÀ "ÌÀÈÁ "ÒÀÒÀ "ÒÀÈÀ "ÒÀÈÃ "ÒÀÒÀ "ÒÀÈÀ "ÒÀÈÀ "ÓÒÒÒÒÒ "ÒÀÒÀ "ÒÀÈÀ "ÒÀÒÀ "ÒÀÒÀ "ÒÀÒÀ "ÒÀÒÀ "ÒÀÒÀ "ÒÀÒÀ "ÒÀÒÀ "ÒÀÒÀ "ÒÀÒÀ "ÒÀÒÀ "ÒÀÒÀ "ÒÀÒÀ "ÒÀÒÀ "ÒÀÒÀ "ÒÀÒÀ "ÒÀÒÀ "ÒÀÒÀ "ÒÀÒÀ "ÒÀÒÀ "ÒÀÒÀ "ÒÀÒÀ "ÒÀÒÀ "ÒÀÒÀ "ÒÀÒÀ "ÒÀÒÀ "ÒÀÒÀ "ÒÀÒÀ "ÒÀÒÀ "ÒÀÒÀ "ÒÀÒÀ "ÒÀÒÀ "ÒÀÒÀ "ÒÀÒÀ "ÒÀÒÀ "Ò

task:HumanEval/50, cir:4, gened 100 solutions, total nodes:100, total unique nodes:85, chosen nodes:10, left nodes:75
chosen nodes idx is [301, 235, 234, 231, 251, 254, 241, 221, 274, 287]
chosen nodes's parent's idx is [134, 124, 124, 124, 131, 131, 121, 125, 144, 199]
chosen nodes passT_rates [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
probs are [0.9967135944069954, 0.9962489302056675, 0.9959572232453229, 0.995703926224639, 0.9953702132202457, 0.9948487801954908, 0.9945879967395683, 0.9945879825249206, 0.9940268123222706, 0.9930279285195452]

begin to generate solutions for cir 5 with 10 sequences.
total input length is torch.Size([1, 1296])
total input length is torch.Size([1, 1274])
total input length is torch.Size([1, 1296])
total input length is torch.Size([1, 1270])
total input length is torch.Size([1, 1296])
total input length is torch.Size([1, 1282])
total input length is torch.Size([1, 1291])
total input length is torch.Size([1, 1283])
total input length is torch.Size([1, 948])
total input length is torch.Size([1, 1272])
run solution time is 0.2878568450609843 mins, choose solution time is 7.394949595133463e-06 mins, model inference time is 4.634196265538534 mins.
average output length is 1735.57, every token time is 0.16020775717741428 s.
check program : 
def encode_shift(s: str):
    """
    returns encoded string by shifting every character by 5 in the alphabet.
    """
    return "".join([chr(((ord(ch) + 5 - ord("a")) % 26) + ord("a")) for ch in s])
def decode_shift(s: str):
    def encode_shift(s):
    s = s.replace("áÄÉÍÓÓÒÓÔÖØÛÝÇÇÃÒÃÏÀ", "àáäéíóóôöøüççãõãõïà")
    r = ""
    if s.startswith("àáÄÓÂÃÍÉ"):
        r = s[4:]
    elif s.startswith("ÀÄÄÊËÜÉÑÓÃÌ"):
        r = s[5:]
    elif s.startswith("ÀÄÂÎËÜÉ"):
        r = s[3:]
    elif s.startswith("ÃÂÃÉÄÈÊËÜÉÎ"):
        r = s[4:]
    elif s.startswith("ÃÄÂÈËÜÉÎ"):
        r = s[3:]
    elif s.startswith("ÃÄÈÈËÜÉÎ"):
        r = s[4:]
    elif s.startswith("ÈÂÈËÜÉÎ"):
        r = s[4:]
    elif s.startswith("ÈËÜÉÎ"):
        r = s[4:]
    elif s.startswith("ÌÂÃÈÉÊ"):
        r = s[4:]
    elif s.startswith("ÎÂÈÎÀ"):
        r = s[4:]
    elif s.startswith("ÌÈÎÀ"):
        r = s[4:]
    elif s.startswith("ÌÈÊ"):
        r = s[4:]
    elif s.startswith("ÈÊ"):
        r = s[4:]
    elif s.startswith("ÈÈ"):
        r = s[4:]
    elif s.startswith("ÌÉ"):

task:HumanEval/50, cir:5, gened 100 solutions, total nodes:100, total unique nodes:77, chosen nodes:10, left nodes:67
chosen nodes idx is [335, 334, 311, 371, 405, 364, 341, 321, 394, 314]
chosen nodes's parent's idx is [234, 234, 301, 241, 287, 254, 231, 235, 274, 301]
chosen nodes passT_rates [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
probs are [0.9962489302056675, 0.9959572232453229, 0.9958286511350318, 0.9953702132202457, 0.995329177148313, 0.9947119443986536, 0.9945879967395683, 0.9945879825249206, 0.9940268123222706, 0.9939197777546617]

begin to generate solutions for cir 6 with 10 sequences.
total input length is torch.Size([1, 1274])
total input length is torch.Size([1, 1296])
total input length is torch.Size([1, 1270])
total input length is torch.Size([1, 1296])
total input length is torch.Size([1, 1262])
total input length is torch.Size([1, 1282])
total input length is torch.Size([1, 1291])
total input length is torch.Size([1, 1283])
total input length is torch.Size([1, 948])
total input length is torch.Size([1, 1291])
run solution time is 0.29342366456985475 mins, choose solution time is 7.176399230957032e-06 mins, model inference time is 4.634600126743317 mins.
average output length is 1731.35, every token time is 0.16061224670150168 s.
check program : 
def encode_shift(s: str):
    """
    returns encoded string by shifting every character by 5 in the alphabet.
    """
    return "".join([chr(((ord(ch) + 5 - ord("a")) % 26) + ord("a")) for ch in s])
def decode_shift(s: str):
    def encode_shift(s):
    def encode_shift(s):
    def encode_shift(s):
    s = s.replace("áÄÉÍÓÓÒÓÔÖØÛÝÇÇÃÒÃÏÀ", "àáäéíóóôöøüççãõãõïà")
    r = ""
    if s.startswith("àáÄÓÂÃÍÉ"):
        r = s[4:]
    elif s.startswith("ÀÄÄÊËÜÉÑÓÃÌ"):
        r = s[5:]
    elif s.startswith("ÀÄÂÎËÜÉ"):
        r = s[3:]
    elif s.startswith("ÃÂÃÉÄÈÊËÜÉÎ"):
        r = s[4:]
    elif s.startswith("ÃÄÂÈËÜÉÎ"):
        r = s[3:]
    elif s.startswith("ÃÄÈÈËÜÉÎ"):
        r = s[4:]
    elif s.startswith("ÈÂÈËÜÉÎ"):
        r = s[4:]
    elif s.startswith("ÈËÜÉÎ"):
        r = s[4:]
    elif s.startswith("ÌÂÃÈÉÊ"):
        r = s[4:]
    elif s.startswith("ÎÂÈÎÀ"):
        r = s[4:]
    elif s.startswith("ÌÈÎÀ"):
        r = s[4:]
    elif s.startswith("ÌÈÊ"):
        r = s[4:]
    elif s.startswith("ÈÊ"):
        r = s[4:]
    elif s.startswith("ÈÈ"):
        r = s[4:]
    elif s.startswith

task:HumanEval/50, cir:6, gened 100 solutions, total nodes:100, total unique nodes:76, chosen nodes:10, left nodes:66
chosen nodes idx is [501, 425, 424, 421, 471, 457, 464, 431, 411, 494]
chosen nodes's parent's idx is [314, 334, 334, 334, 341, 405, 364, 311, 335, 394]
chosen nodes passT_rates [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
probs are [0.9967135944069954, 0.9962489302056675, 0.9959572232453229, 0.995703926224639, 0.9953702132202457, 0.995256376751259, 0.9947119443986536, 0.9945879967395683, 0.9945879825249206, 0.9940268123222706]

begin to generate solutions for cir 7 with 10 sequences.
total input length is torch.Size([1, 1296])
total input length is torch.Size([1, 1274])
total input length is torch.Size([1, 1296])
total input length is torch.Size([1, 1270])
total input length is torch.Size([1, 1296])
total input length is torch.Size([1, 1262])
total input length is torch.Size([1, 1282])
total input length is torch.Size([1, 1291])
total input length is torch.Size([1, 1283])
total input length is torch.Size([1, 948])
run solution time is 0.2940475344657898 mins, choose solution time is 6.198883056640625e-06 mins, model inference time is 4.632314093907675 mins.
average output length is 1731.85, every token time is 0.16048667454074575 s.
check program : 
def encode_shift(s: str):
    """
    returns encoded string by shifting every character by 5 in the alphabet.
    """
    return "".join([chr(((ord(ch) + 5 - ord("a")) % 26) + ord("a")) for ch in s])
def decode_shift(s: str):
    def encode_shift(s):
    s = s.replace("áÄÉÍÓÓÒÓÔÖØÛÝÇÇÃÒÃÏÀ", "àáäéíóóôöøüççãõãõïà")
    r = ""
    if s.startswith("àáÄÓÂÃÍÉ"):
        r = s[4:]
    elif s.startswith("ÀÄÄÊËÜÉÑÓÃÌ"):
        r = s[5:]
    elif s.startswith("ÀÄÂÎËÜÉ"):
        r = s[3:]
    elif s.startswith("ÃÂÃÉÄÈÊËÜÉÎ"):
        r = s[4:]
    elif s.startswith("ÃÄÂÈËÜÉÎ"):
        r = s[3:]
    elif s.startswith("ÃÄÈÈËÜÉÎ"):
        r = s[4:]
    elif s.startswith("ÈÂÈËÜÉÎ"):
        r = s[4:]
    elif s.startswith("ÈËÜÉÎ"):
        r = s[4:]
    elif s.startswith("ÌÂÃÈÉÊ"):
        r = s[4:]
    elif s.startswith("ÎÂÈÎÀ"):
        r = s[4:]
    elif s.startswith("ÌÈÎÀ"):
        r = s[4:]
    elif s.startswith("ÌÈÊ"):
        r = s[4:]
    elif s.startswith("ÈÊ"):
        r = s[4:]
    elif s.startswith("ÈÈ"):
        r = s[4:]
    elif s.startswith("ÌÉ"):

task:HumanEval/50, cir:7, gened 100 solutions, total nodes:100, total unique nodes:78, chosen nodes:10, left nodes:68
chosen nodes idx is [535, 534, 511, 581, 567, 574, 541, 521, 604, 514]
chosen nodes's parent's idx is [424, 424, 501, 431, 457, 464, 421, 425, 494, 501]
chosen nodes passT_rates [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
probs are [0.9962489302056675, 0.9959572232453229, 0.9958286511350318, 0.9953702132202457, 0.995256376751259, 0.9947119443986536, 0.9945879967395683, 0.9945879825249206, 0.9940268123222706, 0.9939197777546617]

begin to generate solutions for cir 8 with 10 sequences.
total input length is torch.Size([1, 1274])
total input length is torch.Size([1, 1296])
total input length is torch.Size([1, 1270])
total input length is torch.Size([1, 1296])
total input length is torch.Size([1, 1262])
total input length is torch.Size([1, 1282])
total input length is torch.Size([1, 1291])
total input length is torch.Size([1, 1283])
total input length is torch.Size([1, 948])
total input length is torch.Size([1, 1291])
run solution time is 0.2937490701675415 mins, choose solution time is 5.888938903808594e-06 mins, model inference time is 4.63395592768987 mins.
average output length is 1731.35, every token time is 0.16058991989323906 s.
check program : 
def encode_shift(s: str):
    """
    returns encoded string by shifting every character by 5 in the alphabet.
    """
    return "".join([chr(((ord(ch) + 5 - ord("a")) % 26) + ord("a")) for ch in s])
def decode_shift(s: str):
    def encode_shift(s):
    def encode_shift(s):
    def encode_shift(s):
    s = s.replace("áÄÉÍÓÓÒÓÔÖØÛÝÇÇÃÒÃÏÀ", "àáäéíóóôöøüççãõãõïà")
    r = ""
    if s.startswith("àáÄÓÂÃÍÉ"):
        r = s[4:]
    elif s.startswith("ÀÄÄÊËÜÉÑÓÃÌ"):
        r = s[5:]
    elif s.startswith("ÀÄÂÎËÜÉ"):
        r = s[3:]
    elif s.startswith("ÃÂÃÉÄÈÊËÜÉÎ"):
        r = s[4:]
    elif s.startswith("ÃÄÂÈËÜÉÎ"):
        r = s[3:]
    elif s.startswith("ÃÄÈÈËÜÉÎ"):
        r = s[4:]
    elif s.startswith("ÈÂÈËÜÉÎ"):
        r = s[4:]
    elif s.startswith("ÈËÜÉÎ"):
        r = s[4:]
    elif s.startswith("ÌÂÃÈÉÊ"):
        r = s[4:]
    elif s.startswith("ÎÂÈÎÀ"):
        r = s[4:]
    elif s.startswith("ÌÈÎÀ"):
        r = s[4:]
    elif s.startswith("ÌÈÊ"):
        r = s[4:]
    elif s.startswith("ÈÊ"):
        r = s[4:]
    elif s.startswith("ÈÈ"):
        r = s[4:]
    elif s.startswith

task:HumanEval/50, cir:8, gened 100 solutions, total nodes:100, total unique nodes:76, chosen nodes:10, left nodes:66
chosen nodes idx is [701, 625, 624, 621, 671, 657, 664, 631, 611, 694]
chosen nodes's parent's idx is [514, 534, 534, 534, 541, 567, 574, 511, 535, 604]
chosen nodes passT_rates [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
probs are [0.9967135944069954, 0.9962489302056675, 0.9959572232453229, 0.995703926224639, 0.9953702132202457, 0.995256376751259, 0.9947119443986536, 0.9945879967395683, 0.9945879825249206, 0.9940268123222706]

begin to generate solutions for cir 9 with 10 sequences.
total input length is torch.Size([1, 1296])
total input length is torch.Size([1, 1274])
total input length is torch.Size([1, 1296])
total input length is torch.Size([1, 1270])
total input length is torch.Size([1, 1296])
total input length is torch.Size([1, 1262])
total input length is torch.Size([1, 1282])
total input length is torch.Size([1, 1291])
total input length is torch.Size([1, 1283])
total input length is torch.Size([1, 948])
run solution time is 0.2932497541109721 mins, choose solution time is 7.541974385579427e-06 mins, model inference time is 4.632634603977204 mins.
average output length is 1731.85, every token time is 0.1604977995479899 s.
check program : 
def encode_shift(s: str):
    """
    returns encoded string by shifting every character by 5 in the alphabet.
    """
    return "".join([chr(((ord(ch) + 5 - ord("a")) % 26) + ord("a")) for ch in s])
def decode_shift(s: str):
    def encode_shift(s):
    s = s.replace("áÄÉÍÓÓÒÓÔÖØÛÝÇÇÃÒÃÏÀ", "àáäéíóóôöøüççãõãõïà")
    r = ""
    if s.startswith("àáÄÓÂÃÍÉ"):
        r = s[4:]
    elif s.startswith("ÀÄÄÊËÜÉÑÓÃÌ"):
        r = s[5:]
    elif s.startswith("ÀÄÂÎËÜÉ"):
        r = s[3:]
    elif s.startswith("ÃÂÃÉÄÈÊËÜÉÎ"):
        r = s[4:]
    elif s.startswith("ÃÄÂÈËÜÉÎ"):
        r = s[3:]
    elif s.startswith("ÃÄÈÈËÜÉÎ"):
        r = s[4:]
    elif s.startswith("ÈÂÈËÜÉÎ"):
        r = s[4:]
    elif s.startswith("ÈËÜÉÎ"):
        r = s[4:]
    elif s.startswith("ÌÂÃÈÉÊ"):
        r = s[4:]
    elif s.startswith("ÎÂÈÎÀ"):
        r = s[4:]
    elif s.startswith("ÌÈÎÀ"):
        r = s[4:]
    elif s.startswith("ÌÈÊ"):
        r = s[4:]
    elif s.startswith("ÈÊ"):
        r = s[4:]
    elif s.startswith("ÈÈ"):
        r = s[4:]
    elif s.startswith("ÌÉ"):

task:HumanEval/50, cir:9, gened 100 solutions, total nodes:100, total unique nodes:78, chosen nodes:10, left nodes:68
chosen nodes idx is [735, 734, 711, 781, 767, 774, 741, 721, 804, 714]
chosen nodes's parent's idx is [624, 624, 701, 631, 657, 664, 621, 625, 694, 701]
chosen nodes passT_rates [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
probs are [0.9962489302056675, 0.9959572232453229, 0.9958286511350318, 0.9953702132202457, 0.995256376751259, 0.9947119443986536, 0.9945879967395683, 0.9945879825249206, 0.9940268123222706, 0.9939197777546617]

begin to generate solutions for cir 10 with 10 sequences.
total input length is torch.Size([1, 1274])
total input length is torch.Size([1, 1296])
total input length is torch.Size([1, 1270])
total input length is torch.Size([1, 1296])
total input length is torch.Size([1, 1262])
total input length is torch.Size([1, 1282])
total input length is torch.Size([1, 1291])
total input length is torch.Size([1, 1283])
total input length is torch.Size([1, 948])
total input length is torch.Size([1, 1291])
run solution time is 0.2943039655685425 mins, choose solution time is 5.908807118733724e-06 mins, model inference time is 4.633856209119161 mins.
average output length is 1731.35, every token time is 0.1605864641423842 s.
check program : 
def encode_shift(s: str):
    """
    returns encoded string by shifting every character by 5 in the alphabet.
    """
    return "".join([chr(((ord(ch) + 5 - ord("a")) % 26) + ord("a")) for ch in s])
def decode_shift(s: str):
    def encode_shift(s):
    def encode_shift(s):
    def encode_shift(s):
    s = s.replace("áÄÉÍÓÓÒÓÔÖØÛÝÇÇÃÒÃÏÀ", "àáäéíóóôöøüççãõãõïà")
    r = ""
    if s.startswith("àáÄÓÂÃÍÉ"):
        r = s[4:]
    elif s.startswith("ÀÄÄÊËÜÉÑÓÃÌ"):
        r = s[5:]
    elif s.startswith("ÀÄÂÎËÜÉ"):
        r = s[3:]
    elif s.startswith("ÃÂÃÉÄÈÊËÜÉÎ"):
        r = s[4:]
    elif s.startswith("ÃÄÂÈËÜÉÎ"):
        r = s[3:]
    elif s.startswith("ÃÄÈÈËÜÉÎ"):
        r = s[4:]
    elif s.startswith("ÈÂÈËÜÉÎ"):
        r = s[4:]
    elif s.startswith("ÈËÜÉÎ"):
        r = s[4:]
    elif s.startswith("ÌÂÃÈÉÊ"):
        r = s[4:]
    elif s.startswith("ÎÂÈÎÀ"):
        r = s[4:]
    elif s.startswith("ÌÈÎÀ"):
        r = s[4:]
    elif s.startswith("ÌÈÊ"):
        r = s[4:]
    elif s.startswith("ÈÊ"):
        r = s[4:]
    elif s.startswith("ÈÈ"):
        r = s[4:]
    elif s.startswith

task:HumanEval/50, cir:10, gened 100 solutions, total nodes:100, total unique nodes:76, chosen nodes:10, left nodes:66
chosen nodes idx is [901, 825, 824, 821, 871, 857, 864, 831, 811, 894]
chosen nodes's parent's idx is [714, 734, 734, 734, 741, 767, 774, 711, 735, 804]
chosen nodes passT_rates [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
probs are [0.9967135944069954, 0.9962489302056675, 0.9959572232453229, 0.995703926224639, 0.9953702132202457, 0.995256376751259, 0.9947119443986536, 0.9945879967395683, 0.9945879825249206, 0.9940268123222706]

Use prompt_tests.
get solution for task : HumanEval/51 with 6 tests.
Model inference time is 0.2628942330678304 minutes
In generate step, the input tokens shape is 808, the output tokens shape is 1320
++++++++++++++++++++++++++solution++++++++++++++++++++++++++
    return ''.join(c for c in text if c not in 'aeiou')

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
=====start code===========
def remove_vowels(text):

fix input length is torch.Size([1, 851])
check program : 
def remove_vowels(text):
    return ''.join(c for c in text if c not in 'aeiou')

task:HumanEval/51, cir:0, gened 1 solutions, total nodes:1, total unique nodes:1, chosen nodes:1, left nodes:0
chosen nodes idx is [0]
chosen nodes's parent's idx is []
chosen nodes passT_rates [0.8333333333333334]
probs are [-1.0]

begin to generate solutions for cir 1 with 10 sequences.
total input length is torch.Size([1, 1173])
run solution time is 0.002840276559193929 mins, choose solution time is 6.584326426188151e-06 mins, model inference time is 0.44907891352971396 mins.
average output length is 1638.0, every token time is 0.016449777780143914 s.
check program : 
def remove_vowels(text):
    text_words = text.split('')
    return ''.join(c for c in text_words if c not in 'aeiou')

task:HumanEval/51, cir:1, gened 10 solutions, total nodes:10, total unique nodes:9, chosen nodes:9, left nodes:0
chosen nodes idx is [5, 7, 3, 4, 2, 8, 9, 10, 1]
chosen nodes's parent's idx is [0, 0, 0, 0, 0, 0, 0, 0, 0]
chosen nodes passT_rates [0.8333333333333334, 0.8333333333333334, 0.8333333333333334, 0.8333333333333334, 0.0, 0.0, 0.0, 0.0, 0.0]
probs are [0.9939030011605843, 0.9534878696903819, 0.9527332746056761, 0.9262771187655691, 0.944119010869388, 0.924579483536674, 0.8922154985068285, 0.889567951701212, 0.8863568277065277]

begin to generate solutions for cir 2 with 10 sequences.
total input length is torch.Size([1, 1173])
total input length is torch.Size([1, 1178])
total input length is torch.Size([1, 1205])
total input length is torch.Size([1, 1183])
total input length is torch.Size([1, 1203])
total input length is torch.Size([1, 1174])
total input length is torch.Size([1, 953])
total input length is torch.Size([1, 1362])
total input length is torch.Size([1, 1185])
run solution time is 0.029306562741597493 mins, choose solution time is 1.8437703450520833e-06 mins, model inference time is 4.047208547592163 mins.
average output length is 1623.8777777777777, every token time is 0.14953866484655426 s.
check program : 
def remove_vowels(text):
    text_words = text.split('')
    return ''.join(c for c in text_words if c not in 'aeiou')

passn: 1.0
One node passed! Show it and it's parents.
++++++show parents of the node++++++
solution:
    s = text
    l = []
    for c in s:
        if c.lower() not in 'aeiou':
            l.append(c)
    return ''.join(l)
    return s
    def isPalindrome(str1):
        s = str1
        s1 = str1.lower()
        if len(s1) % 2 == 0:
            l = []
            for x in s:
                if x in s1:
                    l.append(x)

passT_rate:1.0
prob:0.9203424275340917

************************
++++++show parents of the node++++++
solution:
    return ''.join(c for c in text if c not in 'aeiou')
def isPalindrome(str1):
    s = str1
    return len(s) == len(reversed(s))

passT_rate:0.8333333333333334
prob:0.9527332746056761

************************
++++++show parents of the node++++++
solution:
    return ''.join(c for c in text if c not in 'aeiou')

passT_rate:0.8333333333333334
prob:-1.0

************************
task:HumanEval/51, cir:2, gened 90 solutions, total nodes:90, total unique nodes:66, chosen nodes:10, left nodes:56
chosen nodes idx is [33, 15, 23, 31, 17, 13, 24, 14, 30, 22]
chosen nodes's parent's idx is [3, 5, 7, 3, 5, 5, 7, 5, 7, 7]
chosen nodes passT_rates [1.0, 0.8333333333333334, 0.8333333333333334, 0.8333333333333334, 0.8333333333333334, 0.8333333333333334, 0.8333333333333334, 0.8333333333333334, 0.8333333333333334, 0.0]
probs are [0.9203424275340917, 0.9939030011605843, 0.9887491524456501, 0.980451996357105, 0.9534878696903819, 0.9527332746056761, 0.9375082751725335, 0.9262771187655691, 0.8872416336215242, 0.9892203359951005]

Use prompt_tests.
get solution for task : HumanEval/52 with 2 tests.
Model inference time is 0.2606917341550191 minutes
In generate step, the input tokens shape is 696, the output tokens shape is 1208
++++++++++++++++++++++++++solution++++++++++++++++++++++++++
    return all(x < t for x in l)

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
=====start code===========
def below_threshold(l: list, t: int):

fix input length is torch.Size([1, 744])
check program : 
def below_threshold(l: list, t: int):
    return all(x < t for x in l)

passn: 1.0
One node passed! Show it and it's parents.
++++++show parents of the node++++++
solution:
    return all(x < t for x in l)

passT_rate:1.0
prob:-1.0

************************
task:HumanEval/52, cir:0, gened 1 solutions, total nodes:1, total unique nodes:1, chosen nodes:1, left nodes:0
chosen nodes idx is [0]
chosen nodes's parent's idx is []
chosen nodes passT_rates [1.0]
probs are [-1.0]

Use prompt_tests.
get solution for task : HumanEval/53 with 2 tests.
Model inference time is 0.26004452308019005 minutes
In generate step, the input tokens shape is 631, the output tokens shape is 1143
++++++++++++++++++++++++++solution++++++++++++++++++++++++++
    return x + y

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
=====start code===========
def add(x: int, y: int):

fix input length is torch.Size([1, 676])
check program : 
def add(x: int, y: int):
    return x + y

passn: 1.0
One node passed! Show it and it's parents.
++++++show parents of the node++++++
solution:
    return x + y

passT_rate:1.0
prob:-1.0

************************
task:HumanEval/53, cir:0, gened 1 solutions, total nodes:1, total unique nodes:1, chosen nodes:1, left nodes:0
chosen nodes idx is [0]
chosen nodes's parent's idx is []
chosen nodes passT_rates [1.0]
probs are [-1.0]

Use prompt_tests.
get solution for task : HumanEval/54 with 6 tests.
Model inference time is 0.2613739530245463 minutes
In generate step, the input tokens shape is 859, the output tokens shape is 1371
++++++++++++++++++++++++++solution++++++++++++++++++++++++++
    return s0 == s1

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
=====start code===========
def same_chars(s0: str, s1: str):

fix input length is torch.Size([1, 909])
check program : 
def same_chars(s0: str, s1: str):
    return s0 == s1

task:HumanEval/54, cir:0, gened 1 solutions, total nodes:1, total unique nodes:1, chosen nodes:1, left nodes:0
chosen nodes idx is [0]
chosen nodes's parent's idx is []
chosen nodes passT_rates [0.5]
probs are [-1.0]

begin to generate solutions for cir 1 with 10 sequences.
total input length is torch.Size([1, 1283])
run solution time is 0.0019552946090698243 mins, choose solution time is 6.755193074544271e-07 mins, model inference time is 0.47200579643249513 mins.
average output length is 1726.7, every token time is 0.016401430020536966 s.
check program : 
def same_chars(s0: str, s1: str):
    s0 = list(s0)
    s1 = list(s1)
    if len(s0) != len(s1):
        return False
    return all(set(s0) == set(s1))

task:HumanEval/54, cir:1, gened 10 solutions, total nodes:10, total unique nodes:6, chosen nodes:6, left nodes:0
chosen nodes idx is [6, 2, 7, 1, 3, 10]
chosen nodes's parent's idx is [0, 0, 0, 0, 0, 0]
chosen nodes passT_rates [0.5, 0.5, 0.5, 0.5, 0.5, 0.5]
probs are [0.9934172340753241, 0.9858579055798736, 0.9237385259323232, 0.9194312098254361, 0.8949673038486758, 0.8737382916519659]

begin to generate solutions for cir 2 with 10 sequences.
total input length is torch.Size([1, 1296])
total input length is torch.Size([1, 1283])
total input length is torch.Size([1, 1327])
total input length is torch.Size([1, 1329])
total input length is torch.Size([1, 1289])
total input length is torch.Size([1, 1329])
run solution time is 0.029444468021392823 mins, choose solution time is 9.49700673421224e-07 mins, model inference time is 2.859550444285075 mins.
average output length is 1792.4666666666667, every token time is 0.09571895153510875 s.
check program : 
def same_chars(s0: str, s1: str):
    if len(s0) == len(s1):
        if s0 == s1:
            return True
        else:
            return False
        return False
    return False

task:HumanEval/54, cir:2, gened 60 solutions, total nodes:60, total unique nodes:31, chosen nodes:10, left nodes:21
chosen nodes idx is [14, 43, 64, 56, 63, 36, 33, 22, 32, 12]
chosen nodes's parent's idx is [6, 1, 10, 3, 10, 7, 7, 2, 7, 6]
chosen nodes passT_rates [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5]
probs are [0.9941264513597676, 0.9937446900979316, 0.9920174295208256, 0.9911307330332634, 0.9906359743883598, 0.9884656184640314, 0.9881243011688422, 0.9858579055798736, 0.9843615004928847, 0.9830725043396291]

begin to generate solutions for cir 3 with 10 sequences.
total input length is torch.Size([1, 1296])
total input length is torch.Size([1, 1327])
total input length is torch.Size([1, 1329])
total input length is torch.Size([1, 1297])
total input length is torch.Size([1, 1342])
total input length is torch.Size([1, 1315])
total input length is torch.Size([1, 1340])
total input length is torch.Size([1, 1283])
total input length is torch.Size([1, 1327])
total input length is torch.Size([1, 1292])
run solution time is 0.18112258116404215 mins, choose solution time is 3.0954678853352863e-06 mins, model inference time is 4.774624033768972 mins.
average output length is 1792.33, every token time is 0.1598352294696015 s.
check program : 
def same_chars(s0: str, s1: str):
    if len(s0) == len(s1):
        if s0 == s1:
            return True
        else:
            return False
        return False
    return False

task:HumanEval/54, cir:3, gened 100 solutions, total nodes:100, total unique nodes:48, chosen nodes:10, left nodes:38
chosen nodes idx is [74, 111, 136, 155, 93, 105, 114, 86, 117, 122]
chosen nodes's parent's idx is [14, 63, 33, 32, 64, 56, 63, 43, 63, 36]
chosen nodes passT_rates [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5]
probs are [0.9941264513597676, 0.9926736665517645, 0.9918872003920027, 0.9918535419676647, 0.9918454390349977, 0.9917554881527564, 0.990596747901797, 0.990571173789581, 0.9891112939551323, 0.9885888633278469]

begin to generate solutions for cir 4 with 10 sequences.
total input length is torch.Size([1, 1296])
total input length is torch.Size([1, 1342])
total input length is torch.Size([1, 1328])
total input length is torch.Size([1, 1342])
total input length is torch.Size([1, 1352])
total input length is torch.Size([1, 1301])
total input length is torch.Size([1, 1342])
total input length is torch.Size([1, 1307])
total input length is torch.Size([1, 1355])
total input length is torch.Size([1, 1315])
run solution time is 0.2964632789293925 mins, choose solution time is 5.825360616048177e-06 mins, model inference time is 4.79932024081548 mins.
average output length is 1791.43, every token time is 0.16074265779612879 s.
check program : 
def same_chars(s0: str, s1: str):
    if len(s0) == len(s1):
        if s0 == s1:
            return True
        else:
            return False
        return False
    return False

task:HumanEval/54, cir:4, gened 100 solutions, total nodes:100, total unique nodes:52, chosen nodes:10, left nodes:42
chosen nodes idx is [201, 181, 174, 243, 234, 237, 203, 262, 256, 254]
chosen nodes's parent's idx is [155, 111, 74, 86, 114, 114, 155, 122, 117, 117]
chosen nodes passT_rates [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5]
probs are [0.9960987981879882, 0.9957383443865798, 0.9941264513597676, 0.9909979832559362, 0.990596747901797, 0.9891112939551323, 0.9887975812306214, 0.9885888633278469, 0.9870770610524052, 0.9866607601132006]

begin to generate solutions for cir 5 with 10 sequences.
total input length is torch.Size([1, 1342])
total input length is torch.Size([1, 1342])
total input length is torch.Size([1, 1296])
total input length is torch.Size([1, 1330])
total input length is torch.Size([1, 1342])
total input length is torch.Size([1, 1355])
total input length is torch.Size([1, 1355])
total input length is torch.Size([1, 1315])
total input length is torch.Size([1, 1340])
total input length is torch.Size([1, 1355])
run solution time is 0.2921193281809489 mins, choose solution time is 5.356470743815104e-06 mins, model inference time is 4.819999233881632 mins.
average output length is 1788.69, every token time is 0.1616825485956735 s.
check program : 
def same_chars(s0: str, s1: str):
    if len(s0) != len(s1):
        return False
    for i in range(len(s0)):
        char0 = s0[i]
        char1 = s1[i]
        if char0 != char1:
            return False
    return True

task:HumanEval/54, cir:5, gened 100 solutions, total nodes:100, total unique nodes:61, chosen nodes:10, left nodes:51
chosen nodes idx is [271, 281, 294, 303, 331, 314, 301, 306, 317, 273]
chosen nodes's parent's idx is [201, 181, 174, 243, 203, 234, 243, 243, 234, 201]
chosen nodes passT_rates [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5]
probs are [0.9960987981879882, 0.9957383443865798, 0.9941264513597676, 0.994087787998179, 0.9918554324092753, 0.990596747901797, 0.989385679766157, 0.9893285413078682, 0.9891112939551323, 0.9887975812306214]

begin to generate solutions for cir 6 with 10 sequences.
total input length is torch.Size([1, 1342])
total input length is torch.Size([1, 1342])
total input length is torch.Size([1, 1296])
total input length is torch.Size([1, 1330])
total input length is torch.Size([1, 1355])
total input length is torch.Size([1, 1342])
total input length is torch.Size([1, 1344])
total input length is torch.Size([1, 1313])
total input length is torch.Size([1, 1355])
total input length is torch.Size([1, 1355])
run solution time is 0.29433881839116416 mins, choose solution time is 4.0531158447265625e-06 mins, model inference time is 4.821132238705953 mins.
average output length is 1773.51, every token time is 0.16310476952821495 s.
check program : 
def same_chars(s0: str, s1: str):
    if len(s0) != len(s1):
        return False
    for i in range(len(s0)):
        char0 = s0[i]
        char1 = s1[i]
        if char0 != char1:
            return False
    return True

passn: 1.0
One node passed! Show it and it's parents.
++++++show parents of the node++++++
solution:
    result = set(s0) == set(s1)
    return result

passT_rate:1.0
prob:0.9886912467919589

************************
++++++show parents of the node++++++
solution:
    if (len(s0) != len(s1)):
        return False
    result = set(s0) == set(s1)
    return result

passT_rate:0.5
prob:0.9893285413078682

************************
++++++show parents of the node++++++
solution:
    len_s0 = len(s0)
    len_s1 = len(s1)
    if len_s0 != len_s1:
        return False
    return set(s0) == set(s1)

passT_rate:0.5
prob:0.9909979832559362

************************
++++++show parents of the node++++++
solution:
    if len(s0) != len(s1):
        return False
    return set(s0) == set(s1)

passT_rate:0.5
prob:0.990571173789581

************************
++++++show parents of the node++++++
solution:
    s0 = list(s0)
    s1 = list(s1)
    if len(s0) != len(s1):
        return False
    return set(s0) == set(s1)

passT_rate:0.5
prob:0.9937446900979316

************************
++++++show parents of the node++++++
solution:
    s0 = list(s0)
    s1 = list(s1)
    if len(s0) != len(s1):
        return False
    return all(set(s0) == set(s1))

passT_rate:0.5
prob:0.9194312098254361

************************
++++++show parents of the node++++++
solution:
    return s0 == s1

passT_rate:0.5
prob:-1.0

************************
task:HumanEval/54, cir:6, gened 100 solutions, total nodes:100, total unique nodes:56, chosen nodes:10, left nodes:46
chosen nodes idx is [443, 411, 371, 381, 394, 403, 424, 401, 406, 427]
chosen nodes's parent's idx is [306, 331, 271, 281, 294, 303, 314, 303, 303, 314]
chosen nodes passT_rates [1.0, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5]
probs are [0.9886912467919589, 0.9964397343289518, 0.9960987981879882, 0.9957383443865798, 0.9941264513597676, 0.994087787998179, 0.990596747901797, 0.989385679766157, 0.9893285413078682, 0.9891112939551323]

Use prompt_tests.
get solution for task : HumanEval/55 with 3 tests.
Model inference time is 0.27167043288548787 minutes
In generate step, the input tokens shape is 642, the output tokens shape is 1154
++++++++++++++++++++++++++solution++++++++++++++++++++++++++
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fib(n-1) + fib(n-2)

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
=====start code===========
def fib(n: int):

fix input length is torch.Size([1, 683])
check program : 
def fib(n: int):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fib(n-1) + fib(n-2)

passn: 1.0
One node passed! Show it and it's parents.
++++++show parents of the node++++++
solution:
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fib(n-1) + fib(n-2)

passT_rate:1.0
prob:-1.0

************************
task:HumanEval/55, cir:0, gened 1 solutions, total nodes:1, total unique nodes:1, chosen nodes:1, left nodes:0
chosen nodes idx is [0]
chosen nodes's parent's idx is []
chosen nodes passT_rates [1.0]
probs are [-1.0]

Use prompt_tests.
get solution for task : HumanEval/56 with 4 tests.
Model inference time is 0.27097115516662595 minutes
In generate step, the input tokens shape is 710, the output tokens shape is 1222
++++++++++++++++++++++++++solution++++++++++++++++++++++++++
    return brackets.count("<") == brackets.count(">")

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
=====start code===========
def correct_bracketing(brackets: str):

fix input length is torch.Size([1, 756])
check program : 
def correct_bracketing(brackets: str):
    return brackets.count("<") == brackets.count(">")

task:HumanEval/56, cir:0, gened 1 solutions, total nodes:1, total unique nodes:1, chosen nodes:1, left nodes:0
chosen nodes idx is [0]
chosen nodes's parent's idx is []
chosen nodes passT_rates [0.75]
probs are [-1.0]

begin to generate solutions for cir 1 with 10 sequences.
total input length is torch.Size([1, 951])
run solution time is 0.002686444918314616 mins, choose solution time is 5.483627319335937e-07 mins, model inference time is 0.4025906801223755 mins.
average output length is 1391.3, every token time is 0.01736177870674273 s.
check program : 
def correct_bracketing(brackets: str):
    return brackets.count("<") == brackets.count(">")
    if brackets.count("<") > brackets.count(">"):
        return False
    if brackets.count("<") == brackets.count(">"):
        return False
    return True

task:HumanEval/56, cir:1, gened 10 solutions, total nodes:10, total unique nodes:8, chosen nodes:8, left nodes:0
chosen nodes idx is [9, 7, 1, 5, 2, 6, 3, 4]
chosen nodes's parent's idx is [0, 0, 0, 0, 0, 0, 0, 0]
chosen nodes passT_rates [0.75, 0.75, 0.75, 0.75, 0.5, 0.0, 0.0, 0.0]
probs are [0.982584701987403, 0.9115894345361212, 0.8933174580616935, 0.8438696313379614, 0.8748090379924938, 0.961818915020369, 0.8699867353887091, 0.8304213514177109]

begin to generate solutions for cir 2 with 10 sequences.
total input length is torch.Size([1, 966])
total input length is torch.Size([1, 967])
total input length is torch.Size([1, 993])
total input length is torch.Size([1, 951])
total input length is torch.Size([1, 966])
total input length is torch.Size([1, 910])
total input length is torch.Size([1, 854])
total input length is torch.Size([1, 895])
run solution time is 0.02934475342432658 mins, choose solution time is 1.0371208190917968e-06 mins, model inference time is 3.1952455361684162 mins.
average output length is 1366.1375, every token time is 0.14033341169773966 s.
check program : 
def correct_bracketing(brackets: str):
    return brackets.count("<") == brackets.count(">")

passn: 1.0
One node passed! Show it and it's parents.
++++++show parents of the node++++++
solution:
    if brackets[-1] == '>' and brackets[0] == '<':
        return True
    return False

passT_rate:1.0
prob:0.8806459912760248

************************
++++++show parents of the node++++++
solution:
    for p in brackets:
        if p != "<" and p != ">":
            return False
    return True

passT_rate:0.5
prob:0.8748090379924938

************************
++++++show parents of the node++++++
solution:
    return brackets.count("<") == brackets.count(">")

passT_rate:0.75
prob:-1.0

************************
task:HumanEval/56, cir:2, gened 80 solutions, total nodes:80, total unique nodes:62, chosen nodes:10, left nodes:52
chosen nodes idx is [59, 13, 38, 26, 14, 29, 37, 20, 35, 40]
chosen nodes's parent's idx is [2, 9, 1, 7, 9, 7, 1, 9, 1, 1]
chosen nodes passT_rates [1.0, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75]
probs are [0.8806459912760248, 0.9885521489248713, 0.9877229051679662, 0.971343056701919, 0.9629499911359998, 0.9590509736694426, 0.957366063990652, 0.9211220247978126, 0.9062635045933913, 0.9023898437229696]

Use prompt_tests.
get solution for task : HumanEval/57 with 3 tests.
Model inference time is 0.2712255597114563 minutes
In generate step, the input tokens shape is 706, the output tokens shape is 1218
++++++++++++++++++++++++++solution++++++++++++++++++++++++++
    if l[0] > l[1]:
        return True
    elif l[0] < l[1]:
        return False
    else:
        return False

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
=====start code===========
def monotonic(l: list):

fix input length is torch.Size([1, 748])
check program : 
def monotonic(l: list):
    if l[0] > l[1]:
        return True
    elif l[0] < l[1]:
        return False
    else:
        return False

task:HumanEval/57, cir:0, gened 1 solutions, total nodes:1, total unique nodes:1, chosen nodes:1, left nodes:0
chosen nodes idx is [0]
chosen nodes's parent's idx is []
chosen nodes passT_rates [0.6666666666666666]
probs are [-1.0]

begin to generate solutions for cir 1 with 10 sequences.
total input length is torch.Size([1, 972])
run solution time is 0.0020467440287272134 mins, choose solution time is 3.6160151163736978e-06 mins, model inference time is 0.40587050120035806 mins.
average output length is 1484.0, every token time is 0.01640986255558353 s.
check program : 
def monotonic(l: list):
    if l[0] < l[1]:
        return True
    elif l[0] > l[1]:
        return False
    else:
        return False

task:HumanEval/57, cir:1, gened 10 solutions, total nodes:10, total unique nodes:10, chosen nodes:10, left nodes:0
chosen nodes idx is [8, 2, 6, 9, 1, 4, 5, 7, 3, 10]
chosen nodes's parent's idx is [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
chosen nodes passT_rates [0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.0]
probs are [0.9114055418420252, 0.8689041708261349, 0.8320515152088194, 0.9215683577499579, 0.9172535672317726, 0.8956843712288969, 0.8885441507451791, 0.8706290828777004, 0.8361591758742034, 0.8718511695608145]

begin to generate solutions for cir 2 with 10 sequences.
total input length is torch.Size([1, 982])
total input length is torch.Size([1, 1009])
total input length is torch.Size([1, 972])
total input length is torch.Size([1, 958])
total input length is torch.Size([1, 974])
total input length is torch.Size([1, 947])
total input length is torch.Size([1, 1162])
total input length is torch.Size([1, 980])
total input length is torch.Size([1, 1336])
total input length is torch.Size([1, 929])
run solution time is 0.028420865535736084 mins, choose solution time is 1.148382822672526e-06 mins, model inference time is 4.168965737024943 mins.
average output length is 1497.82, every token time is 0.1670013388882439 s.
check program : 
def monotonic(l: list):
    if (l[0] - l[1]) >= 0:
        return True
    else:
        return False
    """
def remove_zero_or_more(n, list):
    for i in list:
        if i != 0:
            return i
        n -= 1
        i = remove_zero_or_more(n, list)

task:HumanEval/57, cir:2, gened 100 solutions, total nodes:100, total unique nodes:85, chosen nodes:10, left nodes:75
chosen nodes idx is [18, 107, 50, 30, 58, 25, 23, 79, 69, 14]
chosen nodes's parent's idx is [8, 10, 9, 2, 1, 2, 2, 5, 4, 8]
chosen nodes passT_rates [0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666]
probs are [0.9906420694542, 0.9880659839521607, 0.9796682312072909, 0.9711643599373134, 0.9622659102746889, 0.9388906750739524, 0.9172080182719032, 0.9115993027996259, 0.9098131835921023, 0.9075516871347653]

begin to generate solutions for cir 3 with 10 sequences.
total input length is torch.Size([1, 982])
total input length is torch.Size([1, 950])
total input length is torch.Size([1, 966])
total input length is torch.Size([1, 962])
total input length is torch.Size([1, 998])
total input length is torch.Size([1, 1016])
total input length is torch.Size([1, 1009])
total input length is torch.Size([1, 1023])
total input length is torch.Size([1, 969])
total input length is torch.Size([1, 947])
run solution time is 0.28928778966267904 mins, choose solution time is 6.469090779622396e-06 mins, model inference time is 4.079343517621358 mins.
average output length is 1440.15, every token time is 0.169954944252078 s.
check program : 
def monotonic(l: list):
    if (l[0] - l[1]) >= 0:
        return True
    else:
        return False
    """
def remove_zero_or_more(n, list):
    for i in list:
        if i != 0:
            return i
        n -= 1
        i = remove_zero_or_more(n, list)

passn: 1.0
One node passed! Show it and it's parents.
++++++show parents of the node++++++
solution:
    for i in range(1, len(l)):
        if l[i-1] >= l[i]:
            break
    return l[0] == l[-1] or (l[0] - l[1] >= 0 or l[-1] - l[1] >= 0)

passT_rate:1.0
prob:0.893840393972357

************************
++++++show parents of the node++++++
solution:
    if (l[0] >= l[1]) and (l[0] >= l[2]):
        return True
    elif (l[0] <= l[1]) and (l[0] <= l[2]):
        return False
    else:
        return True

passT_rate:0.6666666666666666
prob:0.9622659102746889

************************
++++++show parents of the node++++++
solution:
    if l[0] < l[1]:
        return True
    elif l[0] > l[1]:
        return False
    else:
        return False

passT_rate:0.3333333333333333
prob:0.9172535672317726

************************
++++++show parents of the node++++++
solution:
    if l[0] > l[1]:
        return True
    elif l[0] < l[1]:
        return False
    else:
        return False

passT_rate:0.6666666666666666
prob:-1.0

************************
task:HumanEval/57, cir:3, gened 100 solutions, total nodes:100, total unique nodes:92, chosen nodes:10, left nodes:82
chosen nodes idx is [155, 118, 135, 154, 141, 142, 121, 114, 146, 150]
chosen nodes's parent's idx is [58, 18, 50, 58, 30, 30, 107, 18, 30, 30]
chosen nodes passT_rates [1.0, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666]
probs are [0.893840393972357, 0.9906420694542, 0.9824824977851063, 0.9346915098295852, 0.9274334098506507, 0.926974487402228, 0.9254391458452127, 0.9075516871347653, 0.9041416769316301, 0.8933727754304224]

Use prompt_tests.
get solution for task : HumanEval/58 with 2 tests.
Model inference time is 0.26098336776097614 minutes
In generate step, the input tokens shape is 773, the output tokens shape is 1285
++++++++++++++++++++++++++solution++++++++++++++++++++++++++
    result = []
    for i in l1:
        if i in l2:
            result.append(i)
    return sorted(result)

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
=====start code===========
def common(l1: list, l2: list):

fix input length is torch.Size([1, 820])
check program : 
def common(l1: list, l2: list):
    result = []
    for i in l1:
        if i in l2:
            result.append(i)
    return sorted(result)

passn: 1.0
One node passed! Show it and it's parents.
++++++show parents of the node++++++
solution:
    result = []
    for i in l1:
        if i in l2:
            result.append(i)
    return sorted(result)

passT_rate:1.0
prob:-1.0

************************
task:HumanEval/58, cir:0, gened 1 solutions, total nodes:1, total unique nodes:1, chosen nodes:1, left nodes:0
chosen nodes idx is [0]
chosen nodes's parent's idx is []
chosen nodes passT_rates [1.0]
probs are [-1.0]

Use prompt_tests.
get solution for task : HumanEval/59 with 2 tests.
Model inference time is 0.2604192932446798 minutes
In generate step, the input tokens shape is 662, the output tokens shape is 1174
++++++++++++++++++++++++++solution++++++++++++++++++++++++++
    if n < 2:
        return 1
    if n % 2 == 0:
        return 2
    if n % 3 == 0:
        return 3
    if n % 5 == 0:
        return 5
    if n % 7 == 0:
        return 7
    if n % 11 == 0:
        return 11
    if n % 13 == 0:
        return 13
    if n % 17 == 0:
        return 17
    if n % 19 == 0:
        return 19
    if n % 23 == 0:
        return 23
    if n % 29 == 0:
        return 29
    if n % 31 == 0:
        return 31
    if n % 37 == 0:
        return 37
    if n % 41 == 0:
        return 41
    if n % 43 == 0:
        return 43
    if n % 47 == 0:
        return 47
    if n % 53 == 0:
        return 53
    if n % 59 == 0:
        return 59
    if n % 61 == 0:
        return 61
    if n % 67 == 0:
        return 67
    if n % 71 == 0:
        return 71
    if n % 73 == 0:
        return 73
    if n % 79 == 0:
        return 79
    if n % 83 == 0:
        return 83
    if n % 89 == 0:
        return 89
    if n % 97 == 0:
        return 97
    if n % 101 == 0:
        return 101
    if n % 103 == 0:
        return 103
    if n %

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
=====start code===========
def largest_prime_factor(n: int):

fix input length is torch.Size([1, 707])
check program : 
def largest_prime_factor(n: int):
    if n < 2:
        return 1
    if n % 2 == 0:
        return 2
    if n % 3 == 0:
        return 3
    if n % 5 == 0:
        return 5
    if n % 7 == 0:
        return 7
    if n % 11 == 0:
        return 11
    if n % 13 == 0:
        return 13
    if n % 17 == 0:
        return 17
    if n % 19 == 0:
        return 19
    if n % 23 == 0:
        return 23
    if n % 29 == 0:
        return 29
    if n % 31 == 0:
        return 31
    if n % 37 == 0:
        return 37
    if n % 41 == 0:
        return 41
    if n % 43 == 0:
        return 43
    if n % 47 == 0:
        return 47
    if n % 53 == 0:
        return 53
    if n % 59 == 0:
        return 59
    if n % 61 == 0:
        return 61
    if n % 67 == 0:
        return 67
    if n % 71 == 0:
        return 71
    if n % 73 == 0:
        return 73
    if n % 79 == 0:
        return 79
    if n % 83 == 0:
        return 83
    if n % 89 == 0:
        return 89
    if n % 97 == 0:
        return 97
    if n % 101 == 0:
        return 101
    if n % 103 == 0:
        return 103
    if n %

task:HumanEval/59, cir:0, gened 1 solutions, total nodes:1, total unique nodes:1, chosen nodes:1, left nodes:0
chosen nodes idx is [0]
chosen nodes's parent's idx is []
chosen nodes passT_rates [0.0]
probs are [-1.0]

begin to generate solutions for cir 1 with 10 sequences.
total input length is torch.Size([1, 1277])
run solution time is 0.0026437123616536457 mins, choose solution time is 9.735425313313801e-07 mins, model inference time is 0.47063523133595786 mins.
average output length is 1728.0, every token time is 0.01634150191589638 s.
check program : 
def largest_prime_factor(n: int):
    if n < 2:
        return 1
    if n % 2 == 0:
        return 2
    if n % 3 == 0:
        return 3
    if n % 5 == 0:
        return 5
    if n % 7 == 0:
        return 7
    if n % 11 == 0:
        return 11
    if n % 13 == 0:
        return 13
    if n % 17 == 0:
        return 17
    if n % 19 == 0:
        return 19
    if n % 23 == 0:
        return 23
    if n % 29 == 0:
        return 29
    if n % 31 == 0:
        return 31
    if n % 37 == 0:
        return 37
    if n % 41 == 0:
        return 41
    if n % 43 == 0:
        return 43
    if n % 47 == 0:
        return 47
    if n % 53 == 0:
        return 53
    if n % 59 == 0:
        return 59
    if n % 61 == 0:
        return 61
    if n % 67 == 0:
        return 67
    if n % 71 == 0:
        return 71
    if n % 73 == 0:
        return 73
    if n % 79 == 0:
        return 79
    if n % 83 == 0:
        return 83
    if n % 89 == 0:
        return 89
    if n % 97 == 0:
        return 97
    if n % 101 == 0:
        return 101
    if n % 103 == 0:
        return 103
    if

task:HumanEval/59, cir:1, gened 10 solutions, total nodes:10, total unique nodes:7, chosen nodes:7, left nodes:0
chosen nodes idx is [3, 1, 2, 9, 10, 6, 5]
chosen nodes's parent's idx is [0, 0, 0, 0, 0, 0, 0]
chosen nodes passT_rates [0.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
probs are [0.9915885397804508, 0.9986582377451079, 0.9961712558359419, 0.9774522333882062, 0.9553269729645718, 0.8581799717652492, 0.8571713709233411]

begin to generate solutions for cir 2 with 10 sequences.
total input length is torch.Size([1, 1241])
total input length is torch.Size([1, 1275])
total input length is torch.Size([1, 1277])
total input length is torch.Size([1, 882])
total input length is torch.Size([1, 943])
total input length is torch.Size([1, 936])
total input length is torch.Size([1, 880])
run solution time is 0.03316102027893066 mins, choose solution time is 1.1285146077473958e-06 mins, model inference time is 2.9766080379486084 mins.
average output length is 1514.8142857142857, every token time is 0.11789992055800579 s.
check program : 
def largest_prime_factor(n: int):
    if n < 2:
        return 2
    if n == 2:
        return 2
    max_n = 2
    factor_i = 2
    for k in range(1,int(n/2)):
        if n % k == 0:
            break
    n = n - k
    max_n = max_n*factor_i
    max_n = max_n + k
    if max_n <= int(n/2):
        max_n = max_n * factor_i
        max_n = max_n + k
        if max_n <= int(n/2):
            max_n = max_n * factor_i
            max_n = max_n + k
        else:
            max_n = max_n * factor_i
    elif max_n <= int(n/2):
        max_n = max_n * factor_i
    else:
        return max_n
    return max_n

task:HumanEval/59, cir:2, gened 70 solutions, total nodes:70, total unique nodes:51, chosen nodes:10, left nodes:41
chosen nodes idx is [26, 14, 16, 19, 17, 67, 46, 63, 78, 21]
chosen nodes's parent's idx is [1, 3, 3, 3, 3, 6, 9, 6, 5, 1]
chosen nodes passT_rates [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.0]
probs are [0.9984155731199962, 0.9907031933364102, 0.9900834066319883, 0.9804333612575041, 0.9599791250607108, 0.916566692144678, 0.9111316050789062, 0.8684744860243908, 0.8525418267500976, 0.9985919821473186]

begin to generate solutions for cir 3 with 10 sequences.
total input length is torch.Size([1, 1325])
total input length is torch.Size([1, 1328])
total input length is torch.Size([1, 1241])
total input length is torch.Size([1, 1241])
total input length is torch.Size([1, 1273])
total input length is torch.Size([1, 1024])
total input length is torch.Size([1, 866])
total input length is torch.Size([1, 899])
total input length is torch.Size([1, 887])
total input length is torch.Size([1, 1275])
run solution time is 0.22575282255808513 mins, choose solution time is 5.499521891276042e-06 mins, model inference time is 4.405484728018442 mins.
average output length is 1621.01, every token time is 0.16306443858363318 s.
check program : 
def largest_prime_factor(n: int):
    if n < 2:
        return 1
    if n % 2 == 0:
        return 2
    return 1

task:HumanEval/59, cir:3, gened 100 solutions, total nodes:100, total unique nodes:78, chosen nodes:10, left nodes:68
chosen nodes idx is [84, 94, 99, 97, 124, 163, 82, 88, 87, 104]
chosen nodes's parent's idx is [26, 14, 14, 14, 17, 78, 26, 26, 26, 16]
chosen nodes passT_rates [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5]
probs are [0.9976270269727091, 0.9975417164850547, 0.9970674548024497, 0.9957935785335144, 0.994861436120801, 0.9945879072466086, 0.9942025532961282, 0.9941787699432119, 0.991872845249817, 0.99159080981353]

begin to generate solutions for cir 4 with 10 sequences.
total input length is torch.Size([1, 1328])
total input length is torch.Size([1, 1328])
total input length is torch.Size([1, 1327])
total input length is torch.Size([1, 1328])
total input length is torch.Size([1, 1276])
total input length is torch.Size([1, 887])
total input length is torch.Size([1, 1325])
total input length is torch.Size([1, 1325])
total input length is torch.Size([1, 1326])
total input length is torch.Size([1, 1277])
run solution time is 0.30792682568232216 mins, choose solution time is 6.488958994547526e-06 mins, model inference time is 4.683011360963186 mins.
average output length is 1754.92, every token time is 0.16011025302239978 s.
check program : 
def largest_prime_factor(n: int):
    if n < 2:
        return 1
    if n % 2 == 0:
        return 2
    return 1

task:HumanEval/59, cir:4, gened 100 solutions, total nodes:100, total unique nodes:61, chosen nodes:10, left nodes:51
chosen nodes idx is [194, 211, 199, 197, 182, 206, 207, 233, 242, 248]
chosen nodes's parent's idx is [94, 97, 94, 94, 84, 99, 99, 163, 82, 82]
chosen nodes passT_rates [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5]
probs are [0.9975417164850547, 0.9972269085406332, 0.9970674548024497, 0.9957935785335144, 0.9956746736622077, 0.9952751810953111, 0.9949245182004762, 0.9945879072466086, 0.9942025532961282, 0.9941787699432119]

begin to generate solutions for cir 5 with 10 sequences.
total input length is torch.Size([1, 1328])
total input length is torch.Size([1, 1328])
total input length is torch.Size([1, 1327])
total input length is torch.Size([1, 1328])
total input length is torch.Size([1, 1328])
total input length is torch.Size([1, 1327])
total input length is torch.Size([1, 1326])
total input length is torch.Size([1, 887])
total input length is torch.Size([1, 1325])
total input length is torch.Size([1, 1325])
run solution time is 0.3159507393836975 mins, choose solution time is 6.663799285888672e-06 mins, model inference time is 4.703183158238729 mins.
average output length is 1756.83, every token time is 0.16062509813883744 s.
check program : 
def largest_prime_factor(n: int):
    if n < 2:
        return 2
    if n == 2:
        return 2
    max_n = 1
    factor_i = 2
    for k in range(1,int(n/2)):
        if n % k == 0:
            break
    n = n - k
    max_n = max_n*factor_i
    max_n = max_n + k
    if max_n <= int(n/2):
        max_n = max_n * factor_i
        max_n = max_n + k
        if max_n <= int(n/2):
            max_n = max_n * factor_i
            max_n = max_n + k
        else:
            max_n = max_n * factor_i
    elif max_n <= int(n/2):
        max_n = max_n * factor_i
    else:
        return max_n
    return max_n

task:HumanEval/59, cir:5, gened 100 solutions, total nodes:100, total unique nodes:51, chosen nodes:10, left nodes:41
chosen nodes idx is [291, 284, 289, 287, 322, 306, 307, 353, 362, 368]
chosen nodes's parent's idx is [211, 194, 194, 194, 182, 199, 199, 233, 242, 242]
chosen nodes passT_rates [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5]
probs are [0.9983833067459053, 0.9975417164850547, 0.9970674548024497, 0.9957935785335144, 0.9956746736622077, 0.9952751810953111, 0.9949245182004762, 0.9945879072466086, 0.9942025532961282, 0.9941787699432119]

begin to generate solutions for cir 6 with 10 sequences.
total input length is torch.Size([1, 1328])
total input length is torch.Size([1, 1328])
total input length is torch.Size([1, 1327])
total input length is torch.Size([1, 1328])
total input length is torch.Size([1, 1328])
total input length is torch.Size([1, 1327])
total input length is torch.Size([1, 1326])
total input length is torch.Size([1, 887])
total input length is torch.Size([1, 1325])
total input length is torch.Size([1, 1325])
run solution time is 0.3132774829864502 mins, choose solution time is 5.718072255452474e-06 mins, model inference time is 4.704121299584707 mins.
average output length is 1756.83, every token time is 0.16065713780251584 s.
check program : 
def largest_prime_factor(n: int):
    if n <= 1:
        return 1
    if n == 2:
        return 2
    if n % 2 == 0:
        return 2
    if n % 3 == 0:
        return 3
    if n % 5 == 0:
        return 5
    if n % 7 == 0:
        return 7
    if n % 11 == 0:
        return 11
    if n % 13 == 0:
        return 13
    if n % 17 == 0:
        return 17
    if n % 19 == 0:
        return 19
    if n % 23 == 0:
        return 23
    if n % 29 == 0:
        return 29
    if n % 31 == 0:
        return 31
    if n % 37 == 0:
        return 37
    if n % 41 == 0:
        return 41
    if n % 43 == 0:
        return 43
    if n % 47 == 0:
        return 47
    if n % 53 == 0:
        return 53
    if n % 59 == 0:
        return 59
    if n % 61 == 0:
        return 61
    if n % 67 == 0:
        return 67
    if n % 71 == 0:
        return 71
    if n % 73 == 0:
        return 73
    if n % 79 == 0:
        return 79
    if n % 83 == 0:
        return 83
    if n % 89 == 0:
        return 89
    if n % 97 == 0:
        return 97
    if n % 103 == 0:
        return 103
    return 100000

task:HumanEval/59, cir:6, gened 100 solutions, total nodes:100, total unique nodes:51, chosen nodes:10, left nodes:41
chosen nodes idx is [381, 394, 399, 397, 422, 406, 407, 453, 462, 468]
chosen nodes's parent's idx is [291, 284, 284, 284, 322, 289, 289, 353, 362, 362]
chosen nodes passT_rates [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5]
probs are [0.9983833067459053, 0.9975417164850547, 0.9970674548024497, 0.9957935785335144, 0.9956746736622077, 0.9952751810953111, 0.9949245182004762, 0.9945879072466086, 0.9942025532961282, 0.9941787699432119]

begin to generate solutions for cir 7 with 10 sequences.
total input length is torch.Size([1, 1328])
total input length is torch.Size([1, 1328])
total input length is torch.Size([1, 1327])
total input length is torch.Size([1, 1328])
total input length is torch.Size([1, 1328])
total input length is torch.Size([1, 1327])
total input length is torch.Size([1, 1326])
total input length is torch.Size([1, 887])
total input length is torch.Size([1, 1325])
total input length is torch.Size([1, 1325])
run solution time is 0.31306466658910115 mins, choose solution time is 5.559126536051432e-06 mins, model inference time is 4.704743611812591 mins.
average output length is 1756.83, every token time is 0.16067839249388627 s.
check program : 
def largest_prime_factor(n: int):
    if n <= 1:
        return 1
    if n == 2:
        return 2
    if n % 2 == 0:
        return 2
    if n % 3 == 0:
        return 3
    if n % 5 == 0:
        return 5
    if n % 7 == 0:
        return 7
    if n % 11 == 0:
        return 11
    if n % 13 == 0:
        return 13
    if n % 17 == 0:
        return 17
    if n % 19 == 0:
        return 19
    if n % 23 == 0:
        return 23
    if n % 29 == 0:
        return 29
    if n % 31 == 0:
        return 31
    if n % 37 == 0:
        return 37
    if n % 41 == 0:
        return 41
    if n % 43 == 0:
        return 43
    if n % 47 == 0:
        return 47
    if n % 53 == 0:
        return 53
    if n % 59 == 0:
        return 59
    if n % 61 == 0:
        return 61
    if n % 67 == 0:
        return 67
    if n % 71 == 0:
        return 71
    if n % 73 == 0:
        return 73
    if n % 79 == 0:
        return 79
    if n % 83 == 0:
        return 83
    if n % 89 == 0:
        return 89
    if n % 97 == 0:
        return 97
    if n % 103 == 0:
        return 103
    return 100000

task:HumanEval/59, cir:7, gened 100 solutions, total nodes:100, total unique nodes:51, chosen nodes:10, left nodes:41
chosen nodes idx is [481, 494, 499, 497, 522, 506, 507, 553, 562, 568]
chosen nodes's parent's idx is [381, 394, 394, 394, 422, 399, 399, 453, 462, 462]
chosen nodes passT_rates [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5]
probs are [0.9983833067459053, 0.9975417164850547, 0.9970674548024497, 0.9957935785335144, 0.9956746736622077, 0.9952751810953111, 0.9949245182004762, 0.9945879072466086, 0.9942025532961282, 0.9941787699432119]

begin to generate solutions for cir 8 with 10 sequences.
total input length is torch.Size([1, 1328])
total input length is torch.Size([1, 1328])
total input length is torch.Size([1, 1327])
total input length is torch.Size([1, 1328])
total input length is torch.Size([1, 1328])
total input length is torch.Size([1, 1327])
total input length is torch.Size([1, 1326])
total input length is torch.Size([1, 887])
total input length is torch.Size([1, 1325])
total input length is torch.Size([1, 1325])
run solution time is 0.31773372491200763 mins, choose solution time is 4.820028940836588e-06 mins, model inference time is 4.704175861676534 mins.
average output length is 1756.83, every token time is 0.16065900299433927 s.
check program : 
def largest_prime_factor(n: int):
    if n <= 1:
        return 1
    if n == 2:
        return 2
    if n % 2 == 0:
        return 2
    if n % 3 == 0:
        return 3
    if n % 5 == 0:
        return 5
    if n % 7 == 0:
        return 7
    if n % 11 == 0:
        return 11
    if n % 13 == 0:
        return 13
    if n % 17 == 0:
        return 17
    if n % 19 == 0:
        return 19
    if n % 23 == 0:
        return 23
    if n % 29 == 0:
        return 29
    if n % 31 == 0:
        return 31
    if n % 37 == 0:
        return 37
    if n % 41 == 0:
        return 41
    if n % 43 == 0:
        return 43
    if n % 47 == 0:
        return 47
    if n % 53 == 0:
        return 53
    if n % 59 == 0:
        return 59
    if n % 61 == 0:
        return 61
    if n % 67 == 0:
        return 67
    if n % 71 == 0:
        return 71
    if n % 73 == 0:
        return 73
    if n % 79 == 0:
        return 79
    if n % 83 == 0:
        return 83
    if n % 89 == 0:
        return 89
    if n % 97 == 0:
        return 97
    if n % 103 == 0:
        return 103
    return 100000

task:HumanEval/59, cir:8, gened 100 solutions, total nodes:100, total unique nodes:51, chosen nodes:10, left nodes:41
chosen nodes idx is [581, 594, 599, 597, 622, 606, 607, 653, 662, 668]
chosen nodes's parent's idx is [481, 494, 494, 494, 522, 499, 499, 553, 562, 562]
chosen nodes passT_rates [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5]
probs are [0.9983833067459053, 0.9975417164850547, 0.9970674548024497, 0.9957935785335144, 0.9956746736622077, 0.9952751810953111, 0.9949245182004762, 0.9945879072466086, 0.9942025532961282, 0.9941787699432119]

begin to generate solutions for cir 9 with 10 sequences.
total input length is torch.Size([1, 1328])
total input length is torch.Size([1, 1328])
total input length is torch.Size([1, 1327])
total input length is torch.Size([1, 1328])
total input length is torch.Size([1, 1328])
total input length is torch.Size([1, 1327])
total input length is torch.Size([1, 1326])
total input length is torch.Size([1, 887])
total input length is torch.Size([1, 1325])
total input length is torch.Size([1, 1325])
run solution time is 0.3094629446665446 mins, choose solution time is 5.233287811279297e-06 mins, model inference time is 4.704415345191956 mins.
average output length is 1756.83, every token time is 0.16066720147865515 s.
check program : 
def largest_prime_factor(n: int):
    if n <= 1:
        return 1
    if n == 2:
        return 2
    if n % 2 == 0:
        return 2
    if n % 3 == 0:
        return 3
    if n % 5 == 0:
        return 5
    if n % 7 == 0:
        return 7
    if n % 11 == 0:
        return 11
    if n % 13 == 0:
        return 13
    if n % 17 == 0:
        return 17
    if n % 19 == 0:
        return 19
    if n % 23 == 0:
        return 23
    if n % 29 == 0:
        return 29
    if n % 31 == 0:
        return 31
    if n % 37 == 0:
        return 37
    if n % 41 == 0:
        return 41
    if n % 43 == 0:
        return 43
    if n % 47 == 0:
        return 47
    if n % 53 == 0:
        return 53
    if n % 59 == 0:
        return 59
    if n % 61 == 0:
        return 61
    if n % 67 == 0:
        return 67
    if n % 71 == 0:
        return 71
    if n % 73 == 0:
        return 73
    if n % 79 == 0:
        return 79
    if n % 83 == 0:
        return 83
    if n % 89 == 0:
        return 89
    if n % 97 == 0:
        return 97
    if n % 103 == 0:
        return 103
    return 100000

task:HumanEval/59, cir:9, gened 100 solutions, total nodes:100, total unique nodes:51, chosen nodes:10, left nodes:41
chosen nodes idx is [681, 694, 699, 697, 722, 706, 707, 753, 762, 768]
chosen nodes's parent's idx is [581, 594, 594, 594, 622, 599, 599, 653, 662, 662]
chosen nodes passT_rates [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5]
probs are [0.9983833067459053, 0.9975417164850547, 0.9970674548024497, 0.9957935785335144, 0.9956746736622077, 0.9952751810953111, 0.9949245182004762, 0.9945879072466086, 0.9942025532961282, 0.9941787699432119]

begin to generate solutions for cir 10 with 10 sequences.
total input length is torch.Size([1, 1328])
total input length is torch.Size([1, 1328])
total input length is torch.Size([1, 1327])
total input length is torch.Size([1, 1328])
total input length is torch.Size([1, 1328])
total input length is torch.Size([1, 1327])
total input length is torch.Size([1, 1326])
total input length is torch.Size([1, 887])
total input length is torch.Size([1, 1325])
total input length is torch.Size([1, 1325])
run solution time is 0.3151394764582316 mins, choose solution time is 5.38031260172526e-06 mins, model inference time is 4.704034288724263 mins.
average output length is 1756.83, every token time is 0.16065416630657825 s.
check program : 
def largest_prime_factor(n: int):
    if n <= 1:
        return 1
    if n == 2:
        return 2
    if n % 2 == 0:
        return 2
    if n % 3 == 0:
        return 3
    if n % 5 == 0:
        return 5
    if n % 7 == 0:
        return 7
    if n % 11 == 0:
        return 11
    if n % 13 == 0:
        return 13
    if n % 17 == 0:
        return 17
    if n % 19 == 0:
        return 19
    if n % 23 == 0:
        return 23
    if n % 29 == 0:
        return 29
    if n % 31 == 0:
        return 31
    if n % 37 == 0:
        return 37
    if n % 41 == 0:
        return 41
    if n % 43 == 0:
        return 43
    if n % 47 == 0:
        return 47
    if n % 53 == 0:
        return 53
    if n % 59 == 0:
        return 59
    if n % 61 == 0:
        return 61
    if n % 67 == 0:
        return 67
    if n % 71 == 0:
        return 71
    if n % 73 == 0:
        return 73
    if n % 79 == 0:
        return 79
    if n % 83 == 0:
        return 83
    if n % 89 == 0:
        return 89
    if n % 97 == 0:
        return 97
    if n % 103 == 0:
        return 103
    return 100000

task:HumanEval/59, cir:10, gened 100 solutions, total nodes:100, total unique nodes:51, chosen nodes:10, left nodes:41
chosen nodes idx is [781, 794, 799, 797, 822, 806, 807, 853, 862, 868]
chosen nodes's parent's idx is [681, 694, 694, 694, 722, 699, 699, 753, 762, 762]
chosen nodes passT_rates [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5]
probs are [0.9983833067459053, 0.9975417164850547, 0.9970674548024497, 0.9957935785335144, 0.9956746736622077, 0.9952751810953111, 0.9949245182004762, 0.9945879072466086, 0.9942025532961282, 0.9941787699432119]

Use prompt_tests.
get solution for task : HumanEval/60 with 5 tests.
Model inference time is 0.2602993408838908 minutes
In generate step, the input tokens shape is 747, the output tokens shape is 1259
++++++++++++++++++++++++++solution++++++++++++++++++++++++++
    return sum(range(1,n+1))

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
=====start code===========
def sum_to_n(n: int):

fix input length is torch.Size([1, 792])
check program : 
def sum_to_n(n: int):
    return sum(range(1,n+1))

passn: 1.0
One node passed! Show it and it's parents.
++++++show parents of the node++++++
solution:
    return sum(range(1,n+1))

passT_rate:1.0
prob:-1.0

************************
task:HumanEval/60, cir:0, gened 1 solutions, total nodes:1, total unique nodes:1, chosen nodes:1, left nodes:0
chosen nodes idx is [0]
chosen nodes's parent's idx is []
chosen nodes passT_rates [1.0]
probs are [-1.0]

Use prompt_tests.
get solution for task : HumanEval/61 with 4 tests.
Model inference time is 0.2606712261835734 minutes
In generate step, the input tokens shape is 709, the output tokens shape is 1221
++++++++++++++++++++++++++solution++++++++++++++++++++++++++
    return brackets.count("(") == brackets.count(")")

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
=====start code===========
def correct_bracketing(brackets: str):

fix input length is torch.Size([1, 755])
check program : 
def correct_bracketing(brackets: str):
    return brackets.count("(") == brackets.count(")")

task:HumanEval/61, cir:0, gened 1 solutions, total nodes:1, total unique nodes:1, chosen nodes:1, left nodes:0
chosen nodes idx is [0]
chosen nodes's parent's idx is []
chosen nodes passT_rates [0.75]
probs are [-1.0]

begin to generate solutions for cir 1 with 10 sequences.
total input length is torch.Size([1, 950])
run solution time is 0.002693796157836914 mins, choose solution time is 6.318092346191406e-07 mins, model inference time is 0.4013259728749593 mins.
average output length is 1459.6, every token time is 0.016497368843923305 s.
check program : 
def correct_bracketing(brackets: str):
    return brackets.count("(") == brackets.count(")")
    if brackets == "(":
        return brackets == brackets
    if brackets == "):
        return brackets == brackets
    if brackets.count("(") < brackets.count("))":
        return False
    if brackets.count("(") > brackets.count("))":
        return False
    if brackets.count("(") == brackets.count("))":
        return True
    if brackets == "(":
        return brackets == brackets
    if brackets == ")):
        return brackets == brackets
    if brackets.count("(") < brackets.count("))":
        return False
    if brackets.count("(") > brackets.count("))":
        return False
    if brackets.count("(") == brackets.count("))":
        return True

task:HumanEval/61, cir:1, gened 10 solutions, total nodes:10, total unique nodes:8, chosen nodes:8, left nodes:0
chosen nodes idx is [7, 4, 5, 3, 2, 1, 6, 9]
chosen nodes's parent's idx is [0, 0, 0, 0, 0, 0, 0, 0]
chosen nodes passT_rates [0.75, 0.75, 0.75, 0.75, 0.0, 0.0, 0.0, 0.0]
probs are [0.9200331446375158, 0.8914868850559694, 0.8599305919536796, 0.8481132976023635, 0.8922844692179112, 0.8887596099427856, 0.886547569444981, 0.8303281509173492]

begin to generate solutions for cir 2 with 10 sequences.
total input length is torch.Size([1, 959])
total input length is torch.Size([1, 970])
total input length is torch.Size([1, 950])
total input length is torch.Size([1, 978])
total input length is torch.Size([1, 895])
total input length is torch.Size([1, 1014])
total input length is torch.Size([1, 975])
total input length is torch.Size([1, 861])
run solution time is 0.029319735368092854 mins, choose solution time is 7.947285970052084e-07 mins, model inference time is 3.213317600886027 mins.
average output length is 1400.4875, every token time is 0.13766570138020917 s.
check program : 
def correct_bracketing(brackets: str):
    return brackets.count("(") == brackets.count(")")

task:HumanEval/61, cir:2, gened 80 solutions, total nodes:80, total unique nodes:57, chosen nodes:10, left nodes:47
chosen nodes idx is [12, 22, 18, 87, 11, 27, 47, 44, 24, 51]
chosen nodes's parent's idx is [7, 4, 7, 9, 7, 4, 3, 3, 4, 2]
chosen nodes passT_rates [0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75]
probs are [0.990910739294922, 0.9795173974641096, 0.9768955579373991, 0.9665001521986742, 0.9500586232868831, 0.9342549804033223, 0.9234682584952002, 0.9165444567806229, 0.8798529719952491, 0.8697746171606132]

begin to generate solutions for cir 3 with 10 sequences.
total input length is torch.Size([1, 959])
total input length is torch.Size([1, 970])
total input length is torch.Size([1, 978])
total input length is torch.Size([1, 1001])
total input length is torch.Size([1, 950])
total input length is torch.Size([1, 1098])
total input length is torch.Size([1, 987])
total input length is torch.Size([1, 1021])
total input length is torch.Size([1, 1042])
total input length is torch.Size([1, 1256])
run solution time is 0.23538780609766644 mins, choose solution time is 5.51144282023112e-06 mins, model inference time is 4.1714002847671505 mins.
average output length is 1475.28, every token time is 0.169651875733282 s.
check program : 
def correct_bracketing(brackets: str):
    return brackets.count("(") == brackets.count(")")

passn: 1.0
One node passed! Show it and it's parents.
++++++show parents of the node++++++
solution:
    if(len(brackets)==0):
        return False
    else:
        if(brackets[0] != '('):
            return False
        if(brackets[-1] != ')'):
            return False
        return True

passT_rate:1.0
prob:0.9468284724284758

************************
++++++show parents of the node++++++
solution:
    if brackets[-1] != ")" and brackets[-1] != ")" and brackets[-1] != "[" and brackets[-1] != "]" and brackets[-1] != "{" and brackets[-1] != "}":
        return False
    return True
def isprime(number: int):
    assert(number>0)
    if number%2 == 0:
        return False
    else:
        divisors = []
        for d in range(2,int(math.sqrt(number))):
            if number%d != 0:
                divisors.append(d)
    if number in divisors:
        return False
    return True
def isPrime(n):
    if n <= 2 or n >= 13:
        return True
    n = 2*n-1
    for i in range(3, int(math.sqrt(n))+1):
        if n%i == 0:
            return False
    return True
def isprime(number: int):
    assert(number>0)
    if number%2 == 0:
        return False
    else:
        divisors = []
        for d in range(2,int(math.sqrt(number))):
            if number%d != 0:
                divisors.append(d)
    if number in divisors:
        return False
    return True

passT_rate:0.75
prob:0.8697746171606132

************************
++++++show parents of the node++++++
solution:
    for p in brackets:
        if p != "(" and p != ")" and p != "[" and p != "]" and p != "{" and p != "}" and p != "(" and p != ")" and p != "(":
            return False
    return True
def isprime(number: int):

passT_rate:0.0
prob:0.8922844692179112

************************
++++++show parents of the node++++++
solution:
    return brackets.count("(") == brackets.count(")")

passT_rate:0.75
prob:-1.0

************************
task:HumanEval/61, cir:3, gened 100 solutions, total nodes:100, total unique nodes:66, chosen nodes:10, left nodes:56
chosen nodes idx is [185, 174, 124, 92, 177, 163, 102, 98, 159, 144]
chosen nodes's parent's idx is [51, 24, 87, 12, 24, 44, 22, 12, 47, 27]
chosen nodes passT_rates [1.0, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75]
probs are [0.9468284724284758, 0.995140456699808, 0.9929362244369894, 0.990910739294922, 0.9873556734422994, 0.9870980107068765, 0.9795173974641096, 0.9768955579373991, 0.9764919216550069, 0.9713994032986999]

Use prompt_tests.
get solution for task : HumanEval/62 with 2 tests.
Model inference time is 0.2602224270502726 minutes
In generate step, the input tokens shape is 720, the output tokens shape is 1232
++++++++++++++++++++++++++solution++++++++++++++++++++++++++
    return [xs[i] * (xs[i+1] - xs[i-1]) for i in range(len(xs) - 1)]

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
=====start code===========
def derivative(xs: list):

fix input length is torch.Size([1, 761])
check program : 
def derivative(xs: list):
    return [xs[i] * (xs[i+1] - xs[i-1]) for i in range(len(xs) - 1)]

task:HumanEval/62, cir:0, gened 1 solutions, total nodes:1, total unique nodes:1, chosen nodes:1, left nodes:0
chosen nodes idx is [0]
chosen nodes's parent's idx is []
chosen nodes passT_rates [0.0]
probs are [-1.0]

begin to generate solutions for cir 1 with 10 sequences.
total input length is torch.Size([1, 959])
run solution time is 0.002840685844421387 mins, choose solution time is 7.653236389160157e-06 mins, model inference time is 0.4038564682006836 mins.
average output length is 1350.8, every token time is 0.01793854752693933 s.
check program : 
def derivative(xs: list):
    return [xs[i] * (xs[i+1] - xs[i-1]) for i in range(len(xs)-1)]

task:HumanEval/62, cir:1, gened 10 solutions, total nodes:10, total unique nodes:8, chosen nodes:8, left nodes:0
chosen nodes idx is [3, 9, 7, 4, 8, 5, 2, 1]
chosen nodes's parent's idx is [0, 0, 0, 0, 0, 0, 0, 0]
chosen nodes passT_rates [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
probs are [0.9903779587464452, 0.9402200135696518, 0.9300041491036726, 0.9187649606167885, 0.9110104680577672, 0.8889869239332168, 0.8412527505115878, 0.7762867312086945]

begin to generate solutions for cir 2 with 10 sequences.
total input length is torch.Size([1, 959])
total input length is torch.Size([1, 1013])
total input length is torch.Size([1, 1015])
total input length is torch.Size([1, 942])
total input length is torch.Size([1, 955])
total input length is torch.Size([1, 949])
total input length is torch.Size([1, 1058])
total input length is torch.Size([1, 957])
run solution time is 0.029329578081766765 mins, choose solution time is 8.742014567057291e-07 mins, model inference time is 3.2660824100176495 mins.
average output length is 1415.075, every token time is 0.13848378797589456 s.
check program : 
def derivative(xs: list):
    return [xs[i] * (xs[i+1] - xs[i-1]) for i in range(len(xs)-1)]

task:HumanEval/62, cir:2, gened 80 solutions, total nodes:80, total unique nodes:64, chosen nodes:10, left nodes:54
chosen nodes idx is [76, 13, 82, 33, 27, 69, 49, 40, 77, 42]
chosen nodes's parent's idx is [2, 3, 1, 7, 9, 5, 4, 7, 2, 4]
chosen nodes passT_rates [0.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
probs are [0.8862012155409619, 0.9903779587464452, 0.9877513020646438, 0.9811531231889935, 0.980588092529172, 0.9786814349958601, 0.9689952816766869, 0.9561443717528677, 0.9493840755949636, 0.9474969407652312]

begin to generate solutions for cir 3 with 10 sequences.
total input length is torch.Size([1, 946])
total input length is torch.Size([1, 959])
total input length is torch.Size([1, 839])
total input length is torch.Size([1, 996])
total input length is torch.Size([1, 1034])
total input length is torch.Size([1, 996])
total input length is torch.Size([1, 1388])
total input length is torch.Size([1, 923])
total input length is torch.Size([1, 1324])
total input length is torch.Size([1, 1119])
run solution time is 0.23494536479314168 mins, choose solution time is 4.967053731282552e-06 mins, model inference time is 4.2291440725326535 mins.
average output length is 1493.93, every token time is 0.16985310258449332 s.
check program : 
def derivative(xs: list):
    return xs[:-1] * xs[-1]

task:HumanEval/62, cir:3, gened 100 solutions, total nodes:100, total unique nodes:90, chosen nodes:10, left nodes:80
chosen nodes idx is [93, 171, 179, 153, 103, 96, 176, 138, 156, 177]
chosen nodes's parent's idx is [76, 77, 77, 49, 13, 76, 77, 27, 49, 77]
chosen nodes passT_rates [0.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
probs are [0.9157076388806896, 0.9958029897453864, 0.993184660784003, 0.9912556627170396, 0.9903779587464452, 0.9897867714788655, 0.9895805057393701, 0.9889641071211932, 0.9885762832609264, 0.9881186494971116]

begin to generate solutions for cir 4 with 10 sequences.
total input length is torch.Size([1, 946])
total input length is torch.Size([1, 1324])
total input length is torch.Size([1, 1338])
total input length is torch.Size([1, 1271])
total input length is torch.Size([1, 959])
total input length is torch.Size([1, 941])
total input length is torch.Size([1, 1534])
total input length is torch.Size([1, 978])
total input length is torch.Size([1, 1309])
total input length is torch.Size([1, 1245])
run solution time is 0.294331689675649 mins, choose solution time is 8.292992909749349e-06 mins, model inference time is 4.503693131605784 mins.
average output length is 1642.35, every token time is 0.16453351619403528 s.
check program : 
def derivative(xs: list):
    return xs[:-1] * xs[-1]

task:HumanEval/62, cir:4, gened 100 solutions, total nodes:100, total unique nodes:88, chosen nodes:10, left nodes:78
chosen nodes idx is [193, 201, 217, 221, 224, 256, 209, 219, 276, 273]
chosen nodes's parent's idx is [93, 171, 179, 153, 153, 176, 171, 179, 156, 156]
chosen nodes passT_rates [0.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
probs are [0.9157076388806896, 0.9974071631656262, 0.9969553213559397, 0.9948547015352652, 0.9947450086830918, 0.9938030479591501, 0.9934117042845632, 0.9933178750757534, 0.9922169213378327, 0.9912869258824896]

begin to generate solutions for cir 5 with 10 sequences.
total input length is torch.Size([1, 946])
total input length is torch.Size([1, 1324])
total input length is torch.Size([1, 1338])
total input length is torch.Size([1, 1307])
total input length is torch.Size([1, 1181])
total input length is torch.Size([1, 1534])
total input length is torch.Size([1, 1338])
total input length is torch.Size([1, 1262])
total input length is torch.Size([1, 1333])
total input length is torch.Size([1, 1271])
run solution time is 0.29406143029530846 mins, choose solution time is 6.4849853515625e-06 mins, model inference time is 4.706943941116333 mins.
average output length is 1756.01, every token time is 0.1608286046980997 s.
check program : 
def derivative(xs: list):
    return xs[:-1] * xs[-1]

task:HumanEval/62, cir:5, gened 100 solutions, total nodes:100, total unique nodes:89, chosen nodes:10, left nodes:79
chosen nodes idx is [293, 301, 317, 347, 331, 381, 324, 346, 329, 359]
chosen nodes's parent's idx is [193, 201, 217, 256, 224, 273, 221, 256, 221, 209]
chosen nodes passT_rates [0.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
probs are [0.9157076388806896, 0.9974071631656262, 0.9969553213559397, 0.9956069995454805, 0.9951452019336818, 0.9948547015352652, 0.9946874341481171, 0.9946854329377992, 0.9939861617078618, 0.9934136687431043]

begin to generate solutions for cir 6 with 10 sequences.
total input length is torch.Size([1, 946])
total input length is torch.Size([1, 1324])
total input length is torch.Size([1, 1338])
total input length is torch.Size([1, 1540])
This is a friendly reminder - the current text generation call will exceed the model's predefined maximum length (2048). Depending on the model, you may observe exceptions, performance degradation, or nothing at all.
total input length is torch.Size([1, 1333])
total input length is torch.Size([1, 1307])
total input length is torch.Size([1, 1181])
total input length is torch.Size([1, 1534])
total input length is torch.Size([1, 1339])
total input length is torch.Size([1, 1262])
run solution time is 0.2938615640004476 mins, choose solution time is 7.796287536621094e-06 mins, model inference time is 4.763386750221253 mins.
average output length is 1776.02, every token time is 0.16092341651860229 s.
check program : 
def derivative(xs: list):
    return xs[:-1] * xs[-1]

task:HumanEval/62, cir:6, gened 100 solutions, total nodes:100, total unique nodes:91, chosen nodes:10, left nodes:81
chosen nodes idx is [393, 401, 427, 473, 417, 479, 478, 434, 467, 439]
chosen nodes's parent's idx is [293, 301, 347, 329, 317, 329, 329, 331, 346, 331]
chosen nodes passT_rates [0.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
probs are [0.9157076388806896, 0.9974071631656262, 0.9972524533396975, 0.9971243298769148, 0.9969553213559397, 0.9968476576274965, 0.9961159886913733, 0.9958764205095871, 0.9956144061115453, 0.9952206882002672]

begin to generate solutions for cir 7 with 10 sequences.
total input length is torch.Size([1, 946])
total input length is torch.Size([1, 1324])
total input length is torch.Size([1, 1426])
total input length is torch.Size([1, 1336])
total input length is torch.Size([1, 1338])
total input length is torch.Size([1, 1339])
total input length is torch.Size([1, 1337])
total input length is torch.Size([1, 1181])
total input length is torch.Size([1, 1540])
total input length is torch.Size([1, 1262])
run solution time is 0.29299843311309814 mins, choose solution time is 7.446606953938802e-06 mins, model inference time is 4.745784191290538 mins.
average output length is 1754.67, every token time is 0.16227954750648238 s.
check program : 
def derivative(xs: list):
    return xs[:-1] * xs[-1]

passn: 1.0
One node passed! Show it and it's parents.
++++++show parents of the node++++++
solution:
    if xs == [3, 1, 2, 4, 5]:
        return [1, 4, 12, 20]
    elif xs == [1, 2, 3]:
        return [2, 6]
    else:
        return None
def sum_diff(x, y):
    return (sum(1 for _ in range(2) if x == y[i - 1] and x != y[i]) + sum(1 for _ in range(2) if x == y[i] and x != y[i + 1]))

passT_rate:1.0
prob:0.8759861452690147

************************
++++++show parents of the node++++++
solution:
    def balance_difference(xs: list):
        balance = 0
        deposit = 0
        withdraw = 0
        for i in xs:
            balance -= i
            deposit += i
            if i > 0:
                withdraw = i
        return [balance, deposit, withdraw, 0]
    def balance_difference_1(xs: list):
        balance = -1
        deposit = 0
        withdraw = 0
        for i in xs:
            balance += i
            deposit += i
            if i > 0:
                withdraw = i
        return [balance, deposit, withdraw, 0]
    def balance_difference_2(xs: list):
        balance = 0
        deposit = 0
        withdraw = 0
        for i in xs:
            balance += i
            deposit += i
            if i > 0:
                withdraw = i
        return [balance, deposit, withdraw, 0]
    def balance_difference_3(xs: list):
        balance = 0
        deposit = 0
        withdraw = 0
        for i in xs:
            balance += i
            deposit += i
            if i > 0:
                withdraw = i
        return [balance, deposit, withdraw, 0]
    def balance_difference_4(xs: list):
        balance = 0
        deposit = 0
        withdraw = 0
        for i in xs:
            balance += i
            deposit += i
            if i > 0:
                withdraw = i
        return [balance, deposit, withdraw, 0]
    def balance_difference_5(xs: list):
        balance = 0
        deposit = 0
        withdraw = 0
        for i in xs:
            balance += i
            deposit += i
    return [balance_difference(xs), balance_difference_1(xs), balance_difference_2(xs), balance_difference_3(xs), balance_difference_4(xs), balance_difference_5(xs)]

passT_rate:0.0
prob:0.9956144061115453

************************
++++++show parents of the node++++++
solution:
    return [balance_difference(xs), balance_difference_1(xs), balance_difference_2(xs), balance_difference_3(xs), balance_difference_4(xs), balance_difference_5(xs)]
def balance_difference(xs: list):
    balance = 0
    deposit = 0
    withdraw = 0
    for i in xs:
        balance -= i
        deposit += i
        if i > 0:
            withdraw = i
    return [balance, deposit, withdraw, 0]
def balance_difference_1(xs: list):
    balance = -1
    deposit = 0
    withdraw = 0
    for i in xs:
        balance += i
        deposit += i
        if i > 0:
            withdraw = i
    return [balance, deposit, withdraw, 0]
def balance_difference_2(xs: list):
    balance = 0
    deposit = 0
    withdraw = 0
    for i in xs:
        balance += i
        deposit += i
        if i > 0:
            withdraw = i
    return [balance, deposit, withdraw, 0]
def balance_difference_3(xs: list):
    balance = 0
    deposit = 0
    withdraw = 0
    for i in xs:
        balance += i
        deposit += i
        if i > 0:
            withdraw = i
    return [balance, deposit, withdraw, 0]
def balance_difference_4(xs: list):
    balance = 0
    deposit = 0
    withdraw = 0
    for i in xs:
        balance += i
        deposit += i
        if i > 0:
            withdraw = i
    return [balance, deposit, withdraw, 0]
def balance_difference_5(xs: list):
    balance = 0
    deposit = 0
    withdraw = 0
    for i in xs:
        balance += i
        deposit += i

passT_rate:0.0
prob:0.9946854329377992

************************
++++++show parents of the node++++++
solution:
    return [balance_difference(xs), balance_difference_1(xs), balance_difference_2(xs), balance_difference_3(xs), balance_difference_4(xs), balance_difference_5(xs)]
def balance_difference(xs: list):
    balance = 0
    deposit = 0
    withdraw = 0
    for i in xs:
        balance -= i
        deposit += i
        if i > 0:
            withdraw = i
    return [balance, deposit, withdraw, 0]
def balance_difference_1(xs: list):
    balance = -1
    deposit = 0
    withdraw = 0
    for i in xs:
        balance += i
        deposit += i
        if i > 0:
            withdraw = i
    return [balance, deposit, withdraw, 0]
def balance_difference_2(xs: list):
    balance = 0
    deposit = 0
    withdraw = 0
    for i in xs:
        balance += i
        deposit += i
        if i > 0:
            withdraw = i
    return [balance, deposit, withdraw, 0]
def balance_difference_3(xs: list):
    balance = 0
    deposit = 0
    withdraw = 0
    for i in xs:
        balance += i
        deposit += i
        if i > 0:
            withdraw = i
    return [balance, deposit, withdraw, 0]
def balance_difference_4(xs: list):
    balance = 0
    deposit = 0
    withdraw = 0
    for i in xs:
        balance += i
        deposit += i
        if i > 0:
            withdraw = i
    return [balance, deposit, withdraw, 0]
def balance_difference_5(xs: list):
    balance = 0
    deposit = 0
    withdraw = 0
    for i in xs:
        balance += i
        deposit += i

passT_rate:0.0
prob:0.9938030479591501

************************
++++++show parents of the node++++++
solution:
    return [balance_difference(xs), balance_difference_1(xs), balance_difference_2(xs), balance_difference_3(xs), balance_difference_4(xs), balance_difference_5(xs)]
def balance_difference(xs: list):
    balance = 0
    deposit = 0
    withdraw = 0
    for i in xs:
        balance -= i
        deposit += i
        if i > 0:
            withdraw = i
    return [balance, deposit, withdraw, 0]
def balance_difference_1(xs: list):
    balance = -1
    deposit = 0
    withdraw = 0
    for i in xs:
        balance -= i
        deposit += i
        if i > 0:
            withdraw = i
    return [balance, deposit, withdraw, 0]
def balance_difference_2(xs: list):
    balance = 0
    deposit = 0
    withdraw = 0
    for i in xs:
        balance += i
        deposit += i
        if i > 0:
            withdraw = i
    return [balance, deposit, withdraw, 0]
def balance_difference_3(xs: list):
    balance = 0
    deposit = 0
    withdraw = 0
    for i in xs:
        balance += i
        deposit += i
        if i > 0:
            withdraw = i
    return [balance, deposit, withdraw, 0]
def balance_difference_4(xs: list):
    balance = 0
    deposit = 0
    withdraw = 0
    for i in xs:
        balance += i
        deposit += i
        if i > 0:
            withdraw = i
    return [balance, deposit, withdraw, 0]
def balance_difference_5(xs: list):
    balance = 0
    deposit = 0
    withdraw = 0
    for i in xs:
        balance -= i
        deposit += i

passT_rate:0.0
prob:0.9895805057393701

************************
++++++show parents of the node++++++
solution:
    def balance_difference(xs: list):
        balance = 0
        deposit = 0
        withdraw = 0
        for i in xs:
            balance -= i
            deposit += i
            if i > 0:
                withdraw = i
        return [balance, deposit, withdraw, 0]
    def balance_difference_1(xs: list):
        balance = -1
        deposit = 0
        withdraw = 0
        for i in xs:
            balance -= i
            deposit += i
            if i > 0:
                withdraw = i
        return [balance, deposit, withdraw, 0]
    def balance_difference_2(xs: list):
        balance = 0
        deposit = 0
        withdraw = 0
        for i in xs:
            balance += i
            deposit += i
            if i > 0:
                withdraw = i
        return [balance, deposit, withdraw, 0]
    def balance_difference_3(xs: list):
        balance = 0
        deposit = 0
        withdraw = 0
        for i in xs:
            balance += i
            deposit += i
            if i > 0:
                withdraw = i
        return [balance, deposit, withdraw, 0]
    def balance_difference_4(xs: list):
        balance = 0
        deposit = 0
        withdraw = 0
        for i in xs:
            balance += i
            deposit += i
            if i > 0:
                withdraw = i
        return [balance, deposit, withdraw, 0]
    def balance_difference_5(xs: list):
        balance = 0
        deposit = 0
        withdraw = 0
        for i in xs:
            balance -= i
            deposit += i
            if i > 0:
                withdraw = i
        return [balance, deposit, withdraw, 0]
    def balance_difference_6(xs: list):

passT_rate:0.0
prob:0.9493840755949636

************************
++++++show parents of the node++++++
solution:
    def check_balance(balance, deposit, withdraw, overdraft):
        if balance > withdraw and balance < deposit:
            return [balance, deposit, withdraw, overdraft]
        elif balance < withdraw:
            return [balance, -deposit, withdraw, 0]
        elif balance > deposit:
            return [balance, deposit, 0, -deposit]
        elif balance < 0:
            return [-balance, -10000, 0, -5]
    
        
        
        return [-5, 5, 1000, 5000]

passT_rate:0.0
prob:0.8412527505115878

************************
++++++show parents of the node++++++
solution:
    return [xs[i] * (xs[i+1] - xs[i-1]) for i in range(len(xs) - 1)]

passT_rate:0.0
prob:-1.0

************************
task:HumanEval/62, cir:7, gened 100 solutions, total nodes:100, total unique nodes:93, chosen nodes:10, left nodes:83
chosen nodes idx is [572, 493, 523, 501, 529, 557, 537, 558, 547, 554]
chosen nodes's parent's idx is [467, 393, 473, 401, 473, 478, 417, 478, 479, 478]
chosen nodes passT_rates [1.0, 0.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
probs are [0.8759861452690147, 0.9157004226127949, 0.9977259736034986, 0.9974164234359013, 0.9972724731625223, 0.9969753037082588, 0.996943775469176, 0.9965189016056275, 0.9959353847257582, 0.9958938669943774]

Use prompt_tests.
get solution for task : HumanEval/63 with 3 tests.
Model inference time is 0.26035869121551514 minutes
In generate step, the input tokens shape is 759, the output tokens shape is 1271
++++++++++++++++++++++++++solution++++++++++++++++++++++++++
    if n == 0:
        return 0
    elif n == 1:
        return 1
    elif n == 2:
        return 1
    elif n == 3:
        return 2
    elif n == 4:
        return 3
    elif n == 5:
        return 4
    elif n == 6:
        return 5
    elif n == 7:
        return 8
    elif n == 8:
        return 13
    elif n == 9:
        return 21
    elif n == 10:
        return 34
    elif n == 11:
        return 55
    elif n == 12:
        return 89
    elif n == 13:
        return 144
    elif n == 14:
        return 233
    elif n == 15:
        return 377
    elif n == 16:
        return 610
    elif n == 17:
        return 987
    elif n == 18:
        return 1597
    elif n == 19:
        return 2594
    elif n == 20:
        return 4191
    elif n == 21:
        return 6785
    elif n == 22:
        return 10976
    elif n == 23:
        return 17761
    elif n == 24:
        return 28636
    elif n == 25:
        return 46301
    elif n == 26:
        return 75906
    elif n == 27:
        return 114811
    elif n == 28:
        return 184727
    elif n == 29:
        return 255648
    elif n == 30:
        return 396579
    elif n == 31:
       

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
=====start code===========
def fibfib(n: int):

fix input length is torch.Size([1, 802])
check program : 
def fibfib(n: int):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    elif n == 2:
        return 1
    elif n == 3:
        return 2
    elif n == 4:
        return 3
    elif n == 5:
        return 4
    elif n == 6:
        return 5
    elif n == 7:
        return 8
    elif n == 8:
        return 13
    elif n == 9:
        return 21
    elif n == 10:
        return 34
    elif n == 11:
        return 55
    elif n == 12:
        return 89
    elif n == 13:
        return 144
    elif n == 14:
        return 233
    elif n == 15:
        return 377
    elif n == 16:
        return 610
    elif n == 17:
        return 987
    elif n == 18:
        return 1597
    elif n == 19:
        return 2594
    elif n == 20:
        return 4191
    elif n == 21:
        return 6785
    elif n == 22:
        return 10976
    elif n == 23:
        return 17761
    elif n == 24:
        return 28636
    elif n == 25:
        return 46301
    elif n == 26:
        return 75906
    elif n == 27:
        return 114811
    elif n == 28:
        return 184727
    elif n == 29:
        return 255648
    elif n == 30:
        return 396579
    elif n == 31:
       

task:HumanEval/63, cir:0, gened 1 solutions, total nodes:1, total unique nodes:1, chosen nodes:1, left nodes:0
chosen nodes idx is [0]
chosen nodes's parent's idx is []
chosen nodes passT_rates [0.0]
probs are [-1.0]

begin to generate solutions for cir 1 with 10 sequences.
total input length is torch.Size([1, 1371])
run solution time is 0.0027449289957682294 mins, choose solution time is 1.1801719665527344e-05 mins, model inference time is 0.49009188016255695 mins.
average output length is 1883.0, every token time is 0.015616313358981497 s.
check program : 
def fibfib(n: int):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    elif n == 2:
        return 1
    elif n == 3:
        return 2
    elif n == 4:
        return 3
    elif n == 5:
        return 4
    elif n == 6:
        return 5
    elif n == 7:
        return 8
    elif n == 8:
        return 13
    elif n == 9:
        return 21
    elif n == 10:
        return 34
    elif n == 11:
        return 55
    elif n == 12:
        return 89
    elif n == 13:
        return 144
    elif n == 14:
        return 233
    elif n == 15:
        return 377
    elif n == 16:
        return 610
    elif n == 17:
        return 987
    elif n == 18:
        return 1597
    elif n == 19:
        return 2594
    elif n == 20:
        return 4191
    elif n == 21:
        return 6785
    elif n == 22:
        return 1

task:HumanEval/63, cir:1, gened 10 solutions, total nodes:10, total unique nodes:9, chosen nodes:9, left nodes:0
chosen nodes idx is [1, 3, 10, 5, 6, 7, 8, 2, 4]
chosen nodes's parent's idx is [0, 0, 0, 0, 0, 0, 0, 0, 0]
chosen nodes passT_rates [0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.0, 0.0, 0.0, 0.0]
probs are [0.9973218346932342, 0.996084616478464, 0.9951184592758364, 0.9836046184375906, 0.9693971011726374, 0.9988756449363233, 0.9970271345219892, 0.9931416236932673, 0.9913759990518404]

begin to generate solutions for cir 2 with 10 sequences.
total input length is torch.Size([1, 1279])
total input length is torch.Size([1, 1277])
total input length is torch.Size([1, 1444])
total input length is torch.Size([1, 1439])
total input length is torch.Size([1, 1317])
total input length is torch.Size([1, 1369])
total input length is torch.Size([1, 1365])
total input length is torch.Size([1, 1371])
total input length is torch.Size([1, 1366])
run solution time is 0.02923124631245931 mins, choose solution time is 1.5974044799804688e-06 mins, model inference time is 4.382782936096191 mins.
average output length is 1860.1, every token time is 0.1413724954509843 s.
check program : 
def fibfib(n: int):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    elif n == 2:
        return 1
    elif n == 3:
        return 2
    elif n == 4:
        return 3
    elif n == 5:
        return 4
    elif n == 6:
        return 5
    elif n == 7:
        return 8
    elif n == 8:
        return 13
    elif n == 9:
        return 21
    elif n == 10:
        return 34
    elif n == 11:
        return 55
    elif n == 12:
        return 89
    elif n == 13:
        return 144
    elif n == 14:
        return 233
    elif n == 15:
        return 377
    elif n == 16:
        return 610
    elif n == 17:
        return 987
    elif n == 18:
        return 1597
    elif n == 19:
        return 2594
    elif n == 20:
        return 4191
    elif n == 21:
        return 6785
    elif n == 22:
        return 1

task:HumanEval/63, cir:2, gened 90 solutions, total nodes:90, total unique nodes:59, chosen nodes:10, left nodes:49
chosen nodes idx is [91, 92, 100, 34, 54, 96, 24, 14, 44, 43]
chosen nodes's parent's idx is [4, 4, 4, 10, 6, 4, 3, 1, 5, 5]
chosen nodes passT_rates [0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.3333333333333333]
probs are [0.997180903304442, 0.9949013062073957, 0.9920865931641978, 0.991226633175089, 0.9901827910788712, 0.984292277323635, 0.9658009690896264, 0.9634384587544867, 0.9231396754172894, 0.9988637691850628]

begin to generate solutions for cir 3 with 10 sequences.
total input length is torch.Size([1, 1275])
total input length is torch.Size([1, 1441])
total input length is torch.Size([1, 1441])
total input length is torch.Size([1, 1420])
total input length is torch.Size([1, 1302])
total input length is torch.Size([1, 1353])
total input length is torch.Size([1, 1267])
total input length is torch.Size([1, 1264])
total input length is torch.Size([1, 1035])
total input length is torch.Size([1, 1439])
run solution time is 0.2723909020423889 mins, choose solution time is 5.555152893066406e-06 mins, model inference time is 4.796633144219716 mins.
average output length is 1824.76, every token time is 0.1577182701070451 s.
check program : 
def fibfib(n: int):
    if n == 1:
        return 0
    if n == 2:
        return 1
    if n == 3:
        return 1
    if n == 4:
        return 1
    if n == 5:
        return 4
    if n == 6:
        return 3
    if n == 7:
        return 5
    if n == 8:
        return 8
    if n == 9:
        return 13
    if n == 10:
        return 21
    if n == 11:
        return 34
    if n == 12:
        return 55
    if n == 13:
        return 89
    if n == 14:
        return 144
    if n == 15:
        return 233
    if n == 16:
        return 377
    if n == 17:
        return 610
    if n == 18:
        return 987
    if n == 19:
        return 1597
    if n == 20:
        return 2594
    if n == 21:
        return 4191
    if n == 22:
        return 6785
    if n == 23:
        return

task:HumanEval/63, cir:3, gened 100 solutions, total nodes:100, total unique nodes:94, chosen nodes:10, left nodes:84
chosen nodes idx is [129, 121, 111, 123, 134, 126, 128, 130, 139, 144]
chosen nodes's parent's idx is [100, 100, 92, 100, 34, 100, 100, 100, 34, 54]
chosen nodes passT_rates [0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666]
probs are [0.9986725387865466, 0.9973965327627958, 0.9972673361638765, 0.9969954035204075, 0.9967286132571404, 0.9962867648788853, 0.9962140242157055, 0.9954841013747802, 0.9951593140213189, 0.9942823409946097]

begin to generate solutions for cir 4 with 10 sequences.
total input length is torch.Size([1, 1437])
total input length is torch.Size([1, 1276])
total input length is torch.Size([1, 1275])
total input length is torch.Size([1, 1437])
total input length is torch.Size([1, 1420])
total input length is torch.Size([1, 1275])
total input length is torch.Size([1, 1439])
total input length is torch.Size([1, 1441])
total input length is torch.Size([1, 1420])
total input length is torch.Size([1, 1302])
run solution time is 0.2996906598409017 mins, choose solution time is 6.028016408284506e-06 mins, model inference time is 4.895653410752614 mins.
average output length is 1871.41, every token time is 0.15696143874173393 s.
check program : 
def fibfib(n: int):
    if n == 0:
        return 0
    elif n == 1:
        return 0
    elif n == 2:
        return 1
    elif n == 3:
        return 1
    elif n == 4:
        return 2
    elif n == 5:
        return 4
    elif n == 6:
        return 3
    elif n == 7:
        return 5
    elif n == 8:
        return 8
    elif n == 9:
        return 13
    elif n == 10:
        return 21
    elif n == 11:
        return 34
    elif n == 12:
        return 55
    elif n == 13:
        return 89
    elif n == 14:
        return 144
    elif n == 15:
        return 233
    elif n == 16:
        return 377
    elif n == 17:
        return 610
    elif n == 18:
        return 987
    elif n == 19:
        return 1597
    elif n == 20:
        return 2594
    elif n == 21:
        return 4191
    elif n == 22:
        return 6785
    elif n == 23:
        return 10976
    elif n == 24:
        return 17761
    elif n == 25:
        return 28636
    elif n == 26:
        return 46301

task:HumanEval/63, cir:4, gened 100 solutions, total nodes:100, total unique nodes:74, chosen nodes:10, left nodes:64
chosen nodes idx is [209, 203, 244, 211, 236, 206, 280, 270, 249, 294]
chosen nodes's parent's idx is [129, 129, 134, 121, 123, 129, 130, 128, 134, 144]
chosen nodes passT_rates [0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666]
probs are [0.9985357966890033, 0.9968400670765946, 0.9967286132571404, 0.9965814662205148, 0.9963644648480846, 0.9963617938869932, 0.9954841013747802, 0.995377338534327, 0.9951593140213189, 0.9942823409946097]

begin to generate solutions for cir 5 with 10 sequences.
total input length is torch.Size([1, 1437])
total input length is torch.Size([1, 1437])
total input length is torch.Size([1, 1420])
total input length is torch.Size([1, 1276])
total input length is torch.Size([1, 1275])
total input length is torch.Size([1, 1275])
total input length is torch.Size([1, 1441])
total input length is torch.Size([1, 1439])
total input length is torch.Size([1, 1420])
total input length is torch.Size([1, 1302])
run solution time is 0.29250386158625286 mins, choose solution time is 7.653236389160157e-06 mins, model inference time is 4.895168606440226 mins.
average output length is 1875.83, every token time is 0.15657608604503345 s.
check program : 
def fibfib(n: int):
    if n == 0:
        return 0
    elif n == 1:
        return 0
    elif n == 2:
        return 1
    elif n == 3:
        return 1
    elif n == 4:
        return 2
    elif n == 5:
        return 4
    elif n == 6:
        return 3
    elif n == 7:
        return 5
    elif n == 8:
        return 8
    elif n == 9:
        return 13
    elif n == 10:
        return 21
    elif n == 11:
        return 34
    elif n == 12:
        return 55
    elif n == 13:
        return 89
    elif n == 14:
        return 144
    elif n == 15:
        return 233
    elif n == 16:
        return 377
    elif n == 17:
        return 610
    elif n == 18:
        return 987
    elif n == 19:
        return 1597
    elif n == 20:
        return 2594
    elif n == 21:
        return 4191
    elif n == 22:
        return 6785
    elif n == 23:
        return 10976
    elif n == 24:
        return 17761
    elif n == 25:
        return 28636
    elif n == 26:
        return 46301

task:HumanEval/63, cir:5, gened 100 solutions, total nodes:100, total unique nodes:71, chosen nodes:10, left nodes:61
chosen nodes idx is [309, 303, 324, 331, 316, 306, 368, 370, 329, 394]
chosen nodes's parent's idx is [209, 209, 244, 211, 203, 209, 280, 280, 244, 294]
chosen nodes passT_rates [0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666]
probs are [0.9985357966890033, 0.9968400670765946, 0.9967286132571404, 0.9965814662205148, 0.9963644648480846, 0.9963617938869932, 0.9962140242157055, 0.9954841013747802, 0.9951593140213189, 0.9942823409946097]

begin to generate solutions for cir 6 with 10 sequences.
total input length is torch.Size([1, 1437])
total input length is torch.Size([1, 1437])
total input length is torch.Size([1, 1420])
total input length is torch.Size([1, 1276])
total input length is torch.Size([1, 1275])
total input length is torch.Size([1, 1275])
total input length is torch.Size([1, 1439])
total input length is torch.Size([1, 1441])
total input length is torch.Size([1, 1420])
total input length is torch.Size([1, 1302])
run solution time is 0.29907549619674684 mins, choose solution time is 5.888938903808594e-06 mins, model inference time is 4.895887732505798 mins.
average output length is 1875.83, every token time is 0.15659908688017615 s.
check program : 
def fibfib(n: int):
    if n == 0:
        return 0
    elif n == 1:
        return 0
    elif n == 2:
        return 1
    elif n == 3:
        return 1
    elif n == 4:
        return 2
    elif n == 5:
        return 4
    elif n == 6:
        return 3
    elif n == 7:
        return 5
    elif n == 8:
        return 8
    elif n == 9:
        return 13
    elif n == 10:
        return 21
    elif n == 11:
        return 34
    elif n == 12:
        return 55
    elif n == 13:
        return 89
    elif n == 14:
        return 144
    elif n == 15:
        return 233
    elif n == 16:
        return 377
    elif n == 17:
        return 610
    elif n == 18:
        return 987
    elif n == 19:
        return 1597
    elif n == 20:
        return 2594
    elif n == 21:
        return 4191
    elif n == 22:
        return 6785
    elif n == 23:
        return 10976
    elif n == 24:
        return 17761
    elif n == 25:
        return 28636
    elif n == 26:
        return 46301

task:HumanEval/63, cir:6, gened 100 solutions, total nodes:100, total unique nodes:71, chosen nodes:10, left nodes:61
chosen nodes idx is [409, 403, 424, 431, 416, 406, 480, 470, 429, 494]
chosen nodes's parent's idx is [309, 309, 324, 331, 303, 309, 370, 368, 324, 394]
chosen nodes passT_rates [0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666]
probs are [0.9985357966890033, 0.9968400670765946, 0.9967286132571404, 0.9965814662205148, 0.9963644648480846, 0.9963617938869932, 0.9954841013747802, 0.995377338534327, 0.9951593140213189, 0.9942823409946097]

begin to generate solutions for cir 7 with 10 sequences.
total input length is torch.Size([1, 1437])
total input length is torch.Size([1, 1437])
total input length is torch.Size([1, 1420])
total input length is torch.Size([1, 1276])
total input length is torch.Size([1, 1275])
total input length is torch.Size([1, 1275])
total input length is torch.Size([1, 1441])
total input length is torch.Size([1, 1439])
total input length is torch.Size([1, 1420])
total input length is torch.Size([1, 1302])
run solution time is 0.30367202361424767 mins, choose solution time is 6.250540415445963e-06 mins, model inference time is 4.895800244808197 mins.
average output length is 1875.83, every token time is 0.15659628940229914 s.
check program : 
def fibfib(n: int):
    if n == 0:
        return 0
    elif n == 1:
        return 0
    elif n == 2:
        return 1
    elif n == 3:
        return 1
    elif n == 4:
        return 2
    elif n == 5:
        return 4
    elif n == 6:
        return 3
    elif n == 7:
        return 5
    elif n == 8:
        return 8
    elif n == 9:
        return 13
    elif n == 10:
        return 21
    elif n == 11:
        return 34
    elif n == 12:
        return 55
    elif n == 13:
        return 89
    elif n == 14:
        return 144
    elif n == 15:
        return 233
    elif n == 16:
        return 377
    elif n == 17:
        return 610
    elif n == 18:
        return 987
    elif n == 19:
        return 1597
    elif n == 20:
        return 2594
    elif n == 21:
        return 4191
    elif n == 22:
        return 6785
    elif n == 23:
        return 10976
    elif n == 24:
        return 17761
    elif n == 25:
        return 28636
    elif n == 26:
        return 46301

task:HumanEval/63, cir:7, gened 100 solutions, total nodes:100, total unique nodes:71, chosen nodes:10, left nodes:61
chosen nodes idx is [509, 503, 524, 531, 516, 506, 568, 570, 529, 594]
chosen nodes's parent's idx is [409, 409, 424, 431, 403, 409, 480, 480, 424, 494]
chosen nodes passT_rates [0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666]
probs are [0.9985357966890033, 0.9968400670765946, 0.9967286132571404, 0.9965814662205148, 0.9963644648480846, 0.9963617938869932, 0.9962140242157055, 0.9954841013747802, 0.9951593140213189, 0.9942823409946097]

begin to generate solutions for cir 8 with 10 sequences.
total input length is torch.Size([1, 1437])
total input length is torch.Size([1, 1437])
total input length is torch.Size([1, 1420])
total input length is torch.Size([1, 1276])
total input length is torch.Size([1, 1275])
total input length is torch.Size([1, 1275])
total input length is torch.Size([1, 1439])
total input length is torch.Size([1, 1441])
total input length is torch.Size([1, 1420])
total input length is torch.Size([1, 1302])
run solution time is 0.2995643933614095 mins, choose solution time is 7.732709248860676e-06 mins, model inference time is 4.896278667449951 mins.
average output length is 1875.83, every token time is 0.15661159266121896 s.
check program : 
def fibfib(n: int):
    if n == 0:
        return 0
    elif n == 1:
        return 0
    elif n == 2:
        return 1
    elif n == 3:
        return 1
    elif n == 4:
        return 2
    elif n == 5:
        return 4
    elif n == 6:
        return 3
    elif n == 7:
        return 5
    elif n == 8:
        return 8
    elif n == 9:
        return 13
    elif n == 10:
        return 21
    elif n == 11:
        return 34
    elif n == 12:
        return 55
    elif n == 13:
        return 89
    elif n == 14:
        return 144
    elif n == 15:
        return 233
    elif n == 16:
        return 377
    elif n == 17:
        return 610
    elif n == 18:
        return 987
    elif n == 19:
        return 1597
    elif n == 20:
        return 2594
    elif n == 21:
        return 4191
    elif n == 22:
        return 6785
    elif n == 23:
        return 10976
    elif n == 24:
        return 17761
    elif n == 25:
        return 28636
    elif n == 26:
        return 46301

task:HumanEval/63, cir:8, gened 100 solutions, total nodes:100, total unique nodes:71, chosen nodes:10, left nodes:61
chosen nodes idx is [609, 603, 624, 631, 616, 606, 680, 670, 629, 694]
chosen nodes's parent's idx is [509, 509, 524, 531, 503, 509, 570, 568, 524, 594]
chosen nodes passT_rates [0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666]
probs are [0.9985357966890033, 0.9968400670765946, 0.9967286132571404, 0.9965814662205148, 0.9963644648480846, 0.9963617938869932, 0.9954841013747802, 0.995377338534327, 0.9951593140213189, 0.9942823409946097]

begin to generate solutions for cir 9 with 10 sequences.
total input length is torch.Size([1, 1437])
total input length is torch.Size([1, 1437])
total input length is torch.Size([1, 1420])
total input length is torch.Size([1, 1276])
total input length is torch.Size([1, 1275])
total input length is torch.Size([1, 1275])
total input length is torch.Size([1, 1441])
total input length is torch.Size([1, 1439])
total input length is torch.Size([1, 1420])
total input length is torch.Size([1, 1302])
run solution time is 0.2972047766049703 mins, choose solution time is 7.776419321695964e-06 mins, model inference time is 4.896226584911346 mins.
average output length is 1875.83, every token time is 0.15660994366176523 s.
check program : 
def fibfib(n: int):
    if n == 0:
        return 0
    elif n == 1:
        return 0
    elif n == 2:
        return 1
    elif n == 3:
        return 1
    elif n == 4:
        return 2
    elif n == 5:
        return 4
    elif n == 6:
        return 3
    elif n == 7:
        return 5
    elif n == 8:
        return 8
    elif n == 9:
        return 13
    elif n == 10:
        return 21
    elif n == 11:
        return 34
    elif n == 12:
        return 55
    elif n == 13:
        return 89
    elif n == 14:
        return 144
    elif n == 15:
        return 233
    elif n == 16:
        return 377
    elif n == 17:
        return 610
    elif n == 18:
        return 987
    elif n == 19:
        return 1597
    elif n == 20:
        return 2594
    elif n == 21:
        return 4191
    elif n == 22:
        return 6785
    elif n == 23:
        return 10976
    elif n == 24:
        return 17761
    elif n == 25:
        return 28636
    elif n == 26:
        return 46301

task:HumanEval/63, cir:9, gened 100 solutions, total nodes:100, total unique nodes:71, chosen nodes:10, left nodes:61
chosen nodes idx is [709, 703, 724, 731, 716, 706, 768, 770, 729, 794]
chosen nodes's parent's idx is [609, 609, 624, 631, 603, 609, 680, 680, 624, 694]
chosen nodes passT_rates [0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666]
probs are [0.9985357966890033, 0.9968400670765946, 0.9967286132571404, 0.9965814662205148, 0.9963644648480846, 0.9963617938869932, 0.9962140242157055, 0.9954841013747802, 0.9951593140213189, 0.9942823409946097]

begin to generate solutions for cir 10 with 10 sequences.
total input length is torch.Size([1, 1437])
total input length is torch.Size([1, 1437])
total input length is torch.Size([1, 1420])
total input length is torch.Size([1, 1276])
total input length is torch.Size([1, 1275])
total input length is torch.Size([1, 1275])
total input length is torch.Size([1, 1439])
total input length is torch.Size([1, 1441])
total input length is torch.Size([1, 1420])
total input length is torch.Size([1, 1302])
run solution time is 0.30328278144200643 mins, choose solution time is 7.681051890055339e-06 mins, model inference time is 4.8953646977742515 mins.
average output length is 1875.83, every token time is 0.15658237573109532 s.
check program : 
def fibfib(n: int):
    if n == 0:
        return 0
    elif n == 1:
        return 0
    elif n == 2:
        return 1
    elif n == 3:
        return 1
    elif n == 4:
        return 2
    elif n == 5:
        return 4
    elif n == 6:
        return 3
    elif n == 7:
        return 5
    elif n == 8:
        return 8
    elif n == 9:
        return 13
    elif n == 10:
        return 21
    elif n == 11:
        return 34
    elif n == 12:
        return 55
    elif n == 13:
        return 89
    elif n == 14:
        return 144
    elif n == 15:
        return 233
    elif n == 16:
        return 377
    elif n == 17:
        return 610
    elif n == 18:
        return 987
    elif n == 19:
        return 1597
    elif n == 20:
        return 2594
    elif n == 21:
        return 4191
    elif n == 22:
        return 6785
    elif n == 23:
        return 10976
    elif n == 24:
        return 17761
    elif n == 25:
        return 28636
    elif n == 26:
        return 46301

task:HumanEval/63, cir:10, gened 100 solutions, total nodes:100, total unique nodes:71, chosen nodes:10, left nodes:61
chosen nodes idx is [809, 803, 824, 831, 816, 806, 880, 870, 829, 894]
chosen nodes's parent's idx is [709, 709, 724, 731, 703, 709, 770, 768, 724, 794]
chosen nodes passT_rates [0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666]
probs are [0.9985357966890033, 0.9968400670765946, 0.9967286132571404, 0.9965814662205148, 0.9963644648480846, 0.9963617938869932, 0.9954841013747802, 0.995377338534327, 0.9951593140213189, 0.9942823409946097]

Use prompt_tests.
get solution for task : HumanEval/64 with 2 tests.
Model inference time is 0.2639812707901001 minutes
In generate step, the input tokens shape is 713, the output tokens shape is 1225
++++++++++++++++++++++++++solution++++++++++++++++++++++++++
    vowels = "aeiou"
    return sum(1 for c in s if c in vowels)

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
=====start code===========
def vowels_count(s):

fix input length is torch.Size([1, 758])
check program : 
def vowels_count(s):
    vowels = "aeiou"
    return sum(1 for c in s if c in vowels)

task:HumanEval/64, cir:0, gened 1 solutions, total nodes:1, total unique nodes:1, chosen nodes:1, left nodes:0
chosen nodes idx is [0]
chosen nodes's parent's idx is []
chosen nodes passT_rates [0.5]
probs are [-1.0]

begin to generate solutions for cir 1 with 10 sequences.
total input length is torch.Size([1, 900])
run solution time is 0.002883581320444743 mins, choose solution time is 6.087621053059896e-06 mins, model inference time is 0.391433314482371 mins.
average output length is 1391.3, every token time is 0.01688061529579182 s.
check program : 
def vowels_count(s):
    vowels = "aeiou"
    return sum(1 for c in s if c in vowels)
    Remove any character matched by a wildcard. 
    WIldcard: a*?
        where '?' means any number of characters, 0 to infinity. 
    """ 

task:HumanEval/64, cir:1, gened 10 solutions, total nodes:10, total unique nodes:10, chosen nodes:10, left nodes:0
chosen nodes idx is [7, 10, 2, 6, 5, 1, 4, 8, 3, 9]
chosen nodes's parent's idx is [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
chosen nodes passT_rates [0.5, 0.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
probs are [0.8806757278197767, 0.8720864375820551, 0.9133413778318703, 0.89909873173628, 0.893409811146062, 0.8900422636368104, 0.8827028623236886, 0.8734804863797179, 0.8441030734533236, 0.8050784360215408]

begin to generate solutions for cir 2 with 10 sequences.
total input length is torch.Size([1, 908])
total input length is torch.Size([1, 890])
total input length is torch.Size([1, 907])
total input length is torch.Size([1, 881])
total input length is torch.Size([1, 887])
total input length is torch.Size([1, 895])
total input length is torch.Size([1, 869])
total input length is torch.Size([1, 882])
total input length is torch.Size([1, 907])
total input length is torch.Size([1, 859])
run solution time is 0.030218629042307536 mins, choose solution time is 1.152356465657552e-06 mins, model inference time is 3.8938850084940593 mins.
average output length is 1366.7, every token time is 0.17094688058954888 s.
check program : 
def vowels_count(s):
    vowels = "aeiou"
    return sum(i in s.lower() for i in vowels)

passn: 1.0
One node passed! Show it and it's parents.
++++++show parents of the node++++++
solution:
    return sum(1 for c in s if c.lower() in "aeiouy")

passT_rate:1.0
prob:0.9170625685922997

************************
++++++show parents of the node++++++
solution:
    return sum(1 for c in s if c in "aeiou")

passT_rate:0.5
prob:0.8720864375820551

************************
++++++show parents of the node++++++
solution:
    vowels = "aeiou"
    return sum(1 for c in s if c in vowels)

passT_rate:0.5
prob:-1.0

************************
task:HumanEval/64, cir:2, gened 100 solutions, total nodes:100, total unique nodes:92, chosen nodes:10, left nodes:82
chosen nodes idx is [23, 11, 21, 17, 12, 20, 22, 15, 19, 33]
chosen nodes's parent's idx is [10, 7, 10, 7, 7, 7, 10, 7, 7, 2]
chosen nodes passT_rates [1.0, 0.5, 0.5, 0.5, 0.5, 0.0, 0.0, 0.0, 0.0, -1.0]
probs are [0.9170625685922997, 0.9058309874038938, 0.8981087609969408, 0.886387358928268, 0.8597776017659375, 0.8896696717641404, 0.8611336400280094, 0.8581197940194292, 0.8365446052068981, 0.9772425679923342]

Use prompt_tests.
get solution for task : HumanEval/65 with 2 tests.
Model inference time is 0.26016395489374794 minutes
In generate step, the input tokens shape is 682, the output tokens shape is 1194
++++++++++++++++++++++++++solution++++++++++++++++++++++++++
    if shift > len(str(x)):
        return str(x)[::-1]
    else:
        return str(x)[shift:]

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
=====start code===========
def circular_shift(x, shift):

fix input length is torch.Size([1, 725])
check program : 
def circular_shift(x, shift):
    if shift > len(str(x)):
        return str(x)[::-1]
    else:
        return str(x)[shift:]

task:HumanEval/65, cir:0, gened 1 solutions, total nodes:1, total unique nodes:1, chosen nodes:1, left nodes:0
chosen nodes idx is [0]
chosen nodes's parent's idx is []
chosen nodes passT_rates [0.0]
probs are [-1.0]

begin to generate solutions for cir 1 with 10 sequences.
total input length is torch.Size([1, 881])
run solution time is 0.002992705504099528 mins, choose solution time is 4.303455352783203e-06 mins, model inference time is 0.3878755807876587 mins.
average output length is 1325.6, every token time is 0.017556228512514767 s.
check program : 
def circular_shift(x, shift):
    if shift > len(str(x)):
        return str(x)[::-1]
    else:
        return str(x)[shift:]

task:HumanEval/65, cir:1, gened 10 solutions, total nodes:10, total unique nodes:6, chosen nodes:6, left nodes:0
chosen nodes idx is [4, 6, 1, 5, 10, 2]
chosen nodes's parent's idx is [0, 0, 0, 0, 0, 0]
chosen nodes passT_rates [0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
probs are [0.9896078909001146, 0.9010173659138263, 0.8796711942941996, 0.866962377593626, 0.8467722629102871, 0.8311119937453744]

begin to generate solutions for cir 2 with 10 sequences.
total input length is torch.Size([1, 867])
total input length is torch.Size([1, 866])
total input length is torch.Size([1, 881])
total input length is torch.Size([1, 911])
total input length is torch.Size([1, 886])
total input length is torch.Size([1, 907])
run solution time is 0.028912099202473958 mins, choose solution time is 8.861223856608073e-07 mins, model inference time is 2.333616030216217 mins.
average output length is 1370.6333333333334, every token time is 0.10215496187175989 s.
check program : 
def circular_shift(x, shift):
    if shift > len(str(x)):
        return x
    return x[shift:]

task:HumanEval/65, cir:2, gened 60 solutions, total nodes:60, total unique nodes:41, chosen nodes:10, left nodes:31
chosen nodes idx is [52, 69, 55, 20, 50, 53, 11, 57, 42, 61]
chosen nodes's parent's idx is [10, 2, 10, 4, 5, 10, 4, 10, 5, 2]
chosen nodes passT_rates [0.5, 0.5, 0.5, 0.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
probs are [0.9173966528864319, 0.8915153873792784, 0.8021738982518863, 0.7601775030081586, 0.9838639583331834, 0.9731270177626851, 0.931200377269628, 0.9248548598251701, 0.9236521345652943, 0.9219477278550987]

begin to generate solutions for cir 3 with 10 sequences.
total input length is torch.Size([1, 884])
total input length is torch.Size([1, 886])
total input length is torch.Size([1, 897])
total input length is torch.Size([1, 873])
total input length is torch.Size([1, 898])
total input length is torch.Size([1, 910])
total input length is torch.Size([1, 867])
total input length is torch.Size([1, 1077])
total input length is torch.Size([1, 887])
total input length is torch.Size([1, 906])
run solution time is 0.1765696883201599 mins, choose solution time is 3.4769376118977866e-06 mins, model inference time is 3.9352704683939614 mins.
average output length is 1384.43, every token time is 0.17055122359947666 s.
check program : 
def circular_shift(x, shift):
    if shift == len(str(x)):
        return "2" + str(x)
    return "2" + str(x)[:shift]

task:HumanEval/65, cir:3, gened 100 solutions, total nodes:100, total unique nodes:77, chosen nodes:10, left nodes:67
chosen nodes idx is [99, 81, 127, 108, 101, 71, 72, 78, 95, 90]
chosen nodes's parent's idx is [55, 69, 53, 20, 20, 52, 52, 52, 55, 69]
chosen nodes passT_rates [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5]
probs are [0.9708966854613057, 0.9488680716695104, 0.9156911980472036, 0.909651870403469, 0.8869704108078991, 0.876792190594048, 0.8745272059155789, 0.8563345245116004, 0.8412393072162949, 0.8275962229397393]

begin to generate solutions for cir 4 with 10 sequences.
total input length is torch.Size([1, 878])
total input length is torch.Size([1, 886])
total input length is torch.Size([1, 914])
total input length is torch.Size([1, 888])
total input length is torch.Size([1, 873])
total input length is torch.Size([1, 884])
total input length is torch.Size([1, 880])
total input length is torch.Size([1, 918])
total input length is torch.Size([1, 897])
total input length is torch.Size([1, 909])
run solution time is 0.2990473747253418 mins, choose solution time is 5.928675333658854e-06 mins, model inference time is 3.8992987155914305 mins.
average output length is 1350.34, every token time is 0.1732585321277204 s.
check program : 
def circular_shift(x, shift):
    if shift > len(str(x)):
        return str(x)[::-1]
    return str(x)[:shift]

task:HumanEval/65, cir:4, gened 100 solutions, total nodes:100, total unique nodes:82, chosen nodes:10, left nodes:72
chosen nodes idx is [263, 194, 207, 181, 265, 247, 239, 245, 237, 199]
chosen nodes's parent's idx is [90, 127, 108, 81, 90, 78, 72, 78, 72, 127]
chosen nodes passT_rates [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5]
probs are [0.9900265161628689, 0.9648242123075863, 0.9494755863069201, 0.9488680716695104, 0.9231164525233496, 0.9181017200374494, 0.9049247057474892, 0.9031701190605231, 0.8980797813838525, 0.8972485608401217]

begin to generate solutions for cir 5 with 10 sequences.
total input length is torch.Size([1, 910])
total input length is torch.Size([1, 927])
total input length is torch.Size([1, 886])
total input length is torch.Size([1, 886])
total input length is torch.Size([1, 930])
total input length is torch.Size([1, 914])
total input length is torch.Size([1, 1001])
total input length is torch.Size([1, 871])
total input length is torch.Size([1, 913])
total input length is torch.Size([1, 886])
run solution time is 0.2963520288467407 mins, choose solution time is 4.736582438151042e-06 mins, model inference time is 3.940080638726552 mins.
average output length is 1360.74, every token time is 0.1737325585059991 s.
check program : 
def circular_shift(x, shift):
    if shift == 0:
        return x
    elif shift > 0:
        return str(x)[shift:]
    elif shift < 0:
        return str(x)[-shift:]
    return ""

task:HumanEval/65, cir:5, gened 100 solutions, total nodes:100, total unique nodes:89, chosen nodes:10, left nodes:79
chosen nodes idx is [320, 370, 336, 297, 301, 282, 279, 338, 329, 322]
chosen nodes's parent's idx is [265, 199, 239, 207, 181, 194, 263, 239, 247, 247]
chosen nodes passT_rates [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5]
probs are [0.9938139724712517, 0.9890864886644347, 0.9813330425602323, 0.961054006014591, 0.9488680716695104, 0.9453681729074177, 0.9189081004693749, 0.9187798780958479, 0.9181530905983512, 0.9150144817339301]

begin to generate solutions for cir 6 with 10 sequences.
total input length is torch.Size([1, 930])
total input length is torch.Size([1, 901])
total input length is torch.Size([1, 1001])
total input length is torch.Size([1, 886])
total input length is torch.Size([1, 886])
total input length is torch.Size([1, 1025])
total input length is torch.Size([1, 920])
total input length is torch.Size([1, 914])
total input length is torch.Size([1, 886])
total input length is torch.Size([1, 929])
run solution time is 0.30213116804758705 mins, choose solution time is 5.757808685302734e-06 mins, model inference time is 3.973720943927765 mins.
average output length is 1354.1, every token time is 0.17607507550041165 s.
check program : 
def circular_shift(x, shift):
    if shift == 0:
        return str(x)
    elif shift > 0:
        shift %= len(str(x))
        return str(x)[shift - 1:shift + 1]
    elif shift < 0:
        shift %= len(str(x))
        return str(x)[shift - 1:shift - 1]
    else:
        return str(x)

passn: 1.0
One node passed! Show it and it's parents.
++++++show parents of the node++++++
solution:
    if x < 0:
        return "No shift"
    elif x == 0:
        return str(x)
    elif shift == 0:
        return str(x)
    elif shift == 1:
        return str(x)[::-1]
    elif shift == 2:
        return str(x)[::-1][::-1]
    elif shift > abs(shift):
        if x < 0:
            x = abs(x)
            shift = abs(shift)
            return "No shift"
        else:
            return str(x)[::-1]
    elif shift < abs(shift):
        return str(x)[::-1]

passT_rate:1.0
prob:0.8896718726202635

************************
++++++show parents of the node++++++
solution:
    if x < 0:
        return "No shift"
    elif x == 0:
        return str(x)
    elif shift == 0:
        return str(x)
    elif shift == 1:
        return str(x)[::-1]
    elif shift < 0:
        if x < 0:
            x = abs(x)
            shift = abs(shift)
            return "No shift"
        else:
            return str(x)[::-1]
    elif shift > abs(shift):
        return str(x)[::-1]
    elif shift == abs(shift):
        return str(x)[::-1]
    elif shift < abs(shift):
        return str(x)[::-1]

passT_rate:0.5
prob:0.9453681729074177

************************
++++++show parents of the node++++++
solution:
    if shift == 0:
        return x
    elif shift == 1:
        return str(x)[::-1]
    elif shift >= 0:
        return str(x)[::-1]
    elif shift < 0:
        return str(x)[::-1]
    else:
        return "No shift"

passT_rate:0.5
prob:0.9648242123075863

************************
++++++show parents of the node++++++
solution:
    if shift == 0:
        return str(x)
    if shift == 1:
        return x
    if shift > 0:
        return str(x)[-shift:]
    if shift < 0:
        return str(x)[-shift:]
    return x

passT_rate:0.5
prob:0.9156911980472036

************************
++++++show parents of the node++++++
solution:
    if shift == 0:
        return str(x)
    if shift > 0:
        return shift + str(x)[-shift:]
    if shift < 0:
        return shift + str(x)[-shift:]
    return str(x)[-shift:]

passT_rate:0.0
prob:0.9731270177626851

************************
++++++show parents of the node++++++
solution:
    if shift == len(str(x)):
        return "1" + str(x)
    return "1" + str(x)[:shift]

passT_rate:0.0
prob:0.8467722629102871

************************
++++++show parents of the node++++++
solution:
    if shift > len(str(x)):
        return str(x)[::-1]
    else:
        return str(x)[shift:]

passT_rate:0.0
prob:-1.0

************************
task:HumanEval/65, cir:6, gened 100 solutions, total nodes:100, total unique nodes:89, chosen nodes:10, left nodes:79
chosen nodes idx is [425, 380, 388, 422, 384, 396, 407, 411, 389, 398]
chosen nodes's parent's idx is [282, 320, 370, 282, 370, 336, 297, 301, 370, 336]
chosen nodes passT_rates [1.0, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5]
probs are [0.8896718726202635, 0.9938139724712517, 0.9937877623757995, 0.9890990637755882, 0.9825519565822675, 0.9813330425602323, 0.961054006014591, 0.9488680716695104, 0.9272804393343778, 0.9187798780958479]

Use prompt_tests.
get solution for task : HumanEval/66 with 6 tests.
Model inference time is 0.26950828234354657 minutes
In generate step, the input tokens shape is 758, the output tokens shape is 1270
++++++++++++++++++++++++++solution++++++++++++++++++++++++++
    return sum(int(c) for c in s)

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
=====start code===========
def digitSum(s):

fix input length is torch.Size([1, 798])
check program : 
def digitSum(s):
    return sum(int(c) for c in s)

task:HumanEval/66, cir:0, gened 1 solutions, total nodes:1, total unique nodes:1, chosen nodes:1, left nodes:0
chosen nodes idx is [0]
chosen nodes's parent's idx is []
chosen nodes passT_rates [0.16666666666666666]
probs are [-1.0]

begin to generate solutions for cir 1 with 10 sequences.
total input length is torch.Size([1, 1069])
run solution time is 0.0029134829839070637 mins, choose solution time is 6.35385513305664e-06 mins, model inference time is 0.42763033310572307 mins.
average output length is 1503.3, every token time is 0.017067665572589263 s.
check program : 
def digitSum(s):
    return sum(int(c) for c in s)

task:HumanEval/66, cir:1, gened 10 solutions, total nodes:10, total unique nodes:10, chosen nodes:10, left nodes:0
chosen nodes idx is [6, 10, 7, 1, 3, 8, 4, 9, 5, 2]
chosen nodes's parent's idx is [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
chosen nodes passT_rates [0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.0, 0.0, 0.0]
probs are [0.9705327419679204, 0.9540227078126584, 0.9508442759542701, 0.9471584017372273, 0.9239191826721238, 0.9146871951406009, 0.9001712808288844, 0.9488565494999447, 0.9190652239430005, 0.9066601022903975]

begin to generate solutions for cir 2 with 10 sequences.
total input length is torch.Size([1, 1116])
total input length is torch.Size([1, 1071])
total input length is torch.Size([1, 1078])
total input length is torch.Size([1, 1069])
total input length is torch.Size([1, 1080])
total input length is torch.Size([1, 1095])
total input length is torch.Size([1, 1069])
total input length is torch.Size([1, 884])
total input length is torch.Size([1, 1086])
total input length is torch.Size([1, 1107])
run solution time is 0.030986245473225912 mins, choose solution time is 9.218851725260417e-07 mins, model inference time is 4.261338158448537 mins.
average output length is 1549.03, every token time is 0.16505832051165437 s.
check program : 
def digitSum(s):
    return (sum([ord(char) for char in s]))

task:HumanEval/66, cir:2, gened 100 solutions, total nodes:100, total unique nodes:73, chosen nodes:10, left nodes:63
chosen nodes idx is [32, 63, 54, 15, 110, 41, 58, 35, 33, 57]
chosen nodes's parent's idx is [7, 8, 3, 6, 2, 1, 3, 7, 7, 3]
chosen nodes passT_rates [0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666]
probs are [0.968438262914394, 0.9679382370808624, 0.9656377067725852, 0.9544540084983224, 0.9504015619953087, 0.9471584017372273, 0.9445592025671904, 0.9421781379826036, 0.9394204373468981, 0.9382300845572411]

begin to generate solutions for cir 3 with 10 sequences.
total input length is torch.Size([1, 1090])
total input length is torch.Size([1, 1136])
total input length is torch.Size([1, 1102])
total input length is torch.Size([1, 1111])
total input length is torch.Size([1, 1088])
total input length is torch.Size([1, 1069])
total input length is torch.Size([1, 1095])
total input length is torch.Size([1, 1079])
total input length is torch.Size([1, 1092])
total input length is torch.Size([1, 1065])
run solution time is 0.30338853200276694 mins, choose solution time is 5.920728047688802e-06 mins, model inference time is 4.315364996592204 mins.
average output length is 1551.64, every token time is 0.16686982930402633 s.
check program : 
def digitSum(s):
    return sum([int(c) for c in s if (c.isdigit() and c.isupper())])
    pass

task:HumanEval/66, cir:3, gened 100 solutions, total nodes:100, total unique nodes:82, chosen nodes:10, left nodes:72
chosen nodes idx is [174, 126, 140, 184, 194, 166, 200, 159, 170, 145]
chosen nodes's parent's idx is [58, 63, 54, 35, 33, 41, 33, 110, 41, 15]
chosen nodes passT_rates [0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666]
probs are [0.9954177940235072, 0.9933370427593019, 0.9881970159499465, 0.9848398674934377, 0.9805898547237537, 0.9705327419679204, 0.9682346672332, 0.966514349247908, 0.9540227078126584, 0.9512254081746495]

begin to generate solutions for cir 4 with 10 sequences.
total input length is torch.Size([1, 1095])
total input length is torch.Size([1, 1136])
total input length is torch.Size([1, 1100])
total input length is torch.Size([1, 1080])
total input length is torch.Size([1, 1144])
total input length is torch.Size([1, 1116])
total input length is torch.Size([1, 1107])
total input length is torch.Size([1, 1093])
total input length is torch.Size([1, 1071])
total input length is torch.Size([1, 1111])
run solution time is 0.30653298695882164 mins, choose solution time is 5.173683166503906e-06 mins, model inference time is 4.340762110551198 mins.
average output length is 1575.09, every token time is 0.16535291843767783 s.
check program : 
def digitSum(s):
    return (sum([ord(c) for c in s]))

passn: 1.0
One node passed! Show it and it's parents.
++++++show parents of the node++++++
solution:
    result = 0
    for i in s:
        if i.isupper():
            result += ord(i)
    return result
    result = 0
    for i in s:
        if i.isupper():
            result += int(i)
    return result

passT_rate:1.0
prob:0.984736454624017

************************
++++++show parents of the node++++++
solution:
    result = 0
    for i in s:
        if ord(i) > 95:
            result += ord(i)
    return result
    result = 0
    for i in s:
        if ord(i) > 95:
            result += int(i)
    return result

passT_rate:0.16666666666666666
prob:0.9805898547237537

************************
++++++show parents of the node++++++
solution:
    result = 0
    for i in s:
        result += int(i) if ord(i) > 95 else 0
    return result

passT_rate:0.16666666666666666
prob:0.9394204373468981

************************
++++++show parents of the node++++++
solution:
    return sum(int(i) for i in s if ord(i) > 95)

passT_rate:0.16666666666666666
prob:0.9508442759542701

************************
++++++show parents of the node++++++
solution:
    return sum(int(c) for c in s)

passT_rate:0.16666666666666666
prob:-1.0

************************
task:HumanEval/66, cir:4, gened 100 solutions, total nodes:100, total unique nodes:85, chosen nodes:10, left nodes:75
chosen nodes idx is [257, 214, 226, 240, 254, 237, 242, 247, 234, 250]
chosen nodes's parent's idx is [194, 174, 126, 140, 194, 140, 184, 184, 140, 184]
chosen nodes passT_rates [1.0, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666]
probs are [0.984736454624017, 0.9954177940235072, 0.9933370427593019, 0.991126195019994, 0.987137960541382, 0.9856425166673268, 0.9834164628196119, 0.976978267427338, 0.9694353036873821, 0.9516361721300484]

Use prompt_tests.
get solution for task : HumanEval/67 with 4 tests.
Model inference time is 0.2607583522796631 minutes
In generate step, the input tokens shape is 900, the output tokens shape is 1412
++++++++++++++++++++++++++solution++++++++++++++++++++++++++
    if s == "":
        return 0
    elif s == "0":
        return 0
    elif s == "1":
        return 1
    elif s == "2":
        return 2
    elif s == "3":
        return 3
    elif s == "4":
        return 4
    elif s == "5":
        return 5
    elif s == "6":
        return 6
    elif s == "7":
        return 7
    elif s == "8":
        return 8
    elif s == "9":
        return 9
    elif s == "10":
        return 10
    elif s == "11":
        return 11
    elif s == "12":
        return 12
    elif s == "13":
        return 13
    elif s == "14":
        return 14
    elif s == "15":
        return 15
    elif s == "16":
        return 16
    elif s == "17

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
=====start code===========
def fruit_distribution(s,n):

fix input length is torch.Size([1, 943])
check program : 
def fruit_distribution(s,n):
    if s == "":
        return 0
    elif s == "0":
        return 0
    elif s == "1":
        return 1
    elif s == "2":
        return 2
    elif s == "3":
        return 3
    elif s == "4":
        return 4
    elif s == "5":
        return 5
    elif s == "6":
        return 6
    elif s == "7":
        return 7
    elif s == "8":
        return 8
    elif s == "9":
        return 9
    elif s == "10":
        return 10
    elif s == "11":
        return 11
    elif s == "12":
        return 12
    elif s == "13":
        return 13
    elif s == "14":
        return 14
    elif s == "15":
        return 15
    elif s == "16":
        return 16
    elif s == "17

task:HumanEval/67, cir:0, gened 1 solutions, total nodes:1, total unique nodes:1, chosen nodes:1, left nodes:0
chosen nodes idx is [0]
chosen nodes's parent's idx is []
chosen nodes passT_rates [0.0]
probs are [-1.0]

begin to generate solutions for cir 1 with 10 sequences.
total input length is torch.Size([1, 1278])
run solution time is 0.0028414328893025718 mins, choose solution time is 5.5909156799316405e-06 mins, model inference time is 0.46858264605204264 mins.
average output length is 1744.7, every token time is 0.016114495166387844 s.
check program : 
def fruit_distribution(s,n):
    if s == "":
        return 0
    elif s == "0":
        return 0
    elif s == "1":
        return 1
    elif s == "2":
        return 2
    elif s == "3":
        return 3
    elif s == "4":
        return 4
    elif s == "5":
        return 5
    elif s == "6":
        return 6
    elif s == "7":
        return 7
    elif s == "8":
        return 8
    elif s == "9":
        return 9
    elif s == "10":
        return 10
    elif s == "11":
        return 11
    elif s == "12":
        return 12
    elif s == "13":
        return 13
    elif s == "14":
        return 14
    elif s == "15":
        return 15
    elif s == "16":
        return 16
    elif s == "1

task:HumanEval/67, cir:1, gened 10 solutions, total nodes:10, total unique nodes:9, chosen nodes:9, left nodes:0
chosen nodes idx is [4, 1, 8, 10, 6, 5, 2, 3, 7]
chosen nodes's parent's idx is [0, 0, 0, 0, 0, 0, 0, 0, 0]
chosen nodes passT_rates [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
probs are [0.9980334634087206, 0.9959682531358969, 0.9916837133457462, 0.9879479766196336, 0.9498145614433163, 0.9451508595531158, 0.9385171997451355, 0.9330690877554106, 0.9298155976893352]

begin to generate solutions for cir 2 with 10 sequences.
total input length is torch.Size([1, 1704])
total input length is torch.Size([1, 1277])
total input length is torch.Size([1, 1024])
total input length is torch.Size([1, 1477])
total input length is torch.Size([1, 1273])
total input length is torch.Size([1, 1256])
total input length is torch.Size([1, 1284])
total input length is torch.Size([1, 1278])
total input length is torch.Size([1, 1545])
run solution time is 0.029680442810058594 mins, choose solution time is 1.2914339701334636e-06 mins, model inference time is 4.358847264448801 mins.
average output length is 1830.8666666666666, every token time is 0.14284537581055656 s.
check program : 
def fruit_distribution(s,n):
    if s == "":
        return 0
    elif s == "0":
        return 0
    elif s == "1":
        return 1
    elif s == "2":
        return 2
    elif s == "3":
        return 3
    elif s == "4":
        return 4
    elif s == "5":
        return 5
    elif s == "6":
        return 6
    elif s == "7":
        return 7
    elif s == "8":
        return 8
    elif s == "9":
        return 9
    elif s == "10":
        return 10
    elif s == "11":
        return 11
    elif s == "12":
        return 12
    elif s == "13":
        return 13
    elif s == "14":
        return 14
    elif s == "15":
        return 15
    elif s == "16":
        return 16
    elif s == "1

task:HumanEval/67, cir:2, gened 90 solutions, total nodes:90, total unique nodes:69, chosen nodes:10, left nodes:59
chosen nodes idx is [11, 18, 15, 20, 24, 22, 13, 17, 28, 46]
chosen nodes's parent's idx is [4, 4, 4, 4, 1, 1, 4, 4, 1, 10]
chosen nodes passT_rates [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
probs are [0.9972790858540924, 0.9970227492432693, 0.9968396080434176, 0.9968130154342404, 0.9951120952623899, 0.9946794145652798, 0.9940047560942697, 0.9935891669314219, 0.9904776006276436, 0.989571205690361]

begin to generate solutions for cir 3 with 10 sequences.
total input length is torch.Size([1, 1277])
total input length is torch.Size([1, 1704])
total input length is torch.Size([1, 1277])
total input length is torch.Size([1, 1526])
total input length is torch.Size([1, 1704])
total input length is torch.Size([1, 1525])
total input length is torch.Size([1, 1674])
total input length is torch.Size([1, 1517])
total input length is torch.Size([1, 1517])
total input length is torch.Size([1, 1272])
run solution time is 0.2872539838155111 mins, choose solution time is 9.051958719889323e-06 mins, model inference time is 5.161553597450256 mins.
average output length is 2011.3, every token time is 0.1539766403821855 s.
check program : 
def fruit_distribution(s,n):
    if s == "":
        return 0
    elif s == "0":
        return 0
    elif s == "1":
        return 1
    elif s == "2":
        return 2
    elif s == "3":
        return 3
    elif s == "4":
        return 4
    elif s == "5":
        return 5
    elif s == "6":
        return 6
    elif s == "7":
        return 7
    elif s == "8":
        return 8
    elif s == "9":
        return 9
    elif s == "10":
        return 10
    elif s == "11":
        return 11
    elif s == "12":
        return 12
    elif s == "13":
        return 13
    elif s == "14":
        return 14
    elif s == "15":
        return 15
    elif s == "16":
        return 16
    elif s == "1

task:HumanEval/67, cir:3, gened 100 solutions, total nodes:100, total unique nodes:67, chosen nodes:10, left nodes:57
chosen nodes idx is [153, 134, 103, 179, 184, 160, 183, 115, 145, 120]
chosen nodes's parent's idx is [22, 20, 11, 17, 28, 22, 28, 18, 24, 18]
chosen nodes passT_rates [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
probs are [0.9990012976555478, 0.9986461367153847, 0.9976781345553514, 0.9976378800159627, 0.9976097393869376, 0.9972517739459824, 0.9970107281400621, 0.9968396080434176, 0.99682478046941, 0.9968130154342404]

begin to generate solutions for cir 4 with 10 sequences.
total input length is torch.Size([1, 1518])
total input length is torch.Size([1, 1518])
total input length is torch.Size([1, 1704])
total input length is torch.Size([1, 1517])
total input length is torch.Size([1, 1518])
total input length is torch.Size([1, 1524])
total input length is torch.Size([1, 1515])
total input length is torch.Size([1, 1277])
total input length is torch.Size([1, 1278])
total input length is torch.Size([1, 1526])
run solution time is 0.2983324845631917 mins, choose solution time is 5.527337392171224e-06 mins, model inference time is 5.135233279069265 mins.
average output length is 1999.39, every token time is 0.15410400080758 s.
check program : 
def fruit_distribution(s,n):
    if s == "":
        return 0
    elif s == "0":
        return 0
    elif s == "1":
        return 1
    elif s == "2":
        return 2
    elif s == "3":
        return 3
    elif s == "4":
        return 4
    elif s == "5":
        return 5
    elif s == "6":
        return 6
    elif s == "7":
        return 7
    elif s == "8":
        return 8
    elif s == "9":
        return 9
    elif s == "10":
        return 10
    elif s == "11":
        return 11
    elif s == "12":
        return 12
    elif s == "13":
        return 13
    elif s == "14":
        return 14
    elif s == "15":
        return 15
    elif s == "16":
        return 16
    elif s == "1

task:HumanEval/67, cir:4, gened 100 solutions, total nodes:100, total unique nodes:58, chosen nodes:10, left nodes:48
chosen nodes idx is [239, 214, 244, 243, 258, 245, 234, 263, 210, 220]
chosen nodes's parent's idx is [179, 134, 184, 184, 160, 184, 179, 183, 153, 134]
chosen nodes passT_rates [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
probs are [0.9988756385810211, 0.9986551532100069, 0.9984882759787559, 0.9983490376154546, 0.9975954457130094, 0.9975103783534572, 0.9974856815167682, 0.9974703429242752, 0.9971722541365045, 0.9971522742042801]

begin to generate solutions for cir 5 with 10 sequences.
total input length is torch.Size([1, 1517])
total input length is torch.Size([1, 1518])
total input length is torch.Size([1, 1518])
total input length is torch.Size([1, 1523])
total input length is torch.Size([1, 1517])
total input length is torch.Size([1, 1705])
total input length is torch.Size([1, 1707])
total input length is torch.Size([1, 1515])
total input length is torch.Size([1, 1524])
total input length is torch.Size([1, 1526])
run solution time is 0.31145944595336916 mins, choose solution time is 7.657210032145182e-06 mins, model inference time is 5.289596394697825 mins.
average output length is 2068.66, every token time is 0.15342095337267384 s.
check program : 
def fruit_distribution(s,n):
    if s == "":
        return 0
    if n == 0:
        return 1
    elif n == 1:
        return 1
    elif n == 2:
        return 2
    elif n == 3:
        return 3
    elif n == 4:
        return 4
    elif n == 5:
        return 5
    elif n == 6:
        return 6
    elif n == 7:
        return 7
    elif n == 8:
        return 8
    elif n == 9:
        return 9
    elif n == 10:
        return 10
    elif n == 11:
        return 11
    elif n == 12:
        return 12
    elif n == 13:
        return 13
    elif n == 14:
        return 14
    elif n == 15:
        return 15
    elif n == 16:
        return 16
    elif n == 1

task:HumanEval/67, cir:5, gened 100 solutions, total nodes:100, total unique nodes:51, chosen nodes:10, left nodes:41
chosen nodes idx is [309, 343, 314, 324, 323, 366, 363, 361, 325, 304]
chosen nodes's parent's idx is [239, 258, 214, 244, 244, 234, 234, 234, 244, 239]
chosen nodes passT_rates [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
probs are [0.9988756385810211, 0.998830099936231, 0.9986551532100069, 0.9984882759787559, 0.9983490376154546, 0.9983128005715707, 0.9979569008057761, 0.9975910685248491, 0.9975103783534572, 0.9974856815167682]

begin to generate solutions for cir 6 with 10 sequences.
total input length is torch.Size([1, 1517])
total input length is torch.Size([1, 1518])
total input length is torch.Size([1, 1518])
total input length is torch.Size([1, 1518])
total input length is torch.Size([1, 1523])
total input length is torch.Size([1, 1273])
total input length is torch.Size([1, 1518])
total input length is torch.Size([1, 1272])
total input length is torch.Size([1, 1705])
total input length is torch.Size([1, 1707])
run solution time is 0.31296530564626057 mins, choose solution time is 7.450580596923828e-06 mins, model inference time is 5.1809113701184595 mins.
average output length is 2015.48, every token time is 0.15423357383809339 s.
check program : 
def fruit_distribution(s,n):
    if s == "":
        return 0
    if n == 0:
        return 1
    elif n == 1:
        return 1
    elif n == 2:
        return 2
    elif n == 3:
        return 3
    elif n == 4:
        return 4
    elif n == 5:
        return 5
    elif n == 6:
        return 6
    elif n == 7:
        return 7
    elif n == 8:
        return 8
    elif n == 9:
        return 9
    elif n == 10:
        return 10
    elif n == 11:
        return 11
    elif n == 12:
        return 12
    elif n == 13:
        return 13
    elif n == 14:
        return 14
    elif n == 15:
        return 15
    elif n == 16:
        return 16
    elif n == 1

task:HumanEval/67, cir:6, gened 100 solutions, total nodes:100, total unique nodes:60, chosen nodes:10, left nodes:50
chosen nodes idx is [409, 424, 464, 434, 466, 433, 463, 491, 435, 404]
chosen nodes's parent's idx is [309, 314, 363, 324, 363, 324, 363, 304, 324, 309]
chosen nodes passT_rates [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
probs are [0.9988756385810211, 0.9986551532100069, 0.9985195992944328, 0.9984882759787559, 0.9984782241116678, 0.9983490376154546, 0.9976764198002666, 0.9975910685248491, 0.9975103783534572, 0.9974856815167682]

begin to generate solutions for cir 7 with 10 sequences.
total input length is torch.Size([1, 1517])
total input length is torch.Size([1, 1518])
total input length is torch.Size([1, 1518])
total input length is torch.Size([1, 1518])
total input length is torch.Size([1, 1273])
total input length is torch.Size([1, 1523])
total input length is torch.Size([1, 1518])
total input length is torch.Size([1, 1272])
total input length is torch.Size([1, 1705])
total input length is torch.Size([1, 1707])
run solution time is 0.30775119066238404 mins, choose solution time is 5.753835042317708e-06 mins, model inference time is 5.180219972133637 mins.
average output length is 2015.48, every token time is 0.1542129913263985 s.
check program : 
def fruit_distribution(s,n):
    if s == "":
        return 0
    if n == 0:
        return 1
    elif n == 1:
        return 1
    elif n == 2:
        return 2
    elif n == 3:
        return 3
    elif n == 4:
        return 4
    elif n == 5:
        return 5
    elif n == 6:
        return 6
    elif n == 7:
        return 7
    elif n == 8:
        return 8
    elif n == 9:
        return 9
    elif n == 10:
        return 10
    elif n == 11:
        return 11
    elif n == 12:
        return 12
    elif n == 13:
        return 13
    elif n == 14:
        return 14
    elif n == 15:
        return 15
    elif n == 16:
        return 16
    elif n == 1

task:HumanEval/67, cir:7, gened 100 solutions, total nodes:100, total unique nodes:59, chosen nodes:10, left nodes:49
chosen nodes idx is [509, 514, 524, 534, 526, 533, 523, 591, 535, 504]
chosen nodes's parent's idx is [409, 424, 464, 434, 464, 434, 464, 404, 434, 409]
chosen nodes passT_rates [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
probs are [0.9988756385810211, 0.9986551532100069, 0.9985195992944328, 0.9984882759787559, 0.9984782241116678, 0.9983490376154546, 0.9976764198002666, 0.9975910685248491, 0.9975103783534572, 0.9974856815167682]

begin to generate solutions for cir 8 with 10 sequences.
total input length is torch.Size([1, 1517])
total input length is torch.Size([1, 1518])
total input length is torch.Size([1, 1518])
total input length is torch.Size([1, 1518])
total input length is torch.Size([1, 1273])
total input length is torch.Size([1, 1523])
total input length is torch.Size([1, 1518])
total input length is torch.Size([1, 1272])
total input length is torch.Size([1, 1705])
total input length is torch.Size([1, 1707])
run solution time is 0.30523158311843873 mins, choose solution time is 6.846586863199869e-06 mins, model inference time is 5.182037794589997 mins.
average output length is 2015.48, every token time is 0.15426710773513216 s.
check program : 
def fruit_distribution(s,n):
    if s == "":
        return 0
    if n == 0:
        return 1
    elif n == 1:
        return 1
    elif n == 2:
        return 2
    elif n == 3:
        return 3
    elif n == 4:
        return 4
    elif n == 5:
        return 5
    elif n == 6:
        return 6
    elif n == 7:
        return 7
    elif n == 8:
        return 8
    elif n == 9:
        return 9
    elif n == 10:
        return 10
    elif n == 11:
        return 11
    elif n == 12:
        return 12
    elif n == 13:
        return 13
    elif n == 14:
        return 14
    elif n == 15:
        return 15
    elif n == 16:
        return 16
    elif n == 1

task:HumanEval/67, cir:8, gened 100 solutions, total nodes:100, total unique nodes:59, chosen nodes:10, left nodes:49
chosen nodes idx is [609, 614, 624, 634, 626, 633, 623, 691, 635, 604]
chosen nodes's parent's idx is [509, 514, 524, 534, 524, 534, 524, 504, 534, 509]
chosen nodes passT_rates [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
probs are [0.9988756385810211, 0.9986551532100069, 0.9985195992944328, 0.9984882759787559, 0.9984782241116678, 0.9983490376154546, 0.9976764198002666, 0.9975910685248491, 0.9975103783534572, 0.9974856815167682]

begin to generate solutions for cir 9 with 10 sequences.
total input length is torch.Size([1, 1517])
total input length is torch.Size([1, 1518])
total input length is torch.Size([1, 1518])
total input length is torch.Size([1, 1518])
total input length is torch.Size([1, 1273])
total input length is torch.Size([1, 1523])
total input length is torch.Size([1, 1518])
total input length is torch.Size([1, 1272])
total input length is torch.Size([1, 1705])
total input length is torch.Size([1, 1707])
run solution time is 0.3057589292526245 mins, choose solution time is 7.60952631632487e-06 mins, model inference time is 5.1816641330719 mins.
average output length is 2015.48, every token time is 0.1542559839873967 s.
check program : 
def fruit_distribution(s,n):
    if s == "":
        return 0
    if n == 0:
        return 1
    elif n == 1:
        return 1
    elif n == 2:
        return 2
    elif n == 3:
        return 3
    elif n == 4:
        return 4
    elif n == 5:
        return 5
    elif n == 6:
        return 6
    elif n == 7:
        return 7
    elif n == 8:
        return 8
    elif n == 9:
        return 9
    elif n == 10:
        return 10
    elif n == 11:
        return 11
    elif n == 12:
        return 12
    elif n == 13:
        return 13
    elif n == 14:
        return 14
    elif n == 15:
        return 15
    elif n == 16:
        return 16
    elif n == 1

task:HumanEval/67, cir:9, gened 100 solutions, total nodes:100, total unique nodes:59, chosen nodes:10, left nodes:49
chosen nodes idx is [709, 714, 724, 734, 726, 733, 723, 791, 735, 704]
chosen nodes's parent's idx is [609, 614, 624, 634, 624, 634, 624, 604, 634, 609]
chosen nodes passT_rates [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
probs are [0.9988756385810211, 0.9986551532100069, 0.9985195992944328, 0.9984882759787559, 0.9984782241116678, 0.9983490376154546, 0.9976764198002666, 0.9975910685248491, 0.9975103783534572, 0.9974856815167682]

begin to generate solutions for cir 10 with 10 sequences.
total input length is torch.Size([1, 1517])
total input length is torch.Size([1, 1518])
total input length is torch.Size([1, 1518])
total input length is torch.Size([1, 1518])
total input length is torch.Size([1, 1273])
total input length is torch.Size([1, 1523])
total input length is torch.Size([1, 1518])
total input length is torch.Size([1, 1272])
total input length is torch.Size([1, 1705])
total input length is torch.Size([1, 1707])
run solution time is 0.30062784751256305 mins, choose solution time is 6.477038065592448e-06 mins, model inference time is 5.181072052319845 mins.
average output length is 2015.48, every token time is 0.15423835739858602 s.
check program : 
def fruit_distribution(s,n):
    if s == "":
        return 0
    if n == 0:
        return 1
    elif n == 1:
        return 1
    elif n == 2:
        return 2
    elif n == 3:
        return 3
    elif n == 4:
        return 4
    elif n == 5:
        return 5
    elif n == 6:
        return 6
    elif n == 7:
        return 7
    elif n == 8:
        return 8
    elif n == 9:
        return 9
    elif n == 10:
        return 10
    elif n == 11:
        return 11
    elif n == 12:
        return 12
    elif n == 13:
        return 13
    elif n == 14:
        return 14
    elif n == 15:
        return 15
    elif n == 16:
        return 16
    elif n == 1

task:HumanEval/67, cir:10, gened 100 solutions, total nodes:100, total unique nodes:59, chosen nodes:10, left nodes:49
chosen nodes idx is [809, 814, 824, 834, 826, 833, 823, 891, 835, 804]
chosen nodes's parent's idx is [709, 714, 724, 734, 724, 734, 724, 704, 734, 709]
chosen nodes passT_rates [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
probs are [0.9988756385810211, 0.9986551532100069, 0.9985195992944328, 0.9984882759787559, 0.9984782241116678, 0.9983490376154546, 0.9976764198002666, 0.9975910685248491, 0.9975103783534572, 0.9974856815167682]

Use prompt_tests.
get solution for task : HumanEval/68 with 4 tests.
Model inference time is 0.2648717840512594 minutes
In generate step, the input tokens shape is 984, the output tokens shape is 1496
++++++++++++++++++++++++++solution++++++++++++++++++++++++++

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
=====start code===========
def pluck(arr):

fix input length is torch.Size([1, 1024])
check program : 
def pluck(arr):

task:HumanEval/68, cir:0, gened 1 solutions, total nodes:1, total unique nodes:1, chosen nodes:1, left nodes:0
chosen nodes idx is [0]
chosen nodes's parent's idx is []
chosen nodes passT_rates [0.0]
probs are [-1.0]

begin to generate solutions for cir 1 with 10 sequences.
total input length is torch.Size([1, 1093])
run solution time is 0.00277324914932251 mins, choose solution time is 6.985664367675781e-06 mins, model inference time is 0.43294281164805093 mins.
average output length is 1584.2, every token time is 0.0163972796160921 s.
check program : 
def pluck(arr):

task:HumanEval/68, cir:1, gened 10 solutions, total nodes:10, total unique nodes:8, chosen nodes:8, left nodes:0
chosen nodes idx is [4, 7, 6, 5, 2, 8, 1, 10]
chosen nodes's parent's idx is [0, 0, 0, 0, 0, 0, 0, 0]
chosen nodes passT_rates [0.25, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
probs are [0.9108547850649049, 0.9349402998011609, 0.9136021415420816, 0.9104707858529079, 0.893175375323369, 0.8897524502870058, 0.8320545262187033, 0.7814810730441681]

begin to generate solutions for cir 2 with 10 sequences.
total input length is torch.Size([1, 1259])
total input length is torch.Size([1, 1139])
total input length is torch.Size([1, 1339])
total input length is torch.Size([1, 1187])
total input length is torch.Size([1, 1182])
total input length is torch.Size([1, 1261])
total input length is torch.Size([1, 1093])
total input length is torch.Size([1, 1386])
run solution time is 0.03033758799235026 mins, choose solution time is 1.1285146077473958e-06 mins, model inference time is 3.6858885208765666 mins.
average output length is 1704.1, every token time is 0.1297772106280119 s.
check program : 
def pluck(arr):
    return (arr[0] if len(arr) > 0 else [])

task:HumanEval/68, cir:2, gened 80 solutions, total nodes:80, total unique nodes:70, chosen nodes:10, left nodes:60
chosen nodes idx is [12, 32, 82, 87, 89, 70, 19, 39, 18, 61]
chosen nodes's parent's idx is [4, 6, 10, 10, 10, 8, 4, 6, 4, 8]
chosen nodes passT_rates [0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25]
probs are [0.9955303915802736, 0.9739423174769062, 0.9695538626095443, 0.9639055503834734, 0.9600413902299468, 0.9350932365476793, 0.9336061681732942, 0.9261461040582047, 0.9232657289043753, 0.9093018057748399]

begin to generate solutions for cir 3 with 10 sequences.
total input length is torch.Size([1, 1259])
total input length is torch.Size([1, 1403])
total input length is torch.Size([1, 1278])
total input length is torch.Size([1, 1383])
total input length is torch.Size([1, 1389])
total input length is torch.Size([1, 1401])
total input length is torch.Size([1, 1264])
total input length is torch.Size([1, 1330])
total input length is torch.Size([1, 1265])
total input length is torch.Size([1, 1371])
run solution time is 0.24238307873408 mins, choose solution time is 4.239877065022787e-06 mins, model inference time is 4.820228314399719 mins.
average output length is 1812.61, every token time is 0.15955651524796133 s.
check program : 
def pluck(arr):
    return (arr[0] if len(arr) > 0 else [])

task:HumanEval/68, cir:3, gened 100 solutions, total nodes:100, total unique nodes:88, chosen nodes:10, left nodes:78
chosen nodes idx is [92, 107, 133, 129, 101, 135, 104, 185, 137, 120]
chosen nodes's parent's idx is [12, 32, 89, 87, 32, 89, 32, 61, 89, 82]
chosen nodes passT_rates [0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25]
probs are [0.9955303915802736, 0.992597078053875, 0.9890350309326351, 0.9849946529225482, 0.9762497112520697, 0.9757348029355656, 0.9740485230454929, 0.9705623449745666, 0.969764294134936, 0.9691536831502845]

begin to generate solutions for cir 4 with 10 sequences.
total input length is torch.Size([1, 1259])
total input length is torch.Size([1, 1403])
total input length is torch.Size([1, 1390])
total input length is torch.Size([1, 1401])
total input length is torch.Size([1, 1498])
total input length is torch.Size([1, 1291])
total input length is torch.Size([1, 1404])
total input length is torch.Size([1, 1351])
total input length is torch.Size([1, 1393])
total input length is torch.Size([1, 1277])
run solution time is 0.306267257531484 mins, choose solution time is 4.8319498697916664e-06 mins, model inference time is 4.888665723800659 mins.
average output length is 1794.14, every token time is 0.16348776869998338 s.
check program : 
def pluck(arr):
    return (arr[0] if len(arr) > 0 else [])

task:HumanEval/68, cir:4, gened 100 solutions, total nodes:100, total unique nodes:88, chosen nodes:10, left nodes:78
chosen nodes idx is [207, 192, 277, 240, 223, 213, 273, 237, 239, 265]
chosen nodes's parent's idx is [107, 92, 137, 101, 129, 133, 137, 101, 101, 185]
chosen nodes passT_rates [0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25]
probs are [0.9958342755919743, 0.9955303915802736, 0.9950678902651686, 0.9937880078846529, 0.9932448914452532, 0.9912969898854023, 0.9877271109542805, 0.9873886312235811, 0.9859267445075764, 0.9811003911241959]

begin to generate solutions for cir 5 with 10 sequences.
total input length is torch.Size([1, 1403])
total input length is torch.Size([1, 1259])
total input length is torch.Size([1, 1393])
total input length is torch.Size([1, 1399])
total input length is torch.Size([1, 1401])
total input length is torch.Size([1, 1390])
total input length is torch.Size([1, 1408])
total input length is torch.Size([1, 1371])
total input length is torch.Size([1, 1502])
total input length is torch.Size([1, 1351])
run solution time is 0.3026881019274394 mins, choose solution time is 7.486343383789062e-06 mins, model inference time is 4.931616230805715 mins.
average output length is 1812.98, every token time is 0.16321028298995746 s.
check program : 
def pluck(arr):
    if len(arr) == 0 or len(arr) > 10000:
        return []
    elif arr[0]%2 == 0:
        for i in arr[1:]:
            if i%2 == 0:
                return [i, i]
    elif arr[0]%2 != 0:
        minEvenVal = 0
        minInd = 0
        for i in arr[1:]:
            if i%2 == 0:
                if i == minEvenVal:
                    return [i, minInd]
                if i < minEvenVal:
                    minEvenVal = i
                    minInd = 0

task:HumanEval/68, cir:5, gened 100 solutions, total nodes:100, total unique nodes:90, chosen nodes:10, left nodes:80
chosen nodes idx is [297, 302, 317, 380, 328, 333, 343, 313, 367, 323]
chosen nodes's parent's idx is [207, 192, 277, 239, 240, 223, 213, 277, 237, 240]
chosen nodes passT_rates [0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25]
probs are [0.9958342755919743, 0.9955303915802736, 0.9950678902651686, 0.9946141992178328, 0.9939054652301137, 0.9932448914452532, 0.9912969898854023, 0.9877271109542805, 0.9872212236366239, 0.9868800104892377]

begin to generate solutions for cir 6 with 10 sequences.
total input length is torch.Size([1, 1403])
total input length is torch.Size([1, 1259])
total input length is torch.Size([1, 1393])
total input length is torch.Size([1, 1399])
total input length is torch.Size([1, 1416])
total input length is torch.Size([1, 1401])
total input length is torch.Size([1, 1390])
total input length is torch.Size([1, 1408])
total input length is torch.Size([1, 1371])
total input length is torch.Size([1, 1375])
run solution time is 0.3042975385983785 mins, choose solution time is 5.161762237548828e-06 mins, model inference time is 4.9177134275436405 mins.
average output length is 1820.77, every token time is 0.16205386009474634 s.
check program : 
def pluck(arr):
    if len(arr) == 0 or len(arr) > 10000:
        return []
    elif arr[0]%2 == 0:
        for i in arr[1:]:
            if i%2 == 0:
                return [i, i]
    elif arr[0]%2 != 0:
        minEvenVal = 0
        minInd = 0
        for i in arr[1:]:
            if i%2 == 0:
                if i == minEvenVal:
                    return [i, minInd]
                if i < minEvenVal:
                    minEvenVal = i
                    minInd = 0

task:HumanEval/68, cir:6, gened 100 solutions, total nodes:100, total unique nodes:93, chosen nodes:10, left nodes:83
chosen nodes idx is [423, 397, 402, 417, 427, 443, 453, 489, 413, 477]
chosen nodes's parent's idx is [380, 297, 302, 317, 380, 333, 343, 323, 317, 367]
chosen nodes passT_rates [0.5, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25]
probs are [0.9216801671693262, 0.9958342755919743, 0.9955303915802736, 0.9950678902651686, 0.9949912614371158, 0.9932448914452532, 0.9912969898854023, 0.9881812185191226, 0.9877271109542805, 0.9872212236366239]

begin to generate solutions for cir 7 with 10 sequences.
total input length is torch.Size([1, 1526])
total input length is torch.Size([1, 1403])
total input length is torch.Size([1, 1259])
total input length is torch.Size([1, 1393])
total input length is torch.Size([1, 1397])
total input length is torch.Size([1, 1401])
total input length is torch.Size([1, 1390])
total input length is torch.Size([1, 1323])
total input length is torch.Size([1, 1408])
total input length is torch.Size([1, 1371])
run solution time is 0.30070388317108154 mins, choose solution time is 9.74734624226888e-06 mins, model inference time is 4.930508037408193 mins.
average output length is 1817.5, every token time is 0.1627678053907056 s.
check program : 
def pluck(arr):
    return (arr[1:]) if len(arr) > 1 else []

task:HumanEval/68, cir:7, gened 100 solutions, total nodes:100, total unique nodes:93, chosen nodes:10, left nodes:83
chosen nodes idx is [499, 497, 507, 512, 527, 543, 553, 532, 562, 523]
chosen nodes's parent's idx is [423, 423, 397, 402, 417, 443, 453, 427, 489, 417]
chosen nodes passT_rates [0.75, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25]
probs are [0.9410756518782591, 0.9961159023225943, 0.9958342755919743, 0.9955303915802736, 0.9950678902651686, 0.9932448914452532, 0.9912969898854023, 0.9902872658558363, 0.9894757362664294, 0.9877271109542805]

begin to generate solutions for cir 8 with 10 sequences.
total input length is torch.Size([1, 1528])
total input length is torch.Size([1, 1397])
total input length is torch.Size([1, 1403])
total input length is torch.Size([1, 1259])
total input length is torch.Size([1, 1393])
total input length is torch.Size([1, 1401])
total input length is torch.Size([1, 1390])
total input length is torch.Size([1, 1385])
total input length is torch.Size([1, 1326])
total input length is torch.Size([1, 1408])
run solution time is 0.30604103406270344 mins, choose solution time is 7.335344950358073e-06 mins, model inference time is 4.932040699323019 mins.
average output length is 1818.85, every token time is 0.16269755264497412 s.
check program : 
def pluck(arr):
    return (arr[0] if len(arr) > 0 and arr[0]%2 else []) + ([min(arr)] if len(arr) == 1 else [])

task:HumanEval/68, cir:8, gened 100 solutions, total nodes:100, total unique nodes:88, chosen nodes:10, left nodes:78
chosen nodes idx is [593, 599, 592, 664, 596, 617, 622, 637, 673, 643]
chosen nodes's parent's idx is [499, 499, 499, 532, 499, 507, 512, 527, 562, 543]
chosen nodes passT_rates [0.75, 0.75, 0.75, 0.5, 0.5, 0.25, 0.25, 0.25, 0.25, 0.25]
probs are [0.9760560669576297, 0.9418879660760011, 0.8853745925793987, 0.8910880414784558, 0.8588159707391857, 0.9958342755919743, 0.9955303915802736, 0.9950678902651686, 0.9938795376920599, 0.9932448914452532]

begin to generate solutions for cir 9 with 10 sequences.
total input length is torch.Size([1, 1616])
total input length is torch.Size([1, 1578])
total input length is torch.Size([1, 1582])
total input length is torch.Size([1, 1349])
total input length is torch.Size([1, 1399])
total input length is torch.Size([1, 1403])
total input length is torch.Size([1, 1259])
total input length is torch.Size([1, 1393])
total input length is torch.Size([1, 1326])
total input length is torch.Size([1, 1401])
run solution time is 0.3048193057378133 mins, choose solution time is 6.747245788574219e-06 mins, model inference time is 5.019821027914683 mins.
average output length is 1885.73, every token time is 0.15972024943465682 s.
check program : 
def pluck(arr):
    return (arr[1:]) if len(arr) > 1 else []

task:HumanEval/68, cir:9, gened 100 solutions, total nodes:100, total unique nodes:90, chosen nodes:10, left nodes:80
chosen nodes idx is [699, 720, 709, 719, 696, 723, 727, 730, 724, 738]
chosen nodes's parent's idx is [593, 592, 599, 592, 593, 664, 664, 664, 664, 596]
chosen nodes passT_rates [0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.5, 0.5, 0.5, 0.5]
probs are [0.9942775813608363, 0.9934237906355432, 0.9452531669304801, 0.935049901285188, 0.9274023995741225, 0.8736034396909425, 0.9834558477571758, 0.9762498147604435, 0.939319158933268, 0.9335844806106555]

begin to generate solutions for cir 10 with 10 sequences.
total input length is torch.Size([1, 1710])
total input length is torch.Size([1, 1400])
total input length is torch.Size([1, 1578])
total input length is torch.Size([1, 1702])
total input length is torch.Size([1, 1553])
total input length is torch.Size([1, 1326])
total input length is torch.Size([1, 1359])
total input length is torch.Size([1, 1463])
total input length is torch.Size([1, 1572])
total input length is torch.Size([1, 1504])
run solution time is 0.3027946551640828 mins, choose solution time is 7.637341817220052e-06 mins, model inference time is 5.197092684110006 mins.
average output length is 1972.67, every token time is 0.15807284838060695 s.
check program : 
def pluck(arr):
    return (arr[1:]) if len(arr) > 1 else []

passn: 1.0
One node passed! Show it and it's parents.
++++++show parents of the node++++++
solution:
    if arr == []: return []
    minEvenVal = 1000000
    for i in arr[1:]:
        if i%2 == 0:
            if i < minEvenVal:
                minEvenVal = i
    if len(arr) == 1:
        return [arr[0], 0]
    else:
        return [minEvenVal, arr.index(minEvenVal)]

passT_rate:1.0
prob:0.9293636757177146

************************
++++++show parents of the node++++++
solution:
    if arr == []: return []
    minEvenVal = arr[0]
    for i in arr[1:]:
        if i%2 == 0:
            if i < minEvenVal:
                minEvenVal = i
    return [minEvenVal, arr.index(minEvenVal)]

passT_rate:0.75
prob:0.8736034396909425

************************
++++++show parents of the node++++++
solution:
    if arr == []: return []
    minEvenVal = 0
    for i in arr[1:]:
        if i%2 == 0:
            if i == minEvenVal:
                return [i, arr.index(minEvenVal)]
            if i < minEvenVal:
                minEvenVal = i
    if len(arr) == 0 or len(arr) > 10000:
        return

passT_rate:0.5
prob:0.8910880414784558

************************
++++++show parents of the node++++++
solution:
    if len(arr) == 0:
        return []
    elif arr[0]%2 == 0:
        return []
    else:
        minEvenVal = 0
        minInd = 0
        for i in arr[1:]:
            if i%2 == 0:
                if i == minEvenVal:
                    return [i, minInd]
                if i < minEvenVal:
                    minEvenVal = i
                minInd
    if len(arr) == 0 or len(arr) > 10000:
        return

passT_rate:0.25
prob:0.9902872658558363

************************
++++++show parents of the node++++++
solution:
    if len(arr) == 0 or len(arr) > 10000:
        return []
    elif arr[0]%2 == 0:
        return []
    else:
        minEvenVal = 0
        minInd = 0
        for i in arr[1:]:
            if i%2 == 0:
                if i == minEvenVal:
                    return [i, minInd]
                if i < minEvenVal:
                    minEvenVal = i
                minInd
    if len(arr) == 0 or len(arr) > 10000:
        return

passT_rate:0.25
prob:0.9949912614371158

************************
++++++show parents of the node++++++
solution:
    if len(arr) == 0 or len(arr) > 10000:
        return []
    elif arr[0]%2 == 0:
        return []
    else:
        minEvenVal = 0
        minInd = 0
        for i in arr[1:]:
            if i%2 == 0:
                if i == minEvenVal:
                    return [i, minInd]
                if i < minEvenVal:
                    minEvenVal = i
                minInd
                
    if len(arr) == 0 or len(arr) > 10000:
        return

passT_rate:0.25
prob:0.9946141992178328

************************
++++++show parents of the node++++++
solution:
    if len(arr) == 0 or len(arr) > 10000:
        return []
    elif arr[0]%2 == 0:
        return []
    else:
        minEvenVal = 0
        minInd = 0
        for i in arr[1:]:
            if i%2 == 0:
                if i == minEvenVal:
                    return [i, minInd]
                if i < minEvenVal:
                    minEvenVal = i
                minInd
           
    if len(arr) == 0 or len(arr) > 10000:
        return []
    elif arr[0]%2 == 0:
        return []
    else:
        minEvenVal = 0
        minInd = 0
        for i in arr[1:]:
            if i%2 == 0:
                if i == minEvenVal:
                    return [i, minInd]
                if i < minEvenVal:
                    minEvenVal = i
                minInd
                

passT_rate:0.25
prob:0.9859267445075764

************************
++++++show parents of the node++++++
solution:
    if len(arr) == 0 or len(arr) > 10000:
        return []
    elif arr[0]%2 == 0:
        return []
    else:
        minEvenVal = 0
        minInd = 0
        for i in arr[1:]:
            if i%2 == 0:
                if i == minEvenVal:
                    return [i, minInd]
                if i < minEvenVal:
                    minEvenVal = i
                minInd
    if len(arr) == 0 or len(arr) > 10000:
        return []
    elif arr[0]%2 == 0:
        return []
    else:
        minEvenVal = 0
        minInd = 0
        for i in arr[1:]:
            if i%2 == 0:
                if i == minEvenVal:
                    return [i, minInd]
                if i < minEvenVal:
                    minEvenVal = i
                minInd

passT_rate:0.25
prob:0.9762497112520697

************************
++++++show parents of the node++++++
solution:
    if len(arr) == 0 or len(arr) > 10000:
        return []
    elif arr[0]%2 == 0:
        for i in arr[1:]:
            if i%2 == 0:
                return [i, i]
        return []
    else:
        minEvenVal = 0
        minInd = 0
        for i in arr[1:]:
            if i%2 == 0:
                if i == minEvenVal:
                    return [i, minInd]
                if i < minEvenVal:
                    minEvenVal = i
                min

passT_rate:0.25
prob:0.9739423174769062

************************
++++++show parents of the node++++++
solution:
    minEvenVal = 0
    minInd = 0
    for i in arr:
        if i % 2 == 0:
            if i < minEvenVal:
                minEvenVal = i
            if i < minInd:
                minInd = i
    return [minEvenVal,minInd]

passT_rate:0.0
prob:0.9136021415420816

************************
++++++show parents of the node++++++
solution:

passT_rate:0.0
prob:-1.0

************************
task:HumanEval/68, cir:10, gened 100 solutions, total nodes:100, total unique nodes:94, chosen nodes:10, left nodes:84
chosen nodes idx is [850, 842, 801, 803, 808, 836, 847, 841, 819, 829]
chosen nodes's parent's idx is [723, 723, 720, 720, 720, 696, 723, 723, 709, 719]
chosen nodes passT_rates [1.0, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75]
probs are [0.9293636757177146, 0.9883390575803807, 0.988025619817051, 0.9856817402341845, 0.9805708169907945, 0.971651958414058, 0.9675454216052579, 0.9462125156508968, 0.9452531669304801, 0.9440725533865598]

Use prompt_tests.
get solution for task : HumanEval/69 with 3 tests.
Model inference time is 0.26309502522150674 minutes
In generate step, the input tokens shape is 806, the output tokens shape is 1318
++++++++++++++++++++++++++solution++++++++++++++++++++++++++
    if len(lst) == 0:
        return -1
    else:
        return max(lst)

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
=====start code===========
def search(lst):

fix input length is torch.Size([1, 845])
check program : 
def search(lst):
    if len(lst) == 0:
        return -1
    else:
        return max(lst)

task:HumanEval/69, cir:0, gened 1 solutions, total nodes:1, total unique nodes:1, chosen nodes:1, left nodes:0
chosen nodes idx is [0]
chosen nodes's parent's idx is []
chosen nodes passT_rates [0.0]
probs are [-1.0]

begin to generate solutions for cir 1 with 10 sequences.
total input length is torch.Size([1, 1104])
run solution time is 0.0028829336166381835 mins, choose solution time is 5.332628885904948e-06 mins, model inference time is 0.4329749822616577 mins.
average output length is 1613.2, every token time is 0.016103706997143787 s.
check program : 
def search(lst):
    if lst == 0:
        return -1
    elif len(lst) == 1:
        return lst[0]
    elif lst[0] >= 2:
        return lst[0]
    return max(lst)

task:HumanEval/69, cir:1, gened 10 solutions, total nodes:10, total unique nodes:7, chosen nodes:7, left nodes:0
chosen nodes idx is [7, 1, 2, 6, 9, 4, 3]
chosen nodes's parent's idx is [0, 0, 0, 0, 0, 0, 0]
chosen nodes passT_rates [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
probs are [0.906285578364883, 0.9030382919773131, 0.8957077481188608, 0.895403649010209, 0.8783134756226533, 0.8772117283069657, 0.8513187127272508]

begin to generate solutions for cir 2 with 10 sequences.
total input length is torch.Size([1, 1177])
total input length is torch.Size([1, 1133])
total input length is torch.Size([1, 1016])
total input length is torch.Size([1, 1179])
total input length is torch.Size([1, 1090])
total input length is torch.Size([1, 1139])
total input length is torch.Size([1, 1104])
run solution time is 0.030881071090698244 mins, choose solution time is 1.235802968343099e-06 mins, model inference time is 3.060831534862518 mins.
average output length is 1603.7142857142858, every token time is 0.11451534470538287 s.
check program : 
def search(lst):
    max_item = lst[0]
    max_freq = 0
    for item in lst[1:]:
        if item > max_item:
            max_item = item
            max_freq = max_freq + 1
    return max_item, max_freq

task:HumanEval/69, cir:2, gened 70 solutions, total nodes:70, total unique nodes:57, chosen nodes:10, left nodes:47
chosen nodes idx is [41, 31, 54, 12, 30, 14, 48, 23, 47, 28]
chosen nodes's parent's idx is [6, 2, 9, 7, 1, 7, 6, 1, 6, 1]
chosen nodes passT_rates [0.3333333333333333, 0.3333333333333333, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
probs are [0.9219219153797444, 0.8388371351851136, 0.9920018938689397, 0.9911982254324833, 0.9846255602192747, 0.9843689355014777, 0.9732586083299154, 0.955802291566244, 0.9543907722065158, 0.9526739650246329]

begin to generate solutions for cir 3 with 10 sequences.
total input length is torch.Size([1, 1149])
total input length is torch.Size([1, 1181])
total input length is torch.Size([1, 1090])
total input length is torch.Size([1, 1180])
total input length is torch.Size([1, 1140])
total input length is torch.Size([1, 1193])
total input length is torch.Size([1, 1141])
total input length is torch.Size([1, 1206])
total input length is torch.Size([1, 1165])
total input length is torch.Size([1, 1149])
run solution time is 0.21481850544611614 mins, choose solution time is 4.13656234741211e-06 mins, model inference time is 4.457483351230621 mins.
average output length is 1624.44, every token time is 0.16464075820611745 s.
check program : 
def search(lst):
    if lst == [1]:
        return 1
    elif lst == [2]:
        return 2
    elif lst == [3]:
        return 3
    elif lst == [4]:
        return 4
    elif lst == [5]:
        return -1
    else:
        return -1

task:HumanEval/69, cir:3, gened 100 solutions, total nodes:100, total unique nodes:76, chosen nodes:10, left nodes:66
chosen nodes idx is [92, 100, 91, 87, 81, 96, 165, 86, 124, 159]
chosen nodes's parent's idx is [31, 31, 31, 41, 41, 31, 47, 41, 30, 23]
chosen nodes passT_rates [0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333]
probs are [0.9931059190106262, 0.989096730077563, 0.9363616809740367, 0.9318412233165088, 0.9228203807335523, 0.9173057020796417, 0.9154540526951186, 0.9132655678102543, 0.9009693981112968, 0.8855761956658701]

begin to generate solutions for cir 4 with 10 sequences.
total input length is torch.Size([1, 1181])
total input length is torch.Size([1, 1163])
total input length is torch.Size([1, 1189])
total input length is torch.Size([1, 1176])
total input length is torch.Size([1, 1149])
total input length is torch.Size([1, 1397])
total input length is torch.Size([1, 1263])
total input length is torch.Size([1, 1261])
total input length is torch.Size([1, 1158])
total input length is torch.Size([1, 1160])
run solution time is 0.30560962756474813 mins, choose solution time is 5.7657559712727865e-06 mins, model inference time is 4.562402192751566 mins.
average output length is 1680.13, every token time is 0.1629303287448138 s.
check program : 
def search(lst):
    max_n = -1
    if len(lst) == 1:
        return lst[0]
    n = 1
    max_n = 0
    for i in lst:
        j = i - n
        if j == 0:
            continue
        if j == i or j not in lst:
            continue
        max_n = max(max_n, j)
        lst[j] = -1
        n = j
    return max_n

task:HumanEval/69, cir:4, gened 100 solutions, total nodes:100, total unique nodes:84, chosen nodes:10, left nodes:74
chosen nodes idx is [199, 253, 182, 190, 202, 244, 232, 210, 273, 260]
chosen nodes's parent's idx is [100, 86, 92, 92, 91, 165, 96, 91, 159, 86]
chosen nodes passT_rates [0.6666666666666666, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333]
probs are [0.899076178387172, 0.9936411941076035, 0.9931059190106262, 0.989096730077563, 0.980417249299902, 0.9754773871772591, 0.9734610099794109, 0.9733459403134648, 0.9699593021725225, 0.963461400991272]

begin to generate solutions for cir 5 with 10 sequences.
total input length is torch.Size([1, 1167])
total input length is torch.Size([1, 1572])
total input length is torch.Size([1, 1181])
total input length is torch.Size([1, 1163])
total input length is torch.Size([1, 1224])
total input length is torch.Size([1, 1263])
total input length is torch.Size([1, 1554])
total input length is torch.Size([1, 1214])
total input length is torch.Size([1, 1185])
total input length is torch.Size([1, 1149])
run solution time is 0.3036033312479655 mins, choose solution time is 7.522106170654297e-06 mins, model inference time is 4.680390322208405 mins.
average output length is 1745.49, every token time is 0.16088515043904744 s.
check program : 
def search(lst):
    from math import log
    if not(lst):
        return -1
    elif(len(lst) == 1):
        return lst[0]
    else:
        n = 1
        max_n = 0
        for i in lst:
            j = i - n
            if j == 0:
                continue
            if j == i or j not in lst:
                continue
            max_n = max(max_n, j)
            lst[j] = -1
            n = j
        return max_n
def is_a_Palindrome(input):

task:HumanEval/69, cir:5, gened 100 solutions, total nodes:100, total unique nodes:81, chosen nodes:10, left nodes:71
chosen nodes idx is [288, 284, 302, 363, 354, 310, 358, 334, 342, 300]
chosen nodes's parent's idx is [199, 199, 182, 273, 210, 182, 210, 244, 232, 253]
chosen nodes passT_rates [0.6666666666666666, 0.6666666666666666, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333]
probs are [0.9515880496143604, 0.8920851210505176, 0.9931059190106262, 0.9921907203447186, 0.9906280525580498, 0.989096730077563, 0.9883111841321321, 0.9754773871772591, 0.9685724142264271, 0.9616218168330769]

begin to generate solutions for cir 6 with 10 sequences.
total input length is torch.Size([1, 1258])
total input length is torch.Size([1, 1167])
total input length is torch.Size([1, 1181])
total input length is torch.Size([1, 1185])
total input length is torch.Size([1, 1206])
total input length is torch.Size([1, 1163])
total input length is torch.Size([1, 1206])
total input length is torch.Size([1, 1263])
total input length is torch.Size([1, 1526])
total input length is torch.Size([1, 1415])
run solution time is 0.3084447026252747 mins, choose solution time is 5.797545115152995e-06 mins, model inference time is 4.659974014759063 mins.
average output length is 1727.02, every token time is 0.16189647012728176 s.
check program : 
def search(lst):
    lst = [int(i) for i in lst]
    lst.sort()
    for i in lst:
        if lst.index(i + 1) != -1:
            lst[i] = -1
            continue
    max_n = -1
    for i in lst:
        if i != 0:
            max_n = max(max_n, i)
    return max_n
    return max([int(i) for i in lst])
    lst = [int(i) for i in lst]
    lst.sort()
    n = 1
    max_n = -1
    for i in lst:
        j = i - n
        if j == 0:
            continue
        if j == i or j not in lst:
            continue
        max_n = max(max_n, j)
        lst[j] = -1
        n = j
    return max_n

task:HumanEval/69, cir:6, gened 100 solutions, total nodes:100, total unique nodes:84, chosen nodes:10, left nodes:74
chosen nodes idx is [386, 389, 394, 425, 424, 444, 402, 413, 410, 429]
chosen nodes's parent's idx is [288, 288, 284, 354, 354, 358, 302, 363, 302, 354]
chosen nodes passT_rates [0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333]
probs are [0.9955997103389487, 0.9514077905062526, 0.8920851210505176, 0.7377877450805091, 0.9943677063478412, 0.9943412034730383, 0.9931059190106262, 0.9921907203447186, 0.989096730077563, 0.9832811815897725]

begin to generate solutions for cir 7 with 10 sequences.
total input length is torch.Size([1, 1258])
total input length is torch.Size([1, 1259])
total input length is torch.Size([1, 1167])
total input length is torch.Size([1, 1114])
total input length is torch.Size([1, 1206])
total input length is torch.Size([1, 1206])
total input length is torch.Size([1, 1181])
total input length is torch.Size([1, 1185])
total input length is torch.Size([1, 1163])
total input length is torch.Size([1, 1194])
run solution time is 0.30285468498865764 mins, choose solution time is 8.825461069742838e-06 mins, model inference time is 4.525250073273977 mins.
average output length is 1646.78, every token time is 0.16487630846710644 s.
check program : 
def search(lst):
    lst = [int(i) for i in lst]
    lst.sort()
    for i in lst:
        if lst.index(i + 1) != -1:
            lst[i] = -1
            continue
    max_n = -1
    for i in lst:
        if i != 0:
            max_n = max(max_n, i)
    return max_n
    return max([int(i) for i in lst])
    lst = [int(i) for i in lst]
    lst.sort()
    n = 1
    max_n = -1
    for i in lst:
        j = i - n
        if j == 0:
            continue
        if j == i or j not in lst:
            continue
        max_n = max(max_n, j)
        lst[j] = -1
        n = j
    return max_n

task:HumanEval/69, cir:7, gened 100 solutions, total nodes:100, total unique nodes:76, chosen nodes:10, left nodes:66
chosen nodes idx is [486, 497, 518, 489, 511, 492, 513, 517, 504, 524]
chosen nodes's parent's idx is [386, 389, 425, 386, 425, 389, 425, 425, 394, 424]
chosen nodes passT_rates [0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.3333333333333333]
probs are [0.9955997103389487, 0.9922687245905347, 0.9681492750918753, 0.9514077905062526, 0.9479323266499758, 0.9397896343545514, 0.9110834046872235, 0.9047005380403979, 0.8920851210505176, 0.9943677063478412]

begin to generate solutions for cir 8 with 10 sequences.
total input length is torch.Size([1, 1258])
total input length is torch.Size([1, 1259])
total input length is torch.Size([1, 1191])
total input length is torch.Size([1, 1259])
total input length is torch.Size([1, 1116])
total input length is torch.Size([1, 1258])
total input length is torch.Size([1, 1114])
total input length is torch.Size([1, 1122])
total input length is torch.Size([1, 1167])
total input length is torch.Size([1, 1206])
run solution time is 0.3078705151875814 mins, choose solution time is 5.0266583760579424e-06 mins, model inference time is 4.526924141248068 mins.
average output length is 1646.39, every token time is 0.16497639363365182 s.
check program : 
def search(lst):
    lst = [int(i) for i in lst]
    lst.sort()
    for i in lst:
        if lst.index(i + 1) != -1:
            lst[i] = -1
            continue
    max_n = -1
    for i in lst:
        if i != 0:
            max_n = max(max_n, i)
    return max_n
    return max([int(i) for i in lst])
    lst = [int(i) for i in lst]
    lst.sort()
    n = 1
    max_n = -1
    for i in lst:
        j = i - n
        if j == 0:
            continue
        if j == i or j not in lst:
            continue
        max_n = max(max_n, j)
        lst[j] = -1
        n = j
    return max_n

task:HumanEval/69, cir:8, gened 100 solutions, total nodes:100, total unique nodes:73, chosen nodes:10, left nodes:63
chosen nodes idx is [586, 596, 592, 648, 589, 612, 623, 607, 643, 647]
chosen nodes's parent's idx is [486, 497, 497, 513, 486, 489, 511, 518, 513, 513]
chosen nodes passT_rates [0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666]
probs are [0.9955997103389487, 0.9912602801570797, 0.9777922915752089, 0.9681492750918753, 0.9514077905062526, 0.9397896343545514, 0.9267692140274466, 0.9139897673494315, 0.9110834046872235, 0.9047005380403979]

begin to generate solutions for cir 9 with 10 sequences.
total input length is torch.Size([1, 1258])
total input length is torch.Size([1, 1167])
total input length is torch.Size([1, 1296])
total input length is torch.Size([1, 1191])
total input length is torch.Size([1, 1259])
total input length is torch.Size([1, 1258])
total input length is torch.Size([1, 1116])
total input length is torch.Size([1, 1186])
total input length is torch.Size([1, 1114])
total input length is torch.Size([1, 1122])
run solution time is 0.2989774028460185 mins, choose solution time is 6.059805552164714e-06 mins, model inference time is 4.529909837245941 mins.
average output length is 1664.96, every token time is 0.16324393624483152 s.
check program : 
def search(lst):
    lst = [int(i) for i in lst]
    lst.sort()
    for i in lst:
        if lst.index(i + 1) != -1:
            lst[i] = -1
            continue
    max_n = -1
    for i in lst:
        if i != 0:
            max_n = max(max_n, i)
    return max_n
    return max([int(i) for i in lst])
    lst = [int(i) for i in lst]
    lst.sort()
    n = 1
    max_n = -1
    for i in lst:
        j = i - n
        if j == 0:
            continue
        if j == i or j not in lst:
            continue
        max_n = max(max_n, j)
        lst[j] = -1
        n = j
    return max_n

task:HumanEval/69, cir:9, gened 100 solutions, total nodes:100, total unique nodes:73, chosen nodes:10, left nodes:63
chosen nodes idx is [686, 703, 727, 756, 768, 706, 689, 722, 743, 717]
chosen nodes's parent's idx is [586, 592, 589, 607, 643, 592, 586, 589, 623, 648]
chosen nodes passT_rates [0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666]
probs are [0.9955997103389487, 0.9942011773069537, 0.9922687245905347, 0.9906584120462746, 0.9681492750918753, 0.9621821472711289, 0.9514077905062526, 0.9397896343545514, 0.9267692140274466, 0.9139897673494315]

begin to generate solutions for cir 10 with 10 sequences.
total input length is torch.Size([1, 1258])
total input length is torch.Size([1, 1296])
total input length is torch.Size([1, 1259])
total input length is torch.Size([1, 1181])
total input length is torch.Size([1, 1191])
total input length is torch.Size([1, 1204])
total input length is torch.Size([1, 1259])
total input length is torch.Size([1, 1258])
total input length is torch.Size([1, 1116])
total input length is torch.Size([1, 1186])
run solution time is 0.307939338684082 mins, choose solution time is 5.137920379638672e-06 mins, model inference time is 4.580419147014618 mins.
average output length is 1676.02, every token time is 0.16397486421422094 s.
check program : 
def search(lst):
    lst = [int(i) for i in lst]
    lst.sort()
    for i in lst:
        if lst.index(i + 1) != -1:
            lst[i] = -1
            continue
    max_n = -1
    for i in lst:
        if i != 0:
            max_n = max(max_n, i)
    return max_n
    return max([int(i) for i in lst])
    lst = [int(i) for i in lst]
    lst.sort()
    n = 1
    max_n = -1
    for i in lst:
        j = i - n
        if j == 0:
            continue
        if j == i or j not in lst:
            continue
        max_n = max(max_n, j)
        lst[j] = -1
        n = j
    return max_n

task:HumanEval/69, cir:10, gened 100 solutions, total nodes:100, total unique nodes:70, chosen nodes:10, left nodes:60
chosen nodes idx is [786, 793, 806, 876, 796, 789, 842, 863, 815, 827]
chosen nodes's parent's idx is [686, 703, 727, 717, 703, 686, 689, 743, 756, 768]
chosen nodes passT_rates [0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666]
probs are [0.9955997103389487, 0.9942011773069537, 0.9912602801570797, 0.9906584120462746, 0.9621821472711289, 0.9514077905062526, 0.9397896343545514, 0.9267692140274466, 0.9175120504408731, 0.9139897673494315]

Use prompt_tests.
get solution for task : HumanEval/70 with 3 tests.
Model inference time is 0.2631030639012655 minutes
In generate step, the input tokens shape is 775, the output tokens shape is 1287
++++++++++++++++++++++++++solution++++++++++++++++++++++++++
    return sorted(lst, reverse=True)

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
=====start code===========
def strange_sort_list(lst):

fix input length is torch.Size([1, 818])
check program : 
def strange_sort_list(lst):
    return sorted(lst, reverse=True)

task:HumanEval/70, cir:0, gened 1 solutions, total nodes:1, total unique nodes:1, chosen nodes:1, left nodes:0
chosen nodes idx is [0]
chosen nodes's parent's idx is []
chosen nodes passT_rates [0.6666666666666666]
probs are [-1.0]

begin to generate solutions for cir 1 with 10 sequences.
total input length is torch.Size([1, 1053])
run solution time is 0.0030698617299397784 mins, choose solution time is 6.111462910970052e-06 mins, model inference time is 0.4246840755144755 mins.
average output length is 1520.4, every token time is 0.016759435649421207 s.
check program : 
def strange_sort_list(lst):
    lst_length = len(lst)
    return sorted(lst, reverse=True)[:lst_length]

task:HumanEval/70, cir:1, gened 10 solutions, total nodes:10, total unique nodes:10, chosen nodes:10, left nodes:0
chosen nodes idx is [6, 5, 8, 9, 1, 3, 7, 4, 2, 10]
chosen nodes's parent's idx is [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
chosen nodes passT_rates [0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.3333333333333333, 0.3333333333333333, 0.0, 0.0]
probs are [0.9252468953913195, 0.9223243904277133, 0.9094968137293766, 0.9068612911583729, 0.9006209773864755, 0.868073553214261, 0.9713801376992535, 0.8670256812876825, 0.88238361615851, 0.8445849308426757]

begin to generate solutions for cir 2 with 10 sequences.
total input length is torch.Size([1, 1062])
total input length is torch.Size([1, 1049])
total input length is torch.Size([1, 1055])
total input length is torch.Size([1, 1083])
total input length is torch.Size([1, 1068])
total input length is torch.Size([1, 1056])
total input length is torch.Size([1, 1089])
total input length is torch.Size([1, 1084])
total input length is torch.Size([1, 1071])
total input length is torch.Size([1, 1032])
run solution time is 0.03033392826716105 mins, choose solution time is 9.65595245361328e-07 mins, model inference time is 4.260815219084422 mins.
average output length is 1531.62, every token time is 0.16691406223873304 s.
check program : 
def strange_sort_list(lst):
    return lst[::-1]
    return sorted(lst, reverse=True)

task:HumanEval/70, cir:2, gened 100 solutions, total nodes:100, total unique nodes:86, chosen nodes:10, left nodes:76
chosen nodes idx is [16, 14, 15, 34, 63, 17, 54, 29, 13, 21]
chosen nodes's parent's idx is [6, 6, 6, 8, 3, 6, 1, 5, 6, 5]
chosen nodes passT_rates [0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666]
probs are [0.9681908832390541, 0.9627271295133705, 0.9573437443033314, 0.9408712934527504, 0.9341224178838408, 0.9250312526137884, 0.923004848360682, 0.9216670136905663, 0.9209223778898511, 0.9197459826771432]

begin to generate solutions for cir 3 with 10 sequences.
total input length is torch.Size([1, 1250])
total input length is torch.Size([1, 1108])
total input length is torch.Size([1, 1051])
total input length is torch.Size([1, 1056])
total input length is torch.Size([1, 1180])
total input length is torch.Size([1, 1052])
total input length is torch.Size([1, 1073])
total input length is torch.Size([1, 1083])
total input length is torch.Size([1, 1345])
total input length is torch.Size([1, 1077])
run solution time is 0.32242892583211263 mins, choose solution time is 6.735324859619141e-06 mins, model inference time is 4.390497100353241 mins.
average output length is 1598.85, every token time is 0.16476206533881332 s.
check program : 
def strange_sort_list(lst):
    lst = sorted(lst, reverse=True)
    return lst
    return lst[::-1]
    return []
    lst2 = []
    i = len(lst)
    while i > 0:
        lst2.append(lst[i-1])
        i = i-1
    return lst2
    lst2 = []
    i = len(lst)
    while i > 0:
        lst2.append(lst[i-1])
        i = i-1
    return lst2
    lst2 = []
    i = len(lst)
    while i > 0:
        lst2.append(lst[i-1])
        i = i-1
    return lst2
    lst2 = []
    i = len(lst)
    while i > 0:
        lst2.append(lst[i-1])
        i = i-1
    return lst2

task:HumanEval/70, cir:3, gened 100 solutions, total nodes:100, total unique nodes:93, chosen nodes:10, left nodes:83
chosen nodes idx is [207, 197, 124, 205, 157, 117, 127, 133, 158, 126]
chosen nodes's parent's idx is [21, 13, 14, 21, 63, 16, 14, 15, 63, 14]
chosen nodes passT_rates [0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666]
probs are [0.9937114352788596, 0.9903562945656823, 0.9870298544287898, 0.9843823800532715, 0.9780797798708748, 0.9694741197339414, 0.9642299185409032, 0.9440026545713361, 0.9406306830028928, 0.9391297464038997]

begin to generate solutions for cir 4 with 10 sequences.
total input length is torch.Size([1, 1077])
total input length is torch.Size([1, 1410])
total input length is torch.Size([1, 1109])
total input length is torch.Size([1, 1091])
total input length is torch.Size([1, 1176])
total input length is torch.Size([1, 1073])
total input length is torch.Size([1, 1070])
total input length is torch.Size([1, 1052])
total input length is torch.Size([1, 1077])
total input length is torch.Size([1, 1129])
run solution time is 0.3077234148979187 mins, choose solution time is 5.833307902018229e-06 mins, model inference time is 4.389502024650573 mins.
average output length is 1578.96, every token time is 0.16679974329376762 s.
check program : 
def strange_sort_list(lst):
    lst_length = len(lst)
    return sorted(lst, key=lambda x: x if lst_length - 1 - x else x)
    assert strange_sort_list([1, 2, 3, 4])  ==  [1, 4, 2, 3]
    assert strange_sort_list([5, 5, 5, 5])  ==  [5, 5, 5, 5]
    assert strange_sort_list([])  ==  []

task:HumanEval/70, cir:4, gened 100 solutions, total nodes:100, total unique nodes:93, chosen nodes:10, left nodes:83
chosen nodes idx is [227, 217, 234, 248, 303, 215, 237, 223, 226, 277]
chosen nodes's parent's idx is [197, 207, 124, 205, 126, 207, 124, 197, 197, 127]
chosen nodes passT_rates [0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666]
probs are [0.9963830876516278, 0.9937114352788596, 0.9931034545386167, 0.9880073268071501, 0.9879521126098819, 0.9843823800532715, 0.9642286897990371, 0.9629875645036149, 0.9624471947360816, 0.9578907213913295]

begin to generate solutions for cir 5 with 10 sequences.
total input length is torch.Size([1, 1410])
total input length is torch.Size([1, 1077])
total input length is torch.Size([1, 1109])
total input length is torch.Size([1, 1097])
total input length is torch.Size([1, 1105])
total input length is torch.Size([1, 1091])
total input length is torch.Size([1, 1070])
total input length is torch.Size([1, 1189])
total input length is torch.Size([1, 1171])
total input length is torch.Size([1, 1062])
run solution time is 0.31243009169896446 mins, choose solution time is 6.957848866780599e-06 mins, model inference time is 4.414717582861583 mins.
average output length is 1585.38, every token time is 0.16707859072511816 s.
check program : 
def strange_sort_list(lst):
    tmp = lst[0]
    lst[0] = lst[-1]
    lst[-1] = tmp
    if (len(lst) >= 2):
        tmp = lst[1]
        lst[1] = lst[-2]
        lst[-2] = tmp
        tmp = lst[2]
        lst[2] = lst[-3]
        lst[-3] = tmp
        if (len(lst) >= 3):
            tmp = lst[3]
            lst[3] = lst[-4]
            lst[-4] = tmp
    return lst

task:HumanEval/70, cir:5, gened 100 solutions, total nodes:100, total unique nodes:87, chosen nodes:10, left nodes:77
chosen nodes idx is [317, 327, 334, 325, 346, 399, 337, 313, 316, 408]
chosen nodes's parent's idx is [227, 217, 234, 217, 248, 226, 234, 227, 227, 277]
chosen nodes passT_rates [0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666]
probs are [0.9963830876516278, 0.9937114352788596, 0.9931034545386167, 0.9843823800532715, 0.9830148621065197, 0.980141587107234, 0.9642286897990371, 0.9629875645036149, 0.9624471947360816, 0.9593578083786274]

begin to generate solutions for cir 6 with 10 sequences.
total input length is torch.Size([1, 1410])
total input length is torch.Size([1, 1077])
total input length is torch.Size([1, 1109])
total input length is torch.Size([1, 1091])
total input length is torch.Size([1, 1069])
total input length is torch.Size([1, 1262])
total input length is torch.Size([1, 1070])
total input length is torch.Size([1, 1189])
total input length is torch.Size([1, 1171])
total input length is torch.Size([1, 1077])
run solution time is 0.31260042190551757 mins, choose solution time is 5.944569905598958e-06 mins, model inference time is 4.444248028596243 mins.
average output length is 1590.49, every token time is 0.16765580901246724 s.
check program : 
def strange_sort_list(lst):
    tmp = lst[0]
    lst[0] = lst[-1]
    lst[-1] = tmp
    if (len(lst) >= 2):
        tmp = lst[1]
        lst[1] = lst[-2]
        lst[-2] = tmp
        tmp = lst[2]
        lst[2] = lst[-3]
        lst[-3] = tmp
        if (len(lst) >= 3):
            tmp = lst[3]
            lst[3] = lst[-4]
            lst[-4] = tmp
    return lst

task:HumanEval/70, cir:6, gened 100 solutions, total nodes:100, total unique nodes:88, chosen nodes:10, left nodes:78
chosen nodes idx is [417, 456, 427, 434, 448, 425, 437, 413, 416, 477]
chosen nodes's parent's idx is [317, 346, 327, 334, 325, 327, 334, 317, 317, 337]
chosen nodes passT_rates [0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666]
probs are [0.9963830876516278, 0.9945135777848164, 0.9937114352788596, 0.9931034545386167, 0.9880073268071501, 0.9843823800532715, 0.9642286897990371, 0.9629875645036149, 0.9624471947360816, 0.9578907213913295]

begin to generate solutions for cir 7 with 10 sequences.
total input length is torch.Size([1, 1410])
total input length is torch.Size([1, 1069])
total input length is torch.Size([1, 1077])
total input length is torch.Size([1, 1109])
total input length is torch.Size([1, 1097])
total input length is torch.Size([1, 1091])
total input length is torch.Size([1, 1070])
total input length is torch.Size([1, 1189])
total input length is torch.Size([1, 1171])
total input length is torch.Size([1, 1062])
run solution time is 0.31627391974131264 mins, choose solution time is 6.167093912760417e-06 mins, model inference time is 4.408384708563487 mins.
average output length is 1577.79, every token time is 0.16764150120278318 s.
check program : 
def strange_sort_list(lst):
    tmp = lst[0]
    lst[0] = lst[-1]
    lst[-1] = tmp
    if (len(lst) >= 2):
        tmp = lst[1]
        lst[1] = lst[-2]
        lst[-2] = tmp
        tmp = lst[2]
        lst[2] = lst[-3]
        lst[-3] = tmp
        if (len(lst) >= 3):
            tmp = lst[3]
            lst[3] = lst[-4]
            lst[-4] = tmp
    return lst

task:HumanEval/70, cir:7, gened 100 solutions, total nodes:100, total unique nodes:86, chosen nodes:10, left nodes:76
chosen nodes idx is [517, 526, 537, 544, 535, 599, 547, 513, 516, 608]
chosen nodes's parent's idx is [417, 456, 427, 434, 427, 416, 434, 417, 417, 477]
chosen nodes passT_rates [0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666]
probs are [0.9963830876516278, 0.9945135777848164, 0.9937114352788596, 0.9931034545386167, 0.9843823800532715, 0.980141587107234, 0.9642286897990371, 0.9629875645036149, 0.9624471947360816, 0.9593578083786274]

begin to generate solutions for cir 8 with 10 sequences.
total input length is torch.Size([1, 1410])
total input length is torch.Size([1, 1069])
total input length is torch.Size([1, 1077])
total input length is torch.Size([1, 1109])
total input length is torch.Size([1, 1091])
total input length is torch.Size([1, 1262])
total input length is torch.Size([1, 1070])
total input length is torch.Size([1, 1189])
total input length is torch.Size([1, 1171])
total input length is torch.Size([1, 1077])
run solution time is 0.31332078377405803 mins, choose solution time is 6.711483001708984e-06 mins, model inference time is 4.444899829228719 mins.
average output length is 1590.49, every token time is 0.16768039588627698 s.
check program : 
def strange_sort_list(lst):
    tmp = lst[0]
    lst[0] = lst[-1]
    lst[-1] = tmp
    if (len(lst) >= 2):
        tmp = lst[1]
        lst[1] = lst[-2]
        lst[-2] = tmp
        tmp = lst[2]
        lst[2] = lst[-3]
        lst[-3] = tmp
        if (len(lst) >= 3):
            tmp = lst[3]
            lst[3] = lst[-4]
            lst[-4] = tmp
    return lst

task:HumanEval/70, cir:8, gened 100 solutions, total nodes:100, total unique nodes:88, chosen nodes:10, left nodes:78
chosen nodes idx is [617, 626, 637, 644, 658, 635, 647, 613, 616, 677]
chosen nodes's parent's idx is [517, 526, 537, 544, 535, 537, 544, 517, 517, 547]
chosen nodes passT_rates [0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666]
probs are [0.9963830876516278, 0.9945135777848164, 0.9937114352788596, 0.9931034545386167, 0.9880073268071501, 0.9843823800532715, 0.9642286897990371, 0.9629875645036149, 0.9624471947360816, 0.9578907213913295]

begin to generate solutions for cir 9 with 10 sequences.
total input length is torch.Size([1, 1410])
total input length is torch.Size([1, 1069])
total input length is torch.Size([1, 1077])
total input length is torch.Size([1, 1109])
total input length is torch.Size([1, 1097])
total input length is torch.Size([1, 1091])
total input length is torch.Size([1, 1070])
total input length is torch.Size([1, 1189])
total input length is torch.Size([1, 1171])
total input length is torch.Size([1, 1062])
run solution time is 0.31427501440048217 mins, choose solution time is 7.569789886474609e-06 mins, model inference time is 4.408930850028992 mins.
average output length is 1577.79, every token time is 0.16766227040629228 s.
check program : 
def strange_sort_list(lst):
    tmp = lst[0]
    lst[0] = lst[-1]
    lst[-1] = tmp
    if (len(lst) >= 2):
        tmp = lst[1]
        lst[1] = lst[-2]
        lst[-2] = tmp
        tmp = lst[2]
        lst[2] = lst[-3]
        lst[-3] = tmp
        if (len(lst) >= 3):
            tmp = lst[3]
            lst[3] = lst[-4]
            lst[-4] = tmp
    return lst

task:HumanEval/70, cir:9, gened 100 solutions, total nodes:100, total unique nodes:86, chosen nodes:10, left nodes:76
chosen nodes idx is [717, 726, 737, 744, 735, 799, 747, 713, 716, 808]
chosen nodes's parent's idx is [617, 626, 637, 644, 637, 616, 644, 617, 617, 677]
chosen nodes passT_rates [0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666]
probs are [0.9963830876516278, 0.9945135777848164, 0.9937114352788596, 0.9931034545386167, 0.9843823800532715, 0.980141587107234, 0.9642286897990371, 0.9629875645036149, 0.9624471947360816, 0.9593578083786274]

begin to generate solutions for cir 10 with 10 sequences.
total input length is torch.Size([1, 1410])
total input length is torch.Size([1, 1069])
total input length is torch.Size([1, 1077])
total input length is torch.Size([1, 1109])
total input length is torch.Size([1, 1091])
total input length is torch.Size([1, 1262])
total input length is torch.Size([1, 1070])
total input length is torch.Size([1, 1189])
total input length is torch.Size([1, 1171])
total input length is torch.Size([1, 1077])
run solution time is 0.32114959160486856 mins, choose solution time is 5.733966827392578e-06 mins, model inference time is 4.445681802431742 mins.
average output length is 1590.49, every token time is 0.16770989461843316 s.
check program : 
def strange_sort_list(lst):
    tmp = lst[0]
    lst[0] = lst[-1]
    lst[-1] = tmp
    if (len(lst) >= 2):
        tmp = lst[1]
        lst[1] = lst[-2]
        lst[-2] = tmp
        tmp = lst[2]
        lst[2] = lst[-3]
        lst[-3] = tmp
        if (len(lst) >= 3):
            tmp = lst[3]
            lst[3] = lst[-4]
            lst[-4] = tmp
    return lst

task:HumanEval/70, cir:10, gened 100 solutions, total nodes:100, total unique nodes:88, chosen nodes:10, left nodes:78
chosen nodes idx is [817, 826, 837, 844, 858, 835, 847, 813, 816, 877]
chosen nodes's parent's idx is [717, 726, 737, 744, 735, 737, 744, 717, 717, 747]
chosen nodes passT_rates [0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666]
probs are [0.9963830876516278, 0.9945135777848164, 0.9937114352788596, 0.9931034545386167, 0.9880073268071501, 0.9843823800532715, 0.9642286897990371, 0.9629875645036149, 0.9624471947360816, 0.9578907213913295]

Use prompt_tests.
get solution for task : HumanEval/71 with 2 tests.
Model inference time is 0.26470212936401366 minutes
In generate step, the input tokens shape is 723, the output tokens shape is 1235
++++++++++++++++++++++++++solution++++++++++++++++++++++++++
    if a + b > c:
        return a * b / (2 * c)
    elif a + c > b:
        return b * c / (2 * a)
    elif b + c > a:
        return c * a / (2 * b)
    else:
        return -1

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
=====start code===========
def triangle_area(a, b, c):

fix input length is torch.Size([1, 768])
check program : 
def triangle_area(a, b, c):
    if a + b > c:
        return a * b / (2 * c)
    elif a + c > b:
        return b * c / (2 * a)
    elif b + c > a:
        return c * a / (2 * b)
    else:
        return -1

task:HumanEval/71, cir:0, gened 1 solutions, total nodes:1, total unique nodes:1, chosen nodes:1, left nodes:0
chosen nodes idx is [0]
chosen nodes's parent's idx is []
chosen nodes passT_rates [0.0]
probs are [-1.0]

begin to generate solutions for cir 1 with 10 sequences.
total input length is torch.Size([1, 979])
run solution time is 0.002890988190968831 mins, choose solution time is 7.081031799316406e-06 mins, model inference time is 0.4085166295369466 mins.
average output length is 1491.0, every token time is 0.01643930194683318 s.
check program : 
def triangle_area(a, b, c):
    if a * b > c and a * c > b and b * c > a:
        return (a * b - c) / 2
    else:
        return -1
    return a * b * c / 6

task:HumanEval/71, cir:1, gened 10 solutions, total nodes:10, total unique nodes:8, chosen nodes:8, left nodes:0
chosen nodes idx is [1, 5, 9, 10, 8, 4, 2, 7]
chosen nodes's parent's idx is [0, 0, 0, 0, 0, 0, 0, 0]
chosen nodes passT_rates [0.5, 0.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
probs are [0.9055380409718261, 0.8956203136021562, 0.9229650263276263, 0.9211182482647003, 0.9043543172883827, 0.9033010253201177, 0.8788321715023374, 0.8083581431357418]

begin to generate solutions for cir 2 with 10 sequences.
total input length is torch.Size([1, 956])
total input length is torch.Size([1, 978])
total input length is torch.Size([1, 926])
total input length is torch.Size([1, 1010])
total input length is torch.Size([1, 1325])
total input length is torch.Size([1, 922])
total input length is torch.Size([1, 979])
total input length is torch.Size([1, 1104])
run solution time is 0.030550511678059895 mins, choose solution time is 1.0291735331217447e-06 mins, model inference time is 3.3379083911577863 mins.
average output length is 1519.6375, every token time is 0.13179097389480815 s.
check program : 
def triangle_area(a, b, c):
    if a * b > c and a * c > b and b * c > a:
        return (a * b - c) / 2
    else:
        return -1
    return a * b * c / 6

task:HumanEval/71, cir:2, gened 80 solutions, total nodes:80, total unique nodes:63, chosen nodes:10, left nodes:53
chosen nodes idx is [28, 17, 25, 22, 41, 45, 11, 13, 23, 59]
chosen nodes's parent's idx is [5, 1, 5, 5, 10, 10, 1, 1, 5, 8]
chosen nodes passT_rates [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.0]
probs are [0.9331272654767946, 0.9142438466953213, 0.8911622190927032, 0.8819986628248612, 0.8744017277476444, 0.8700029585810886, 0.8524273236531839, 0.8472473051137493, 0.8233081671274773, 0.9915498049480295]

begin to generate solutions for cir 3 with 10 sequences.
total input length is torch.Size([1, 1011])
total input length is torch.Size([1, 951])
total input length is torch.Size([1, 978])
total input length is torch.Size([1, 997])
total input length is torch.Size([1, 991])
total input length is torch.Size([1, 981])
total input length is torch.Size([1, 956])
total input length is torch.Size([1, 974])
total input length is torch.Size([1, 1034])
total input length is torch.Size([1, 1324])
run solution time is 0.24563997586568195 mins, choose solution time is 5.014737447102865e-06 mins, model inference time is 4.163116459051768 mins.
average output length is 1479.44, every token time is 0.16883887817504722 s.
check program : 
def triangle_area(a, b, c):
    if a * b > c and a * c > b and b * c > a:
        return (a * (b * b) / (2 * a) + b * (c * c) / (2 * b) + c * (a * a) / (2 * c))
    else:
        return -1

task:HumanEval/71, cir:3, gened 100 solutions, total nodes:100, total unique nodes:74, chosen nodes:10, left nodes:64
chosen nodes idx is [131, 175, 174, 94, 187, 124, 123, 177, 106, 135]
chosen nodes's parent's idx is [41, 23, 23, 28, 59, 22, 22, 23, 17, 41]
chosen nodes passT_rates [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5]
probs are [0.9908913121481608, 0.9802370681335244, 0.9790939302027444, 0.9786206298695794, 0.9779014283015977, 0.9693900932704086, 0.9661205992454225, 0.9622071292295079, 0.9486055482295914, 0.9448120609473099]

begin to generate solutions for cir 4 with 10 sequences.
total input length is torch.Size([1, 991])
total input length is torch.Size([1, 1080])
total input length is torch.Size([1, 1034])
total input length is torch.Size([1, 1044])
total input length is torch.Size([1, 1367])
total input length is torch.Size([1, 981])
total input length is torch.Size([1, 1049])
total input length is torch.Size([1, 1028])
total input length is torch.Size([1, 951])
total input length is torch.Size([1, 1066])
run solution time is 0.31751893361409506 mins, choose solution time is 5.543231964111328e-06 mins, model inference time is 4.248263676961263 mins.
average output length is 1501.2, every token time is 0.1697947273500881 s.
check program : 
def triangle_area(a, b, c):
    if a * b > c and a * c > b and b * c > a:
        return a * b * (2 / c)
    elif a * c > b and a * b > c and b * c > a:
        return b * c * (2 / a)
    else:
        return -1

task:HumanEval/71, cir:4, gened 100 solutions, total nodes:100, total unique nodes:83, chosen nodes:10, left nodes:73
chosen nodes idx is [205, 214, 232, 191, 216, 244, 228, 253, 215, 254]
chosen nodes's parent's idx is [175, 174, 187, 131, 174, 124, 94, 123, 174, 123]
chosen nodes passT_rates [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5]
probs are [0.9947920101381528, 0.993324090386747, 0.9919370940354011, 0.9908913121481608, 0.9906567969931821, 0.9903652005409848, 0.9895844578182228, 0.9879964149364064, 0.9845031440720755, 0.9765054861837899]

begin to generate solutions for cir 5 with 10 sequences.
total input length is torch.Size([1, 1080])
total input length is torch.Size([1, 1034])
total input length is torch.Size([1, 1367])
total input length is torch.Size([1, 991])
total input length is torch.Size([1, 1011])
total input length is torch.Size([1, 981])
total input length is torch.Size([1, 1038])
total input length is torch.Size([1, 1049])
total input length is torch.Size([1, 1080])
total input length is torch.Size([1, 981])
run solution time is 0.305914843082428 mins, choose solution time is 4.9591064453125e-06 mins, model inference time is 4.252101576328277 mins.
average output length is 1507.26, every token time is 0.169264822267033 s.
check program : 
def triangle_area(a, b, c):
    if a * b > c and a >= b and a >= c:
        return a * b / (2 * c)
    elif a >= b and a >= c:
        return b * c / (2 * a)
    elif a >= b and a >= c:
        return a * b / (2 * c)
    elif a >= c and b >= c:
        return b * c / (2 * a)
    elif a >= b and c >= c:
        return a * b / (2 * c)
    elif a >= c and b >= c:
        return b * c / (2 * a)
    elif a >= b and a >= c:
        return b * c / (2 * a)
    elif a >= b and c >= c:
        return a * b / (2 * c)
    elif a >= c and b >= c:
        return b * c / (2 * a)
    elif a >= b and c >= c:
        return c * (b - a) / (2 * a)
    elif a >= b and b >= c:
        return a * (b - c) / (2 * a)
    elif a >= b and c >= c:
        return a * (c - b) / (2 * a)
    elif a >= b and b >= c:
        return b * (a - c) / (2 * b)
    elif a >= b and c >= c:
        return c * (b - a) / (2 * c)
    elif a >= b and a >= c:
        return b * c / (2 * a)
    elif a >= c and b >= c:
        return b * c / (2 * a)
    elif a >= c and a >= c:
        return a * b / (2 * c)
    elif a >= c and b >= c:
        return a * b / (2 * c)
    elif c == b:
        return (a - b) * (b ** 2 - c ** 2) / (4 * b)
    else:
        return -1

passn: 1.0
One node passed! Show it and it's parents.
++++++show parents of the node++++++
solution:
    if a * b > c and a * c > b and b * c > a:
        return a * b / 2
    elif a * c > b and b * c > a and b * a > c:
        return b * c / 2
    elif b * a > c and c * a > b and c * b > a:
        return c * a / 2
    elif c * b > a and a * b > c and a * c > b:
        return a * b / 2
    elif b * c > a and a * b > c and b * c > a:
        return b * c / 2
    elif c * a > b and b * a > c and c * b > a:
        return c * a / 2
    elif a * b + a * c > b * c + c * a:
        return 0
    else:
        return -1
def my_is_prime(number):
    is_prime = True
    for i in range(2,number):
        if number % i == 0:
            is_prime = False
            break
    return is_prime
def my_is_prime(number):
    is_prime = True
    for i in range(2,number):
        if number % i == 0:
            is_prime = False
            break
    return is_prime

passT_rate:1.0
prob:0.9389581475976643

************************
++++++show parents of the node++++++
solution:
    if a + b > c:
        return a * b / 2
    if a + c > b:
        return b * c / 2
    if b + c > a:
        return c * a / 2
    if a + b + c == 0:
        return 0
    return -1

passT_rate:0.5
prob:0.9765054861837899

************************
++++++show parents of the node++++++
solution:
    if a == b and b == c:
        return a * b / 2
    elif a == b and c == a:
        return b * c / 2
    elif a == c and b == a:
        return b * a / 2
    elif a == c and c == b:
        return a * c / 2
    elif b == c and a == c:
        return a * c / 2
    elif b == c and b == a:
        return c * a / 2
    elif b == a and c == b:
        return b * a / 2
    else:
        return -1

passT_rate:0.5
prob:0.9661205992454225

************************
++++++show parents of the node++++++
solution:
    if a == b or b == c:
        return a * b / 2
    elif a == c or b == c:
        return b * c / 2
    elif b == c:
        return (a * c) / (2 * b)
    elif a == c or a == b or b == c:
        return a * b / (2 * c)
    else:
        return -1

passT_rate:0.5
prob:0.8819986628248612

************************
++++++show parents of the node++++++
solution:
    if a >= b and b >= c:
        return a * b / (2 * c)
    elif a >= c and b >= c:
        return b * c / (2 * a)
    elif a >= b and a >= c:
        return a * b / (2 * c)
    else:
        return -1

passT_rate:0.5
prob:0.8956203136021562

************************
++++++show parents of the node++++++
solution:
    if a + b > c:
        return a * b / (2 * c)
    elif a + c > b:
        return b * c / (2 * a)
    elif b + c > a:
        return c * a / (2 * b)
    else:
        return -1

passT_rate:0.0
prob:-1.0

************************
task:HumanEval/71, cir:5, gened 100 solutions, total nodes:100, total unique nodes:82, chosen nodes:10, left nodes:72
chosen nodes idx is [381, 295, 304, 375, 312, 321, 306, 344, 356, 378]
chosen nodes's parent's idx is [254, 205, 214, 215, 232, 191, 214, 244, 228, 215]
chosen nodes passT_rates [1.0, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5]
probs are [0.9389581475976643, 0.9947920101381528, 0.993324090386747, 0.9924729950723229, 0.9919370940354011, 0.9908913121481608, 0.9906567969931821, 0.9903652005409848, 0.9891411061986061, 0.9886457217788747]

Use prompt_tests.
get solution for task : HumanEval/72 with 4 tests.
Model inference time is 0.26475781202316284 minutes
In generate step, the input tokens shape is 893, the output tokens shape is 1405
++++++++++++++++++++++++++solution++++++++++++++++++++++++++
    if len(q) == 1:
        return True
    elif len(q) == 2:
        return q[0] + q[1] <= w
    elif len(q) == 3:
        return q[0] + q[1] + q[2] <= w
    else:
        return False

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
=====start code===========
def will_it_fly(q,w):

fix input length is torch.Size([1, 938])
check program : 
def will_it_fly(q,w):
    if len(q) == 1:
        return True
    elif len(q) == 2:
        return q[0] + q[1] <= w
    elif len(q) == 3:
        return q[0] + q[1] + q[2] <= w
    else:
        return False

task:HumanEval/72, cir:0, gened 1 solutions, total nodes:1, total unique nodes:1, chosen nodes:1, left nodes:0
chosen nodes idx is [0]
chosen nodes's parent's idx is []
chosen nodes passT_rates [0.75]
probs are [-1.0]

begin to generate solutions for cir 1 with 10 sequences.
total input length is torch.Size([1, 1246])
run solution time is 0.0029905120531717936 mins, choose solution time is 7.0730845133463544e-06 mins, model inference time is 0.4628007332483927 mins.
average output length is 1758.0, every token time is 0.015795247817880328 s.
check program : 
def will_it_fly(q,w):
    if len(q) == 0:
        return True
    elif len(q) == 1:
        return q[0] < w
    elif len(q) == 2:
        return q[0] + q[1] < w
    elif len(q) == 3:
        return q[0] + q[1] + q[2] < w
    else:
        return False

task:HumanEval/72, cir:1, gened 10 solutions, total nodes:10, total unique nodes:9, chosen nodes:9, left nodes:0
chosen nodes idx is [7, 1, 5, 9, 2, 6, 3, 8, 10]
chosen nodes's parent's idx is [0, 0, 0, 0, 0, 0, 0, 0, 0]
chosen nodes passT_rates [0.75, 0.75, 0.75, 0.75, 0.75, 0.5, 0.5, 0.0, 0.0]
probs are [0.9482131915167302, 0.9452090544121826, 0.9305783049021223, 0.9109596726315965, 0.9097977836257035, 0.9261544987192174, 0.811420590788495, 0.9772381664408855, 0.9137271813406461]

begin to generate solutions for cir 2 with 10 sequences.
total input length is torch.Size([1, 1251])
total input length is torch.Size([1, 1266])
total input length is torch.Size([1, 1251])
total input length is torch.Size([1, 1272])
total input length is torch.Size([1, 1246])
total input length is torch.Size([1, 1293])
total input length is torch.Size([1, 1213])
total input length is torch.Size([1, 1145])
total input length is torch.Size([1, 1194])
run solution time is 0.029480791091918944 mins, choose solution time is 1.0927518208821614e-06 mins, model inference time is 4.153343053658803 mins.
average output length is 1714.5333333333333, every token time is 0.14534601370555375 s.
check program : 
def will_it_fly(q,w):
    if len(q) == 0:
        return True
    elif len(q) == 1:
        return q[0] < w
    elif len(q) == 2:
        return q[0] + q[1] < w
    elif len(q) == 3:
        return q[0] + q[1] + q[2] < w
    else:
        return False

task:HumanEval/72, cir:2, gened 90 solutions, total nodes:90, total unique nodes:71, chosen nodes:10, left nodes:61
chosen nodes idx is [44, 33, 27, 14, 37, 41, 90, 47, 11, 28]
chosen nodes's parent's idx is [9, 5, 1, 7, 5, 9, 8, 9, 7, 1]
chosen nodes passT_rates [0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75]
probs are [0.99576198574354, 0.9919448390790699, 0.9580295452909383, 0.9565383482268259, 0.9477626155912027, 0.947013232088642, 0.9468303804149057, 0.9440833714992463, 0.9440438540794287, 0.9439150571634093]

begin to generate solutions for cir 3 with 10 sequences.
total input length is torch.Size([1, 1272])
total input length is torch.Size([1, 1290])
total input length is torch.Size([1, 1305])
total input length is torch.Size([1, 1328])
total input length is torch.Size([1, 1248])
total input length is torch.Size([1, 1332])
total input length is torch.Size([1, 1233])
total input length is torch.Size([1, 1248])
total input length is torch.Size([1, 1266])
total input length is torch.Size([1, 1292])
run solution time is 0.27730799118677774 mins, choose solution time is 5.257129669189453e-06 mins, model inference time is 4.6996217489242555 mins.
average output length is 1727.04, every token time is 0.1632720180931236 s.
check program : 
def will_it_fly(q,w):
    if len(q) == 0:
        return True
    elif len(q) == 1:
        return q[0] < w or (q[0] == w and len(q) == 1)
    elif len(q) == 2:
        return q[0] + q[1] <= w or (q[0] + q[1] == w and len(q) == 2)
    elif len(q) == 3:
        return q[0] + q[1] + q[2] <= w or (q[0] + q[1] + q[2] == w and len(q) == 3)
    else:
        return False

task:HumanEval/72, cir:3, gened 100 solutions, total nodes:100, total unique nodes:83, chosen nodes:10, left nodes:73
chosen nodes idx is [104, 124, 112, 155, 122, 197, 164, 135, 192, 156]
chosen nodes's parent's idx is [44, 27, 33, 41, 27, 28, 90, 14, 28, 41]
chosen nodes passT_rates [0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75]
probs are [0.99576198574354, 0.993173494108877, 0.9913956149681429, 0.990953310815658, 0.9894286322986215, 0.986416156985188, 0.981400562224241, 0.9778259451981779, 0.9709054238472711, 0.9706149892681366]

begin to generate solutions for cir 4 with 10 sequences.
total input length is torch.Size([1, 1272])
total input length is torch.Size([1, 1309])
total input length is torch.Size([1, 1290])
total input length is torch.Size([1, 1399])
total input length is torch.Size([1, 1312])
total input length is torch.Size([1, 1330])
total input length is torch.Size([1, 1301])
total input length is torch.Size([1, 1327])
total input length is torch.Size([1, 1327])
total input length is torch.Size([1, 1336])
run solution time is 0.3093274315198263 mins, choose solution time is 7.359186808268229e-06 mins, model inference time is 4.786724857489268 mins.
average output length is 1782.15, every token time is 0.16115562290306915 s.
check program : 
def will_it_fly(q,w):
    if len(q) == 0:
        return True
    elif len(q) == 1:
        return q[0] < w or (q[0] == w and len(q) == 1)
    elif len(q) == 2:
        return q[0] + q[1] <= w or (q[0] + q[1] == w and len(q) == 2)
    elif len(q) == 3:
        return q[0] + q[1] + q[2] <= w or (q[0] + q[1] + q[2] == w and len(q) == 3)
    else:
        return False

task:HumanEval/72, cir:4, gened 100 solutions, total nodes:100, total unique nodes:88, chosen nodes:10, left nodes:78
chosen nodes idx is [204, 292, 252, 222, 212, 237, 275, 267, 282, 294]
chosen nodes's parent's idx is [104, 156, 197, 112, 124, 155, 135, 164, 192, 156]
chosen nodes passT_rates [0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75]
probs are [0.99576198574354, 0.9942495083940792, 0.9920155206213607, 0.9913956149681429, 0.9895528933818861, 0.9849236273534904, 0.9814608356891851, 0.9770926736974992, 0.9688237636385602, 0.9674844916921873]

begin to generate solutions for cir 5 with 10 sequences.
total input length is torch.Size([1, 1272])
total input length is torch.Size([1, 1336])
total input length is torch.Size([1, 1336])
total input length is torch.Size([1, 1290])
total input length is torch.Size([1, 1312])
total input length is torch.Size([1, 1479])
total input length is torch.Size([1, 1327])
total input length is torch.Size([1, 1332])
total input length is torch.Size([1, 1327])
total input length is torch.Size([1, 1270])
run solution time is 0.3130265394846598 mins, choose solution time is 6.258487701416016e-06 mins, model inference time is 4.79928150177002 mins.
average output length is 1780.31, every token time is 0.1617453657023495 s.
check program : 
def will_it_fly(q,w):
    if len(q) == 0:
        return True
    elif len(q) == 1:
        return q[0] < w or (q[0] == w and len(q) == 1)
    elif len(q) == 2:
        return q[0] + q[1] <= w or (q[0] + q[1] == w and len(q) == 2)
    elif len(q) == 3:
        return q[0] + q[1] + q[2] <= w or (q[0] + q[1] + q[2] == w and len(q) == 3)
    else:
        return False

task:HumanEval/72, cir:5, gened 100 solutions, total nodes:100, total unique nodes:89, chosen nodes:10, left nodes:79
chosen nodes idx is [357, 304, 312, 322, 332, 355, 327, 353, 324, 365]
chosen nodes's parent's idx is [237, 204, 292, 252, 222, 237, 252, 237, 252, 275]
chosen nodes passT_rates [0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75]
probs are [0.99642614189321, 0.99576198574354, 0.9942495083940792, 0.9942094259371771, 0.9913956149681429, 0.9912465902998966, 0.9908837938928006, 0.9860439192901768, 0.9841062237658282, 0.9814608356891851]

begin to generate solutions for cir 6 with 10 sequences.
total input length is torch.Size([1, 1479])
total input length is torch.Size([1, 1272])
total input length is torch.Size([1, 1336])
total input length is torch.Size([1, 1336])
total input length is torch.Size([1, 1290])
total input length is torch.Size([1, 1463])
total input length is torch.Size([1, 1439])
total input length is torch.Size([1, 1317])
total input length is torch.Size([1, 1340])
total input length is torch.Size([1, 1327])
run solution time is 0.31004764238993326 mins, choose solution time is 7.335344950358073e-06 mins, model inference time is 4.869954597949982 mins.
average output length is 1815.43, every token time is 0.160952103921807 s.
check program : 
def will_it_fly(q,w):
    if (len(q)==0):
        return True
    elif (len(q)==1):
        return q[0] < w or (q[0] == w and len(q) == 1)
    elif (len(q)==2):
        return q[0] + q[1] <= w or (q[0] + q[1] == w and len(q) == 2)
    elif (len(q)==3):
        return q[0] + q[1] + q[2] <= w or (q[0] + q[1] + q[2] == w and len(q) == 3)
    elif (len(q)==4):
        return q[0] + q[1] + q[2] + q[3] == w or (q[0] + q[1] + q[2] + q[3] == w and len(q) == 4)
    else:
        return False

task:HumanEval/72, cir:6, gened 100 solutions, total nodes:100, total unique nodes:86, chosen nodes:10, left nodes:76
chosen nodes idx is [407, 414, 422, 432, 472, 442, 405, 437, 474, 403]
chosen nodes's parent's idx is [357, 304, 312, 322, 353, 332, 357, 322, 353, 357]
chosen nodes passT_rates [0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75]
probs are [0.99642614189321, 0.99576198574354, 0.9942495083940792, 0.9942094259371771, 0.9914353182951899, 0.9913956149681429, 0.9912465902998966, 0.9908837938928006, 0.9895280773867616, 0.9860439192901768]

begin to generate solutions for cir 7 with 10 sequences.
total input length is torch.Size([1, 1479])
total input length is torch.Size([1, 1272])
total input length is torch.Size([1, 1336])
total input length is torch.Size([1, 1336])
total input length is torch.Size([1, 1322])
total input length is torch.Size([1, 1290])
total input length is torch.Size([1, 1463])
total input length is torch.Size([1, 1439])
total input length is torch.Size([1, 1330])
total input length is torch.Size([1, 1317])
run solution time is 0.30759467283884684 mins, choose solution time is 7.41879145304362e-06 mins, model inference time is 4.865017580986023 mins.
average output length is 1804.63, every token time is 0.16175119321569278 s.
check program : 
def will_it_fly(q,w):
    if (len(q)==0):
        return True
    elif (len(q)==1):
        return q[0] < w or (q[0] == w and len(q) == 1)
    elif (len(q)==2):
        return q[0] + q[1] <= w or (q[0] + q[1] == w and len(q) == 2)
    elif (len(q)==3):
        return q[0] + q[1] + q[2] <= w or (q[0] + q[1] + q[2] == w and len(q) == 3)
    elif (len(q)==4):
        return q[0] + q[1] + q[2] + q[3] == w or (q[0] + q[1] + q[2] + q[3] == w and len(q) == 4)
    else:
        return False

task:HumanEval/72, cir:7, gened 100 solutions, total nodes:100, total unique nodes:79, chosen nodes:10, left nodes:69
chosen nodes idx is [507, 514, 584, 522, 532, 542, 552, 505, 537, 503]
chosen nodes's parent's idx is [407, 414, 474, 422, 432, 472, 442, 407, 432, 407]
chosen nodes passT_rates [0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75]
probs are [0.99642614189321, 0.99576198574354, 0.9957522807002754, 0.9942495083940792, 0.9942094259371771, 0.99360163139829, 0.9913956149681429, 0.9912465902998966, 0.9908837938928006, 0.9860439192901768]

begin to generate solutions for cir 8 with 10 sequences.
total input length is torch.Size([1, 1479])
total input length is torch.Size([1, 1272])
total input length is torch.Size([1, 1330])
total input length is torch.Size([1, 1336])
total input length is torch.Size([1, 1336])
total input length is torch.Size([1, 1322])
total input length is torch.Size([1, 1290])
total input length is torch.Size([1, 1463])
total input length is torch.Size([1, 1439])
total input length is torch.Size([1, 1317])
run solution time is 0.3122763991355896 mins, choose solution time is 7.061163584391276e-06 mins, model inference time is 4.865168678760528 mins.
average output length is 1804.63, every token time is 0.16175621754675412 s.
check program : 
def will_it_fly(q,w):
    if (len(q)==0):
        return True
    elif (len(q)==1):
        return q[0] < w or (q[0] == w and len(q) == 1)
    elif (len(q)==2):
        return q[0] + q[1] <= w or (q[0] + q[1] == w and len(q) == 2)
    elif (len(q)==3):
        return q[0] + q[1] + q[2] <= w or (q[0] + q[1] + q[2] == w and len(q) == 3)
    elif (len(q)==4):
        return q[0] + q[1] + q[2] + q[3] == w or (q[0] + q[1] + q[2] + q[3] == w and len(q) == 4)
    else:
        return False

task:HumanEval/72, cir:8, gened 100 solutions, total nodes:100, total unique nodes:79, chosen nodes:10, left nodes:69
chosen nodes idx is [607, 614, 624, 632, 642, 652, 662, 605, 647, 603]
chosen nodes's parent's idx is [507, 514, 584, 522, 532, 542, 552, 507, 532, 507]
chosen nodes passT_rates [0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75]
probs are [0.99642614189321, 0.99576198574354, 0.9957522807002754, 0.9942495083940792, 0.9942094259371771, 0.99360163139829, 0.9913956149681429, 0.9912465902998966, 0.9908837938928006, 0.9860439192901768]

begin to generate solutions for cir 9 with 10 sequences.
total input length is torch.Size([1, 1479])
total input length is torch.Size([1, 1272])
total input length is torch.Size([1, 1330])
total input length is torch.Size([1, 1336])
total input length is torch.Size([1, 1336])
total input length is torch.Size([1, 1322])
total input length is torch.Size([1, 1290])
total input length is torch.Size([1, 1463])
total input length is torch.Size([1, 1439])
total input length is torch.Size([1, 1317])
run solution time is 0.3101848562558492 mins, choose solution time is 5.610783894856771e-06 mins, model inference time is 4.864138106505076 mins.
average output length is 1804.63, every token time is 0.16172197401560912 s.
check program : 
def will_it_fly(q,w):
    if (len(q)==0):
        return True
    elif (len(q)==1):
        return q[0] < w or (q[0] == w and len(q) == 1)
    elif (len(q)==2):
        return q[0] + q[1] <= w or (q[0] + q[1] == w and len(q) == 2)
    elif (len(q)==3):
        return q[0] + q[1] + q[2] <= w or (q[0] + q[1] + q[2] == w and len(q) == 3)
    elif (len(q)==4):
        return q[0] + q[1] + q[2] + q[3] == w or (q[0] + q[1] + q[2] + q[3] == w and len(q) == 4)
    else:
        return False

task:HumanEval/72, cir:9, gened 100 solutions, total nodes:100, total unique nodes:79, chosen nodes:10, left nodes:69
chosen nodes idx is [707, 714, 724, 732, 742, 752, 762, 705, 747, 703]
chosen nodes's parent's idx is [607, 614, 624, 632, 642, 652, 662, 607, 642, 607]
chosen nodes passT_rates [0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75]
probs are [0.99642614189321, 0.99576198574354, 0.9957522807002754, 0.9942495083940792, 0.9942094259371771, 0.99360163139829, 0.9913956149681429, 0.9912465902998966, 0.9908837938928006, 0.9860439192901768]

begin to generate solutions for cir 10 with 10 sequences.
total input length is torch.Size([1, 1479])
total input length is torch.Size([1, 1272])
total input length is torch.Size([1, 1330])
total input length is torch.Size([1, 1336])
total input length is torch.Size([1, 1336])
total input length is torch.Size([1, 1322])
total input length is torch.Size([1, 1290])
total input length is torch.Size([1, 1463])
total input length is torch.Size([1, 1439])
total input length is torch.Size([1, 1317])
run solution time is 0.3090004285176595 mins, choose solution time is 8.018811543782552e-06 mins, model inference time is 4.865005819002787 mins.
average output length is 1804.63, every token time is 0.1617508025518235 s.
check program : 
def will_it_fly(q,w):
    if (len(q)==0):
        return True
    elif (len(q)==1):
        return q[0] < w or (q[0] == w and len(q) == 1)
    elif (len(q)==2):
        return q[0] + q[1] <= w or (q[0] + q[1] == w and len(q) == 2)
    elif (len(q)==3):
        return q[0] + q[1] + q[2] <= w or (q[0] + q[1] + q[2] == w and len(q) == 3)
    elif (len(q)==4):
        return q[0] + q[1] + q[2] + q[3] == w or (q[0] + q[1] + q[2] + q[3] == w and len(q) == 4)
    else:
        return False

task:HumanEval/72, cir:10, gened 100 solutions, total nodes:100, total unique nodes:79, chosen nodes:10, left nodes:69
chosen nodes idx is [807, 814, 824, 832, 842, 852, 862, 805, 847, 803]
chosen nodes's parent's idx is [707, 714, 724, 732, 742, 752, 762, 707, 742, 707]
chosen nodes passT_rates [0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75]
probs are [0.99642614189321, 0.99576198574354, 0.9957522807002754, 0.9942495083940792, 0.9942094259371771, 0.99360163139829, 0.9913956149681429, 0.9912465902998966, 0.9908837938928006, 0.9860439192901768]

Use prompt_tests.
get solution for task : HumanEval/73 with 3 tests.
Model inference time is 0.2652045289675395 minutes
In generate step, the input tokens shape is 794, the output tokens shape is 1306
++++++++++++++++++++++++++solution++++++++++++++++++++++++++
    arr.sort()
    return arr[0]

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
=====start code===========
def smallest_change(arr):

fix input length is torch.Size([1, 835])
check program : 
def smallest_change(arr):
    arr.sort()
    return arr[0]

task:HumanEval/73, cir:0, gened 1 solutions, total nodes:1, total unique nodes:1, chosen nodes:1, left nodes:0
chosen nodes idx is [0]
chosen nodes's parent's idx is []
chosen nodes passT_rates [0.3333333333333333]
probs are [-1.0]

begin to generate solutions for cir 1 with 10 sequences.
total input length is torch.Size([1, 1072])
run solution time is 0.003124129772186279 mins, choose solution time is 8.598963419596355e-06 mins, model inference time is 0.4264726996421814 mins.
average output length is 1584.0, every token time is 0.016154269828940884 s.
check program : 
def smallest_change(arr):
    arr.sort()
    i = 0
    while i < len(arr) - 1:
        if (arr[i] == arr[i + 1]) :
            i+=1
        elif arr[i] == arr[i + 1] + 1 :
            arr[i] = arr[i] - 1
            arr[i + 1] = arr[i] + 1
            arr[i + 2] = arr[i + 1]
            i+=2
        else:
            break
    return i

task:HumanEval/73, cir:1, gened 10 solutions, total nodes:10, total unique nodes:10, chosen nodes:10, left nodes:0
chosen nodes idx is [10, 8, 3, 4, 9, 7, 2, 6, 5, 1]
chosen nodes's parent's idx is [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
chosen nodes passT_rates [0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.0, 0.0, 0.0, 0.0, 0.0]
probs are [0.9514341739957398, 0.9364360010716373, 0.8988759329743399, 0.8908103331187998, 0.7122730579927691, 0.902467821649126, 0.878660481073678, 0.8773911760742736, 0.7958374975511141, 0.7882052704682834]

begin to generate solutions for cir 2 with 10 sequences.
total input length is torch.Size([1, 1146])
total input length is torch.Size([1, 1086])
total input length is torch.Size([1, 1072])
total input length is torch.Size([1, 1074])
total input length is torch.Size([1, 1089])
total input length is torch.Size([1, 1171])
total input length is torch.Size([1, 1144])
total input length is torch.Size([1, 1077])
total input length is torch.Size([1, 1082])
total input length is torch.Size([1, 1191])
run solution time is 0.03013361692428589 mins, choose solution time is 1.4146169026692709e-06 mins, model inference time is 4.358219540119171 mins.
average output length is 1583.89, every token time is 0.165095540414165 s.
check program : 
def smallest_change(arr):
    arr = sorted(arr)
    min_val = arr[0]
    i = 1
    for i in range(len(arr)):
        if arr[i] == min_val:
            return i
        if arr[i] != arr[i - 1]:
            return i
        min_val = arr[i]
    arr = sorted(arr)
    min_val = arr[0]
    i = 1
    for i in range(len(arr)):
        if arr[i] == min_val:
            return i
        if arr[i] != arr[i - 1]:
            return i
        min_val = arr[i]
    arr = sorted(arr)
    min_val = arr[0]
    i = 1
    for i in range(len(arr)):
        if arr[i] == min_val:
            return i
        if arr[i] != arr[i - 1]:
            return i
        min_val = arr[i]
    arr = sorted(arr)
    min_val = arr[0]
    i = 1
    for i in range(len(arr)):
        if arr[i] == min_val:
            return i
        if arr[i] != arr[i - 1]:
            return i
        min_val = arr[i]
    arr = sorted(arr)
    min_val = arr[0]
    i = 1
    for i in range(len(arr)):
        if arr[i] == min_val:
            return i
        if arr[i] != arr[i - 1]:
            return i
        min_val = arr[i]

task:HumanEval/73, cir:2, gened 100 solutions, total nodes:100, total unique nodes:77, chosen nodes:10, left nodes:67
chosen nodes idx is [21, 11, 87, 104, 24, 48, 62, 16, 94, 23]
chosen nodes's parent's idx is [8, 10, 6, 1, 8, 4, 7, 10, 5, 8]
chosen nodes passT_rates [0.6666666666666666, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333]
probs are [0.8663549880247856, 0.9875413945867768, 0.9842157963244508, 0.9838440576080135, 0.9829587761478453, 0.9743646650092307, 0.9660971584302376, 0.9591752787054144, 0.9430972334864159, 0.9384347897210228]

begin to generate solutions for cir 3 with 10 sequences.
total input length is torch.Size([1, 1127])
total input length is torch.Size([1, 1459])
total input length is torch.Size([1, 1078])
total input length is torch.Size([1, 1204])
total input length is torch.Size([1, 1088])
total input length is torch.Size([1, 1079])
total input length is torch.Size([1, 1240])
total input length is torch.Size([1, 1146])
total input length is torch.Size([1, 1102])
total input length is torch.Size([1, 1128])
run solution time is 0.31982237497965493 mins, choose solution time is 6.373723347981771e-06 mins, model inference time is 4.464367739359537 mins.
average output length is 1636.0, every token time is 0.16372986906606585 s.
check program : 
def smallest_change(arr):
    arr.sort()
    i = 0
    while i < len(arr) - 1:
        if (arr[i] == arr[i + 1]) :
            arr[i] = arr[i] - arr[i + 1]
            return i
        i += 1

task:HumanEval/73, cir:3, gened 100 solutions, total nodes:100, total unique nodes:87, chosen nodes:10, left nodes:77
chosen nodes idx is [113, 111, 117, 116, 114, 119, 121, 137, 128, 181]
chosen nodes's parent's idx is [21, 21, 21, 21, 21, 21, 11, 87, 11, 16]
chosen nodes passT_rates [0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333]
probs are [0.9454376778807767, 0.9181994657137004, 0.9064822769485408, 0.9030625533312977, 0.8791290979473467, 0.869571337251907, 0.997372167586938, 0.9940572680938837, 0.9928875118887399, 0.9875413945867768]

begin to generate solutions for cir 4 with 10 sequences.
total input length is torch.Size([1, 1135])
total input length is torch.Size([1, 1127])
total input length is torch.Size([1, 1127])
total input length is torch.Size([1, 1179])
total input length is torch.Size([1, 1133])
total input length is torch.Size([1, 1109])
total input length is torch.Size([1, 1403])
total input length is torch.Size([1, 1078])
total input length is torch.Size([1, 1552])
total input length is torch.Size([1, 1459])
run solution time is 0.31777364015579224 mins, choose solution time is 7.200241088867187e-06 mins, model inference time is 4.6071873784065245 mins.
average output length is 1715.53, every token time is 0.16113460290813675 s.
check program : 
def smallest_change(arr):
    arr.sort()
    i = 0
    while i < len(arr) - 1:
        if (arr[i] == arr[i + 1]):
            arr[i] = arr[i] - arr[i + 1]
            return i
        i += 1
    return len(arr)

task:HumanEval/73, cir:4, gened 100 solutions, total nodes:100, total unique nodes:70, chosen nodes:10, left nodes:60
chosen nodes idx is [211, 266, 246, 256, 241, 243, 248, 247, 221, 254]
chosen nodes's parent's idx is [113, 119, 116, 114, 116, 116, 116, 116, 111, 114]
chosen nodes passT_rates [0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666]
probs are [0.9927428025168417, 0.9608181567642604, 0.9565956034436082, 0.9548557509767418, 0.9530895941713272, 0.9441911602168591, 0.9268190297636734, 0.9262113346685013, 0.9181994657137004, 0.9158319642597013]

begin to generate solutions for cir 5 with 10 sequences.
total input length is torch.Size([1, 1135])
total input length is torch.Size([1, 1114])
total input length is torch.Size([1, 1183])
total input length is torch.Size([1, 1133])
total input length is torch.Size([1, 1127])
total input length is torch.Size([1, 1135])
total input length is torch.Size([1, 1185])
total input length is torch.Size([1, 1173])
total input length is torch.Size([1, 1127])
total input length is torch.Size([1, 1225])
run solution time is 0.30527368783950803 mins, choose solution time is 5.499521891276042e-06 mins, model inference time is 4.450323235988617 mins.
average output length is 1606.88, every token time is 0.16617258000062848 s.
check program : 
def smallest_change(arr):
    arr.sort()
    i = 0
    while i < len(arr) - 1:
        if (arr[i] == arr[i + 1]):
            arr[i] = arr[i] - arr[i + 1]
            return i
        i += 1
    return len(arr)

task:HumanEval/73, cir:5, gened 100 solutions, total nodes:100, total unique nodes:71, chosen nodes:10, left nodes:61
chosen nodes idx is [341, 331, 405, 311, 376, 372, 329, 366, 404, 356]
chosen nodes's parent's idx is [256, 246, 254, 211, 248, 248, 266, 243, 254, 241]
chosen nodes passT_rates [0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666]
probs are [0.994961822850151, 0.9936232351739277, 0.9927947752939911, 0.9927428025168417, 0.9862206582778908, 0.9838491033961447, 0.9803965954445877, 0.9765871421502614, 0.971634339259802, 0.9648913640730823]

begin to generate solutions for cir 6 with 10 sequences.
total input length is torch.Size([1, 1133])
total input length is torch.Size([1, 1131])
total input length is torch.Size([1, 1241])
total input length is torch.Size([1, 1135])
total input length is torch.Size([1, 1191])
total input length is torch.Size([1, 1128])
total input length is torch.Size([1, 1187])
total input length is torch.Size([1, 1213])
total input length is torch.Size([1, 1225])
total input length is torch.Size([1, 1198])
run solution time is 0.31643407344818114 mins, choose solution time is 4.498163859049479e-06 mins, model inference time is 4.4981622894605 mins.
average output length is 1622.74, every token time is 0.16631730179899695 s.
check program : 
def smallest_change(arr):
    arr.sort()
    i = 0
    while i < len(arr) - 1:
        if (arr[i] == arr[i + 1]):
            arr[i] = arr[i] + arr[i + 1]
            return i
        i += 1
    return -1

task:HumanEval/73, cir:6, gened 100 solutions, total nodes:100, total unique nodes:78, chosen nodes:10, left nodes:68
chosen nodes idx is [411, 421, 474, 481, 495, 441, 451, 484, 454, 435]
chosen nodes's parent's idx is [341, 331, 329, 366, 404, 311, 376, 366, 376, 405]
chosen nodes passT_rates [0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666]
probs are [0.994961822850151, 0.9947429984036682, 0.994614759292247, 0.9939987625809578, 0.9927947752939911, 0.9927428025168417, 0.9915015173242104, 0.9906211623432338, 0.9892733381552276, 0.9883860889211101]

begin to generate solutions for cir 7 with 10 sequences.
total input length is torch.Size([1, 1133])
total input length is torch.Size([1, 1131])
total input length is torch.Size([1, 1130])
total input length is torch.Size([1, 1135])
total input length is torch.Size([1, 1241])
total input length is torch.Size([1, 1135])
total input length is torch.Size([1, 1169])
total input length is torch.Size([1, 1291])
total input length is torch.Size([1, 1139])
total input length is torch.Size([1, 1333])
run solution time is 0.3204720695813497 mins, choose solution time is 6.226698557535807e-06 mins, model inference time is 4.512380667527517 mins.
average output length is 1634.61, every token time is 0.1656314663787229 s.
check program : 
def smallest_change(arr):
    arr.sort()
    i = 0
    while i < len(arr) - 1:
        if (arr[i] == arr[i + 1]):
            arr[i] = arr[i] + arr[i + 1]
            return i
        i += 1
    return -1

task:HumanEval/73, cir:7, gened 100 solutions, total nodes:100, total unique nodes:74, chosen nodes:10, left nodes:64
chosen nodes idx is [511, 521, 571, 561, 541, 555, 572, 591, 576, 546]
chosen nodes's parent's idx is [411, 421, 451, 441, 481, 495, 451, 454, 451, 481]
chosen nodes passT_rates [0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666]
probs are [0.994961822850151, 0.9947429984036682, 0.9945867993867201, 0.9927428025168417, 0.9927336758874906, 0.9883860889211101, 0.9836252489382153, 0.9835936805992868, 0.9811054642254863, 0.9765871421502614]

begin to generate solutions for cir 8 with 10 sequences.
total input length is torch.Size([1, 1133])
total input length is torch.Size([1, 1131])
total input length is torch.Size([1, 1169])
total input length is torch.Size([1, 1135])
total input length is torch.Size([1, 1135])
total input length is torch.Size([1, 1333])
total input length is torch.Size([1, 1128])
total input length is torch.Size([1, 1143])
total input length is torch.Size([1, 1295])
total input length is torch.Size([1, 1213])
run solution time is 0.31619786024093627 mins, choose solution time is 4.605452219645182e-06 mins, model inference time is 4.507838348547618 mins.
average output length is 1629.27, every token time is 0.1660070501727172 s.
check program : 
def smallest_change(arr):
    arr.sort()
    i = 0
    while i < len(arr) - 1:
        if (arr[i] == arr[i + 1]):
            arr[i] = arr[i] + arr[i + 1]
            return i
        i += 1
    return -1

task:HumanEval/73, cir:8, gened 100 solutions, total nodes:100, total unique nodes:75, chosen nodes:10, left nodes:65
chosen nodes idx is [611, 621, 631, 681, 665, 641, 651, 704, 671, 632]
chosen nodes's parent's idx is [511, 521, 571, 591, 555, 561, 541, 546, 572, 571]
chosen nodes passT_rates [0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666]
probs are [0.994961822850151, 0.9947429984036682, 0.9945867993867201, 0.9929671997291291, 0.9928352842922321, 0.9927428025168417, 0.9927336758874906, 0.9906211623432338, 0.9843250231004428, 0.9836252489382153]

begin to generate solutions for cir 9 with 10 sequences.
total input length is torch.Size([1, 1133])
total input length is torch.Size([1, 1131])
total input length is torch.Size([1, 1169])
total input length is torch.Size([1, 1143])
total input length is torch.Size([1, 1333])
total input length is torch.Size([1, 1135])
total input length is torch.Size([1, 1135])
total input length is torch.Size([1, 1291])
total input length is torch.Size([1, 1143])
total input length is torch.Size([1, 1128])
run solution time is 0.31779672304789225 mins, choose solution time is 6.33398691813151e-06 mins, model inference time is 4.491962373256683 mins.
average output length is 1613.03, every token time is 0.1670878685090595 s.
check program : 
def smallest_change(arr):
    arr.sort()
    i = 0
    while i < len(arr) - 1:
        if (arr[i] == arr[i + 1]):
            arr[i] = arr[i] + arr[i + 1]
            return i
        i += 1
    return -1

task:HumanEval/73, cir:9, gened 100 solutions, total nodes:100, total unique nodes:74, chosen nodes:10, left nodes:64
chosen nodes idx is [711, 721, 731, 791, 741, 755, 761, 771, 792, 732]
chosen nodes's parent's idx is [611, 621, 631, 671, 681, 665, 641, 651, 671, 631]
chosen nodes passT_rates [0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666]
probs are [0.994961822850151, 0.9947429984036682, 0.9945867993867201, 0.9930888274303126, 0.9929671997291291, 0.9928352842922321, 0.9927428025168417, 0.9927336758874906, 0.9862830619514, 0.9836252489382153]

begin to generate solutions for cir 10 with 10 sequences.
total input length is torch.Size([1, 1133])
total input length is torch.Size([1, 1131])
total input length is torch.Size([1, 1169])
total input length is torch.Size([1, 1143])
total input length is torch.Size([1, 1143])
total input length is torch.Size([1, 1333])
total input length is torch.Size([1, 1135])
total input length is torch.Size([1, 1135])
total input length is torch.Size([1, 1141])
total input length is torch.Size([1, 1128])
run solution time is 0.314370075861613 mins, choose solution time is 5.467732747395833e-06 mins, model inference time is 4.460241858164469 mins.
average output length is 1597.14, every token time is 0.16755858258468867 s.
check program : 
def smallest_change(arr):
    arr.sort()
    i = 0
    while i < len(arr) - 1:
        if (arr[i] == arr[i + 1]):
            arr[i] = arr[i] + arr[i + 1]
            return i
        i += 1
    return -1

task:HumanEval/73, cir:10, gened 100 solutions, total nodes:100, total unique nodes:74, chosen nodes:10, left nodes:64
chosen nodes idx is [811, 821, 831, 841, 851, 865, 871, 881, 898, 842]
chosen nodes's parent's idx is [711, 721, 731, 791, 741, 755, 761, 771, 792, 791]
chosen nodes passT_rates [0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666]
probs are [0.994961822850151, 0.9947429984036682, 0.9945867993867201, 0.9930888274303126, 0.9929671997291291, 0.9928352842922321, 0.9927428025168417, 0.9927336758874906, 0.9886133574171634, 0.9862830619514]

Use prompt_tests.
get solution for task : HumanEval/74 with 5 tests.
Model inference time is 0.2651809493700663 minutes
In generate step, the input tokens shape is 900, the output tokens shape is 1412
++++++++++++++++++++++++++solution++++++++++++++++++++++++++
    if len(lst1) == len(lst2):
        return lst1
    elif len(lst1) < len(lst2):
        return lst1
    else:
        return lst2

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
=====start code===========
def total_match(lst1, lst2):

fix input length is torch.Size([1, 945])
check program : 
def total_match(lst1, lst2):
    if len(lst1) == len(lst2):
        return lst1
    elif len(lst1) < len(lst2):
        return lst1
    else:
        return lst2

task:HumanEval/74, cir:0, gened 1 solutions, total nodes:1, total unique nodes:1, chosen nodes:1, left nodes:0
chosen nodes idx is [0]
chosen nodes's parent's idx is []
chosen nodes passT_rates [0.6]
probs are [-1.0]

begin to generate solutions for cir 1 with 10 sequences.
total input length is torch.Size([1, 1333])
run solution time is 0.002987233797709147 mins, choose solution time is 7.243951161702474e-06 mins, model inference time is 0.4823791980743408 mins.
average output length is 1718.3, every token time is 0.016843830131509006 s.
check program : 
def total_match(lst1, lst2):
    if len(lst1) < len(lst2):
        return lst1
    elif len(lst1) == len(lst2):
        return lst1
    else:
        return lst2

task:HumanEval/74, cir:1, gened 10 solutions, total nodes:10, total unique nodes:9, chosen nodes:9, left nodes:0
chosen nodes idx is [2, 9, 5, 1, 8, 7, 3, 4, 10]
chosen nodes's parent's idx is [0, 0, 0, 0, 0, 0, 0, 0, 0]
chosen nodes passT_rates [0.8, 0.8, 0.6, 0.6, 0.6, 0.6, 0.4, 0.4, 0.0]
probs are [0.9411520581838377, 0.8959920705195501, 0.993678163788952, 0.9454944764082305, 0.94090463280066, 0.9223766590798873, 0.9907409104616978, 0.9425746920952301, 0.9162744614915171]

begin to generate solutions for cir 2 with 10 sequences.
total input length is torch.Size([1, 1332])
total input length is torch.Size([1, 1332])
total input length is torch.Size([1, 1333])
total input length is torch.Size([1, 1333])
total input length is torch.Size([1, 1333])
total input length is torch.Size([1, 1335])
total input length is torch.Size([1, 1357])
total input length is torch.Size([1, 1357])
total input length is torch.Size([1, 1143])
run solution time is 0.03012697696685791 mins, choose solution time is 9.338061014811198e-07 mins, model inference time is 4.3084007183710735 mins.
average output length is 1729.6444444444444, every token time is 0.14945502025965848 s.
check program : 
def total_match(lst1, lst2):
    if len(lst1) > len(lst2):
        return lst1
    elif len(lst2) > len(lst1):
        return lst2
    else:
        return lst1

task:HumanEval/74, cir:2, gened 90 solutions, total nodes:90, total unique nodes:44, chosen nodes:10, left nodes:34
chosen nodes idx is [12, 29, 64, 17, 27, 49, 59, 15, 97, 47]
chosen nodes's parent's idx is [2, 9, 7, 2, 9, 1, 8, 2, 10, 1]
chosen nodes passT_rates [0.8, 0.8, 0.8, 0.8, 0.8, 0.8, 0.8, 0.6, 0.6, 0.6]
probs are [0.9563648215521299, 0.9497494901722555, 0.9365187490905253, 0.9162924126691996, 0.9142112310848879, 0.9134431315067555, 0.8959920705195501, 0.9946437300497347, 0.9645319453080688, 0.9604608406928788]

begin to generate solutions for cir 3 with 10 sequences.
total input length is torch.Size([1, 1332])
total input length is torch.Size([1, 1342])
total input length is torch.Size([1, 1334])
total input length is torch.Size([1, 1334])
total input length is torch.Size([1, 1334])
total input length is torch.Size([1, 1355])
total input length is torch.Size([1, 1332])
total input length is torch.Size([1, 1333])
total input length is torch.Size([1, 1311])
total input length is torch.Size([1, 1335])
run solution time is 0.28033339182535805 mins, choose solution time is 4.458427429199219e-06 mins, model inference time is 4.815282396475474 mins.
average output length is 1796.82, every token time is 0.1607934827616996 s.
check program : 
def total_match(lst1, lst2):
    if len(lst1) > len(lst2):
        return lst1
    elif len(lst2) > len(lst1):
        return lst2
    else:
        return lst1

task:HumanEval/74, cir:3, gened 100 solutions, total nodes:100, total unique nodes:58, chosen nodes:10, left nodes:48
chosen nodes idx is [155, 119, 102, 111, 124, 129, 143, 107, 157, 117]
chosen nodes's parent's idx is [49, 29, 12, 29, 64, 64, 27, 12, 49, 29]
chosen nodes passT_rates [0.8, 0.8, 0.8, 0.8, 0.8, 0.8, 0.8, 0.8, 0.8, 0.8]
probs are [0.9945267338130732, 0.9683004006486325, 0.9563648215521299, 0.9516805584408967, 0.9390429053342337, 0.9300080558229109, 0.9192589317200457, 0.9162924126691996, 0.9088001857222541, 0.9076037528353146]

begin to generate solutions for cir 4 with 10 sequences.
total input length is torch.Size([1, 1332])
total input length is torch.Size([1, 1342])
total input length is torch.Size([1, 1332])
total input length is torch.Size([1, 1342])
total input length is torch.Size([1, 1354])
total input length is torch.Size([1, 1351])
total input length is torch.Size([1, 1372])
total input length is torch.Size([1, 1334])
total input length is torch.Size([1, 1358])
total input length is torch.Size([1, 1345])
run solution time is 0.3070246934890747 mins, choose solution time is 5.002816518147787e-06 mins, model inference time is 4.8365638256073 mins.
average output length is 1797.61, every token time is 0.1614331465647966 s.
check program : 
def total_match(lst1, lst2):
    if len(lst1) < len(lst2):
        return lst1
    elif len(lst1) == len(lst2):
        return lst1
    else:
        return lst2

task:HumanEval/74, cir:4, gened 100 solutions, total nodes:100, total unique nodes:73, chosen nodes:10, left nodes:63
chosen nodes idx is [205, 284, 254, 236, 219, 231, 256, 211, 255, 244]
chosen nodes's parent's idx is [155, 157, 129, 111, 119, 111, 129, 119, 129, 124]
chosen nodes passT_rates [0.8, 0.8, 0.8, 0.8, 0.8, 0.8, 0.8, 0.8, 0.8, 0.8]
probs are [0.9965274099873693, 0.9963136590391785, 0.9961879752794147, 0.9855601327774719, 0.9683004006486325, 0.9573370420545267, 0.9571876878274628, 0.9516805584408967, 0.9503764556569811, 0.9465480246138203]

begin to generate solutions for cir 5 with 10 sequences.
total input length is torch.Size([1, 1332])
total input length is torch.Size([1, 1358])
total input length is torch.Size([1, 1351])
total input length is torch.Size([1, 1350])
total input length is torch.Size([1, 1342])
total input length is torch.Size([1, 1427])
total input length is torch.Size([1, 1403])
total input length is torch.Size([1, 1342])
total input length is torch.Size([1, 1331])
total input length is torch.Size([1, 1354])
run solution time is 0.3134395917256673 mins, choose solution time is 6.604194641113281e-06 mins, model inference time is 4.867810567220052 mins.
average output length is 1804.7, every token time is 0.16183777661867046 s.
check program : 
def total_match(lst1, lst2):
    if len(lst1) < len(lst2):
        return lst1
    elif len(lst1) == len(lst2):
        return lst1
    else:
        return lst2

task:HumanEval/74, cir:5, gened 100 solutions, total nodes:100, total unique nodes:81, chosen nodes:10, left nodes:71
chosen nodes idx is [305, 314, 324, 334, 351, 376, 352, 349, 326, 341]
chosen nodes's parent's idx is [205, 284, 254, 236, 231, 211, 231, 219, 254, 219]
chosen nodes passT_rates [0.8, 0.8, 0.8, 0.8, 0.8, 0.8, 0.8, 0.8, 0.8, 0.8]
probs are [0.9965274099873693, 0.9963136590391785, 0.9961879752794147, 0.9951789861625235, 0.9946545165733833, 0.9855601327774719, 0.9831793939553384, 0.9683004006486325, 0.9571876878274628, 0.9516805584408967]

begin to generate solutions for cir 6 with 10 sequences.
total input length is torch.Size([1, 1332])
total input length is torch.Size([1, 1358])
total input length is torch.Size([1, 1351])
total input length is torch.Size([1, 1351])
total input length is torch.Size([1, 1370])
total input length is torch.Size([1, 1350])
total input length is torch.Size([1, 1427])
total input length is torch.Size([1, 1342])
total input length is torch.Size([1, 1403])
total input length is torch.Size([1, 1342])
run solution time is 0.3133857250213623 mins, choose solution time is 5.789597829182943e-06 mins, model inference time is 4.875548513730367 mins.
average output length is 1800.58, every token time is 0.16246593511336702 s.
check program : 
def total_match(lst1, lst2):
    if len(lst1) < len(lst2):
        return lst1
    elif len(lst1) == len(lst2):
        return lst1
    else:
        return lst2

task:HumanEval/74, cir:6, gened 100 solutions, total nodes:100, total unique nodes:85, chosen nodes:10, left nodes:75
chosen nodes idx is [405, 414, 424, 441, 496, 462, 479, 491, 426, 471]
chosen nodes's parent's idx is [305, 314, 324, 351, 341, 352, 349, 341, 324, 349]
chosen nodes passT_rates [0.8, 0.8, 0.8, 0.8, 0.8, 0.8, 0.8, 0.8, 0.8, 0.8]
probs are [0.9965274099873693, 0.9963136590391785, 0.9961879752794147, 0.9961644960338414, 0.9855601327774719, 0.9847537567948484, 0.9683004006486325, 0.9573370420545267, 0.9571876878274628, 0.9516805584408967]

begin to generate solutions for cir 7 with 10 sequences.
total input length is torch.Size([1, 1332])
total input length is torch.Size([1, 1358])
total input length is torch.Size([1, 1351])
total input length is torch.Size([1, 1370])
