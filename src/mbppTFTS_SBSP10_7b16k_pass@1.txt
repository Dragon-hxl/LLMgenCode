Task 251 gens 1 solutions in cir 0
check_program: 
# Write a function to insert an element before each element of a list.

def insert_element(list,element):

    new_list = list.copy()
    for i in range(len(list)):
        new_list.insert(i, element)
    return new_list

def check(insert_element):
    assert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black'] 
    assert insert_element(['python', 'java'] ,'program')==['program', 'python', 'program', 'java'] 
    assert insert_element(['happy', 'sad'] ,'laugh')==['laugh', 'happy', 'laugh', 'sad'] 

check(insert_element)
solution 0 passed False
Task 251 gens 8 solutions in cir 1
check_program: 
# Write a function to insert an element before each element of a list.

def insert_element(list,element):

    new_list = list.copy()
    new_list.insert(0, element)
    return new_list

def check(insert_element):
    assert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black'] 
    assert insert_element(['python', 'java'] ,'program')==['program', 'python', 'program', 'java'] 
    assert insert_element(['happy', 'sad'] ,'laugh')==['laugh', 'happy', 'laugh', 'sad'] 

check(insert_element)
solution 0 passed False
Task 251 gens 10 solutions in cir 2
check_program: 
# Write a function to insert an element before each element of a list.

def insert_element(list,element):

    new_lst = []
    for i in range(len(lst)):
        new_lst.insert(i, element)
    return new_lst

def check(insert_element):
    assert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black'] 
    assert insert_element(['python', 'java'] ,'program')==['program', 'python', 'program', 'java'] 
    assert insert_element(['happy', 'sad'] ,'laugh')==['laugh', 'happy', 'laugh', 'sad'] 

check(insert_element)
solution 0 passed False
Task 251 gens 10 solutions in cir 3
check_program: 
# Write a function to insert an element before each element of a list.

def insert_element(list,element):

    return list + [element]

def check(insert_element):
    assert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black'] 
    assert insert_element(['python', 'java'] ,'program')==['program', 'python', 'program', 'java'] 
    assert insert_element(['happy', 'sad'] ,'laugh')==['laugh', 'happy', 'laugh', 'sad'] 

check(insert_element)
solution 0 passed False
Task 251 gens 10 solutions in cir 4
check_program: 
# Write a function to insert an element before each element of a list.

def insert_element(list,element):

    return list + [element]

def check(insert_element):
    assert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black'] 
    assert insert_element(['python', 'java'] ,'program')==['program', 'python', 'program', 'java'] 
    assert insert_element(['happy', 'sad'] ,'laugh')==['laugh', 'happy', 'laugh', 'sad'] 

check(insert_element)
solution 0 passed False
Task 104 gens 1 solutions in cir 0
check_program: 
# Write a function to sort each sublist of strings in a given list of lists using lambda function.

def sort_sublists(input_list):

    return sorted(input_list, key=lambda x: x[1])

def check(sort_sublists):
    assert sort_sublists((["green", "orange"], ["black", "white"], ["white", "black", "orange"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]
    assert sort_sublists(([" red ","green" ],["blue "," black"],[" orange","brown"]))==[[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]
    assert sort_sublists((["zilver","gold"], ["magnesium","aluminium"], ["steel", "bronze"]))==[['gold', 'zilver'],['aluminium', 'magnesium'], ['bronze', 'steel']]

check(sort_sublists)
solution 0 passed False
Task 104 gens 2 solutions in cir 1
check_program: 
# Write a function to sort each sublist of strings in a given list of lists using lambda function.

def sort_sublists(input_list):

    return sorted(input_list, key=lambda x: x[1])

def check(sort_sublists):
    assert sort_sublists((["green", "orange"], ["black", "white"], ["white", "black", "orange"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]
    assert sort_sublists(([" red ","green" ],["blue "," black"],[" orange","brown"]))==[[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]
    assert sort_sublists((["zilver","gold"], ["magnesium","aluminium"], ["steel", "bronze"]))==[['gold', 'zilver'],['aluminium', 'magnesium'], ['bronze', 'steel']]

check(sort_sublists)
solution 0 passed False
Task 104 gens 7 solutions in cir 2
check_program: 
# Write a function to sort each sublist of strings in a given list of lists using lambda function.

def sort_sublists(input_list):

    return sorted(input_list, key=lambda x: x[1])

def check(sort_sublists):
    assert sort_sublists((["green", "orange"], ["black", "white"], ["white", "black", "orange"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]
    assert sort_sublists(([" red ","green" ],["blue "," black"],[" orange","brown"]))==[[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]
    assert sort_sublists((["zilver","gold"], ["magnesium","aluminium"], ["steel", "bronze"]))==[['gold', 'zilver'],['aluminium', 'magnesium'], ['bronze', 'steel']]

check(sort_sublists)
solution 0 passed False
Task 104 gens 10 solutions in cir 3
check_program: 
# Write a function to sort each sublist of strings in a given list of lists using lambda function.

def sort_sublists(input_list):

    return sorted(input_list, key=lambda x: x[1])

def check(sort_sublists):
    assert sort_sublists((["green", "orange"], ["black", "white"], ["white", "black", "orange"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]
    assert sort_sublists(([" red ","green" ],["blue "," black"],[" orange","brown"]))==[[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]
    assert sort_sublists((["zilver","gold"], ["magnesium","aluminium"], ["steel", "bronze"]))==[['gold', 'zilver'],['aluminium', 'magnesium'], ['bronze', 'steel']]

check(sort_sublists)
solution 0 passed False
Task 104 gens 10 solutions in cir 4
check_program: 
# Write a function to sort each sublist of strings in a given list of lists using lambda function.

def sort_sublists(input_list):

    return sorted(input_list, key=lambda x: x[1])

def check(sort_sublists):
    assert sort_sublists((["green", "orange"], ["black", "white"], ["white", "black", "orange"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]
    assert sort_sublists(([" red ","green" ],["blue "," black"],[" orange","brown"]))==[[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]
    assert sort_sublists((["zilver","gold"], ["magnesium","aluminium"], ["steel", "bronze"]))==[['gold', 'zilver'],['aluminium', 'magnesium'], ['bronze', 'steel']]

check(sort_sublists)
solution 0 passed False
Task 104 gens 10 solutions in cir 5
check_program: 
# Write a function to sort each sublist of strings in a given list of lists using lambda function.

def sort_sublists(input_list):

    def sort_key(x):
        return x[1]
    return sorted(input_list, key=sort_key)

def check(sort_sublists):
    assert sort_sublists((["green", "orange"], ["black", "white"], ["white", "black", "orange"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]
    assert sort_sublists(([" red ","green" ],["blue "," black"],[" orange","brown"]))==[[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]
    assert sort_sublists((["zilver","gold"], ["magnesium","aluminium"], ["steel", "bronze"]))==[['gold', 'zilver'],['aluminium', 'magnesium'], ['bronze', 'steel']]

check(sort_sublists)
solution 0 passed False
Task 104 gens 10 solutions in cir 6
check_program: 
# Write a function to sort each sublist of strings in a given list of lists using lambda function.

def sort_sublists(input_list):

    def sort_key(x):
        return x[1]
    return sorted(input_list, key=lambda x: x[1])

def check(sort_sublists):
    assert sort_sublists((["green", "orange"], ["black", "white"], ["white", "black", "orange"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]
    assert sort_sublists(([" red ","green" ],["blue "," black"],[" orange","brown"]))==[[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]
    assert sort_sublists((["zilver","gold"], ["magnesium","aluminium"], ["steel", "bronze"]))==[['gold', 'zilver'],['aluminium', 'magnesium'], ['bronze', 'steel']]

check(sort_sublists)
solution 0 passed False
Task 104 gens 10 solutions in cir 7
check_program: 
# Write a function to sort each sublist of strings in a given list of lists using lambda function.

def sort_sublists(input_list):

    def key(x):
        return x[1]
    sorted_list = sorted(input_list, key=key)
    return sorted_list

def check(sort_sublists):
    assert sort_sublists((["green", "orange"], ["black", "white"], ["white", "black", "orange"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]
    assert sort_sublists(([" red ","green" ],["blue "," black"],[" orange","brown"]))==[[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]
    assert sort_sublists((["zilver","gold"], ["magnesium","aluminium"], ["steel", "bronze"]))==[['gold', 'zilver'],['aluminium', 'magnesium'], ['bronze', 'steel']]

check(sort_sublists)
solution 0 passed False
Task 104 gens 10 solutions in cir 8
check_program: 
# Write a function to sort each sublist of strings in a given list of lists using lambda function.

def sort_sublists(input_list):

    def sort_key(x):
        return x[1]
    input_list.sort(key=lambda x: x[1])
    return input_list

def check(sort_sublists):
    assert sort_sublists((["green", "orange"], ["black", "white"], ["white", "black", "orange"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]
    assert sort_sublists(([" red ","green" ],["blue "," black"],[" orange","brown"]))==[[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]
    assert sort_sublists((["zilver","gold"], ["magnesium","aluminium"], ["steel", "bronze"]))==[['gold', 'zilver'],['aluminium', 'magnesium'], ['bronze', 'steel']]

check(sort_sublists)
solution 0 passed False
Task 104 gens 10 solutions in cir 9
check_program: 
# Write a function to sort each sublist of strings in a given list of lists using lambda function.

def sort_sublists(input_list):

    def sort_key(x):
        return x[1]
    return sorted(input_list, key=lambda x: x[1])

def check(sort_sublists):
    assert sort_sublists((["green", "orange"], ["black", "white"], ["white", "black", "orange"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]
    assert sort_sublists(([" red ","green" ],["blue "," black"],[" orange","brown"]))==[[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]
    assert sort_sublists((["zilver","gold"], ["magnesium","aluminium"], ["steel", "bronze"]))==[['gold', 'zilver'],['aluminium', 'magnesium'], ['bronze', 'steel']]

check(sort_sublists)
solution 0 passed False
Task 104 gens 10 solutions in cir 10
check_program: 
# Write a function to sort each sublist of strings in a given list of lists using lambda function.

def sort_sublists(input_list):

    for sublist in input_list:
        sublist = sorted(sublist)
    return input_list

def check(sort_sublists):
    assert sort_sublists((["green", "orange"], ["black", "white"], ["white", "black", "orange"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]
    assert sort_sublists(([" red ","green" ],["blue "," black"],[" orange","brown"]))==[[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]
    assert sort_sublists((["zilver","gold"], ["magnesium","aluminium"], ["steel", "bronze"]))==[['gold', 'zilver'],['aluminium', 'magnesium'], ['bronze', 'steel']]

check(sort_sublists)
solution 0 passed False
Task 383 gens 1 solutions in cir 0
check_program: 
# Write a python function to toggle all odd bits of a given number.

def even_bit_toggle_number(n) :

    result = 0
    while n > 0 :
        if n % 2 == 0 :
            result += n // 2
        n = n // 2
    return result

def check(even_bit_toggle_number):
    assert even_bit_toggle_number(10) == 15
    assert even_bit_toggle_number(20) == 1
    assert even_bit_toggle_number(30) == 11

check(even_bit_toggle_number)
solution 0 passed False
Task 383 gens 8 solutions in cir 1
check_program: 
# Write a python function to toggle all odd bits of a given number.

def even_bit_toggle_number(n) :

    result = 0
    while n > 0:
        if n % 2 == 1:
            result += n // 2
        n = n // 2
    return result

def check(even_bit_toggle_number):
    assert even_bit_toggle_number(10) == 15
    assert even_bit_toggle_number(20) == 1
    assert even_bit_toggle_number(30) == 11

check(even_bit_toggle_number)
solution 0 passed False
Task 383 gens 10 solutions in cir 2
check_program: 
# Write a python function to toggle all odd bits of a given number.

def even_bit_toggle_number(n) :

    result = 0
    while n > 0:
        if n % 2 == 1:
            result += n // 2
        n = n // 2
    return result

def check(even_bit_toggle_number):
    assert even_bit_toggle_number(10) == 15
    assert even_bit_toggle_number(20) == 1
    assert even_bit_toggle_number(30) == 11

check(even_bit_toggle_number)
solution 0 passed False
Task 383 gens 10 solutions in cir 3
check_program: 
# Write a python function to toggle all odd bits of a given number.

def even_bit_toggle_number(n) :

    while n > 0:
        if n % 2 == 0:
            n = n // 2
        else:
            n = (n - 1) // 2
    return n

def check(even_bit_toggle_number):
    assert even_bit_toggle_number(10) == 15
    assert even_bit_toggle_number(20) == 1
    assert even_bit_toggle_number(30) == 11

check(even_bit_toggle_number)
solution 0 passed False
Task 383 gens 10 solutions in cir 4
check_program: 
# Write a python function to toggle all odd bits of a given number.

def even_bit_toggle_number(n) :

    while n > 0:
        if n % 2 == 0:
            n = n // 2
        else:
            n = (n - 1) // 2
    return n

def check(even_bit_toggle_number):
    assert even_bit_toggle_number(10) == 15
    assert even_bit_toggle_number(20) == 1
    assert even_bit_toggle_number(30) == 11

check(even_bit_toggle_number)
solution 0 passed False
Task 383 gens 10 solutions in cir 5
check_program: 
# Write a python function to toggle all odd bits of a given number.

def even_bit_toggle_number(n) :

    i = 0
    while n > 0:
        if n % 2 == 0:
            n = n // 2
        else:
            n = (n - 1) // 2
            i = i + 1
    return n

def check(even_bit_toggle_number):
    assert even_bit_toggle_number(10) == 15
    assert even_bit_toggle_number(20) == 1
    assert even_bit_toggle_number(30) == 11

check(even_bit_toggle_number)
solution 0 passed False
Task 383 gens 10 solutions in cir 6
check_program: 
# Write a python function to toggle all odd bits of a given number.

def even_bit_toggle_number(n) :

    result = 0
    while n != 0:
        if n & 1 == 1:
            result += n // 2
        n = n >> 1
    return result

def check(even_bit_toggle_number):
    assert even_bit_toggle_number(10) == 15
    assert even_bit_toggle_number(20) == 1
    assert even_bit_toggle_number(30) == 11

check(even_bit_toggle_number)
solution 0 passed False
Task 383 gens 10 solutions in cir 7
check_program: 
# Write a python function to toggle all odd bits of a given number.

def even_bit_toggle_number(n) :

    result = 0
    while n > 0:
        if n & 1 == 1:
            result += n // 2
        n = n >> 1
    return result

def check(even_bit_toggle_number):
    assert even_bit_toggle_number(10) == 15
    assert even_bit_toggle_number(20) == 1
    assert even_bit_toggle_number(30) == 11

check(even_bit_toggle_number)
solution 0 passed False
Task 383 gens 10 solutions in cir 8
check_program: 
# Write a python function to toggle all odd bits of a given number.

def even_bit_toggle_number(n) :

    result = 0
    for i in range(1, 36):
        while n >= i:
            if n & 1 == 1:
                result += i
                n -= i
            else:
                break
    return result

def check(even_bit_toggle_number):
    assert even_bit_toggle_number(10) == 15
    assert even_bit_toggle_number(20) == 1
    assert even_bit_toggle_number(30) == 11

check(even_bit_toggle_number)
solution 0 passed False
Task 383 gens 10 solutions in cir 9
check_program: 
# Write a python function to toggle all odd bits of a given number.

def even_bit_toggle_number(n) :

    result = 0
    for i in range(1, 36):
        while n >= i:
            if n & 1 == 1:
                result += i
                n -= i
            else:
                break
    return result

def check(even_bit_toggle_number):
    assert even_bit_toggle_number(10) == 15
    assert even_bit_toggle_number(20) == 1
    assert even_bit_toggle_number(30) == 11

check(even_bit_toggle_number)
solution 0 passed False
Task 383 gens 10 solutions in cir 10
check_program: 
# Write a python function to toggle all odd bits of a given number.

def even_bit_toggle_number(n) :

    return n & ((n - 1) // 2)

def check(even_bit_toggle_number):
    assert even_bit_toggle_number(10) == 15
    assert even_bit_toggle_number(20) == 1
    assert even_bit_toggle_number(30) == 11

check(even_bit_toggle_number)
solution 0 passed False
Task 307 gens 1 solutions in cir 0
check_program: 
# Write a function to get a colon of a tuple.
from copy import deepcopy
def colon_tuplex(tuplex,m,n):

    result = []
    for i in range(m,n+1):
        result.append(tuplex[i])
    return result

def check(colon_tuplex):
    assert colon_tuplex(("HELLO", 5, [], True) ,2,50)==("HELLO", 5, [50], True) 
    assert colon_tuplex(("HELLO", 5, [], True) ,2,100)==(("HELLO", 5, [100],True))
    assert colon_tuplex(("HELLO", 5, [], True) ,2,500)==("HELLO", 5, [500], True)

check(colon_tuplex)
solution 0 passed False
Task 307 gens 3 solutions in cir 1
check_program: 
# Write a function to get a colon of a tuple.
from copy import deepcopy
def colon_tuplex(tuplex,m,n):

    result = []
    for i in range(m,n+1):
        result.append(tuplex[i])
    return result

def check(colon_tuplex):
    assert colon_tuplex(("HELLO", 5, [], True) ,2,50)==("HELLO", 5, [50], True) 
    assert colon_tuplex(("HELLO", 5, [], True) ,2,100)==(("HELLO", 5, [100],True))
    assert colon_tuplex(("HELLO", 5, [], True) ,2,500)==("HELLO", 5, [500], True)

check(colon_tuplex)
solution 0 passed False
Task 307 gens 10 solutions in cir 2
check_program: 
# Write a function to get a colon of a tuple.
from copy import deepcopy
def colon_tuplex(tuplex,m,n):

    r = []
    for i in range(m,n+1):
        r.append(tuplex[i])
    return r

def check(colon_tuplex):
    assert colon_tuplex(("HELLO", 5, [], True) ,2,50)==("HELLO", 5, [50], True) 
    assert colon_tuplex(("HELLO", 5, [], True) ,2,100)==(("HELLO", 5, [100],True))
    assert colon_tuplex(("HELLO", 5, [], True) ,2,500)==("HELLO", 5, [500], True)

check(colon_tuplex)
solution 0 passed False
Task 307 gens 10 solutions in cir 3
check_program: 
# Write a function to get a colon of a tuple.
from copy import deepcopy
def colon_tuplex(tuplex,m,n):

    r = []
    for i in range(m,n+1):
        if tuplex[i] != None:
            r.append(tuplex[i])
    return r

def check(colon_tuplex):
    assert colon_tuplex(("HELLO", 5, [], True) ,2,50)==("HELLO", 5, [50], True) 
    assert colon_tuplex(("HELLO", 5, [], True) ,2,100)==(("HELLO", 5, [100],True))
    assert colon_tuplex(("HELLO", 5, [], True) ,2,500)==("HELLO", 5, [500], True)

check(colon_tuplex)
solution 0 passed False
Task 307 gens 10 solutions in cir 4
check_program: 
# Write a function to get a colon of a tuple.
from copy import deepcopy
def colon_tuplex(tuplex,m,n):

    result = deepcopy(tuplex)
    for i in range(m, n + 1):
        if i in result:
            result.remove(i)
    return result

def check(colon_tuplex):
    assert colon_tuplex(("HELLO", 5, [], True) ,2,50)==("HELLO", 5, [50], True) 
    assert colon_tuplex(("HELLO", 5, [], True) ,2,100)==(("HELLO", 5, [100],True))
    assert colon_tuplex(("HELLO", 5, [], True) ,2,500)==("HELLO", 5, [500], True)

check(colon_tuplex)
solution 0 passed False
Task 166 gens 1 solutions in cir 0
check_program: 
# Write a python function to count the pairs with xor as an even number.

def find_even_Pair(A,N):

    def find_even_pair(A, N):
        count = 0
        for i in range(N):
            for j in range(i+1, N):
                if A[i] ^ A[j] % 2 == 0:
                    count += 1
        return count

def check(find_even_Pair):
    assert find_even_Pair([5,4,7,2,1],5) == 4
    assert find_even_Pair([7,2,8,1,0,5,11],7) == 9
    assert find_even_Pair([1,2,3],3) == 1

check(find_even_Pair)
solution 0 passed False
Task 166 gens 6 solutions in cir 1
check_program: 
# Write a python function to count the pairs with xor as an even number.

def find_even_Pair(A,N):

    count = 0
    for i in range(N):
        for j in range(i+1, N):
            if A[i] ^ A[j] % 2 == 0:
                count += 1
    return count

def check(find_even_Pair):
    assert find_even_Pair([5,4,7,2,1],5) == 4
    assert find_even_Pair([7,2,8,1,0,5,11],7) == 9
    assert find_even_Pair([1,2,3],3) == 1

check(find_even_Pair)
solution 0 passed False
Task 166 gens 10 solutions in cir 2
check_program: 
# Write a python function to count the pairs with xor as an even number.

def find_even_Pair(A,N):

    count = 0
    for a in A:
        count += find_pair_xor(a, A, N)
    return count
def find_pair_xor(a, A, N):
    count = 0
    for b in A:
        if a ^ b == 0:
            count += 1
    return count

def check(find_even_Pair):
    assert find_even_Pair([5,4,7,2,1],5) == 4
    assert find_even_Pair([7,2,8,1,0,5,11],7) == 9
    assert find_even_Pair([1,2,3],3) == 1

check(find_even_Pair)
solution 0 passed False
Task 166 gens 10 solutions in cir 3
check_program: 
# Write a python function to count the pairs with xor as an even number.

def find_even_Pair(A,N):

    count = sum(1 for a in A if find_pair_xor(a, A, N) % 2 == 0)
    return count
def find_pair_xor(a, A, N):
    count = sum(1 for b in A if a ^ b == 0)
    return count

def check(find_even_Pair):
    assert find_even_Pair([5,4,7,2,1],5) == 4
    assert find_even_Pair([7,2,8,1,0,5,11],7) == 9
    assert find_even_Pair([1,2,3],3) == 1

check(find_even_Pair)
solution 0 passed False
Task 113 gens 1 solutions in cir 0
check_program: 
# Write a function to check if a string represents an integer or not.

def check_integer(text):

    try:
        int(text)
        return True
    except ValueError:
        return False

def check(check_integer):
    assert check_integer("python")==False
    assert check_integer("1")==True
    assert check_integer("12345")==True

check(check_integer)
solution 0 passed True
Task 113 gens 4 solutions in cir 1
check_program: 
# Write a function to check if a string represents an integer or not.

def check_integer(text):

    try:
        int(text)
        return True
    except ValueError:
        return False

def check(check_integer):
    assert check_integer("python")==False
    assert check_integer("1")==True
    assert check_integer("12345")==True

check(check_integer)
solution 0 passed True
Task 113 gens 10 solutions in cir 2
check_program: 
# Write a function to check if a string represents an integer or not.

def check_integer(text):

    if not text.isdigit():
        return False
    try:
        int(text)
        return True
    except ValueError:
        return False

def check(check_integer):
    assert check_integer("python")==False
    assert check_integer("1")==True
    assert check_integer("12345")==True

check(check_integer)
solution 0 passed True
Task 113 gens 10 solutions in cir 3
check_program: 
# Write a function to check if a string represents an integer or not.

def check_integer(text):

    if not text.isdigit():
        return False
    try:
        int(text)
        return True
    except ValueError:
        return False

def check(check_integer):
    assert check_integer("python")==False
    assert check_integer("1")==True
    assert check_integer("12345")==True

check(check_integer)
solution 0 passed True
Task 465 gens 1 solutions in cir 0
check_program: 
# Write a function to drop empty items from a given dictionary.

def drop_empty(dict1):

    new_dict = {}
    for key, value in dict1.items():
        if value:
            new_dict[key] = value
    return new_dict

def check(drop_empty):
    assert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}
    assert drop_empty({'c1': 'Red', 'c2': None, 'c3':None})=={'c1': 'Red'}
    assert drop_empty({'c1': None, 'c2': 'Green', 'c3':None})=={ 'c2': 'Green'}

check(drop_empty)
solution 0 passed True
Task 465 gens 5 solutions in cir 1
check_program: 
# Write a function to drop empty items from a given dictionary.

def drop_empty(dict1):

    new_dict = {}
    for key, value in dict1.items():
        if value:
            new_dict[key] = value
    return new_dict

def check(drop_empty):
    assert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}
    assert drop_empty({'c1': 'Red', 'c2': None, 'c3':None})=={'c1': 'Red'}
    assert drop_empty({'c1': None, 'c2': 'Green', 'c3':None})=={ 'c2': 'Green'}

check(drop_empty)
solution 0 passed True
Task 465 gens 10 solutions in cir 2
check_program: 
# Write a function to drop empty items from a given dictionary.

def drop_empty(dict1):

    filtered_dict = {}
    for key, value in dict1.items():
        if value:
            filtered_dict[key] = value
    return filtered_dict

def check(drop_empty):
    assert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}
    assert drop_empty({'c1': 'Red', 'c2': None, 'c3':None})=={'c1': 'Red'}
    assert drop_empty({'c1': None, 'c2': 'Green', 'c3':None})=={ 'c2': 'Green'}

check(drop_empty)
solution 0 passed True
Task 465 gens 10 solutions in cir 3
check_program: 
# Write a function to drop empty items from a given dictionary.

def drop_empty(dict1):

    new_dict = {}
    for key, value in dict1.items():
        if value is not None:
            new_dict[key] = value
    return new_dict

def check(drop_empty):
    assert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}
    assert drop_empty({'c1': 'Red', 'c2': None, 'c3':None})=={'c1': 'Red'}
    assert drop_empty({'c1': None, 'c2': 'Green', 'c3':None})=={ 'c2': 'Green'}

check(drop_empty)
solution 0 passed True
Task 465 gens 10 solutions in cir 4
check_program: 
# Write a function to drop empty items from a given dictionary.

def drop_empty(dict1):

    new_dict = {}
    for key, value in dict1.items():
        if value:
            new_dict[key] = value
    return new_dict

def check(drop_empty):
    assert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}
    assert drop_empty({'c1': 'Red', 'c2': None, 'c3':None})=={'c1': 'Red'}
    assert drop_empty({'c1': None, 'c2': 'Green', 'c3':None})=={ 'c2': 'Green'}

check(drop_empty)
solution 0 passed True
Task 465 gens 10 solutions in cir 5
check_program: 
# Write a function to drop empty items from a given dictionary.

def drop_empty(dict1):

    new_dict = {}
    for key in dict1:
        if dict1[key]:
            new_dict[key] = dict1[key]
    return new_dict

def check(drop_empty):
    assert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}
    assert drop_empty({'c1': 'Red', 'c2': None, 'c3':None})=={'c1': 'Red'}
    assert drop_empty({'c1': None, 'c2': 'Green', 'c3':None})=={ 'c2': 'Green'}

check(drop_empty)
solution 0 passed True
Task 465 gens 10 solutions in cir 6
check_program: 
# Write a function to drop empty items from a given dictionary.

def drop_empty(dict1):

    new_dict = {}
    for key in dict1:
        if dict1[key]:
            new_dict[key] = dict1[key]
    return new_dict

def check(drop_empty):
    assert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}
    assert drop_empty({'c1': 'Red', 'c2': None, 'c3':None})=={'c1': 'Red'}
    assert drop_empty({'c1': None, 'c2': 'Green', 'c3':None})=={ 'c2': 'Green'}

check(drop_empty)
solution 0 passed True
Task 465 gens 10 solutions in cir 7
check_program: 
# Write a function to drop empty items from a given dictionary.

def drop_empty(dict1):

    return {i: dict1[i] for i in dict1 if i and dict1[i]}

def check(drop_empty):
    assert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}
    assert drop_empty({'c1': 'Red', 'c2': None, 'c3':None})=={'c1': 'Red'}
    assert drop_empty({'c1': None, 'c2': 'Green', 'c3':None})=={ 'c2': 'Green'}

check(drop_empty)
solution 0 passed True
Task 465 gens 10 solutions in cir 8
check_program: 
# Write a function to drop empty items from a given dictionary.

def drop_empty(dict1):

    return {i: dict1[i] for i in dict1 if i and dict1[i]}

def check(drop_empty):
    assert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}
    assert drop_empty({'c1': 'Red', 'c2': None, 'c3':None})=={'c1': 'Red'}
    assert drop_empty({'c1': None, 'c2': 'Green', 'c3':None})=={ 'c2': 'Green'}

check(drop_empty)
solution 0 passed True
Task 465 gens 10 solutions in cir 9
check_program: 
# Write a function to drop empty items from a given dictionary.

def drop_empty(dict1):

    result = {}
    for key in dict1:
        if dict1[key]:
            result[key] = dict1[key]
    return result

def check(drop_empty):
    assert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}
    assert drop_empty({'c1': 'Red', 'c2': None, 'c3':None})=={'c1': 'Red'}
    assert drop_empty({'c1': None, 'c2': 'Green', 'c3':None})=={ 'c2': 'Green'}

check(drop_empty)
solution 0 passed True
Task 465 gens 10 solutions in cir 10
check_program: 
# Write a function to drop empty items from a given dictionary.

def drop_empty(dict1):

    return {i: dict1[i] for i in dict1 if i and dict1[i]}

def check(drop_empty):
    assert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}
    assert drop_empty({'c1': 'Red', 'c2': None, 'c3':None})=={'c1': 'Red'}
    assert drop_empty({'c1': None, 'c2': 'Green', 'c3':None})=={ 'c2': 'Green'}

check(drop_empty)
solution 0 passed True
Task 381 gens 1 solutions in cir 0
check_program: 
# Write a function to sort a list of lists by a given index of the inner list.
from operator import itemgetter
def index_on_inner_list(list_data, index_no):

    return list_data[index_no]

def check(index_on_inner_list):
    assert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==[('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99), ('Wyatt Knott', 91, 94)]
    assert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,1)==[('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99)]
    assert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,2)==[('Wyatt Knott', 91, 94), ('Brady Kent', 97, 96), ('Beau Turnbull', 94, 98), ('Greyson Fulton', 98, 99)]

check(index_on_inner_list)
solution 0 passed False
Task 381 gens 6 solutions in cir 1
check_program: 
# Write a function to sort a list of lists by a given index of the inner list.
from operator import itemgetter
def index_on_inner_list(list_data, index_no):

    return list_data[index_no]

def check(index_on_inner_list):
    assert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==[('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99), ('Wyatt Knott', 91, 94)]
    assert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,1)==[('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99)]
    assert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,2)==[('Wyatt Knott', 91, 94), ('Brady Kent', 97, 96), ('Beau Turnbull', 94, 98), ('Greyson Fulton', 98, 99)]

check(index_on_inner_list)
solution 0 passed False
Task 381 gens 10 solutions in cir 2
check_program: 
# Write a function to sort a list of lists by a given index of the inner list.
from operator import itemgetter
def index_on_inner_list(list_data, index_no):

    return itemgetter(index_no)(lst)

def check(index_on_inner_list):
    assert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==[('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99), ('Wyatt Knott', 91, 94)]
    assert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,1)==[('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99)]
    assert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,2)==[('Wyatt Knott', 91, 94), ('Brady Kent', 97, 96), ('Beau Turnbull', 94, 98), ('Greyson Fulton', 98, 99)]

check(index_on_inner_list)
solution 0 passed False
Task 381 gens 10 solutions in cir 3
check_program: 
# Write a function to sort a list of lists by a given index of the inner list.
from operator import itemgetter
def index_on_inner_list(list_data, index_no):

    if list_data == []:
        return []
    index_no = int(index_no)
    if index_no < 0 or index_no >= len(list_data):
        return []
    return list_data[index_no]

def check(index_on_inner_list):
    assert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==[('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99), ('Wyatt Knott', 91, 94)]
    assert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,1)==[('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99)]
    assert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,2)==[('Wyatt Knott', 91, 94), ('Brady Kent', 97, 96), ('Beau Turnbull', 94, 98), ('Greyson Fulton', 98, 99)]

check(index_on_inner_list)
solution 0 passed False
Task 220 gens 1 solutions in cir 0
check_program: 
# Write a function to replace maximum n occurrences of spaces, commas, or dots with a colon.
import re
def replace_max_specialchar(text,n):

    return re.sub(r'\s+',':',text)

def check(replace_max_specialchar):
    assert replace_max_specialchar('Python language, Programming language.',2)==('Python:language: Programming language.')
    assert replace_max_specialchar('a b c,d e f',3)==('a:b:c:d e f')
    assert replace_max_specialchar('ram reshma,ram rahim',1)==('ram:reshma,ram rahim')

check(replace_max_specialchar)
solution 0 passed False
Task 220 gens 2 solutions in cir 1
check_program: 
# Write a function to replace maximum n occurrences of spaces, commas, or dots with a colon.
import re
def replace_max_specialchar(text,n):

    return re.sub(r'\s+',':',text)

def check(replace_max_specialchar):
    assert replace_max_specialchar('Python language, Programming language.',2)==('Python:language: Programming language.')
    assert replace_max_specialchar('a b c,d e f',3)==('a:b:c:d e f')
    assert replace_max_specialchar('ram reshma,ram rahim',1)==('ram:reshma,ram rahim')

check(replace_max_specialchar)
solution 0 passed False
Task 220 gens 8 solutions in cir 2
check_program: 
# Write a function to replace maximum n occurrences of spaces, commas, or dots with a colon.
import re
def replace_max_specialchar(text,n):

    return re.sub(r'[ \t\r\n,]+', ':', text)

def check(replace_max_specialchar):
    assert replace_max_specialchar('Python language, Programming language.',2)==('Python:language: Programming language.')
    assert replace_max_specialchar('a b c,d e f',3)==('a:b:c:d e f')
    assert replace_max_specialchar('ram reshma,ram rahim',1)==('ram:reshma,ram rahim')

check(replace_max_specialchar)
solution 0 passed False
Task 220 gens 10 solutions in cir 3
check_program: 
# Write a function to replace maximum n occurrences of spaces, commas, or dots with a colon.
import re
def replace_max_specialchar(text,n):

    return re.sub(r'[ \t\r\n,]+', ':', text)

def check(replace_max_specialchar):
    assert replace_max_specialchar('Python language, Programming language.',2)==('Python:language: Programming language.')
    assert replace_max_specialchar('a b c,d e f',3)==('a:b:c:d e f')
    assert replace_max_specialchar('ram reshma,ram rahim',1)==('ram:reshma,ram rahim')

check(replace_max_specialchar)
solution 0 passed False
Task 220 gens 10 solutions in cir 4
check_program: 
# Write a function to replace maximum n occurrences of spaces, commas, or dots with a colon.
import re
def replace_max_specialchar(text,n):

    return re.sub(r'[ \t\r\n,]+', ':', text)

def check(replace_max_specialchar):
    assert replace_max_specialchar('Python language, Programming language.',2)==('Python:language: Programming language.')
    assert replace_max_specialchar('a b c,d e f',3)==('a:b:c:d e f')
    assert replace_max_specialchar('ram reshma,ram rahim',1)==('ram:reshma,ram rahim')

check(replace_max_specialchar)
solution 0 passed False
Task 398 gens 1 solutions in cir 0
check_program: 
# Write a function to compute the sum of digits of each number of a given list.

def sum_of_digits(nums):

    return sum(map(lambda x: x % 10, nums))

def check(sum_of_digits):
    assert sum_of_digits([10,2,56])==14
    assert sum_of_digits([[10,20,4,5,'b',70,'a']])==19
    assert sum_of_digits([10,20,-4,5,-70])==19

check(sum_of_digits)
solution 0 passed False
Task 398 gens 1 solutions in cir 1
check_program: 
# Write a function to compute the sum of digits of each number of a given list.

def sum_of_digits(nums):

    return sum(map(lambda x: x % 10, nums))

def check(sum_of_digits):
    assert sum_of_digits([10,2,56])==14
    assert sum_of_digits([[10,20,4,5,'b',70,'a']])==19
    assert sum_of_digits([10,20,-4,5,-70])==19

check(sum_of_digits)
solution 0 passed False
Task 398 gens 3 solutions in cir 2
check_program: 
# Write a function to compute the sum of digits of each number of a given list.

def sum_of_digits(nums):

    return sum(map(lambda x: x % 10, nums))

def check(sum_of_digits):
    assert sum_of_digits([10,2,56])==14
    assert sum_of_digits([[10,20,4,5,'b',70,'a']])==19
    assert sum_of_digits([10,20,-4,5,-70])==19

check(sum_of_digits)
solution 0 passed False
Task 398 gens 7 solutions in cir 3
check_program: 
# Write a function to compute the sum of digits of each number of a given list.

def sum_of_digits(nums):

    return sum(filter(lambda x: x != 0, map(lambda x: x % 10, nums)))

def check(sum_of_digits):
    assert sum_of_digits([10,2,56])==14
    assert sum_of_digits([[10,20,4,5,'b',70,'a']])==19
    assert sum_of_digits([10,20,-4,5,-70])==19

check(sum_of_digits)
solution 0 passed False
Task 398 gens 10 solutions in cir 4
check_program: 
# Write a function to compute the sum of digits of each number of a given list.

def sum_of_digits(nums):

    result = 0
    for num in nums:
        result += num
    return result

def check(sum_of_digits):
    assert sum_of_digits([10,2,56])==14
    assert sum_of_digits([[10,20,4,5,'b',70,'a']])==19
    assert sum_of_digits([10,20,-4,5,-70])==19

check(sum_of_digits)
solution 0 passed False
Task 398 gens 10 solutions in cir 5
check_program: 
# Write a function to compute the sum of digits of each number of a given list.

def sum_of_digits(nums):

    result = 0
    for num in nums:
        result += num
    return result

def check(sum_of_digits):
    assert sum_of_digits([10,2,56])==14
    assert sum_of_digits([[10,20,4,5,'b',70,'a']])==19
    assert sum_of_digits([10,20,-4,5,-70])==19

check(sum_of_digits)
solution 0 passed False
Task 377 gens 1 solutions in cir 0
check_program: 
# Write a python function to remove all occurrences of a character in a given string.

def remove_Char(s,c) :

    def remove_char(s, c):
        new_s = ""
        for i in range(len(s)):
            if s[i] != c:
                new_s += s[i]
        return new_s

def check(remove_Char):
    assert remove_Char("aba",'a') == "b"
    assert remove_Char("toggle",'g') == "tole"
    assert remove_Char("aabbc",'b') == "aac"

check(remove_Char)
solution 0 passed False
Task 377 gens 8 solutions in cir 1
check_program: 
# Write a python function to remove all occurrences of a character in a given string.

def remove_Char(s,c) :

    def remove_char(s, c):
        new_s = ""
        for i in range(len(s)):
            if s[i] != c:
                new_s += s[i]
        return new_s
    return remove_char(s, c)

def check(remove_Char):
    assert remove_Char("aba",'a') == "b"
    assert remove_Char("toggle",'g') == "tole"
    assert remove_Char("aabbc",'b') == "aac"

check(remove_Char)
solution 0 passed True
Task 377 gens 10 solutions in cir 2
check_program: 
# Write a python function to remove all occurrences of a character in a given string.

def remove_Char(s,c) :

    return s.replace(c, '')

def check(remove_Char):
    assert remove_Char("aba",'a') == "b"
    assert remove_Char("toggle",'g') == "tole"
    assert remove_Char("aabbc",'b') == "aac"

check(remove_Char)
solution 0 passed True
Task 377 gens 10 solutions in cir 3
check_program: 
# Write a python function to remove all occurrences of a character in a given string.

def remove_Char(s,c) :

    return s.replace(c, '')

def check(remove_Char):
    assert remove_Char("aba",'a') == "b"
    assert remove_Char("toggle",'g') == "tole"
    assert remove_Char("aabbc",'b') == "aac"

check(remove_Char)
solution 0 passed True
Task 399 gens 1 solutions in cir 0
check_program: 
# Write a function to perform the mathematical bitwise xor operation across the given tuples.

def bitwise_xor(test_tup1, test_tup2):

    return tuple(set(test_tup1) ^ set(test_tup2))

def check(bitwise_xor):
    assert bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)
    assert bitwise_xor((11, 5, 7, 10), (6, 3, 4, 4)) == (13, 6, 3, 14)
    assert bitwise_xor((12, 6, 8, 11), (7, 4, 5, 6)) == (11, 2, 13, 13)

check(bitwise_xor)
solution 0 passed False
Task 399 gens 5 solutions in cir 1
check_program: 
# Write a function to perform the mathematical bitwise xor operation across the given tuples.

def bitwise_xor(test_tup1, test_tup2):

    return tuple(set(test_tup1) ^ set(test_tup2))

def check(bitwise_xor):
    assert bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)
    assert bitwise_xor((11, 5, 7, 10), (6, 3, 4, 4)) == (13, 6, 3, 14)
    assert bitwise_xor((12, 6, 8, 11), (7, 4, 5, 6)) == (11, 2, 13, 13)

check(bitwise_xor)
solution 0 passed False
Task 399 gens 10 solutions in cir 2
check_program: 
# Write a function to perform the mathematical bitwise xor operation across the given tuples.

def bitwise_xor(test_tup1, test_tup2):

    return tuple(set(test_tup1).symmetric_difference(set(test_tup2)))

def check(bitwise_xor):
    assert bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)
    assert bitwise_xor((11, 5, 7, 10), (6, 3, 4, 4)) == (13, 6, 3, 14)
    assert bitwise_xor((12, 6, 8, 11), (7, 4, 5, 6)) == (11, 2, 13, 13)

check(bitwise_xor)
solution 0 passed False
Task 399 gens 10 solutions in cir 3
check_program: 
# Write a function to perform the mathematical bitwise xor operation across the given tuples.

def bitwise_xor(test_tup1, test_tup2):

    x1,y1 = test_tup1
    x2,y2 = test_tup2
    return (x1 ^ x2, y1 ^ y2)

def check(bitwise_xor):
    assert bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)
    assert bitwise_xor((11, 5, 7, 10), (6, 3, 4, 4)) == (13, 6, 3, 14)
    assert bitwise_xor((12, 6, 8, 11), (7, 4, 5, 6)) == (11, 2, 13, 13)

check(bitwise_xor)
solution 0 passed False
Task 399 gens 10 solutions in cir 4
check_program: 
# Write a function to perform the mathematical bitwise xor operation across the given tuples.

def bitwise_xor(test_tup1, test_tup2):

    x1, y1 = test_tup1
    x2, y2 = test_tup2
    return (x1 ^ x2, y1 ^ y2)

def check(bitwise_xor):
    assert bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)
    assert bitwise_xor((11, 5, 7, 10), (6, 3, 4, 4)) == (13, 6, 3, 14)
    assert bitwise_xor((12, 6, 8, 11), (7, 4, 5, 6)) == (11, 2, 13, 13)

check(bitwise_xor)
solution 0 passed False
Task 399 gens 10 solutions in cir 5
check_program: 
# Write a function to perform the mathematical bitwise xor operation across the given tuples.

def bitwise_xor(test_tup1, test_tup2):

    x1,y1 = test_tup1
    x2,y2 = test_tup2
    return (x1 ^ x2, y1 ^ y2)

def check(bitwise_xor):
    assert bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)
    assert bitwise_xor((11, 5, 7, 10), (6, 3, 4, 4)) == (13, 6, 3, 14)
    assert bitwise_xor((12, 6, 8, 11), (7, 4, 5, 6)) == (11, 2, 13, 13)

check(bitwise_xor)
solution 0 passed False
Task 399 gens 10 solutions in cir 6
check_program: 
# Write a function to perform the mathematical bitwise xor operation across the given tuples.

def bitwise_xor(test_tup1, test_tup2):

    return tuple(map(lambda x, y: x ^ y, test_tup1, test_tup2))

def check(bitwise_xor):
    assert bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)
    assert bitwise_xor((11, 5, 7, 10), (6, 3, 4, 4)) == (13, 6, 3, 14)
    assert bitwise_xor((12, 6, 8, 11), (7, 4, 5, 6)) == (11, 2, 13, 13)

check(bitwise_xor)
solution 0 passed True
Task 399 gens 10 solutions in cir 7
check_program: 
# Write a function to perform the mathematical bitwise xor operation across the given tuples.

def bitwise_xor(test_tup1, test_tup2):

    return tuple(map(lambda x, y: x ^ y, test_tup1, test_tup2))

def check(bitwise_xor):
    assert bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)
    assert bitwise_xor((11, 5, 7, 10), (6, 3, 4, 4)) == (13, 6, 3, 14)
    assert bitwise_xor((12, 6, 8, 11), (7, 4, 5, 6)) == (11, 2, 13, 13)

check(bitwise_xor)
solution 0 passed True
Task 399 gens 10 solutions in cir 8
check_program: 
# Write a function to perform the mathematical bitwise xor operation across the given tuples.

def bitwise_xor(test_tup1, test_tup2):

    return tuple(map(lambda x, y: x ^ y, test_tup1, test_tup2))

def check(bitwise_xor):
    assert bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)
    assert bitwise_xor((11, 5, 7, 10), (6, 3, 4, 4)) == (13, 6, 3, 14)
    assert bitwise_xor((12, 6, 8, 11), (7, 4, 5, 6)) == (11, 2, 13, 13)

check(bitwise_xor)
solution 0 passed True
Task 399 gens 10 solutions in cir 9
check_program: 
# Write a function to perform the mathematical bitwise xor operation across the given tuples.

def bitwise_xor(test_tup1, test_tup2):

    x1, y1 = test_tup1
    x2, y2 = test_tup2
    return (x1 ^ x2, y1 ^ y2)

def check(bitwise_xor):
    assert bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)
    assert bitwise_xor((11, 5, 7, 10), (6, 3, 4, 4)) == (13, 6, 3, 14)
    assert bitwise_xor((12, 6, 8, 11), (7, 4, 5, 6)) == (11, 2, 13, 13)

check(bitwise_xor)
solution 0 passed False
Task 399 gens 10 solutions in cir 10
check_program: 
# Write a function to perform the mathematical bitwise xor operation across the given tuples.

def bitwise_xor(test_tup1, test_tup2):

    return tuple(map(lambda x,y: x ^ y, test_tup1, test_tup2))

def check(bitwise_xor):
    assert bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)
    assert bitwise_xor((11, 5, 7, 10), (6, 3, 4, 4)) == (13, 6, 3, 14)
    assert bitwise_xor((12, 6, 8, 11), (7, 4, 5, 6)) == (11, 2, 13, 13)

check(bitwise_xor)
solution 0 passed True
Task 146 gens 1 solutions in cir 0
check_program: 
# Write a function to find the ascii value of total characters in a string.

def ascii_value_string(str1):

    return sum(ord(c) for c in str1)

def check(ascii_value_string):
    assert ascii_value_string("python")==112
    assert ascii_value_string("Program")==80
    assert ascii_value_string("Language")==76

check(ascii_value_string)
solution 0 passed False
Task 146 gens 1 solutions in cir 1
check_program: 
# Write a function to find the ascii value of total characters in a string.

def ascii_value_string(str1):

    return sum(ord(c) for c in str1)

def check(ascii_value_string):
    assert ascii_value_string("python")==112
    assert ascii_value_string("Program")==80
    assert ascii_value_string("Language")==76

check(ascii_value_string)
solution 0 passed False
Task 146 gens 1 solutions in cir 2
check_program: 
# Write a function to find the ascii value of total characters in a string.

def ascii_value_string(str1):

    return sum(ord(c) for c in str1)

def check(ascii_value_string):
    assert ascii_value_string("python")==112
    assert ascii_value_string("Program")==80
    assert ascii_value_string("Language")==76

check(ascii_value_string)
solution 0 passed False
Task 146 gens 1 solutions in cir 3
check_program: 
# Write a function to find the ascii value of total characters in a string.

def ascii_value_string(str1):

    return sum(ord(c) for c in str1)

def check(ascii_value_string):
    assert ascii_value_string("python")==112
    assert ascii_value_string("Program")==80
    assert ascii_value_string("Language")==76

check(ascii_value_string)
solution 0 passed False
Task 146 gens 2 solutions in cir 4
check_program: 
# Write a function to find the ascii value of total characters in a string.

def ascii_value_string(str1):

    return sum(ord(c) for c in str1)

def check(ascii_value_string):
    assert ascii_value_string("python")==112
    assert ascii_value_string("Program")==80
    assert ascii_value_string("Language")==76

check(ascii_value_string)
solution 0 passed False
Task 146 gens 2 solutions in cir 5
check_program: 
# Write a function to find the ascii value of total characters in a string.

def ascii_value_string(str1):

    return sum(ord(c) for c in str1)

def check(ascii_value_string):
    assert ascii_value_string("python")==112
    assert ascii_value_string("Program")==80
    assert ascii_value_string("Language")==76

check(ascii_value_string)
solution 0 passed False
Task 146 gens 4 solutions in cir 6
check_program: 
# Write a function to find the ascii value of total characters in a string.

def ascii_value_string(str1):

    return sum(ord(c) for c in str1)

def check(ascii_value_string):
    assert ascii_value_string("python")==112
    assert ascii_value_string("Program")==80
    assert ascii_value_string("Language")==76

check(ascii_value_string)
solution 0 passed False
Task 146 gens 9 solutions in cir 7
check_program: 
# Write a function to find the ascii value of total characters in a string.

def ascii_value_string(str1):

    import re
    return sum(ord(c) for c in re.findall(r"[a-zA-Z]", str1))

def check(ascii_value_string):
    assert ascii_value_string("python")==112
    assert ascii_value_string("Program")==80
    assert ascii_value_string("Language")==76

check(ascii_value_string)
solution 0 passed False
Task 146 gens 10 solutions in cir 8
check_program: 
# Write a function to find the ascii value of total characters in a string.

def ascii_value_string(str1):

    return sum(ord(c) for c in str1 if c.isalnum())

def check(ascii_value_string):
    assert ascii_value_string("python")==112
    assert ascii_value_string("Program")==80
    assert ascii_value_string("Language")==76

check(ascii_value_string)
solution 0 passed False
Task 146 gens 10 solutions in cir 9
check_program: 
# Write a function to find the ascii value of total characters in a string.

def ascii_value_string(str1):

    return sum(ord(c) for c in str1 if c >= 'a' and c <= 'z')

def check(ascii_value_string):
    assert ascii_value_string("python")==112
    assert ascii_value_string("Program")==80
    assert ascii_value_string("Language")==76

check(ascii_value_string)
solution 0 passed False
Task 146 gens 10 solutions in cir 10
check_program: 
# Write a function to find the ascii value of total characters in a string.

def ascii_value_string(str1):

    return sum(ord(c) for c in str1)

def check(ascii_value_string):
    assert ascii_value_string("python")==112
    assert ascii_value_string("Program")==80
    assert ascii_value_string("Language")==76

check(ascii_value_string)
solution 0 passed False
Task 283 gens 1 solutions in cir 0
check_program: 
# Write a python function to check whether the frequency of each digit is less than or equal to the digit itself.

def validate(n):

    freq = {}
    for i in range(10):
        freq[i] = n.count(str(i))
    return freq

def check(validate):
    assert validate(1234) == True
    assert validate(51241) == False
    assert validate(321) == True

check(validate)
solution 0 passed False
Task 283 gens 5 solutions in cir 1
check_program: 
# Write a python function to check whether the frequency of each digit is less than or equal to the digit itself.

def validate(n):

    freq = {}
    for i in range(10):
        freq[str(i)] = n.count(str(i))
    return freq

def check(validate):
    assert validate(1234) == True
    assert validate(51241) == False
    assert validate(321) == True

check(validate)
solution 0 passed False
Task 283 gens 10 solutions in cir 2
check_program: 
# Write a python function to check whether the frequency of each digit is less than or equal to the digit itself.

def validate(n):

    import collections
    freq = collections.Counter(str(n))
    return all(freq[i] <= i for i in range(10))

def check(validate):
    assert validate(1234) == True
    assert validate(51241) == False
    assert validate(321) == True

check(validate)
solution 0 passed False
Task 283 gens 10 solutions in cir 3
check_program: 
# Write a python function to check whether the frequency of each digit is less than or equal to the digit itself.

def validate(n):

    freq = {}
    for digit in str(n):
        if digit.isdigit() and int(digit) > freq.get(digit, 0):
            return False
    return True

def check(validate):
    assert validate(1234) == True
    assert validate(51241) == False
    assert validate(321) == True

check(validate)
solution 0 passed False
Task 283 gens 10 solutions in cir 4
check_program: 
# Write a python function to check whether the frequency of each digit is less than or equal to the digit itself.

def validate(n):

    import collections
    freq = collections.Counter(str(n))
    for val, count in freq.items():
        if count > len(freq) // 2:
            return False
    return True

def check(validate):
    assert validate(1234) == True
    assert validate(51241) == False
    assert validate(321) == True

check(validate)
solution 0 passed False
Task 136 gens 1 solutions in cir 0
check_program: 
# Write a function to calculate electricity bill.

def cal_electbill(units):

    bill = 0
    for i in range(units):
        bill += 5.5
    return bill

def check(cal_electbill):
    assert cal_electbill(75)==246.25
    assert cal_electbill(265)==1442.75
    assert cal_electbill(100)==327.5

check(cal_electbill)
solution 0 passed False
Task 136 gens 3 solutions in cir 1
check_program: 
# Write a function to calculate electricity bill.

def cal_electbill(units):

    bill = 0
    for i in range(units):
        bill += 5.5
    return bill

def check(cal_electbill):
    assert cal_electbill(75)==246.25
    assert cal_electbill(265)==1442.75
    assert cal_electbill(100)==327.5

check(cal_electbill)
solution 0 passed False
Task 136 gens 10 solutions in cir 2
check_program: 
# Write a function to calculate electricity bill.

def cal_electbill(units):

    bill = 5.5
    for i in range(units):
        bill += 5.5
    return bill

def check(cal_electbill):
    assert cal_electbill(75)==246.25
    assert cal_electbill(265)==1442.75
    assert cal_electbill(100)==327.5

check(cal_electbill)
solution 0 passed False
Task 136 gens 10 solutions in cir 3
check_program: 
# Write a function to calculate electricity bill.

def cal_electbill(units):

    bill = 5.5
    total = 5.5
    for i in range(units):
        total += 5.5
    return total

def check(cal_electbill):
    assert cal_electbill(75)==246.25
    assert cal_electbill(265)==1442.75
    assert cal_electbill(100)==327.5

check(cal_electbill)
solution 0 passed False
Task 136 gens 10 solutions in cir 4
check_program: 
# Write a function to calculate electricity bill.

def cal_electbill(units):

    import math
    bill = 0
    if units <= 15:
        bill = 5.5
    elif units <= 30:
        bill = 5.5 + (0.25 * units)
    elif units <= 45:
        bill = 5.5 + (0.5 * units)
    elif units <= 60:
        bill = 5.5 + (0.75 * units)
    elif units <= 75:
        bill = 5.5 + (1 * units)
    elif units <= 90:
        bill = 5.5 + (1.25 * units)
    elif units <= 105:
        bill = 5.5 + (1.5 * units)
    elif units <= 120:
        bill = 5.5 + (1.75 * units)
    else:
        bill = 5.5 + (2 * units)
    return bill

def check(cal_electbill):
    assert cal_electbill(75)==246.25
    assert cal_electbill(265)==1442.75
    assert cal_electbill(100)==327.5

check(cal_electbill)
solution 0 passed False
Task 136 gens 10 solutions in cir 5
check_program: 
# Write a function to calculate electricity bill.

def cal_electbill(units):

    bill = {
        0: 5.5,
        15: 5.5,
        24: 5.5,
        19: 7.5,
        16: 5.5,
        5: 8,
        15: 7,
        0: 5.5,
        14: 6.5,
        2: 20,
        5: 2,
    }[units]
    return bill

def check(cal_electbill):
    assert cal_electbill(75)==246.25
    assert cal_electbill(265)==1442.75
    assert cal_electbill(100)==327.5

check(cal_electbill)
solution 0 passed False
Task 136 gens 10 solutions in cir 6
check_program: 
# Write a function to calculate electricity bill.

def cal_electbill(units):

    bill = {
        0: 5.5,
        15: 5.5,
        24: 5.5,
        19: 7.5,
        16: 5.5,
        5: 8,
        15: 7,
        0: 5.5,
        14: 6.5,
        2: 20,
        5: 2,
    }
    return bill.get(units, 0)

def check(cal_electbill):
    assert cal_electbill(75)==246.25
    assert cal_electbill(265)==1442.75
    assert cal_electbill(100)==327.5

check(cal_electbill)
solution 0 passed False
Task 136 gens 10 solutions in cir 7
check_program: 
# Write a function to calculate electricity bill.

def cal_electbill(units):

    bill = {
        12: 5.5,
        15: 7,
        14: 6.5,
        2: 20,
        5: 2,
        24: 11.5,
        19: 9,
        2: 20,
        25: 12
    }
    return bill.get(units, 0)

def check(cal_electbill):
    assert cal_electbill(75)==246.25
    assert cal_electbill(265)==1442.75
    assert cal_electbill(100)==327.5

check(cal_electbill)
solution 0 passed False
Task 136 gens 10 solutions in cir 8
check_program: 
# Write a function to calculate electricity bill.

def cal_electbill(units):

    bill = {
        12: 5.5,
        15: 7,
        14: 6.5,
        2: 20,
        5: 2,
        24: 11.5,
        19: 9,
        2: 20,
        25: 12
    }
    return bill.get(units, 0)

def check(cal_electbill):
    assert cal_electbill(75)==246.25
    assert cal_electbill(265)==1442.75
    assert cal_electbill(100)==327.5

check(cal_electbill)
solution 0 passed False
Task 336 gens 1 solutions in cir 0
check_program: 
# Write a function to check whether the given month name contains 28 days or not.

def check_monthnum(monthname1):

    if monthname1.lower() in ["january", "february", "march", "april", "may", "june", "july", "august", "september", "october", "november", "december"]:
        return True
    else:
        return False

def check(check_monthnum):
    assert check_monthnum("February")==True
    assert check_monthnum("January")==False
    assert check_monthnum("March")==False

check(check_monthnum)
solution 0 passed False
Task 336 gens 10 solutions in cir 1
check_program: 
# Write a function to check whether the given month name contains 28 days or not.

def check_monthnum(monthname1):

    monthnames = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"]
    if monthname1.lower() in monthnames:
        return True
    else:
        return False

def check(check_monthnum):
    assert check_monthnum("February")==True
    assert check_monthnum("January")==False
    assert check_monthnum("March")==False

check(check_monthnum)
solution 0 passed False
Task 336 gens 10 solutions in cir 2
check_program: 
# Write a function to check whether the given month name contains 28 days or not.

def check_monthnum(monthname1):

    import re
    if re.search(r"^january|february|march|april|may|june|july|august|september|october|november|december$", monthname1, re.IGNORECASE):
        if len(monthname1) == 3:
            return monthname1.endswith("r")
        elif len(monthname1) == 4:
            return monthname1.endswith("ber")
        elif len(monthname1) == 5:
            return monthname1.endswith("ry")
        elif len(monthname1) == 6:
            return monthname1.endswith("er")
        elif len(monthname1) == 7:
            return monthname1.endswith("ry")
        elif len(monthname1) == 8:
            return monthname1.endswith("or")
        elif len(monthname1) == 9:
            return monthname1.endswith("st")
        else:
            return True
    return False

def check(check_monthnum):
    assert check_monthnum("February")==True
    assert check_monthnum("January")==False
    assert check_monthnum("March")==False

check(check_monthnum)
solution 0 passed False
Task 427 gens 1 solutions in cir 0
check_program: 
# Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.
import re
def change_date_format(dt):

    import re
    return re.sub(r'\d{4}-\d{2}-\d{2}', r'dd-mm-yyyy', dt)

def check(change_date_format):
    assert change_date_format("2026-01-02") == '02-01-2026'
    assert change_date_format("2020-11-13") == '13-11-2020'
    assert change_date_format("2021-04-26") == '26-04-2021'

check(change_date_format)
solution 0 passed False
Task 427 gens 4 solutions in cir 1
check_program: 
# Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.
import re
def change_date_format(dt):

    return re.sub(r'\d{4}-\d{2}-\d{2}', r'dd-mm-yyyy', dt)

def check(change_date_format):
    assert change_date_format("2026-01-02") == '02-01-2026'
    assert change_date_format("2020-11-13") == '13-11-2020'
    assert change_date_format("2021-04-26") == '26-04-2021'

check(change_date_format)
solution 0 passed False
Task 427 gens 9 solutions in cir 2
check_program: 
# Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.
import re
def change_date_format(dt):

    return dt.strftime('%d-%m-%Y')

def check(change_date_format):
    assert change_date_format("2026-01-02") == '02-01-2026'
    assert change_date_format("2020-11-13") == '13-11-2020'
    assert change_date_format("2021-04-26") == '26-04-2021'

check(change_date_format)
solution 0 passed False
Task 427 gens 10 solutions in cir 3
check_program: 
# Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.
import re
def change_date_format(dt):

    from datetime import datetime
    return datetime.strptime(dt, '%Y-%m-%d').strftime('%d-%m-%Y')

def check(change_date_format):
    assert change_date_format("2026-01-02") == '02-01-2026'
    assert change_date_format("2020-11-13") == '13-11-2020'
    assert change_date_format("2021-04-26") == '26-04-2021'

check(change_date_format)
solution 0 passed True
Task 427 gens 10 solutions in cir 4
check_program: 
# Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.
import re
def change_date_format(dt):

    from datetime import datetime
    return datetime.strptime(dt, '%Y-%m-%d').strftime('%d-%m-%Y')

def check(change_date_format):
    assert change_date_format("2026-01-02") == '02-01-2026'
    assert change_date_format("2020-11-13") == '13-11-2020'
    assert change_date_format("2021-04-26") == '26-04-2021'

check(change_date_format)
solution 0 passed True
Task 387 gens 1 solutions in cir 0
check_program: 
# Write a python function to check whether the hexadecimal number is even or odd.

def even_or_odd(N):

    if N % 2 == 0:
        return "even"
    else:
        return "odd"

def check(even_or_odd):
    assert even_or_odd("AB3454D") =="Odd"
    assert even_or_odd("ABC") == "Even"
    assert even_or_odd("AAD") == "Odd"

check(even_or_odd)
solution 0 passed False
Task 387 gens 3 solutions in cir 1
check_program: 
# Write a python function to check whether the hexadecimal number is even or odd.

def even_or_odd(N):

    if N % 2 == 0:
        return "even"
    else:
        return "odd"

def check(even_or_odd):
    assert even_or_odd("AB3454D") =="Odd"
    assert even_or_odd("ABC") == "Even"
    assert even_or_odd("AAD") == "Odd"

check(even_or_odd)
solution 0 passed False
Task 387 gens 3 solutions in cir 2
check_program: 
# Write a python function to check whether the hexadecimal number is even or odd.

def even_or_odd(N):

    if N % 2 == 0:
        return "even"
    else:
        return "odd"

def check(even_or_odd):
    assert even_or_odd("AB3454D") =="Odd"
    assert even_or_odd("ABC") == "Even"
    assert even_or_odd("AAD") == "Odd"

check(even_or_odd)
solution 0 passed False
Task 387 gens 5 solutions in cir 3
check_program: 
# Write a python function to check whether the hexadecimal number is even or odd.

def even_or_odd(N):

    if N % 2 == 0:
        return "even"
    else:
        return "odd"

def check(even_or_odd):
    assert even_or_odd("AB3454D") =="Odd"
    assert even_or_odd("ABC") == "Even"
    assert even_or_odd("AAD") == "Odd"

check(even_or_odd)
solution 0 passed False
Task 387 gens 8 solutions in cir 4
check_program: 
# Write a python function to check whether the hexadecimal number is even or odd.

def even_or_odd(N):

    if N % 2 == 0:
        return "even"
    else:
        return "odd"

def check(even_or_odd):
    assert even_or_odd("AB3454D") =="Odd"
    assert even_or_odd("ABC") == "Even"
    assert even_or_odd("AAD") == "Odd"

check(even_or_odd)
solution 0 passed False
Task 387 gens 10 solutions in cir 5
check_program: 
# Write a python function to check whether the hexadecimal number is even or odd.

def even_or_odd(N):

    return ('even' if N % 2 == 0 else 'odd')

def check(even_or_odd):
    assert even_or_odd("AB3454D") =="Odd"
    assert even_or_odd("ABC") == "Even"
    assert even_or_odd("AAD") == "Odd"

check(even_or_odd)
solution 0 passed False
Task 387 gens 10 solutions in cir 6
check_program: 
# Write a python function to check whether the hexadecimal number is even or odd.

def even_or_odd(N):

    return ('even' if N % 2 == 0 else 'odd')

def check(even_or_odd):
    assert even_or_odd("AB3454D") =="Odd"
    assert even_or_odd("ABC") == "Even"
    assert even_or_odd("AAD") == "Odd"

check(even_or_odd)
solution 0 passed False
Task 387 gens 10 solutions in cir 7
check_program: 
# Write a python function to check whether the hexadecimal number is even or odd.

def even_or_odd(N):

    return ('even' if N % 2 == 0 else 'odd')

def check(even_or_odd):
    assert even_or_odd("AB3454D") =="Odd"
    assert even_or_odd("ABC") == "Even"
    assert even_or_odd("AAD") == "Odd"

check(even_or_odd)
solution 0 passed False
Task 387 gens 10 solutions in cir 8
check_program: 
# Write a python function to check whether the hexadecimal number is even or odd.

def even_or_odd(N):

    if N % 2 == 0:
        return 'even'
    return 'odd'

def check(even_or_odd):
    assert even_or_odd("AB3454D") =="Odd"
    assert even_or_odd("ABC") == "Even"
    assert even_or_odd("AAD") == "Odd"

check(even_or_odd)
solution 0 passed False
Task 387 gens 10 solutions in cir 9
check_program: 
# Write a python function to check whether the hexadecimal number is even or odd.

def even_or_odd(N):

    if (N % 2) == 0:
        return "even"
    else:
        return "odd"

def check(even_or_odd):
    assert even_or_odd("AB3454D") =="Odd"
    assert even_or_odd("ABC") == "Even"
    assert even_or_odd("AAD") == "Odd"

check(even_or_odd)
solution 0 passed False
Task 387 gens 10 solutions in cir 10
check_program: 
# Write a python function to check whether the hexadecimal number is even or odd.

def even_or_odd(N):

    return ('even' if N % 2 == 0 else 'odd')

def check(even_or_odd):
    assert even_or_odd("AB3454D") =="Odd"
    assert even_or_odd("ABC") == "Even"
    assert even_or_odd("AAD") == "Odd"

check(even_or_odd)
solution 0 passed False
Task 266 gens 1 solutions in cir 0
check_program: 
# Write a function to find the lateral surface area of a cube.

def lateralsurface_cube(l):

    return l * 6

def check(lateralsurface_cube):
    assert lateralsurface_cube(5)==100
    assert lateralsurface_cube(9)==324
    assert lateralsurface_cube(10)==400

check(lateralsurface_cube)
solution 0 passed False
Task 266 gens 1 solutions in cir 1
check_program: 
# Write a function to find the lateral surface area of a cube.

def lateralsurface_cube(l):

    return l * 6

def check(lateralsurface_cube):
    assert lateralsurface_cube(5)==100
    assert lateralsurface_cube(9)==324
    assert lateralsurface_cube(10)==400

check(lateralsurface_cube)
solution 0 passed False
Task 266 gens 1 solutions in cir 2
check_program: 
# Write a function to find the lateral surface area of a cube.

def lateralsurface_cube(l):

    return l * 6

def check(lateralsurface_cube):
    assert lateralsurface_cube(5)==100
    assert lateralsurface_cube(9)==324
    assert lateralsurface_cube(10)==400

check(lateralsurface_cube)
solution 0 passed False
Task 266 gens 2 solutions in cir 3
check_program: 
# Write a function to find the lateral surface area of a cube.

def lateralsurface_cube(l):

    return l * 6

def check(lateralsurface_cube):
    assert lateralsurface_cube(5)==100
    assert lateralsurface_cube(9)==324
    assert lateralsurface_cube(10)==400

check(lateralsurface_cube)
solution 0 passed False
Task 266 gens 4 solutions in cir 4
check_program: 
# Write a function to find the lateral surface area of a cube.

def lateralsurface_cube(l):

    return l * 6

def check(lateralsurface_cube):
    assert lateralsurface_cube(5)==100
    assert lateralsurface_cube(9)==324
    assert lateralsurface_cube(10)==400

check(lateralsurface_cube)
solution 0 passed False
Task 266 gens 10 solutions in cir 5
check_program: 
# Write a function to find the lateral surface area of a cube.

def lateralsurface_cube(l):

    return l * 6

def check(lateralsurface_cube):
    assert lateralsurface_cube(5)==100
    assert lateralsurface_cube(9)==324
    assert lateralsurface_cube(10)==400

check(lateralsurface_cube)
solution 0 passed False
Task 266 gens 10 solutions in cir 6
check_program: 
# Write a function to find the lateral surface area of a cube.

def lateralsurface_cube(l):

    return l * 6

def check(lateralsurface_cube):
    assert lateralsurface_cube(5)==100
    assert lateralsurface_cube(9)==324
    assert lateralsurface_cube(10)==400

check(lateralsurface_cube)
solution 0 passed False
Task 266 gens 10 solutions in cir 7
check_program: 
# Write a function to find the lateral surface area of a cube.

def lateralsurface_cube(l):

    return l * 6

def check(lateralsurface_cube):
    assert lateralsurface_cube(5)==100
    assert lateralsurface_cube(9)==324
    assert lateralsurface_cube(10)==400

check(lateralsurface_cube)
solution 0 passed False
Task 266 gens 10 solutions in cir 8
check_program: 
# Write a function to find the lateral surface area of a cube.

def lateralsurface_cube(l):

    return l * 6

def check(lateralsurface_cube):
    assert lateralsurface_cube(5)==100
    assert lateralsurface_cube(9)==324
    assert lateralsurface_cube(10)==400

check(lateralsurface_cube)
solution 0 passed False
Task 266 gens 10 solutions in cir 9
check_program: 
# Write a function to find the lateral surface area of a cube.

def lateralsurface_cube(l):

    return l * 6

def check(lateralsurface_cube):
    assert lateralsurface_cube(5)==100
    assert lateralsurface_cube(9)==324
    assert lateralsurface_cube(10)==400

check(lateralsurface_cube)
solution 0 passed False
Task 192 gens 1 solutions in cir 0
check_program: 
# Write a python function to check whether a string has atleast one letter and one number.

def check_String(str):

    if len(str) == 0:
        return False
    for i in range(len(str)):
        if str[i].isalpha() or str[i].isdigit():
            return True
    return False

def check(check_String):
    assert check_String('thishasboth29') == True
    assert check_String('python') == False
    assert check_String ('string') == False

check(check_String)
solution 0 passed False
Task 192 gens 9 solutions in cir 1
check_program: 
# Write a python function to check whether a string has atleast one letter and one number.

def check_String(str):

    if len(str) == 0:
        return False
    for i in range(len(str)):
        if (str[i].isalpha() or str[i].isdigit()) and str[i].isalpha() == False:
            return True
    return False

def check(check_String):
    assert check_String('thishasboth29') == True
    assert check_String('python') == False
    assert check_String ('string') == False

check(check_String)
solution 0 passed True
Task 192 gens 10 solutions in cir 2
check_program: 
# Write a python function to check whether a string has atleast one letter and one number.

def check_String(str):

    if len(str) == 0:
        return False
    for i in range(len(str)):
        if (str[i].isalpha() or str[i].isdigit()) and str[i].isalpha() == False:
            return True
    return False

def check(check_String):
    assert check_String('thishasboth29') == True
    assert check_String('python') == False
    assert check_String ('string') == False

check(check_String)
solution 0 passed True
Task 192 gens 10 solutions in cir 3
check_program: 
# Write a python function to check whether a string has atleast one letter and one number.

def check_String(str):

    if len(str) == 0:
        return False
    return any((str[i].isalpha() or str[i].isdigit()) for i in range(len(str)))

def check(check_String):
    assert check_String('thishasboth29') == True
    assert check_String('python') == False
    assert check_String ('string') == False

check(check_String)
solution 0 passed False
Task 223 gens 1 solutions in cir 0
check_program: 
# Write a function to check for majority element in the given sorted array.

def is_majority(arr, n, x):

    count = 0
    for i in range(n):
        if arr[i] == x:
            count += 1
    return count >= n

def check(is_majority):
    assert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True
    assert is_majority([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False
    assert is_majority([1, 1, 1, 2, 2], 5, 1) == True

check(is_majority)
solution 0 passed False
Task 223 gens 4 solutions in cir 1
check_program: 
# Write a function to check for majority element in the given sorted array.

def is_majority(arr, n, x):

    if len(arr) < n:
        return False
    count = 0
    for i in range(n):
        if arr[i] == x:
            count += 1
    return count >= n

def check(is_majority):
    assert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True
    assert is_majority([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False
    assert is_majority([1, 1, 1, 2, 2], 5, 1) == True

check(is_majority)
solution 0 passed False
Task 223 gens 10 solutions in cir 2
check_program: 
# Write a function to check for majority element in the given sorted array.

def is_majority(arr, n, x):

    if len(arr) < n:
        return False
    count = 0
    for i in range(n):
        if arr[i] == x:
            count += 1
    return count >= n

def check(is_majority):
    assert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True
    assert is_majority([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False
    assert is_majority([1, 1, 1, 2, 2], 5, 1) == True

check(is_majority)
solution 0 passed False
Task 223 gens 10 solutions in cir 3
check_program: 
# Write a function to check for majority element in the given sorted array.

def is_majority(arr, n, x):

    count = 0
    for i in arr:
        if i == x:
            count += 1
    return count >= n

def check(is_majority):
    assert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True
    assert is_majority([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False
    assert is_majority([1, 1, 1, 2, 2], 5, 1) == True

check(is_majority)
solution 0 passed False
Task 223 gens 10 solutions in cir 4
check_program: 
# Write a function to check for majority element in the given sorted array.

def is_majority(arr, n, x):

    count = 0
    for i in arr:
        if i == x:
            count += 1
    return count >= n

def check(is_majority):
    assert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True
    assert is_majority([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False
    assert is_majority([1, 1, 1, 2, 2], 5, 1) == True

check(is_majority)
solution 0 passed False
Task 280 gens 1 solutions in cir 0
check_program: 
# Write a function to search an element in the given array by using sequential search.

def sequential_search(dlist, item):

    for i in range(len(dlist)):
        if dlist[i] == item:
            return i
    return -1

def check(sequential_search):
    assert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)
    assert sequential_search([12, 32, 45, 62, 35, 47, 44, 61],61) == (True, 7)
    assert sequential_search([9, 10, 17, 19, 22, 39, 48, 56],48) == (True, 6)

check(sequential_search)
solution 0 passed False
Task 280 gens 1 solutions in cir 1
check_program: 
# Write a function to search an element in the given array by using sequential search.

def sequential_search(dlist, item):

    for i in range(len(dlist)):
        if dlist[i] == item:
            return i
    return -1

def check(sequential_search):
    assert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)
    assert sequential_search([12, 32, 45, 62, 35, 47, 44, 61],61) == (True, 7)
    assert sequential_search([9, 10, 17, 19, 22, 39, 48, 56],48) == (True, 6)

check(sequential_search)
solution 0 passed False
Task 280 gens 2 solutions in cir 2
check_program: 
# Write a function to search an element in the given array by using sequential search.

def sequential_search(dlist, item):

    for i in range(len(dlist)):
        if dlist[i] == item:
            return i
    return -1

def check(sequential_search):
    assert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)
    assert sequential_search([12, 32, 45, 62, 35, 47, 44, 61],61) == (True, 7)
    assert sequential_search([9, 10, 17, 19, 22, 39, 48, 56],48) == (True, 6)

check(sequential_search)
solution 0 passed False
Task 280 gens 5 solutions in cir 3
check_program: 
# Write a function to search an element in the given array by using sequential search.

def sequential_search(dlist, item):

    for i in range(len(dlist)):
        if dlist[i] == item:
            return i
    return -1

def check(sequential_search):
    assert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)
    assert sequential_search([12, 32, 45, 62, 35, 47, 44, 61],61) == (True, 7)
    assert sequential_search([9, 10, 17, 19, 22, 39, 48, 56],48) == (True, 6)

check(sequential_search)
solution 0 passed False
Task 280 gens 10 solutions in cir 4
check_program: 
# Write a function to search an element in the given array by using sequential search.

def sequential_search(dlist, item):

    result = -1
    for i in range(len(dlist)):
        if dlist[i] == item:
            result = i
    return result

def check(sequential_search):
    assert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)
    assert sequential_search([12, 32, 45, 62, 35, 47, 44, 61],61) == (True, 7)
    assert sequential_search([9, 10, 17, 19, 22, 39, 48, 56],48) == (True, 6)

check(sequential_search)
solution 0 passed False
Task 280 gens 10 solutions in cir 5
check_program: 
# Write a function to search an element in the given array by using sequential search.

def sequential_search(dlist, item):

    start = 0
    for i in range(len(dlist)):
        if dlist[i] == item:
            return i - start
        start = i
    return -1

def check(sequential_search):
    assert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)
    assert sequential_search([12, 32, 45, 62, 35, 47, 44, 61],61) == (True, 7)
    assert sequential_search([9, 10, 17, 19, 22, 39, 48, 56],48) == (True, 6)

check(sequential_search)
solution 0 passed False
Task 280 gens 10 solutions in cir 6
check_program: 
# Write a function to search an element in the given array by using sequential search.

def sequential_search(dlist, item):

    start = 0
    for i in range(len(dlist)):
        if dlist[i] == item:
            return i - start
        start = i
    return -1

def check(sequential_search):
    assert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)
    assert sequential_search([12, 32, 45, 62, 35, 47, 44, 61],61) == (True, 7)
    assert sequential_search([9, 10, 17, 19, 22, 39, 48, 56],48) == (True, 6)

check(sequential_search)
solution 0 passed False
Task 280 gens 10 solutions in cir 7
check_program: 
# Write a function to search an element in the given array by using sequential search.

def sequential_search(dlist, item):

    start = 0
    for i in range(len(dlist)):
        if dlist[i] == item:
            return i - start
        start = i
    return -1

def check(sequential_search):
    assert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)
    assert sequential_search([12, 32, 45, 62, 35, 47, 44, 61],61) == (True, 7)
    assert sequential_search([9, 10, 17, 19, 22, 39, 48, 56],48) == (True, 6)

check(sequential_search)
solution 0 passed False
Task 508 gens 1 solutions in cir 0
check_program: 
# Write a function to check if the common elements between two given lists are in the same order or not.

def same_order(l1, l2):

    return tuple(sorted(l1) == sorted(l2))

def check(same_order):
    assert same_order(["red","green","black","orange"],["red","pink","green","white","black"])==True
    assert same_order(["red","pink","green","white","black"],["white","orange","pink","black"])==False
    assert same_order(["red","green","black","orange"],["red","pink","green","white","black"])==True

check(same_order)
solution 0 passed False
Task 508 gens 8 solutions in cir 1
check_program: 
# Write a function to check if the common elements between two given lists are in the same order or not.

def same_order(l1, l2):

    if sorted(l1) == sorted(l2):
        return True
    else:
        return False

def check(same_order):
    assert same_order(["red","green","black","orange"],["red","pink","green","white","black"])==True
    assert same_order(["red","pink","green","white","black"],["white","orange","pink","black"])==False
    assert same_order(["red","green","black","orange"],["red","pink","green","white","black"])==True

check(same_order)
solution 0 passed False
Task 508 gens 10 solutions in cir 2
check_program: 
# Write a function to check if the common elements between two given lists are in the same order or not.

def same_order(l1, l2):

    import heapq
    if len(l1) != len(l2):
        return False
    result = True
    for i in range(len(l1)):
        if l1[i] != l2[i]:
            result = False
            break
    return result

def check(same_order):
    assert same_order(["red","green","black","orange"],["red","pink","green","white","black"])==True
    assert same_order(["red","pink","green","white","black"],["white","orange","pink","black"])==False
    assert same_order(["red","green","black","orange"],["red","pink","green","white","black"])==True

check(same_order)
solution 0 passed False
Task 508 gens 10 solutions in cir 3
check_program: 
# Write a function to check if the common elements between two given lists are in the same order or not.

def same_order(l1, l2):

    return sorted(l1) == sorted(l2)

def check(same_order):
    assert same_order(["red","green","black","orange"],["red","pink","green","white","black"])==True
    assert same_order(["red","pink","green","white","black"],["white","orange","pink","black"])==False
    assert same_order(["red","green","black","orange"],["red","pink","green","white","black"])==True

check(same_order)
solution 0 passed False
Task 326 gens 1 solutions in cir 0
check_program: 
# Write a function to get the word with most number of occurrences in the given strings list.
from collections import defaultdict 

def most_occurrences(test_list):

    word_count = defaultdict(int)
    for word in test_list:
        word_count[word] += 1
    return max(word_count, key=word_count.get)

def check(most_occurrences):
    assert most_occurrences(["UTS is best for RTF", "RTF love UTS", "UTS is best"] ) == 'UTS'
    assert most_occurrences(["Its been a great year", "this year is so worse", "this year is okay"] ) == 'year'
    assert most_occurrences(["Families can be reunited", "people can be reunited", "Tasks can be achieved "] ) == 'can'

check(most_occurrences)
solution 0 passed False
Task 326 gens 10 solutions in cir 1
check_program: 
# Write a function to get the word with most number of occurrences in the given strings list.
from collections import defaultdict 

def most_occurrences(test_list):

    from collections import defaultdict

def check(most_occurrences):
    assert most_occurrences(["UTS is best for RTF", "RTF love UTS", "UTS is best"] ) == 'UTS'
    assert most_occurrences(["Its been a great year", "this year is so worse", "this year is okay"] ) == 'year'
    assert most_occurrences(["Families can be reunited", "people can be reunited", "Tasks can be achieved "] ) == 'can'

check(most_occurrences)
solution 0 passed False
Task 326 gens 10 solutions in cir 2
check_program: 
# Write a function to get the word with most number of occurrences in the given strings list.
from collections import defaultdict 

def most_occurrences(test_list):

    word_count = defaultdict(int)
    for word in test_list:
        word_count[word] += 1
    max_word = max(word_count.items(), key=lambda x:x[1])
    return max_word[0]

def check(most_occurrences):
    assert most_occurrences(["UTS is best for RTF", "RTF love UTS", "UTS is best"] ) == 'UTS'
    assert most_occurrences(["Its been a great year", "this year is so worse", "this year is okay"] ) == 'year'
    assert most_occurrences(["Families can be reunited", "people can be reunited", "Tasks can be achieved "] ) == 'can'

check(most_occurrences)
solution 0 passed False
Task 326 gens 10 solutions in cir 3
check_program: 
# Write a function to get the word with most number of occurrences in the given strings list.
from collections import defaultdict 

def most_occurrences(test_list):

    word_count = defaultdict(int)
    for word in test_list:
        word_count[word] += 1
    max_word = max(word_count.items(), key=lambda x:x[1])
    return max_word[0]

def check(most_occurrences):
    assert most_occurrences(["UTS is best for RTF", "RTF love UTS", "UTS is best"] ) == 'UTS'
    assert most_occurrences(["Its been a great year", "this year is so worse", "this year is okay"] ) == 'year'
    assert most_occurrences(["Families can be reunited", "people can be reunited", "Tasks can be achieved "] ) == 'can'

check(most_occurrences)
solution 0 passed False
Task 122 gens 1 solutions in cir 0
check_program: 
# Write a function to find n’th smart number.
MAX = 3000 
def smartNumber(n):

    if n == 1:
        return 1
    elif n % 2 == 0:
        return 1
    elif n % 3 == 0:
        return 1
    elif n % 5 == 0:
        return 1
    elif n % 7 == 0:
        return 1
    elif n % 11 == 0:
        return 1
    elif n % 13 == 0:
        return 1
    elif n % 17 == 0:
        return 1
    elif n % 19 == 0:
        return 1
    else:
        return 0

def check(smartNumber):
    assert smartNumber(1) == 30
    assert smartNumber(50) == 273
    assert smartNumber(1000) == 2664

check(smartNumber)
solution 0 passed False
Task 122 gens 8 solutions in cir 1
check_program: 
# Write a function to find n’th smart number.
MAX = 3000 
def smartNumber(n):

    count_1 = 0
    count_3 = 0
    count_5 = 0
    count_7 = 0
    count_11 = 0
    count_13 = 0
    count_17 = 0
    count_19 = 0
    count_23 = 0
    count = 0
    while count <= n:
        if count % 2 == 0:
            count_1 += 1
        elif count % 3 == 0:
            count_3 += 1
        elif count % 5 == 0:
            count_5 += 1
        elif count % 7 == 0:
            count_7 += 1
        elif count % 11 == 0:
            count_11 += 1
        elif count % 13 == 0:
            count_13 += 1
        elif count % 17 == 0:
            count_17 += 1
        elif count % 19 == 0:
            count_19 += 1
        elif count % 23 == 0:
            count_23 += 1
        count += 1
    return count_1 + count_3 + count_5 + count_7 + count_11 + count_13 + count_17 + count_19 + count_23

def check(smartNumber):
    assert smartNumber(1) == 30
    assert smartNumber(50) == 273
    assert smartNumber(1000) == 2664

check(smartNumber)
solution 0 passed False
Task 122 gens 10 solutions in cir 2
check_program: 
# Write a function to find n’th smart number.
MAX = 3000 
def smartNumber(n):

    count_1 = 0
    count_3 = 0
    count_5 = 0
    count_7 = 0
    count_11 = 0
    count_13 = 0
    count_17 = 0
    count_19 = 0
    count_23 = 0
    count = 0
    while count <= n:
        if count % 2 == 0:
            count_1 += 1
        elif count % 3 == 0:
            count_3 += 1
        elif count % 5 == 0:
            count_5 += 1
        elif count % 7 == 0:
            count_7 += 1
        elif count % 11 == 0:
            count_11 += 1
        elif count % 13 == 0:
            count_13 += 1
        elif count % 17 == 0:
            count_17 += 1
        elif count % 19 == 0:
            count_19 += 1
        elif count % 23 == 0:
            count_23 += 1
        count += 1
    return count_1 + count_3 + count_5 + count_7 + count_11 + count_13 + count_17 + count_19 + count_23

def check(smartNumber):
    assert smartNumber(1) == 30
    assert smartNumber(50) == 273
    assert smartNumber(1000) == 2664

check(smartNumber)
solution 0 passed False
Task 122 gens 10 solutions in cir 3
check_program: 
# Write a function to find n’th smart number.
MAX = 3000 
def smartNumber(n):

    count_1 = 0
    count_3 = 0
    count_5 = 0
    count_7 = 0
    count_11 = 0
    count_13 = 0
    count_17 = 0
    count_19 = 0
    count_23 = 0
    count = 0
    while count <= n:
        if count % 2 == 0:
            count_1 += 1
        elif count % 3 == 0:
            count_3 += 1
        elif count % 5 == 0:
            count_5 += 1
        elif count % 7 == 0:
            count_7 += 1
        elif count % 11 == 0:
            count_11 += 1
        elif count % 13 == 0:
            count_13 += 1
        elif count % 17 == 0:
            count_17 += 1
        elif count % 19 == 0:
            count_19 += 1
        elif count % 23 == 0:
            count_23 += 1
        count += 1
    return count_1 + count_3 + count_5 + count_7 + count_11 + count_13 + count_17 + count_19 + count_23

def check(smartNumber):
    assert smartNumber(1) == 30
    assert smartNumber(50) == 273
    assert smartNumber(1000) == 2664

check(smartNumber)
solution 0 passed False
Task 169 gens 1 solutions in cir 0
check_program: 
# Write a function to calculate the nth pell number.

def get_pell(n):

    if n == 0:
        return 0
    else:
        return (n * (n + 1)) // 2

def check(get_pell):
    assert get_pell(4) == 12
    assert get_pell(7) == 169
    assert get_pell(8) == 408

check(get_pell)
solution 0 passed False
Task 169 gens 8 solutions in cir 1
check_program: 
# Write a function to calculate the nth pell number.

def get_pell(n):

    if n == 0:
        return 0
    elif n % 2 == 0:
        return (n * (n + 1)) // 4
    else:
        return (n * (n - 1)) // 2

def check(get_pell):
    assert get_pell(4) == 12
    assert get_pell(7) == 169
    assert get_pell(8) == 408

check(get_pell)
solution 0 passed False
Task 169 gens 10 solutions in cir 2
check_program: 
# Write a function to calculate the nth pell number.

def get_pell(n):

    if n == 0:
        return 0
    elif n == 1 or n == 2:
        return n
    elif n % 2 == 0:
        return (n * (n + 1)) // 4
    else:
        return (n * (n - 1)) // 2

def check(get_pell):
    assert get_pell(4) == 12
    assert get_pell(7) == 169
    assert get_pell(8) == 408

check(get_pell)
solution 0 passed False
Task 169 gens 10 solutions in cir 3
check_program: 
# Write a function to calculate the nth pell number.

def get_pell(n):

    if n == 0:
        return 0
    elif n == 1 or n == 2:
        return n
    elif n % 2 == 0:
        return (n * (n + 1)) // 4
    else:
        return (n * (n - 1)) // 2

def check(get_pell):
    assert get_pell(4) == 12
    assert get_pell(7) == 169
    assert get_pell(8) == 408

check(get_pell)
solution 0 passed False
Task 169 gens 10 solutions in cir 4
check_program: 
# Write a function to calculate the nth pell number.

def get_pell(n):

    if n < 0:
        return -1
    elif n == 0:
        return 0
    elif n == 1:
        return 1
    elif n == 2:
        return 2
    elif n == 3:
        return 3
    elif n == 4:
        return 5
    elif n == 5:
        return 8
    elif n == 6:
        return 13
    elif n == 7:
        return 21
    elif n == 8:
        return 34
    elif n == 9:
        return 55
    else:
        return -1

def check(get_pell):
    assert get_pell(4) == 12
    assert get_pell(7) == 169
    assert get_pell(8) == 408

check(get_pell)
solution 0 passed False
Task 169 gens 10 solutions in cir 5
check_program: 
# Write a function to calculate the nth pell number.

def get_pell(n):

    if n < 0:
        return -1
    elif n == 0:
        return 0
    elif n == 1:
        return 1
    elif n == 2:
        return 2
    elif n == 3:
        return 3
    elif n == 4:
        return 5
    elif n == 5:
        return 8
    elif n == 6:
        return 13
    elif n == 7:
        return 21
    elif n == 8:
        return 34
    elif n == 9:
        return 55
    elif n == 10:
        return 55
    else:
        return -1

def check(get_pell):
    assert get_pell(4) == 12
    assert get_pell(7) == 169
    assert get_pell(8) == 408

check(get_pell)
solution 0 passed False
Task 169 gens 10 solutions in cir 6
check_program: 
# Write a function to calculate the nth pell number.

def get_pell(n):

    if n < 0:
        return -1
    elif n == 0:
        return 0
    elif n == 1:
        return 1
    elif n == 2:
        return 2
    elif n == 3:
        return 3
    elif n == 4:
        return 5
    elif n == 5:
        return 8
    elif n == 6:
        return 13
    elif n == 7:
        return 21
    elif n == 8:
        return 34
    elif n == 9:
        return 55
    elif n == 10:
        return 55
    else:
        return -1

def check(get_pell):
    assert get_pell(4) == 12
    assert get_pell(7) == 169
    assert get_pell(8) == 408

check(get_pell)
solution 0 passed False
Task 169 gens 10 solutions in cir 7
check_program: 
# Write a function to calculate the nth pell number.

def get_pell(n):

    if n < 0:
        return -1
    if n == 0:
        return 0
    if n == 1:
        return 1
    if n == 2:
        return 2
    if n == 3:
        return 3
    if n == 4:
        return 5
    if n == 5:
        return 8
    if n == 6:
        return 13
    if n == 7:
        return 21
    if n == 8:
        return 34
    if n == 9:
        return 55
    if n == 10:
        return 55
    if n == 11:
        return 89
    if n == 12:
        return 144
    if n == 13:
        return 208
    if n == 14:
        return 312
    if n == 15:
        return 440
    if n == 16:
        return 672
    if n == 17:
        return 990
    if n == 18:
        return 1433
    if n == 19:
        return 1962
    if n == 20:
        return 2880
    if n == 21:
        return 3906
    if n == 22:
        return 5034
    if n == 23:
        return 6272
    if n == 24:
        return 7509
    if n == 25:
        return 9108
    if n == 26:
        return 10818
    if n == 27:
        return 12961
    if n == 28:
        return 15402
    if n == 29:
        return 17916
    if n == 30:
        return 20450

def check(get_pell):
    assert get_pell(4) == 12
    assert get_pell(7) == 169
    assert get_pell(8) == 408

check(get_pell)
solution 0 passed False
Task 169 gens 10 solutions in cir 8
check_program: 
# Write a function to calculate the nth pell number.

def get_pell(n):

    if n < 0:
        return -1
    if n == 0:
        return 0
    if n == 1:
        return 1
    if n == 2:
        return 2
    if n == 3:
        return 3
    if n == 4:
        return 5
    if n == 5:
        return 8
    if n == 6:
        return 13
    if n == 7:
        return 21
    if n == 8:
        return 34
    if n == 9:
        return 55
    if n == 10:
        return 55
    if n == 11:
        return 89
    if n == 12:
        return 144
    if n == 13:
        return 208
    if n == 14:
        return 312
    if n == 15:
        return 440
    if n == 16:
        return 672
    if n == 17:
        return 990
    if n == 18:
        return 1433
    if n == 19:
        return 1962
    if n == 20:
        return 2880
    if n == 21:
        return 3906
    if n == 22:
        return 5034
    if n == 23:
        return 6272
    if n == 24:
        return 7509
    if n == 25:
        return 9108
    if n == 26:
        return 10818
    if n == 27:
        return 12961
    if n == 28:
        return 15402
    if n == 29:
        return 17916
    if n == 30:
        return 20450

def check(get_pell):
    assert get_pell(4) == 12
    assert get_pell(7) == 169
    assert get_pell(8) == 408

check(get_pell)
solution 0 passed False
Task 169 gens 10 solutions in cir 9
check_program: 
# Write a function to calculate the nth pell number.

def get_pell(n):

    if n == 0:
        return 0
    elif n == 1:
        return 1
    elif n == 2:
        return 2
    elif n == 3:
        return 3
    elif n == 4:
        return 5
    elif n == 5:
        return 5
    elif n == 6:
        return 13
    elif n == 7:
        return 21
    elif n == 8:
        return 34
    elif n == 9:
        return 55
    elif n == 10:
        return 55
    else:
        return -1

def check(get_pell):
    assert get_pell(4) == 12
    assert get_pell(7) == 169
    assert get_pell(8) == 408

check(get_pell)
solution 0 passed False
Task 169 gens 10 solutions in cir 10
check_program: 
# Write a function to calculate the nth pell number.

def get_pell(n):

    if n == 0:
        return 0
    elif n == 1:
        return 1
    elif n == 2:
        return 2
    elif n == 3:
        return 3
    elif n == 4:
        return 5
    elif n == 5:
        return 5
    elif n == 6:
        return 13
    elif n == 7:
        return 21
    elif n == 8:
        return 34
    elif n == 9:
        return 55
    elif n == 10:
        return 55
    else:
        return -1

def check(get_pell):
    assert get_pell(4) == 12
    assert get_pell(7) == 169
    assert get_pell(8) == 408

check(get_pell)
solution 0 passed False
Task 289 gens 1 solutions in cir 0
check_program: 
# Write a python function to calculate the number of odd days in a given year.

def odd_Days(N):

    days = [i for i in range(1, N+1)]
    odd_days = [i for i in days if i % 2 != 0]
    return len(odd_days)

def check(odd_Days):
    assert odd_Days(100) == 5
    assert odd_Days(50) ==6
    assert odd_Days(75) == 2

check(odd_Days)
solution 0 passed False
Task 289 gens 9 solutions in cir 1
check_program: 
# Write a python function to calculate the number of odd days in a given year.

def odd_Days(N):

    days = [i for i in range(1, N+1)]
    odd_days = [i for i in days if i % 2 != 0]
    return len(odd_days)

def check(odd_Days):
    assert odd_Days(100) == 5
    assert odd_Days(50) ==6
    assert odd_Days(75) == 2

check(odd_Days)
solution 0 passed False
Task 289 gens 10 solutions in cir 2
check_program: 
# Write a python function to calculate the number of odd days in a given year.

def odd_Days(N):

    years = {2023: 61, 2024: 62, 2025: 63, 2026: 64, 2027: 65, 2028: 66, 2029: 67, 2030: 68, 2031: 69, 2032: 70}
    return years.get(N)

def check(odd_Days):
    assert odd_Days(100) == 5
    assert odd_Days(50) ==6
    assert odd_Days(75) == 2

check(odd_Days)
solution 0 passed False
Task 289 gens 10 solutions in cir 3
check_program: 
# Write a python function to calculate the number of odd days in a given year.

def odd_Days(N):

    years = {2023: 61, 2024: 62, 2025: 63, 2026: 64, 2027: 65, 2028: 66, 2029: 67, 2030: 68, 2031: 69, 2032: 70}
    return years.get(N)

def check(odd_Days):
    assert odd_Days(100) == 5
    assert odd_Days(50) ==6
    assert odd_Days(75) == 2

check(odd_Days)
solution 0 passed False
Task 289 gens 10 solutions in cir 4
check_program: 
# Write a python function to calculate the number of odd days in a given year.

def odd_Days(N):

    years = {2023: 61, 2024: 62, 2025: 63, 2026: 64, 2027: 65, 2028: 66, 2029: 67, 2030: 68, 2031: 69, 2032: 70}
    return years.get(N, 0)

def check(odd_Days):
    assert odd_Days(100) == 5
    assert odd_Days(50) ==6
    assert odd_Days(75) == 2

check(odd_Days)
solution 0 passed False
Task 289 gens 10 solutions in cir 5
check_program: 
# Write a python function to calculate the number of odd days in a given year.

def odd_Days(N):

    years = {2023: 61, 2024: 62, 2025: 63, 2026: 64, 2027: 65, 2028: 66, 2029: 67, 2030: 68, 2031: 69, 2032: 70}
    return years.get(N, 0)

def check(odd_Days):
    assert odd_Days(100) == 5
    assert odd_Days(50) ==6
    assert odd_Days(75) == 2

check(odd_Days)
solution 0 passed False
Task 289 gens 10 solutions in cir 6
check_program: 
# Write a python function to calculate the number of odd days in a given year.

def odd_Days(N):

    years = {2023: 61, 2024: 62, 2025: 63, 2026: 64, 2027: 65, 2028: 66, 2029: 67, 2030: 68, 2031: 69, 2032: 70}
    if N in years:
        return years[N]
    return 0

def check(odd_Days):
    assert odd_Days(100) == 5
    assert odd_Days(50) ==6
    assert odd_Days(75) == 2

check(odd_Days)
solution 0 passed False
Task 289 gens 10 solutions in cir 7
check_program: 
# Write a python function to calculate the number of odd days in a given year.

def odd_Days(N):

    years = {2023: 61, 2024: 62, 2025: 63, 2026: 64, 2027: 65, 2028: 66, 2029: 67, 2030: 68, 2031: 69, 2032: 70}
    for year in years:
        if N == year:
            return years[year]
    return 0

def check(odd_Days):
    assert odd_Days(100) == 5
    assert odd_Days(50) ==6
    assert odd_Days(75) == 2

check(odd_Days)
solution 0 passed False
Task 289 gens 10 solutions in cir 8
check_program: 
# Write a python function to calculate the number of odd days in a given year.

def odd_Days(N):

    years = {2023: 61, 2024: 62, 2025: 63, 2026: 64, 2027: 65, 2028: 66, 2029: 67, 2030: 68, 2031: 69}
    if N in years:
        return years[N]
    else:
        return 0

def check(odd_Days):
    assert odd_Days(100) == 5
    assert odd_Days(50) ==6
    assert odd_Days(75) == 2

check(odd_Days)
solution 0 passed False
Task 289 gens 10 solutions in cir 9
check_program: 
# Write a python function to calculate the number of odd days in a given year.

def odd_Days(N):

    years = {2023: 61, 2024: 62, 2025: 63, 2026: 64, 2027: 65, 2028: 66, 2029: 67, 2030: 68, 2031: 69, 2032: 70}
    for year in years:
        if N == year:
            return years[year]
    return 0

def check(odd_Days):
    assert odd_Days(100) == 5
    assert odd_Days(50) ==6
    assert odd_Days(75) == 2

check(odd_Days)
solution 0 passed False
Task 371 gens 1 solutions in cir 0
check_program: 
# Write a function to find the smallest missing element in a sorted array.

def smallest_missing(A, left_element, right_element):

    if left_element < A[0] < right_element:
        return A[0]
    else:
        return A[right_element]

def check(smallest_missing):
    assert smallest_missing([0, 1, 2, 3, 4, 5, 6], 0, 6) == 7
    assert smallest_missing([0, 1, 2, 6, 9, 11, 15], 0, 6) == 3
    assert smallest_missing([1, 2, 3, 4, 6, 9, 11, 15], 0, 7) == 0

check(smallest_missing)
solution 0 passed False
Task 371 gens 10 solutions in cir 1
check_program: 
# Write a function to find the smallest missing element in a sorted array.

def smallest_missing(A, left_element, right_element):

    min_val = A[0] if A else right_element
    for val in A[1:]:
        if val < min_val:
            min_val = val
    return min_val

def check(smallest_missing):
    assert smallest_missing([0, 1, 2, 3, 4, 5, 6], 0, 6) == 7
    assert smallest_missing([0, 1, 2, 6, 9, 11, 15], 0, 6) == 3
    assert smallest_missing([1, 2, 3, 4, 6, 9, 11, 15], 0, 7) == 0

check(smallest_missing)
solution 0 passed False
Task 371 gens 10 solutions in cir 2
check_program: 
# Write a function to find the smallest missing element in a sorted array.

def smallest_missing(A, left_element, right_element):

    if left_element >= A[0] and right_element <= A[-1]:
        return A[0]
    else:
        return A[-1]

def check(smallest_missing):
    assert smallest_missing([0, 1, 2, 3, 4, 5, 6], 0, 6) == 7
    assert smallest_missing([0, 1, 2, 6, 9, 11, 15], 0, 6) == 3
    assert smallest_missing([1, 2, 3, 4, 6, 9, 11, 15], 0, 7) == 0

check(smallest_missing)
solution 0 passed False
Task 371 gens 10 solutions in cir 3
check_program: 
# Write a function to find the smallest missing element in a sorted array.

def smallest_missing(A, left_element, right_element):

    return A[0]

def check(smallest_missing):
    assert smallest_missing([0, 1, 2, 3, 4, 5, 6], 0, 6) == 7
    assert smallest_missing([0, 1, 2, 6, 9, 11, 15], 0, 6) == 3
    assert smallest_missing([1, 2, 3, 4, 6, 9, 11, 15], 0, 7) == 0

check(smallest_missing)
solution 0 passed False
Task 180 gens 1 solutions in cir 0
check_program: 
# Write a function to calculate distance between two points using latitude and longitude.
from math import radians, sin, cos, acos
def distance_lat_long(slat,slon,elat,elon):

    dlat = elat - slat
    dlon = elon - slon
    a = sin(dlat/2)**2 + cos(slon) * cos(elon) * sin(dlon/2)**2
    c = 2 * atan2(sqrt(a), sqrt(1-a))
    return c

def check(distance_lat_long):
    assert distance_lat_long(23.5,67.5,25.5,69.5)==12179.372041317429
    assert distance_lat_long(10.5,20.5,30.5,40.5)==6069.397933300514
    assert distance_lat_long(10,20,30,40)==6783.751974994595

check(distance_lat_long)
solution 0 passed False
Task 180 gens 9 solutions in cir 1
check_program: 
# Write a function to calculate distance between two points using latitude and longitude.
from math import radians, sin, cos, acos
def distance_lat_long(slat,slon,elat,elon):

    dlat = elat - slat
    dlon = elon - slon
    a = sin(dlat/2)**2 + cos(slon) * cos(elon) * sin(dlon/2)**2
    c = 2 * atan2(sqrt(a), sqrt(1-a))
    return c * 60 * 1.1515

def check(distance_lat_long):
    assert distance_lat_long(23.5,67.5,25.5,69.5)==12179.372041317429
    assert distance_lat_long(10.5,20.5,30.5,40.5)==6069.397933300514
    assert distance_lat_long(10,20,30,40)==6783.751974994595

check(distance_lat_long)
solution 0 passed False
Task 180 gens 10 solutions in cir 2
check_program: 
# Write a function to calculate distance between two points using latitude and longitude.
from math import radians, sin, cos, acos
def distance_lat_long(slat,slon,elat,elon):

    dlat = radians(elat-slat)
    dlon = radians(elon-slon)
    a = sin(dlat/2)**2 + cos(slon) * cos(elon) * sin(dlon/2)**2
    c = 2 * atan2(sqrt(a), sqrt(1-a))
    return c

def check(distance_lat_long):
    assert distance_lat_long(23.5,67.5,25.5,69.5)==12179.372041317429
    assert distance_lat_long(10.5,20.5,30.5,40.5)==6069.397933300514
    assert distance_lat_long(10,20,30,40)==6783.751974994595

check(distance_lat_long)
solution 0 passed False
Task 180 gens 10 solutions in cir 3
check_program: 
# Write a function to calculate distance between two points using latitude and longitude.
from math import radians, sin, cos, acos
def distance_lat_long(slat,slon,elat,elon):

    dlat = elat - slat
    dlon = elon - slon
    lat1, lon1 = slat, slon
    lat2, lon2 = elat, elon
    a = sin(dlat/2)**2 + cos(lat1) * cos(lon1) * sin(dlon/2)**2
    c = 2 * atan2(sqrt(a), sqrt(1-a))
    return c

def check(distance_lat_long):
    assert distance_lat_long(23.5,67.5,25.5,69.5)==12179.372041317429
    assert distance_lat_long(10.5,20.5,30.5,40.5)==6069.397933300514
    assert distance_lat_long(10,20,30,40)==6783.751974994595

check(distance_lat_long)
solution 0 passed False
Task 180 gens 10 solutions in cir 4
check_program: 
# Write a function to calculate distance between two points using latitude and longitude.
from math import radians, sin, cos, acos
def distance_lat_long(slat,slon,elat,elon):

    return (2*acos(cos(radians(slat)) * cos(radians(elat)) + sin(radians(slat)) * sin(radians(elat)) * cos(radians(slon) - radians(elon))))

def check(distance_lat_long):
    assert distance_lat_long(23.5,67.5,25.5,69.5)==12179.372041317429
    assert distance_lat_long(10.5,20.5,30.5,40.5)==6069.397933300514
    assert distance_lat_long(10,20,30,40)==6783.751974994595

check(distance_lat_long)
solution 0 passed False
Task 180 gens 10 solutions in cir 5
check_program: 
# Write a function to calculate distance between two points using latitude and longitude.
from math import radians, sin, cos, acos
def distance_lat_long(slat,slon,elat,elon):

    return (acos(cos(radians(slat)) * cos(radians(elat)) + sin(radians(slat)) * sin(radians(elat)) * cos(radians(slon) - radians(elon)))) * 63710

def check(distance_lat_long):
    assert distance_lat_long(23.5,67.5,25.5,69.5)==12179.372041317429
    assert distance_lat_long(10.5,20.5,30.5,40.5)==6069.397933300514
    assert distance_lat_long(10,20,30,40)==6783.751974994595

check(distance_lat_long)
solution 0 passed False
Task 180 gens 10 solutions in cir 6
check_program: 
# Write a function to calculate distance between two points using latitude and longitude.
from math import radians, sin, cos, acos
def distance_lat_long(slat,slon,elat,elon):

    from math import cos, sin, tan
    return 2*acos(cos(radians(slat)) * cos(radians(elat)) + sin(radians(slat)) * sin(radians(elat)) * cos(radians(slon) - radians(elon)))

def check(distance_lat_long):
    assert distance_lat_long(23.5,67.5,25.5,69.5)==12179.372041317429
    assert distance_lat_long(10.5,20.5,30.5,40.5)==6069.397933300514
    assert distance_lat_long(10,20,30,40)==6783.751974994595

check(distance_lat_long)
solution 0 passed False
Task 180 gens 10 solutions in cir 7
check_program: 
# Write a function to calculate distance between two points using latitude and longitude.
from math import radians, sin, cos, acos
def distance_lat_long(slat,slon,elat,elon):

    return (2 * acos(cos(radians(slat)) * cos(radians(elat)) + sin(radians(slat)) * sin(radians(elat)) * cos(radians(slon) - radians(elon))))

def check(distance_lat_long):
    assert distance_lat_long(23.5,67.5,25.5,69.5)==12179.372041317429
    assert distance_lat_long(10.5,20.5,30.5,40.5)==6069.397933300514
    assert distance_lat_long(10,20,30,40)==6783.751974994595

check(distance_lat_long)
solution 0 passed False
Task 180 gens 10 solutions in cir 8
check_program: 
# Write a function to calculate distance between two points using latitude and longitude.
from math import radians, sin, cos, acos
def distance_lat_long(slat,slon,elat,elon):

    return (2 * acos(cos(radians(slat)) * cos(radians(elat)) + sin(radians(slat)) * sin(radians(elat)) * cos(radians(slon) - radians(elon))))

def check(distance_lat_long):
    assert distance_lat_long(23.5,67.5,25.5,69.5)==12179.372041317429
    assert distance_lat_long(10.5,20.5,30.5,40.5)==6069.397933300514
    assert distance_lat_long(10,20,30,40)==6783.751974994595

check(distance_lat_long)
solution 0 passed False
Task 180 gens 10 solutions in cir 9
check_program: 
# Write a function to calculate distance between two points using latitude and longitude.
from math import radians, sin, cos, acos
def distance_lat_long(slat,slon,elat,elon):

    return (2*acos(cos(radians(slat))*cos(radians(elat))+sin(radians(slat))*sin(radians(elat))*cos(radians(slon)-radians(elon))))

def check(distance_lat_long):
    assert distance_lat_long(23.5,67.5,25.5,69.5)==12179.372041317429
    assert distance_lat_long(10.5,20.5,30.5,40.5)==6069.397933300514
    assert distance_lat_long(10,20,30,40)==6783.751974994595

check(distance_lat_long)
solution 0 passed False
Task 180 gens 10 solutions in cir 10
check_program: 
# Write a function to calculate distance between two points using latitude and longitude.
from math import radians, sin, cos, acos
def distance_lat_long(slat,slon,elat,elon):

    return acos(cos(radians(slat))*cos(radians(elat)) + sin(radians(slat))*sin(radians(elat))*cos(radians(slon)-radians(elon)))

def check(distance_lat_long):
    assert distance_lat_long(23.5,67.5,25.5,69.5)==12179.372041317429
    assert distance_lat_long(10.5,20.5,30.5,40.5)==6069.397933300514
    assert distance_lat_long(10,20,30,40)==6783.751974994595

check(distance_lat_long)
solution 0 passed False
Task 276 gens 1 solutions in cir 0
check_program: 
# Write a function to find the volume of a cylinder.

def volume_cylinder(r,h):

    return r * h * math.pi

def check(volume_cylinder):
    assert volume_cylinder(10,5)==1570.7500000000002
    assert volume_cylinder(4,5)==251.32000000000002
    assert volume_cylinder(4,10)==502.64000000000004

check(volume_cylinder)
solution 0 passed False
Task 276 gens 4 solutions in cir 1
check_program: 
# Write a function to find the volume of a cylinder.

def volume_cylinder(r,h):

    return r * h * math.pi

def check(volume_cylinder):
    assert volume_cylinder(10,5)==1570.7500000000002
    assert volume_cylinder(4,5)==251.32000000000002
    assert volume_cylinder(4,10)==502.64000000000004

check(volume_cylinder)
solution 0 passed False
Task 276 gens 10 solutions in cir 2
check_program: 
# Write a function to find the volume of a cylinder.

def volume_cylinder(r,h):

    return r * h * math.pi

def check(volume_cylinder):
    assert volume_cylinder(10,5)==1570.7500000000002
    assert volume_cylinder(4,5)==251.32000000000002
    assert volume_cylinder(4,10)==502.64000000000004

check(volume_cylinder)
solution 0 passed False
Task 276 gens 10 solutions in cir 3
check_program: 
# Write a function to find the volume of a cylinder.

def volume_cylinder(r,h):

    return (r * (h/3.14159)) * 3.14159

def check(volume_cylinder):
    assert volume_cylinder(10,5)==1570.7500000000002
    assert volume_cylinder(4,5)==251.32000000000002
    assert volume_cylinder(4,10)==502.64000000000004

check(volume_cylinder)
solution 0 passed False
Task 276 gens 10 solutions in cir 4
check_program: 
# Write a function to find the volume of a cylinder.

def volume_cylinder(r,h):

    return (r * (h / 3.14159)) * 3.14159

def check(volume_cylinder):
    assert volume_cylinder(10,5)==1570.7500000000002
    assert volume_cylinder(4,5)==251.32000000000002
    assert volume_cylinder(4,10)==502.64000000000004

check(volume_cylinder)
solution 0 passed False
Task 49 gens 1 solutions in cir 0
check_program: 
# Write a function to extract every first or specified element from a given two-dimensional list.

def specified_element(nums, N):

    result = []
    for i in range(N):
        result.append(nums[i][0])
    return result

def check(specified_element):
    assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]
    assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],2)==[3, 6, 9]
    assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],1)==[2,5,1]

check(specified_element)
solution 0 passed False
Task 49 gens 6 solutions in cir 1
check_program: 
# Write a function to extract every first or specified element from a given two-dimensional list.

def specified_element(nums, N):

    result = []
    for i in range(N):
        if i < len(nums):
            result.append(nums[i][0])
    return result

def check(specified_element):
    assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]
    assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],2)==[3, 6, 9]
    assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],1)==[2,5,1]

check(specified_element)
solution 0 passed False
Task 49 gens 10 solutions in cir 2
check_program: 
# Write a function to extract every first or specified element from a given two-dimensional list.

def specified_element(nums, N):

    result = [num for i, num in enumerate(nums) if i == N]
    return result

def check(specified_element):
    assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]
    assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],2)==[3, 6, 9]
    assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],1)==[2,5,1]

check(specified_element)
solution 0 passed False
Task 49 gens 10 solutions in cir 3
check_program: 
# Write a function to extract every first or specified element from a given two-dimensional list.

def specified_element(nums, N):

    result = []
    for i in range(len(nums)):
        if i == N-1:
            result.append(nums[i])
    return result

def check(specified_element):
    assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]
    assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],2)==[3, 6, 9]
    assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],1)==[2,5,1]

check(specified_element)
solution 0 passed False
Task 49 gens 10 solutions in cir 4
check_program: 
# Write a function to extract every first or specified element from a given two-dimensional list.

def specified_element(nums, N):

    result = []
    if N <= len(nums):
        for i in range(N):
            result.append(nums[i])
    else:
        for i in range(len(nums)):
            result.append(nums[i])
    return result

def check(specified_element):
    assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]
    assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],2)==[3, 6, 9]
    assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],1)==[2,5,1]

check(specified_element)
solution 0 passed False
Task 49 gens 10 solutions in cir 5
check_program: 
# Write a function to extract every first or specified element from a given two-dimensional list.

def specified_element(nums, N):

    result = []
    for i in nums:
        if N == len(nums):
            result.append(i[0])
    return result

def check(specified_element):
    assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]
    assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],2)==[3, 6, 9]
    assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],1)==[2,5,1]

check(specified_element)
solution 0 passed False
Task 49 gens 10 solutions in cir 6
check_program: 
# Write a function to extract every first or specified element from a given two-dimensional list.

def specified_element(nums, N):

    if N <= len(nums):
        result = nums[:N]
    else:
        result = list(nums)
    return result

def check(specified_element):
    assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]
    assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],2)==[3, 6, 9]
    assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],1)==[2,5,1]

check(specified_element)
solution 0 passed False
Task 49 gens 10 solutions in cir 7
check_program: 
# Write a function to extract every first or specified element from a given two-dimensional list.

def specified_element(nums, N):

    if N == 0:
        return nums[:]
    else:
        return [num for num in nums if num != None and num != 0][:N]

def check(specified_element):
    assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]
    assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],2)==[3, 6, 9]
    assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],1)==[2,5,1]

check(specified_element)
solution 0 passed False
Task 385 gens 1 solutions in cir 0
check_program: 
# Write a function to find the n'th perrin number using recursion.

def get_perrin(n):

    if n == 0:
        return 0
    else:
        return (n * (n + 1)) // 2

def check(get_perrin):
    assert get_perrin(9) == 12
    assert get_perrin(4) == 2
    assert get_perrin(6) == 5

check(get_perrin)
solution 0 passed False
Task 385 gens 8 solutions in cir 1
check_program: 
# Write a function to find the n'th perrin number using recursion.

def get_perrin(n):

    if n == 0:
        return 1
    else:
        return (n * (n + 1)) // 2

def check(get_perrin):
    assert get_perrin(9) == 12
    assert get_perrin(4) == 2
    assert get_perrin(6) == 5

check(get_perrin)
solution 0 passed False
Task 385 gens 10 solutions in cir 2
check_program: 
# Write a function to find the n'th perrin number using recursion.

def get_perrin(n):

    if n == 0:
        return 1
    elif n == 1:
        return 2
    elif n % 2 == 0:
        return (n * (n - 1)) // 2
    else:
        return (3 * (n * (n - 1))) // 2

def check(get_perrin):
    assert get_perrin(9) == 12
    assert get_perrin(4) == 2
    assert get_perrin(6) == 5

check(get_perrin)
solution 0 passed False
Task 385 gens 10 solutions in cir 3
check_program: 
# Write a function to find the n'th perrin number using recursion.

def get_perrin(n):

    if n == 0:
        return 1
    elif n % 2 == 0:
        return (n * (n + 1)) // 2
    else:
        return ((n * (n + 1)) // 2) + (n * (n - 1)) // 2

def check(get_perrin):
    assert get_perrin(9) == 12
    assert get_perrin(4) == 2
    assert get_perrin(6) == 5

check(get_perrin)
solution 0 passed False
Task 385 gens 10 solutions in cir 4
check_program: 
# Write a function to find the n'th perrin number using recursion.

def get_perrin(n):

    if n < 0:
        return -1
    if n == 0:
        return 1
    if n == 1:
        return 2
    elif n % 2 == 0:
        return (n * (n + 1)) // 2
    else:
        return (n * (n - 1)) // 2

def check(get_perrin):
    assert get_perrin(9) == 12
    assert get_perrin(4) == 2
    assert get_perrin(6) == 5

check(get_perrin)
solution 0 passed False
Task 385 gens 10 solutions in cir 5
check_program: 
# Write a function to find the n'th perrin number using recursion.

def get_perrin(n):

    if n < 0:
        return -1
    if n == 0:
        return 1
    if n == 1:
        return 2
    elif n % 2 == 0:
        return (n * (n + 1)) // 2
    else:
        return (n * (n - 1)) // 2

def check(get_perrin):
    assert get_perrin(9) == 12
    assert get_perrin(4) == 2
    assert get_perrin(6) == 5

check(get_perrin)
solution 0 passed False
Task 385 gens 10 solutions in cir 6
check_program: 
# Write a function to find the n'th perrin number using recursion.

def get_perrin(n):

    if n == 0:
        return 1
    elif n == 1:
        return 1
    elif n % 2 == 0:
        return (n * (n + 1)) // 2
    else:
        return (n * (n - 1)) // 2

def check(get_perrin):
    assert get_perrin(9) == 12
    assert get_perrin(4) == 2
    assert get_perrin(6) == 5

check(get_perrin)
solution 0 passed False
Task 385 gens 10 solutions in cir 7
check_program: 
# Write a function to find the n'th perrin number using recursion.

def get_perrin(n):

    if n < 0:
        return -1
    if n == 0:
        return 1
    if n == 1:
        return 2
    elif n % 2 == 0:
        return (n * (n + 1)) // 2
    else:
        return (n * (n - 1)) // 2

def check(get_perrin):
    assert get_perrin(9) == 12
    assert get_perrin(4) == 2
    assert get_perrin(6) == 5

check(get_perrin)
solution 0 passed False
Task 385 gens 10 solutions in cir 8
check_program: 
# Write a function to find the n'th perrin number using recursion.

def get_perrin(n):

    if n < 0:
        return -1
    if n == 0:
        return 1
    elif n == 1:
        return 1
    elif n == 2:
        return 3
    elif n == 3:
        return 3
    elif n == 4:
        return 5
    elif n == 5:
        return 10
    elif n == 6:
        return 21
    elif n == 7:
        return 25
    elif n == 8:
        return 33
    elif n == 9:
        return 40
    elif n == 10:
        return 55
    elif n == 11:
        return 66
    elif n == 12:
        return 85
    elif n == 13:
        return 100
    elif n == 14:
        return 121
    elif n == 15:
        return 150
    elif n == 16:
        return 175
    elif n == 17:
        return 200
    elif n == 18:
        return 225
    elif n == 19:
        return 250
    elif n == 20:
        return 275
    else:
        return -1

def check(get_perrin):
    assert get_perrin(9) == 12
    assert get_perrin(4) == 2
    assert get_perrin(6) == 5

check(get_perrin)
solution 0 passed False
Task 385 gens 10 solutions in cir 9
check_program: 
# Write a function to find the n'th perrin number using recursion.

def get_perrin(n):

    if n < 0:
        return -1
    if n == 0:
        return 1
    elif n == 1:
        return 1
    elif n == 2:
        return 3
    elif n == 3:
        return 3
    elif n == 4:
        return 5
    elif n == 5:
        return 10
    elif n == 6:
        return 21
    elif n == 7:
        return 25
    elif n == 8:
        return 33
    elif n == 9:
        return 40
    elif n == 10:
        return 55
    elif n == 11:
        return 66
    elif n == 12:
        return 85
    elif n == 13:
        return 100
    elif n == 14:
        return 121
    elif n == 15:
        return 150
    elif n == 16:
        return 175
    elif n == 17:
        return 200
    elif n == 18:
        return 225
    elif n == 19:
        return 250
    elif n == 20:
        return 275
    else:
        return -1

def check(get_perrin):
    assert get_perrin(9) == 12
    assert get_perrin(4) == 2
    assert get_perrin(6) == 5

check(get_perrin)
solution 0 passed False
Task 385 gens 10 solutions in cir 10
check_program: 
# Write a function to find the n'th perrin number using recursion.

def get_perrin(n):

    if n < 0:
        return -1
    elif n == 0:
        return 1
    elif n == 1:
        return 1
    elif n == 2:
        return 3
    elif n == 3:
        return 3
    elif n == 4:
        return 5
    elif n == 5:
        return 10
    elif n == 6:
        return 21
    elif n == 7:
        return 25
    elif n == 8:
        return 33
    elif n == 9:
        return 40
    elif n == 10:
        return 55
    elif n == 11:
        return 66
    elif n == 12:
        return 85
    elif n == 13:
        return 100
    elif n == 14:
        return 121
    elif n == 15:
        return 150
    elif n == 16:
        return 175
    elif n == 17:
        return 200
    elif n == 18:
        return 225
    elif n == 19:
        return 250
    elif n == 20:
        return 275
    elif n == 21:
        return 30
    elif n == 22:
        return 35
    elif n == 23:
        return 40
    elif n == 24:
        return 45
    elif n == 25:
        return 50
    elif n == 26:
        return 55
    elif n == 27:
        return 60
    elif n == 28:
        return 65
    elif n == 29:
        return 70
    elif n == 30:
        return 75
    elif n == 31:
        return 80
    elif n == 32:
        return 85

def check(get_perrin):
    assert get_perrin(9) == 12
    assert get_perrin(4) == 2
    assert get_perrin(6) == 5

check(get_perrin)
solution 0 passed False
Task 407 gens 1 solutions in cir 0
check_program: 
# Write a function to create the next bigger number by rearranging the digits of a given number.

def rearrange_bigger(n):

    digits = str(n)
    for i in range(len(digits)):
        for j in range(i+1, len(digits)):
            if digits[i] > digits[j]:
                temp = digits[i]
                digits[i] = digits[j]
                digits[j] = temp
    return int(digits)

def check(rearrange_bigger):
    assert rearrange_bigger(12)==21
    assert rearrange_bigger(10)==False
    assert rearrange_bigger(102)==120

check(rearrange_bigger)
solution 0 passed False
Task 407 gens 8 solutions in cir 1
check_program: 
# Write a function to create the next bigger number by rearranging the digits of a given number.

def rearrange_bigger(n):

    digits = str(n)
    for i in range(len(digits)):
        for j in range(i+1, len(digits)):
            if digits[i] > digits[j]:
                temp = digits[i]
                digits[i] = digits[j]
                digits[j] = temp
    return int(digits)

def check(rearrange_bigger):
    assert rearrange_bigger(12)==21
    assert rearrange_bigger(10)==False
    assert rearrange_bigger(102)==120

check(rearrange_bigger)
solution 0 passed False
Task 407 gens 10 solutions in cir 2
check_program: 
# Write a function to create the next bigger number by rearranging the digits of a given number.

def rearrange_bigger(n):

    if n == int(n):
        return n
    digits = str(n)
    max_digit = max(digits)
    for i in range(len(digits)):
        for j in range(max_digit, 0, -1):
            if digits[i] > digits[j]:
                temp = digits[i]
                digits[i] = digits[j]
                digits[j] = temp
    return int(digits)

def check(rearrange_bigger):
    assert rearrange_bigger(12)==21
    assert rearrange_bigger(10)==False
    assert rearrange_bigger(102)==120

check(rearrange_bigger)
solution 0 passed False
Task 407 gens 10 solutions in cir 3
check_program: 
# Write a function to create the next bigger number by rearranging the digits of a given number.

def rearrange_bigger(n):

    if n == int(n):
        return n
    digits = str(n)
    max_digit = max(digits)
    for i in range(len(digits)):
        for j in range(max_digit, 0, -1):
            if digits[i] > digits[j]:
                temp = digits[i]
                digits[i] = digits[j]
                digits[j] = temp
    return int(digits)

def check(rearrange_bigger):
    assert rearrange_bigger(12)==21
    assert rearrange_bigger(10)==False
    assert rearrange_bigger(102)==120

check(rearrange_bigger)
solution 0 passed False
Task 454 gens 1 solutions in cir 0
check_program: 
# Write a function that matches a word containing 'z'.
import re
def text_match_wordz(text):

    import re
    return re.search('z', text)

def check(text_match_wordz):
    assert text_match_wordz("pythonz.")==('Found a match!')
    assert text_match_wordz("xyz.")==('Found a match!')
    assert text_match_wordz("  lang  .")==('Not matched!')

check(text_match_wordz)
solution 0 passed False
Task 454 gens 4 solutions in cir 1
check_program: 
# Write a function that matches a word containing 'z'.
import re
def text_match_wordz(text):

    return re.search('z', text)

def check(text_match_wordz):
    assert text_match_wordz("pythonz.")==('Found a match!')
    assert text_match_wordz("xyz.")==('Found a match!')
    assert text_match_wordz("  lang  .")==('Not matched!')

check(text_match_wordz)
solution 0 passed False
Task 454 gens 10 solutions in cir 2
check_program: 
# Write a function that matches a word containing 'z'.
import re
def text_match_wordz(text):

    import re
    return re.search(r"z", text)

def check(text_match_wordz):
    assert text_match_wordz("pythonz.")==('Found a match!')
    assert text_match_wordz("xyz.")==('Found a match!')
    assert text_match_wordz("  lang  .")==('Not matched!')

check(text_match_wordz)
solution 0 passed False
Task 454 gens 10 solutions in cir 3
check_program: 
# Write a function that matches a word containing 'z'.
import re
def text_match_wordz(text):

    return re.search(r'\b\w{4}\b', text).group()

def check(text_match_wordz):
    assert text_match_wordz("pythonz.")==('Found a match!')
    assert text_match_wordz("xyz.")==('Found a match!')
    assert text_match_wordz("  lang  .")==('Not matched!')

check(text_match_wordz)
solution 0 passed False
Task 454 gens 10 solutions in cir 4
check_program: 
# Write a function that matches a word containing 'z'.
import re
def text_match_wordz(text):

    import re
    pattern = r"z"
    match = re.search(pattern, text)
    return match.group(0) if match else ""

def check(text_match_wordz):
    assert text_match_wordz("pythonz.")==('Found a match!')
    assert text_match_wordz("xyz.")==('Found a match!')
    assert text_match_wordz("  lang  .")==('Not matched!')

check(text_match_wordz)
solution 0 passed False
Task 454 gens 10 solutions in cir 5
check_program: 
# Write a function that matches a word containing 'z'.
import re
def text_match_wordz(text):

    import re
    pattern = r"z"
    match = re.search(pattern, text)
    return match.group(0) if match else ""

def check(text_match_wordz):
    assert text_match_wordz("pythonz.")==('Found a match!')
    assert text_match_wordz("xyz.")==('Found a match!')
    assert text_match_wordz("  lang  .")==('Not matched!')

check(text_match_wordz)
solution 0 passed False
Task 454 gens 10 solutions in cir 6
check_program: 
# Write a function that matches a word containing 'z'.
import re
def text_match_wordz(text):

    word_list = re.findall(r"\b\w{4,}\b", text)
    return word_list[0] if re.search(r"z", text) and len(word_list) > 0 else ""

def check(text_match_wordz):
    assert text_match_wordz("pythonz.")==('Found a match!')
    assert text_match_wordz("xyz.")==('Found a match!')
    assert text_match_wordz("  lang  .")==('Not matched!')

check(text_match_wordz)
solution 0 passed False
Task 116 gens 1 solutions in cir 0
check_program: 
# Write a function to convert a given tuple of positive integers into an integer.

def tuple_to_int(nums):

    result = 0
    for num in nums:
        result += num
    return result

def check(tuple_to_int):
    assert tuple_to_int((1,2,3))==123
    assert tuple_to_int((4,5,6))==456
    assert tuple_to_int((5,6,7))==567

check(tuple_to_int)
solution 0 passed False
Task 116 gens 3 solutions in cir 1
check_program: 
# Write a function to convert a given tuple of positive integers into an integer.

def tuple_to_int(nums):

    result = 0
    for num in nums:
        result += num
    return result

def check(tuple_to_int):
    assert tuple_to_int((1,2,3))==123
    assert tuple_to_int((4,5,6))==456
    assert tuple_to_int((5,6,7))==567

check(tuple_to_int)
solution 0 passed False
Task 116 gens 8 solutions in cir 2
check_program: 
# Write a function to convert a given tuple of positive integers into an integer.

def tuple_to_int(nums):

    result = 0
    for num in nums:
        result += num
    return result

def check(tuple_to_int):
    assert tuple_to_int((1,2,3))==123
    assert tuple_to_int((4,5,6))==456
    assert tuple_to_int((5,6,7))==567

check(tuple_to_int)
solution 0 passed False
Task 116 gens 10 solutions in cir 3
check_program: 
# Write a function to convert a given tuple of positive integers into an integer.

def tuple_to_int(nums):

    return sum(num for num in nums)

def check(tuple_to_int):
    assert tuple_to_int((1,2,3))==123
    assert tuple_to_int((4,5,6))==456
    assert tuple_to_int((5,6,7))==567

check(tuple_to_int)
solution 0 passed False
Task 116 gens 10 solutions in cir 4
check_program: 
# Write a function to convert a given tuple of positive integers into an integer.

def tuple_to_int(nums):

    result = 0
    for num in nums:
        if num > 0:
            result += num
    return result

def check(tuple_to_int):
    assert tuple_to_int((1,2,3))==123
    assert tuple_to_int((4,5,6))==456
    assert tuple_to_int((5,6,7))==567

check(tuple_to_int)
solution 0 passed False
Task 116 gens 10 solutions in cir 5
check_program: 
# Write a function to convert a given tuple of positive integers into an integer.

def tuple_to_int(nums):

    if not nums:
        return 0
    elif all(num >= 0 for num in nums):
        return sum(nums)
    else:
        return max(nums) + min(nums)

def check(tuple_to_int):
    assert tuple_to_int((1,2,3))==123
    assert tuple_to_int((4,5,6))==456
    assert tuple_to_int((5,6,7))==567

check(tuple_to_int)
solution 0 passed False
Task 116 gens 10 solutions in cir 6
check_program: 
# Write a function to convert a given tuple of positive integers into an integer.

def tuple_to_int(nums):

    return sum(num for num in nums)

def check(tuple_to_int):
    assert tuple_to_int((1,2,3))==123
    assert tuple_to_int((4,5,6))==456
    assert tuple_to_int((5,6,7))==567

check(tuple_to_int)
solution 0 passed False
Task 116 gens 10 solutions in cir 7
check_program: 
# Write a function to convert a given tuple of positive integers into an integer.

def tuple_to_int(nums):

    if len(nums) == 0:
        return 0
    if len(nums) == 1:
        return nums[0]
    if sum(nums) == 0:
        return 0
    if any(map(lambda x: x<0, nums)) and any(map(lambda x: x>=0, nums)):
        return sum(nums)
    return max(nums)

def check(tuple_to_int):
    assert tuple_to_int((1,2,3))==123
    assert tuple_to_int((4,5,6))==456
    assert tuple_to_int((5,6,7))==567

check(tuple_to_int)
solution 0 passed False
Task 116 gens 10 solutions in cir 8
check_program: 
# Write a function to convert a given tuple of positive integers into an integer.

def tuple_to_int(nums):

    if len(nums) == 0:
        return 0
    if len(nums) == 1:
        return nums[0]
    if sum(nums) == 0:
        return 0
    if any(map(lambda x: x<0, nums)):
        return sum(nums)
    return max(nums)

def check(tuple_to_int):
    assert tuple_to_int((1,2,3))==123
    assert tuple_to_int((4,5,6))==456
    assert tuple_to_int((5,6,7))==567

check(tuple_to_int)
solution 0 passed False
Task 116 gens 10 solutions in cir 9
check_program: 
# Write a function to convert a given tuple of positive integers into an integer.

def tuple_to_int(nums):

    if len(nums) == 0:
        return 0
    if len(nums) == 1:
        return nums[0]
    if sum(nums) == 0:
        return 0
    if any(map(lambda x: x<0, nums)) and any(map(lambda x: x>=0, nums)):
        return sum(nums)
    if len(set(nums)) == len(nums):
        return max(nums)
    else:
        return max(nums) - sum(nums[i] for i in range(len(nums)-1))

def check(tuple_to_int):
    assert tuple_to_int((1,2,3))==123
    assert tuple_to_int((4,5,6))==456
    assert tuple_to_int((5,6,7))==567

check(tuple_to_int)
solution 0 passed False
Task 116 gens 10 solutions in cir 10
check_program: 
# Write a function to convert a given tuple of positive integers into an integer.

def tuple_to_int(nums):

    if len(nums) == 0:
        return 0
    if len(nums) == 1:
        return nums[0]
    if sum(nums) == 0:
        return 0
    if any(map(lambda x: x < 0, nums)) and any(map(lambda x: x >= 0, nums)):
        return sum(nums)
    if len(set(nums)) == len(nums):
        return max(nums)
    else:
        return max(nums) - sum(nums[i] for i in range(len(nums) - 1))

def check(tuple_to_int):
    assert tuple_to_int((1,2,3))==123
    assert tuple_to_int((4,5,6))==456
    assert tuple_to_int((5,6,7))==567

check(tuple_to_int)
solution 0 passed False
Task 363 gens 1 solutions in cir 0
check_program: 
# Write a function to add the k elements to each element in the tuple.

def add_K_element(test_list, K):

    return [x + K for x in test_list]

def check(add_K_element):
    assert add_K_element([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4) == [(5, 7, 8), (6, 8, 10), (7, 12, 5)]
    assert add_K_element([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 8) == [(9, 10, 11), (12, 13, 14), (15, 16, 17)]
    assert add_K_element([(11, 12, 13), (14, 15, 16), (17, 18, 19)], 9) == [(20, 21, 22), (23, 24, 25), (26, 27, 28)]

check(add_K_element)
solution 0 passed False
Task 363 gens 3 solutions in cir 1
check_program: 
# Write a function to add the k elements to each element in the tuple.

def add_K_element(test_list, K):

    return [x + K for x in test_list]

def check(add_K_element):
    assert add_K_element([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4) == [(5, 7, 8), (6, 8, 10), (7, 12, 5)]
    assert add_K_element([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 8) == [(9, 10, 11), (12, 13, 14), (15, 16, 17)]
    assert add_K_element([(11, 12, 13), (14, 15, 16), (17, 18, 19)], 9) == [(20, 21, 22), (23, 24, 25), (26, 27, 28)]

check(add_K_element)
solution 0 passed False
Task 363 gens 5 solutions in cir 2
check_program: 
# Write a function to add the k elements to each element in the tuple.

def add_K_element(test_list, K):

    return list(map(lambda x: x+K, test_list))

def check(add_K_element):
    assert add_K_element([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4) == [(5, 7, 8), (6, 8, 10), (7, 12, 5)]
    assert add_K_element([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 8) == [(9, 10, 11), (12, 13, 14), (15, 16, 17)]
    assert add_K_element([(11, 12, 13), (14, 15, 16), (17, 18, 19)], 9) == [(20, 21, 22), (23, 24, 25), (26, 27, 28)]

check(add_K_element)
solution 0 passed False
Task 363 gens 10 solutions in cir 3
check_program: 
# Write a function to add the k elements to each element in the tuple.

def add_K_element(test_list, K):

    return list(map(lambda x: x+K, test_list))

def check(add_K_element):
    assert add_K_element([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4) == [(5, 7, 8), (6, 8, 10), (7, 12, 5)]
    assert add_K_element([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 8) == [(9, 10, 11), (12, 13, 14), (15, 16, 17)]
    assert add_K_element([(11, 12, 13), (14, 15, 16), (17, 18, 19)], 9) == [(20, 21, 22), (23, 24, 25), (26, 27, 28)]

check(add_K_element)
solution 0 passed False
Task 363 gens 10 solutions in cir 4
check_program: 
# Write a function to add the k elements to each element in the tuple.

def add_K_element(test_list, K):

    return [lst[i] + K for i in range(len(lst))]

def check(add_K_element):
    assert add_K_element([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4) == [(5, 7, 8), (6, 8, 10), (7, 12, 5)]
    assert add_K_element([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 8) == [(9, 10, 11), (12, 13, 14), (15, 16, 17)]
    assert add_K_element([(11, 12, 13), (14, 15, 16), (17, 18, 19)], 9) == [(20, 21, 22), (23, 24, 25), (26, 27, 28)]

check(add_K_element)
solution 0 passed False
Task 363 gens 10 solutions in cir 5
check_program: 
# Write a function to add the k elements to each element in the tuple.

def add_K_element(test_list, K):

    return [x + K for x in test_list]

def check(add_K_element):
    assert add_K_element([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4) == [(5, 7, 8), (6, 8, 10), (7, 12, 5)]
    assert add_K_element([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 8) == [(9, 10, 11), (12, 13, 14), (15, 16, 17)]
    assert add_K_element([(11, 12, 13), (14, 15, 16), (17, 18, 19)], 9) == [(20, 21, 22), (23, 24, 25), (26, 27, 28)]

check(add_K_element)
solution 0 passed False
Task 363 gens 10 solutions in cir 6
check_program: 
# Write a function to add the k elements to each element in the tuple.

def add_K_element(test_list, K):

    return [x + K for x in test_list]

def check(add_K_element):
    assert add_K_element([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4) == [(5, 7, 8), (6, 8, 10), (7, 12, 5)]
    assert add_K_element([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 8) == [(9, 10, 11), (12, 13, 14), (15, 16, 17)]
    assert add_K_element([(11, 12, 13), (14, 15, 16), (17, 18, 19)], 9) == [(20, 21, 22), (23, 24, 25), (26, 27, 28)]

check(add_K_element)
solution 0 passed False
Task 363 gens 10 solutions in cir 7
check_program: 
# Write a function to add the k elements to each element in the tuple.

def add_K_element(test_list, K):

    return [x + K if isinstance(x, int) else x + K for x in test_list]

def check(add_K_element):
    assert add_K_element([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4) == [(5, 7, 8), (6, 8, 10), (7, 12, 5)]
    assert add_K_element([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 8) == [(9, 10, 11), (12, 13, 14), (15, 16, 17)]
    assert add_K_element([(11, 12, 13), (14, 15, 16), (17, 18, 19)], 9) == [(20, 21, 22), (23, 24, 25), (26, 27, 28)]

check(add_K_element)
solution 0 passed False
Task 363 gens 10 solutions in cir 8
check_program: 
# Write a function to add the k elements to each element in the tuple.

def add_K_element(test_list, K):

    return [x + K if isinstance(x, int) else x + K for x in test_list]

def check(add_K_element):
    assert add_K_element([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4) == [(5, 7, 8), (6, 8, 10), (7, 12, 5)]
    assert add_K_element([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 8) == [(9, 10, 11), (12, 13, 14), (15, 16, 17)]
    assert add_K_element([(11, 12, 13), (14, 15, 16), (17, 18, 19)], 9) == [(20, 21, 22), (23, 24, 25), (26, 27, 28)]

check(add_K_element)
solution 0 passed False
Task 363 gens 10 solutions in cir 9
check_program: 
# Write a function to add the k elements to each element in the tuple.

def add_K_element(test_list, K):

    return list(map(lambda x: x + K, test_list))

def check(add_K_element):
    assert add_K_element([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4) == [(5, 7, 8), (6, 8, 10), (7, 12, 5)]
    assert add_K_element([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 8) == [(9, 10, 11), (12, 13, 14), (15, 16, 17)]
    assert add_K_element([(11, 12, 13), (14, 15, 16), (17, 18, 19)], 9) == [(20, 21, 22), (23, 24, 25), (26, 27, 28)]

check(add_K_element)
solution 0 passed False
Task 363 gens 10 solutions in cir 10
check_program: 
# Write a function to add the k elements to each element in the tuple.

def add_K_element(test_list, K):

    import sys
    from typing import Tuple
    return tuple(x + K for x in test_list)

def check(add_K_element):
    assert add_K_element([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4) == [(5, 7, 8), (6, 8, 10), (7, 12, 5)]
    assert add_K_element([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 8) == [(9, 10, 11), (12, 13, 14), (15, 16, 17)]
    assert add_K_element([(11, 12, 13), (14, 15, 16), (17, 18, 19)], 9) == [(20, 21, 22), (23, 24, 25), (26, 27, 28)]

check(add_K_element)
solution 0 passed False
Task 396 gens 1 solutions in cir 0
check_program: 
# Write a function to check whether the given string starts and ends with the same character or not using regex.
import re  
regex = r'^[a-z]$|^([a-z]).*\1$'
def check_char(string):

    if re.match(regex, string):
        return True
    return False

def check(check_char):
    assert check_char("abba") == "Valid"
    assert check_char("a") == "Valid"
    assert check_char("abcd") == "Invalid"

check(check_char)
solution 0 passed False
Task 396 gens 5 solutions in cir 1
check_program: 
# Write a function to check whether the given string starts and ends with the same character or not using regex.
import re  
regex = r'^[a-z]$|^([a-z]).*\1$'
def check_char(string):

    if re.match(regex, string):
        return True
    return False

def check(check_char):
    assert check_char("abba") == "Valid"
    assert check_char("a") == "Valid"
    assert check_char("abcd") == "Invalid"

check(check_char)
solution 0 passed False
Task 396 gens 10 solutions in cir 2
check_program: 
# Write a function to check whether the given string starts and ends with the same character or not using regex.
import re  
regex = r'^[a-z]$|^([a-z]).*\1$'
def check_char(string):

    if re.match(regex, string):
        return True
    return False

def check(check_char):
    assert check_char("abba") == "Valid"
    assert check_char("a") == "Valid"
    assert check_char("abcd") == "Invalid"

check(check_char)
solution 0 passed False
Task 396 gens 10 solutions in cir 3
check_program: 
# Write a function to check whether the given string starts and ends with the same character or not using regex.
import re  
regex = r'^[a-z]$|^([a-z]).*\1$'
def check_char(string):

    if re.match(regex, string) or re.match(regex, string[::-1]):
        return True
    return False

def check(check_char):
    assert check_char("abba") == "Valid"
    assert check_char("a") == "Valid"
    assert check_char("abcd") == "Invalid"

check(check_char)
solution 0 passed False
Task 488 gens 1 solutions in cir 0
check_program: 
# Write a function to find the area of a pentagon.
import math
def area_pentagon(a):

    return math.sqrt(5) * a

def check(area_pentagon):
    assert area_pentagon(5)==43.01193501472417
    assert area_pentagon(10)==172.0477400588967
    assert area_pentagon(15)==387.10741513251753

check(area_pentagon)
solution 0 passed False
Task 488 gens 1 solutions in cir 1
check_program: 
# Write a function to find the area of a pentagon.
import math
def area_pentagon(a):

    return math.sqrt(5) * a

def check(area_pentagon):
    assert area_pentagon(5)==43.01193501472417
    assert area_pentagon(10)==172.0477400588967
    assert area_pentagon(15)==387.10741513251753

check(area_pentagon)
solution 0 passed False
Task 488 gens 2 solutions in cir 2
check_program: 
# Write a function to find the area of a pentagon.
import math
def area_pentagon(a):

    return math.sqrt(5) * a

def check(area_pentagon):
    assert area_pentagon(5)==43.01193501472417
    assert area_pentagon(10)==172.0477400588967
    assert area_pentagon(15)==387.10741513251753

check(area_pentagon)
solution 0 passed False
Task 488 gens 7 solutions in cir 3
check_program: 
# Write a function to find the area of a pentagon.
import math
def area_pentagon(a):

    if a == 1:
        return 5
    else:
        return math.sqrt(5) * a

def check(area_pentagon):
    assert area_pentagon(5)==43.01193501472417
    assert area_pentagon(10)==172.0477400588967
    assert area_pentagon(15)==387.10741513251753

check(area_pentagon)
solution 0 passed False
Task 488 gens 10 solutions in cir 4
check_program: 
# Write a function to find the area of a pentagon.
import math
def area_pentagon(a):

    if a == 1:
        return 5
    elif a == math.pi/2:
        return 5
    elif a == math.pi/4:
        return 2
    elif a == math.pi/8:
        return 1
    elif a == math.pi/16:
        return 1/2
    elif a == math.pi/32:
        return 1/4
    elif a == math.pi/64:
        return 1/8
    elif a == math.pi/128:
        return 1/16
    elif a == math.pi/256:
        return 1/32
    elif a == math.pi/512:
        return 1/64
    else:
        return None

def check(area_pentagon):
    assert area_pentagon(5)==43.01193501472417
    assert area_pentagon(10)==172.0477400588967
    assert area_pentagon(15)==387.10741513251753

check(area_pentagon)
solution 0 passed False
Task 488 gens 10 solutions in cir 5
check_program: 
# Write a function to find the area of a pentagon.
import math
def area_pentagon(a):

    if a == 1:
        return 5
    elif a == math.pi/2:
        return 5
    elif a == math.pi/4:
        return 2
    elif a == math.pi/8:
        return 1
    elif a == math.pi/16:
        return 1/2
    elif a == math.pi/32:
        return 1/4
    elif a == math.pi/64:
        return 1/8
    elif a == math.pi/128:
        return 1/16
    elif a == math.pi/256:
        return 1/32
    elif a == math.pi/512:
        return 1/64
    else:
        return 0

def check(area_pentagon):
    assert area_pentagon(5)==43.01193501472417
    assert area_pentagon(10)==172.0477400588967
    assert area_pentagon(15)==387.10741513251753

check(area_pentagon)
solution 0 passed False
Task 250 gens 1 solutions in cir 0
check_program: 
# Write a python function to count the occcurences of an element in a tuple.

def count_X(tup, x):

    count = 0
    for i in tup:
        if i == x:
            count += 1
    return count

def check(count_X):
    assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0
    assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),10) == 3
    assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),8) == 4

check(count_X)
solution 0 passed True
Task 250 gens 1 solutions in cir 1
check_program: 
# Write a python function to count the occcurences of an element in a tuple.

def count_X(tup, x):

    count = 0
    for i in tup:
        if i == x:
            count += 1
    return count

def check(count_X):
    assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0
    assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),10) == 3
    assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),8) == 4

check(count_X)
solution 0 passed True
Task 250 gens 1 solutions in cir 2
check_program: 
# Write a python function to count the occcurences of an element in a tuple.

def count_X(tup, x):

    count = 0
    for i in tup:
        if i == x:
            count += 1
    return count

def check(count_X):
    assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0
    assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),10) == 3
    assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),8) == 4

check(count_X)
solution 0 passed True
Task 250 gens 1 solutions in cir 3
check_program: 
# Write a python function to count the occcurences of an element in a tuple.

def count_X(tup, x):

    count = 0
    for i in tup:
        if i == x:
            count += 1
    return count

def check(count_X):
    assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0
    assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),10) == 3
    assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),8) == 4

check(count_X)
solution 0 passed True
Task 250 gens 1 solutions in cir 4
check_program: 
# Write a python function to count the occcurences of an element in a tuple.

def count_X(tup, x):

    count = 0
    for i in tup:
        if i == x:
            count += 1
    return count

def check(count_X):
    assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0
    assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),10) == 3
    assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),8) == 4

check(count_X)
solution 0 passed True
Task 250 gens 1 solutions in cir 5
check_program: 
# Write a python function to count the occcurences of an element in a tuple.

def count_X(tup, x):

    count = 0
    for i in tup:
        if i == x:
            count += 1
    return count

def check(count_X):
    assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0
    assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),10) == 3
    assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),8) == 4

check(count_X)
solution 0 passed True
Task 250 gens 1 solutions in cir 6
check_program: 
# Write a python function to count the occcurences of an element in a tuple.

def count_X(tup, x):

    count = 0
    for i in tup:
        if i == x:
            count += 1
    return count

def check(count_X):
    assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0
    assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),10) == 3
    assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),8) == 4

check(count_X)
solution 0 passed True
Task 250 gens 1 solutions in cir 7
check_program: 
# Write a python function to count the occcurences of an element in a tuple.

def count_X(tup, x):

    count = 0
    for i in tup:
        if i == x:
            count += 1
    return count

def check(count_X):
    assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0
    assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),10) == 3
    assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),8) == 4

check(count_X)
solution 0 passed True
Task 250 gens 1 solutions in cir 8
check_program: 
# Write a python function to count the occcurences of an element in a tuple.

def count_X(tup, x):

    count = 0
    for i in tup:
        if i == x:
            count += 1
    return count

def check(count_X):
    assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0
    assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),10) == 3
    assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),8) == 4

check(count_X)
solution 0 passed True
Task 250 gens 1 solutions in cir 9
check_program: 
# Write a python function to count the occcurences of an element in a tuple.

def count_X(tup, x):

    count = 0
    for i in tup:
        if i == x:
            count += 1
    return count

def check(count_X):
    assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0
    assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),10) == 3
    assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),8) == 4

check(count_X)
solution 0 passed True
Task 250 gens 1 solutions in cir 10
check_program: 
# Write a python function to count the occcurences of an element in a tuple.

def count_X(tup, x):

    count = 0
    for i in tup:
        if i == x:
            count += 1
    return count

def check(count_X):
    assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0
    assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),10) == 3
    assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),8) == 4

check(count_X)
solution 0 passed True
Task 374 gens 1 solutions in cir 0
check_program: 
# Write a function to print all permutations of a given string including duplicates.

def permute_string(str):

    if len(str) == 0:
        return []
    else:
        result = []
        for i in range(len(str)):
            for perm in permute_string(str[:i] + str[i+1:]):
                result.append(str + perm)
        return result

def check(permute_string):
    assert permute_string('ab')==['ab', 'ba']
    assert permute_string('abc')==['abc', 'bac', 'bca', 'acb', 'cab', 'cba']
    assert permute_string('abcd')==['abcd', 'bacd', 'bcad', 'bcda', 'acbd', 'cabd', 'cbad', 'cbda', 'acdb', 'cadb', 'cdab', 'cdba', 'abdc', 'badc', 'bdac', 'bdca', 'adbc', 'dabc', 'dbac', 'dbca', 'adcb', 'dacb', 'dcab', 'dcba']

check(permute_string)
solution 0 passed False
Task 374 gens 8 solutions in cir 1
check_program: 
# Write a function to print all permutations of a given string including duplicates.

def permute_string(str):

    if len(str) == 0:
        return []
    else:
        result = []
        for i in range(len(str)):
            for perm in permute_string(str[:i] + str[i+1:]):
                result.append(str + perm)
        return result

def check(permute_string):
    assert permute_string('ab')==['ab', 'ba']
    assert permute_string('abc')==['abc', 'bac', 'bca', 'acb', 'cab', 'cba']
    assert permute_string('abcd')==['abcd', 'bacd', 'bcad', 'bcda', 'acbd', 'cabd', 'cbad', 'cbda', 'acdb', 'cadb', 'cdab', 'cdba', 'abdc', 'badc', 'bdac', 'bdca', 'adbc', 'dabc', 'dbac', 'dbca', 'adcb', 'dacb', 'dcab', 'dcba']

check(permute_string)
solution 0 passed False
Task 374 gens 10 solutions in cir 2
check_program: 
# Write a function to print all permutations of a given string including duplicates.

def permute_string(str):

        if len(str) == 0:
            return []
        else:
            result = []
            for i in range(len(str)):
                for perm in permute_string(str[:i] + str[i+1:]):
                    result.append(str + perm)
            return result

def check(permute_string):
    assert permute_string('ab')==['ab', 'ba']
    assert permute_string('abc')==['abc', 'bac', 'bca', 'acb', 'cab', 'cba']
    assert permute_string('abcd')==['abcd', 'bacd', 'bcad', 'bcda', 'acbd', 'cabd', 'cbad', 'cbda', 'acdb', 'cadb', 'cdab', 'cdba', 'abdc', 'badc', 'bdac', 'bdca', 'adbc', 'dabc', 'dbac', 'dbca', 'adcb', 'dacb', 'dcab', 'dcba']

check(permute_string)
solution 0 passed False
Task 374 gens 10 solutions in cir 3
check_program: 
# Write a function to print all permutations of a given string including duplicates.

def permute_string(str):

    if len(str) == 0:
        return []
    result = []
    for i in range(len(str)):
        for perm in permute_string(str[:i] + str[i+1:]):
            result.append(str + perm)
    return result

def check(permute_string):
    assert permute_string('ab')==['ab', 'ba']
    assert permute_string('abc')==['abc', 'bac', 'bca', 'acb', 'cab', 'cba']
    assert permute_string('abcd')==['abcd', 'bacd', 'bcad', 'bcda', 'acbd', 'cabd', 'cbad', 'cbda', 'acdb', 'cadb', 'cdab', 'cdba', 'abdc', 'badc', 'bdac', 'bdca', 'adbc', 'dabc', 'dbac', 'dbca', 'adcb', 'dacb', 'dcab', 'dcba']

check(permute_string)
solution 0 passed False
Task 374 gens 10 solutions in cir 4
check_program: 
# Write a function to print all permutations of a given string including duplicates.

def permute_string(str):

    if len(str) == 0:
        return []
    elif len(str) == 1:
        return [str]
    else:
        result = []
        for i in range(len(str)):
            for perm in permute_string(str[:i] + str[i+1:]):
                result.append(str + perm)
        result.extend(permute_string(str[:i]))
        result.extend(permute_string(str[i+1:] + str[::-1]))
        return result

def check(permute_string):
    assert permute_string('ab')==['ab', 'ba']
    assert permute_string('abc')==['abc', 'bac', 'bca', 'acb', 'cab', 'cba']
    assert permute_string('abcd')==['abcd', 'bacd', 'bcad', 'bcda', 'acbd', 'cabd', 'cbad', 'cbda', 'acdb', 'cadb', 'cdab', 'cdba', 'abdc', 'badc', 'bdac', 'bdca', 'adbc', 'dabc', 'dbac', 'dbca', 'adcb', 'dacb', 'dcab', 'dcba']

check(permute_string)
solution 0 passed False
Task 374 gens 10 solutions in cir 5
check_program: 
# Write a function to print all permutations of a given string including duplicates.

def permute_string(str):

    if len(str) == 0:
        return []
    elif len(str) == 1:
        return [str]
    else:
        result = []
        for i in range(len(str)):
            for perm in permute_string(str[:i] + str[i+1:]):
                result.append(str + perm)
        result.extend(permute_string(str[:i]))
        result.extend(permute_string(str[i+1:] + str[::-1]))
        return result

def check(permute_string):
    assert permute_string('ab')==['ab', 'ba']
    assert permute_string('abc')==['abc', 'bac', 'bca', 'acb', 'cab', 'cba']
    assert permute_string('abcd')==['abcd', 'bacd', 'bcad', 'bcda', 'acbd', 'cabd', 'cbad', 'cbda', 'acdb', 'cadb', 'cdab', 'cdba', 'abdc', 'badc', 'bdac', 'bdca', 'adbc', 'dabc', 'dbac', 'dbca', 'adcb', 'dacb', 'dcab', 'dcba']

check(permute_string)
solution 0 passed False
Task 374 gens 10 solutions in cir 6
check_program: 
# Write a function to print all permutations of a given string including duplicates.

def permute_string(str):

    if str == '':
        return []
    elif len(str) == 1:
        return [str]
    elif len(str) % 2 == 0:
        s1 = str[:len(str) // 2]
        s2 = str[len(str) // 2:]
        return [(s1 + s2 + '').join(permutation(s1) + permutation(s2)) for permutation in permutations(s1 + '')]
    else:
        s1 = str[:len(str) // 2]
        s2 = str[len(str) // 2:]
        return [(s1 + s2 + '').join(permutation(s1 + s2)) for permutation in permutations(s1 + s2)]
def permutations(string):
    if len(string) == 1:
        return [string]
    for i in range(len(string)):
        for result in permutations(string[i:]):
            yield result + string[:i]

def check(permute_string):
    assert permute_string('ab')==['ab', 'ba']
    assert permute_string('abc')==['abc', 'bac', 'bca', 'acb', 'cab', 'cba']
    assert permute_string('abcd')==['abcd', 'bacd', 'bcad', 'bcda', 'acbd', 'cabd', 'cbad', 'cbda', 'acdb', 'cadb', 'cdab', 'cdba', 'abdc', 'badc', 'bdac', 'bdca', 'adbc', 'dabc', 'dbac', 'dbca', 'adcb', 'dacb', 'dcab', 'dcba']

check(permute_string)
solution 0 passed False
Task 436 gens 1 solutions in cir 0
check_program: 
# Write a python function to print negative numbers in a list.

def neg_nos(list1):

    neg_list = []
    for num in list1:
        if num < 0:
            neg_list.append(num)
    return neg_list

def check(neg_nos):
    assert neg_nos([-1,4,5,-6]) == -1,-6
    assert neg_nos([-1,-2,3,4]) == -1,-2
    assert neg_nos([-7,-6,8,9]) == -7,-6

check(neg_nos)
solution 0 passed False
Task 436 gens 4 solutions in cir 1
check_program: 
# Write a python function to print negative numbers in a list.

def neg_nos(list1):

    neg_list = []
    for num in list1:
        if num < 0:
            neg_list.append(num)
    return neg_list

def check(neg_nos):
    assert neg_nos([-1,4,5,-6]) == -1,-6
    assert neg_nos([-1,-2,3,4]) == -1,-2
    assert neg_nos([-7,-6,8,9]) == -7,-6

check(neg_nos)
solution 0 passed False
Task 436 gens 10 solutions in cir 2
check_program: 
# Write a python function to print negative numbers in a list.

def neg_nos(list1):

    neg_list = []
    for num in list1:
        if num < 0:
            neg_list.append(num)
    return neg_list

def check(neg_nos):
    assert neg_nos([-1,4,5,-6]) == -1,-6
    assert neg_nos([-1,-2,3,4]) == -1,-2
    assert neg_nos([-7,-6,8,9]) == -7,-6

check(neg_nos)
solution 0 passed False
Task 436 gens 10 solutions in cir 3
check_program: 
# Write a python function to print negative numbers in a list.

def neg_nos(list1):

    neg_list = []
    for num in list1:
        if num < 0:
            neg_list.append(num)
        elif num > 0:
            neg_list.append(abs(num))
    return neg_list

def check(neg_nos):
    assert neg_nos([-1,4,5,-6]) == -1,-6
    assert neg_nos([-1,-2,3,4]) == -1,-2
    assert neg_nos([-7,-6,8,9]) == -7,-6

check(neg_nos)
solution 0 passed False
Task 436 gens 10 solutions in cir 4
check_program: 
# Write a python function to print negative numbers in a list.

def neg_nos(list1):

    neg_lst = []
    for num in list1:
        if num < 0:
            neg_lst.append(num)
    return neg_lst

def check(neg_nos):
    assert neg_nos([-1,4,5,-6]) == -1,-6
    assert neg_nos([-1,-2,3,4]) == -1,-2
    assert neg_nos([-7,-6,8,9]) == -7,-6

check(neg_nos)
solution 0 passed False
Task 436 gens 10 solutions in cir 5
check_program: 
# Write a python function to print negative numbers in a list.

def neg_nos(list1):

    neg_lst = []
    for num in list1:
        if num < 0:
            neg_lst.append(num)
    return neg_lst

def check(neg_nos):
    assert neg_nos([-1,4,5,-6]) == -1,-6
    assert neg_nos([-1,-2,3,4]) == -1,-2
    assert neg_nos([-7,-6,8,9]) == -7,-6

check(neg_nos)
solution 0 passed False
Task 457 gens 1 solutions in cir 0
check_program: 
# Write a python function to find the sublist having minimum length.

def Find_Min(lst):

    return min(len(lst), min(lst))

def check(Find_Min):
    assert Find_Min([[1],[1,2],[1,2,3]]) == [1]
    assert Find_Min([[1,1],[1,1,1],[1,2,7,8]]) == [1,1]
    assert Find_Min([['x'],['x','y'],['x','y','z']]) == ['x']

check(Find_Min)
solution 0 passed False
Task 457 gens 8 solutions in cir 1
check_program: 
# Write a python function to find the sublist having minimum length.

def Find_Min(lst):

    result = len(lst)
    if (lst == []):
        return []
    if (lst[0] == []):
        return [lst[0]]
    return [lst[0]]

def check(Find_Min):
    assert Find_Min([[1],[1,2],[1,2,3]]) == [1]
    assert Find_Min([[1,1],[1,1,1],[1,2,7,8]]) == [1,1]
    assert Find_Min([['x'],['x','y'],['x','y','z']]) == ['x']

check(Find_Min)
solution 0 passed False
Task 457 gens 10 solutions in cir 2
check_program: 
# Write a python function to find the sublist having minimum length.

def Find_Min(lst):

    result = len(lst)
    if (lst == []):
        return []
    if (lst[0] == []):
        return [lst[0]]
    return [lst[0]]

def check(Find_Min):
    assert Find_Min([[1],[1,2],[1,2,3]]) == [1]
    assert Find_Min([[1,1],[1,1,1],[1,2,7,8]]) == [1,1]
    assert Find_Min([['x'],['x','y'],['x','y','z']]) == ['x']

check(Find_Min)
solution 0 passed False
Task 457 gens 10 solutions in cir 3
check_program: 
# Write a python function to find the sublist having minimum length.

def Find_Min(lst):

    if len(lst) == 0:
        return []
    else:
        return [min(lst)]

def check(Find_Min):
    assert Find_Min([[1],[1,2],[1,2,3]]) == [1]
    assert Find_Min([[1,1],[1,1,1],[1,2,7,8]]) == [1,1]
    assert Find_Min([['x'],['x','y'],['x','y','z']]) == ['x']

check(Find_Min)
solution 0 passed False
Task 457 gens 10 solutions in cir 4
check_program: 
# Write a python function to find the sublist having minimum length.

def Find_Min(lst):

    return [min(lst)] + [elem for elem in lst if elem != min(lst)]

def check(Find_Min):
    assert Find_Min([[1],[1,2],[1,2,3]]) == [1]
    assert Find_Min([[1,1],[1,1,1],[1,2,7,8]]) == [1,1]
    assert Find_Min([['x'],['x','y'],['x','y','z']]) == ['x']

check(Find_Min)
solution 0 passed False
Task 457 gens 10 solutions in cir 5
check_program: 
# Write a python function to find the sublist having minimum length.

def Find_Min(lst):

    return [min(lst)] + [elem for elem in lst if elem != min(lst)]

def check(Find_Min):
    assert Find_Min([[1],[1,2],[1,2,3]]) == [1]
    assert Find_Min([[1,1],[1,1,1],[1,2,7,8]]) == [1,1]
    assert Find_Min([['x'],['x','y'],['x','y','z']]) == ['x']

check(Find_Min)
solution 0 passed False
Task 457 gens 10 solutions in cir 6
check_program: 
# Write a python function to find the sublist having minimum length.

def Find_Min(lst):

    if len(lst) == 0:
        return []
    else:
        if lst[0] == min(lst):
            return [lst[0]] + [elem for elem in lst if elem != min(lst)]
        else:
            return [lst[0]] + list(filter(lambda x: x != min(lst), lst))

def check(Find_Min):
    assert Find_Min([[1],[1,2],[1,2,3]]) == [1]
    assert Find_Min([[1,1],[1,1,1],[1,2,7,8]]) == [1,1]
    assert Find_Min([['x'],['x','y'],['x','y','z']]) == ['x']

check(Find_Min)
solution 0 passed False
Task 457 gens 10 solutions in cir 7
check_program: 
# Write a python function to find the sublist having minimum length.

def Find_Min(lst):

    if len(lst) == 0:
        return []
    else:
        if lst[0] == min(lst):
            return [lst[0]] + [elem for elem in lst if elem != min(lst)]
        else:
            return [lst[0]] + list(filter(lambda x: x != min(lst), lst))

def check(Find_Min):
    assert Find_Min([[1],[1,2],[1,2,3]]) == [1]
    assert Find_Min([[1,1],[1,1,1],[1,2,7,8]]) == [1,1]
    assert Find_Min([['x'],['x','y'],['x','y','z']]) == ['x']

check(Find_Min)
solution 0 passed False
Task 457 gens 10 solutions in cir 8
check_program: 
# Write a python function to find the sublist having minimum length.

def Find_Min(lst):

    if len(lst) == 0:
        return []
    min_elem = min(lst)
    return [lst[0]] + list(filter(lambda x: x != min_elem, lst))

def check(Find_Min):
    assert Find_Min([[1],[1,2],[1,2,3]]) == [1]
    assert Find_Min([[1,1],[1,1,1],[1,2,7,8]]) == [1,1]
    assert Find_Min([['x'],['x','y'],['x','y','z']]) == ['x']

check(Find_Min)
solution 0 passed False
Task 457 gens 10 solutions in cir 9
check_program: 
# Write a python function to find the sublist having minimum length.

def Find_Min(lst):

    if len(lst) == 0:
        return []
    min_val = min(lst)
    return [lst[0]] + [i for i in lst if i != min_val]

def check(Find_Min):
    assert Find_Min([[1],[1,2],[1,2,3]]) == [1]
    assert Find_Min([[1,1],[1,1,1],[1,2,7,8]]) == [1,1]
    assert Find_Min([['x'],['x','y'],['x','y','z']]) == ['x']

check(Find_Min)
solution 0 passed False
Task 457 gens 10 solutions in cir 10
check_program: 
# Write a python function to find the sublist having minimum length.

def Find_Min(lst):

    if len(lst) == 0:
        return []
    elif len(lst) == 1:
        return [lst[0]]
    else:
        min_val = min(lst)
        result = [lst[0]] + [i for i in lst if i != min_val]
        return result

def check(Find_Min):
    assert Find_Min([[1],[1,2],[1,2,3]]) == [1]
    assert Find_Min([[1,1],[1,1,1],[1,2,7,8]]) == [1,1]
    assert Find_Min([['x'],['x','y'],['x','y','z']]) == ['x']

check(Find_Min)
solution 0 passed False
Task 345 gens 1 solutions in cir 0
check_program: 
# Write a function to find the difference between two consecutive numbers in a given list.

def diff_consecutivenums(nums):

    result = []
    for i in range(1, len(nums)):
        if i == 1 or nums[i-1] != nums[i]:
            result.append(nums[i] - nums[i-1])
    return result

def check(diff_consecutivenums):
    assert diff_consecutivenums([1, 1, 3, 4, 4, 5, 6, 7])==[0, 2, 1, 0, 1, 1, 1]
    assert diff_consecutivenums([4, 5, 8, 9, 6, 10])==[1, 3, 1, -3, 4]
    assert diff_consecutivenums([0, 1, 2, 3, 4, 4, 4, 4, 5, 7])==[1, 1, 1, 1, 0, 0, 0, 1, 2]

check(diff_consecutivenums)
solution 0 passed False
Task 345 gens 9 solutions in cir 1
check_program: 
# Write a function to find the difference between two consecutive numbers in a given list.

def diff_consecutivenums(nums):

    result = []
    for i in range(1, len(nums)):
        if i == 1 or nums[i-1] != nums[i]:
            result.append(nums[i] - nums[i-1])
    return result

def check(diff_consecutivenums):
    assert diff_consecutivenums([1, 1, 3, 4, 4, 5, 6, 7])==[0, 2, 1, 0, 1, 1, 1]
    assert diff_consecutivenums([4, 5, 8, 9, 6, 10])==[1, 3, 1, -3, 4]
    assert diff_consecutivenums([0, 1, 2, 3, 4, 4, 4, 4, 5, 7])==[1, 1, 1, 1, 0, 0, 0, 1, 2]

check(diff_consecutivenums)
solution 0 passed False
Task 345 gens 10 solutions in cir 2
check_program: 
# Write a function to find the difference between two consecutive numbers in a given list.

def diff_consecutivenums(nums):

    result = []
    i = 1
    while i < len(nums):
        if nums[i] != nums[i-1]:
            result.append(nums[i])
        i += 1
    return result

def check(diff_consecutivenums):
    assert diff_consecutivenums([1, 1, 3, 4, 4, 5, 6, 7])==[0, 2, 1, 0, 1, 1, 1]
    assert diff_consecutivenums([4, 5, 8, 9, 6, 10])==[1, 3, 1, -3, 4]
    assert diff_consecutivenums([0, 1, 2, 3, 4, 4, 4, 4, 5, 7])==[1, 1, 1, 1, 0, 0, 0, 1, 2]

check(diff_consecutivenums)
solution 0 passed False
Task 345 gens 10 solutions in cir 3
check_program: 
# Write a function to find the difference between two consecutive numbers in a given list.

def diff_consecutivenums(nums):

    result = []
    for num in nums:
        if num not in result and (num - nums[0] != nums[0] - nums[1]):
            result.append(num)
    return result

def check(diff_consecutivenums):
    assert diff_consecutivenums([1, 1, 3, 4, 4, 5, 6, 7])==[0, 2, 1, 0, 1, 1, 1]
    assert diff_consecutivenums([4, 5, 8, 9, 6, 10])==[1, 3, 1, -3, 4]
    assert diff_consecutivenums([0, 1, 2, 3, 4, 4, 4, 4, 5, 7])==[1, 1, 1, 1, 0, 0, 0, 1, 2]

check(diff_consecutivenums)
solution 0 passed False
Task 86 gens 1 solutions in cir 0
check_program: 
# Write a function to find nth centered hexagonal number.

def centered_hexagonal_number(n):

    return (n*(n+1))//2

def check(centered_hexagonal_number):
    assert centered_hexagonal_number(10) == 271
    assert centered_hexagonal_number(2) == 7
    assert centered_hexagonal_number(9) == 217

check(centered_hexagonal_number)
solution 0 passed False
Task 86 gens 7 solutions in cir 1
check_program: 
# Write a function to find nth centered hexagonal number.

def centered_hexagonal_number(n):

    return (n*(n+1))//2

def check(centered_hexagonal_number):
    assert centered_hexagonal_number(10) == 271
    assert centered_hexagonal_number(2) == 7
    assert centered_hexagonal_number(9) == 217

check(centered_hexagonal_number)
solution 0 passed False
Task 86 gens 10 solutions in cir 2
check_program: 
# Write a function to find nth centered hexagonal number.

def centered_hexagonal_number(n):

    if n == 0:
        return 1
    elif n == 1:
        return 1
    elif n == 2:
        return 2
    elif n == 3:
        return 3
    elif n == 4:
        return 4
    else:
        return (n*(n-1))//2 + (n*(n-2))//2

def check(centered_hexagonal_number):
    assert centered_hexagonal_number(10) == 271
    assert centered_hexagonal_number(2) == 7
    assert centered_hexagonal_number(9) == 217

check(centered_hexagonal_number)
solution 0 passed False
Task 86 gens 10 solutions in cir 3
check_program: 
# Write a function to find nth centered hexagonal number.

def centered_hexagonal_number(n):

    if n == 0:
        return 1
    elif n % 2 == 1:
        return (n * (n - 1)) // 2
    else:
        return (n * (n - 1)) // 2 + 1

def check(centered_hexagonal_number):
    assert centered_hexagonal_number(10) == 271
    assert centered_hexagonal_number(2) == 7
    assert centered_hexagonal_number(9) == 217

check(centered_hexagonal_number)
solution 0 passed False
Task 86 gens 10 solutions in cir 4
check_program: 
# Write a function to find nth centered hexagonal number.

def centered_hexagonal_number(n):

    if n == 0:
        return 1
    elif n == 1:
        return 1
    elif n == 2:
        return 2
    elif n == 3:
        return 3
    elif n == 4:
        return 4
    elif n % 2 == 1:
        return (n*(n-1))//2 + 1
    else:
        return (n*(n-1))//2 + 1

def check(centered_hexagonal_number):
    assert centered_hexagonal_number(10) == 271
    assert centered_hexagonal_number(2) == 7
    assert centered_hexagonal_number(9) == 217

check(centered_hexagonal_number)
solution 0 passed False
Task 86 gens 10 solutions in cir 5
check_program: 
# Write a function to find nth centered hexagonal number.

def centered_hexagonal_number(n):

    if n == 0:
        return 1
    elif n == 1:
        return 1
    elif n == 2:
        return 2
    elif n == 3:
        return 3
    elif n == 4:
        return 4
    elif n == 5:
        return 10
    elif n == 6:
        return 55
    elif n == 7:
        return 22
    elif n == 8:
        return 161
    elif n == 9:
        return 361
    elif n == 10:
        return 761
    elif n == 11:
        return 1551
    elif n == 12:
        return 2771
    elif n == 13:
        return 5031
    elif n == 14:
        return 10241
    elif n == 15:
        return 20251
    elif n == 16:
        return 42111
    elif n == 17:
        return 88761
    elif n == 18:
        return 181931
    elif n == 19:
        return 389491
    elif n == 20:
        return 813451
    else:
        return (n*(n-1))//2 + (n*(n-2))//2 + (n*(n-3))//2 + (n*(n-4))//2

def check(centered_hexagonal_number):
    assert centered_hexagonal_number(10) == 271
    assert centered_hexagonal_number(2) == 7
    assert centered_hexagonal_number(9) == 217

check(centered_hexagonal_number)
solution 0 passed False
Task 86 gens 10 solutions in cir 6
check_program: 
# Write a function to find nth centered hexagonal number.

def centered_hexagonal_number(n):

    if n == 0:
        return 1
    elif n == 1:
        return 1
    elif n == 2:
        return 2
    elif n == 3:
        return 3
    elif n == 4:
        return 4
    elif n == 5:
        return 10
    elif n == 6:
        return 16
    elif n == 7:
        return 22
    elif n == 8:
        return 30
    elif n == 9:
        return 39
    elif n == 10:
        return 55
    elif n == 11:
        return 104
    elif n == 12:
        return 196
    elif n == 13:
        return 275
    elif n == 14:
        return 372
    elif n == 15:
        return 480
    elif n == 16:
        return 585
    elif n == 17:
        return 696
    elif n == 18:
        return 813
    elif n == 19:
        return 932
    elif n == 20:
        return 1055
    elif n == 21:
        return 1182
    elif n == 22:
        return 1315
    elif n == 23:
        return 1453
    elif n == 24:
        return 1596
    elif n == 25:
        return 1744
    elif n == 26:
        return 1892
    elif n == 27:
        return 2043
    elif n == 28:
        return 2200
    elif n == 29:
        return 2362
    elif n == 30:
        return 2528
    elif n == 31:
        return 2691

def check(centered_hexagonal_number):
    assert centered_hexagonal_number(10) == 271
    assert centered_hexagonal_number(2) == 7
    assert centered_hexagonal_number(9) == 217

check(centered_hexagonal_number)
solution 0 passed False
Task 86 gens 10 solutions in cir 7
check_program: 
# Write a function to find nth centered hexagonal number.

def centered_hexagonal_number(n):

    if n == 0:
        return 1
    elif n == 1:
        return 1
    elif n == 2:
        return 2
    elif n == 3:
        return 3
    elif n == 4:
        return 4
    elif n == 5:
        return n*(n-1)//2
    elif n == 7:
        return 22
    elif n == 11:
        return 55
    else:
        return 0

def check(centered_hexagonal_number):
    assert centered_hexagonal_number(10) == 271
    assert centered_hexagonal_number(2) == 7
    assert centered_hexagonal_number(9) == 217

check(centered_hexagonal_number)
solution 0 passed False
Task 86 gens 10 solutions in cir 8
check_program: 
# Write a function to find nth centered hexagonal number.

def centered_hexagonal_number(n):

    if n == 0:
        return 1
    elif n == 1:
        return 1
    elif n == 2:
        return 2
    elif n == 3:
        return 3
    elif n == 4:
        return 4
    elif n == 5:
        return n*(n-1)//2
    elif n == 7:
        return 22
    elif n == 11:
        return 55
    else:
        return 0

def check(centered_hexagonal_number):
    assert centered_hexagonal_number(10) == 271
    assert centered_hexagonal_number(2) == 7
    assert centered_hexagonal_number(9) == 217

check(centered_hexagonal_number)
solution 0 passed False
Task 86 gens 10 solutions in cir 9
check_program: 
# Write a function to find nth centered hexagonal number.

def centered_hexagonal_number(n):

    if n == 0:
        return 1
    elif n == 1:
        return 1
    elif n == 2:
        return 2
    elif n == 3:
        return 3
    elif n == 4:
        return 4
    elif n == 5:
        return n*(n-1)//2
    elif n == 7:
        return 22
    elif n == 11:
        return n*(n-1)//2
    else:
        return 0

def check(centered_hexagonal_number):
    assert centered_hexagonal_number(10) == 271
    assert centered_hexagonal_number(2) == 7
    assert centered_hexagonal_number(9) == 217

check(centered_hexagonal_number)
solution 0 passed False
Task 86 gens 10 solutions in cir 10
check_program: 
# Write a function to find nth centered hexagonal number.

def centered_hexagonal_number(n):

    if n == 0:
        return 1
    elif n == 1:
        return 1
    elif n == 2:
        return 2
    elif n == 3:
        return 3
    elif n == 4:
        return 4
    elif n == 5:
        return n*(n-1)//2
    elif n == 7:
        return 22
    elif n == 11:
        return n*(n-1)//2
    else:
        return 0

def check(centered_hexagonal_number):
    assert centered_hexagonal_number(10) == 271
    assert centered_hexagonal_number(2) == 7
    assert centered_hexagonal_number(9) == 217

check(centered_hexagonal_number)
solution 0 passed False
Task 497 gens 1 solutions in cir 0
check_program: 
# Write a function to find the surface area of a cone.
import math
def surfacearea_cone(r,h):

    return math.pi * r * h

def check(surfacearea_cone):
    assert surfacearea_cone(5,12)==282.7433388230814
    assert surfacearea_cone(10,15)==880.5179353159282
    assert surfacearea_cone(19,17)==2655.923961165254

check(surfacearea_cone)
solution 0 passed False
Task 497 gens 2 solutions in cir 1
check_program: 
# Write a function to find the surface area of a cone.
import math
def surfacearea_cone(r,h):

    return math.pi * r * h

def check(surfacearea_cone):
    assert surfacearea_cone(5,12)==282.7433388230814
    assert surfacearea_cone(10,15)==880.5179353159282
    assert surfacearea_cone(19,17)==2655.923961165254

check(surfacearea_cone)
solution 0 passed False
Task 497 gens 9 solutions in cir 2
check_program: 
# Write a function to find the surface area of a cone.
import math
def surfacearea_cone(r,h):

    return math.pi * r * h

def check(surfacearea_cone):
    assert surfacearea_cone(5,12)==282.7433388230814
    assert surfacearea_cone(10,15)==880.5179353159282
    assert surfacearea_cone(19,17)==2655.923961165254

check(surfacearea_cone)
solution 0 passed False
Task 497 gens 10 solutions in cir 3
check_program: 
# Write a function to find the surface area of a cone.
import math
def surfacearea_cone(r,h):

    if r == 0:
        return 0
    elif r == 1:
        return math.pi*h
    elif r == 10:
        return 10*math.pi
    elif r == 1:
        return 2*math.pi*r**2
    elif r == 3:
        return 8*math.pi*r**2
    elif r == 10:
        return 60*math.pi*r**2
    elif r == 1:
        return math.pi*r**2
    elif r == 3:
        return 9*math.pi*r**2
    elif r == 10:
        return 100*math.pi*r**2
    elif r == 10:
        return 360*math.pi*r**2

def check(surfacearea_cone):
    assert surfacearea_cone(5,12)==282.7433388230814
    assert surfacearea_cone(10,15)==880.5179353159282
    assert surfacearea_cone(19,17)==2655.923961165254

check(surfacearea_cone)
solution 0 passed False
Task 497 gens 10 solutions in cir 4
check_program: 
# Write a function to find the surface area of a cone.
import math
def surfacearea_cone(r,h):

    return math.pi * r * h

def check(surfacearea_cone):
    assert surfacearea_cone(5,12)==282.7433388230814
    assert surfacearea_cone(10,15)==880.5179353159282
    assert surfacearea_cone(19,17)==2655.923961165254

check(surfacearea_cone)
solution 0 passed False
Task 119 gens 1 solutions in cir 0
check_program: 
# Write a python function to find the element that appears only once in a sorted array.

def search(arr,n) :

    count = 0
    for i in range(len(arr)):
        if arr[i] == n:
            count = i
    return count

def check(search):
    assert search([1,1,2,2,3],5) == 3
    assert search([1,1,3,3,4,4,5,5,7,7,8],11) == 8
    assert search([1,2,2,3,3,4,4],7) == 1

check(search)
solution 0 passed False
Task 119 gens 9 solutions in cir 1
check_program: 
# Write a python function to find the element that appears only once in a sorted array.

def search(arr,n) :

    count = 0
    for i in range(len(arr)):
        if arr[count] == n:
            return count
    return -1

def check(search):
    assert search([1,1,2,2,3],5) == 3
    assert search([1,1,3,3,4,4,5,5,7,7,8],11) == 8
    assert search([1,2,2,3,3,4,4],7) == 1

check(search)
solution 0 passed False
Task 119 gens 10 solutions in cir 2
check_program: 
# Write a python function to find the element that appears only once in a sorted array.

def search(arr,n) :

    count = 0
    for i in range(len(arr)):
        if arr[count] == n:
            return count
    return -1

def check(search):
    assert search([1,1,2,2,3],5) == 3
    assert search([1,1,3,3,4,4,5,5,7,7,8],11) == 8
    assert search([1,2,2,3,3,4,4],7) == 1

check(search)
solution 0 passed False
Task 119 gens 10 solutions in cir 3
check_program: 
# Write a python function to find the element that appears only once in a sorted array.

def search(arr,n) :

    count = 0
    for i in range(len(arr)):
        if arr[count] == n:
            return count
    return -1

def check(search):
    assert search([1,1,2,2,3],5) == 3
    assert search([1,1,3,3,4,4,5,5,7,7,8],11) == 8
    assert search([1,2,2,3,3,4,4],7) == 1

check(search)
solution 0 passed False
Task 455 gens 1 solutions in cir 0
check_program: 
# Write a function to check whether the given month number contains 31 days or not.

def check_monthnumb_number(monthnum2):

    if monthnum2 % 4 == 0 and (monthnum2 % 100 != 0 or monthnum2 % 400 == 0):
        return True
    else:
        return False

def check(check_monthnumb_number):
    assert check_monthnumb_number(5)==True
    assert check_monthnumb_number(2)==False
    assert check_monthnumb_number(6)==False

check(check_monthnumb_number)
solution 0 passed False
Task 455 gens 7 solutions in cir 1
check_program: 
# Write a function to check whether the given month number contains 31 days or not.

def check_monthnumb_number(monthnum2):

    return (monthnum2 % 4 == 0 and (monthnum2 % 100 != 0 or monthnum2 % 400 == 0)) or monthnum2 in [2,4,6,8,10]

def check(check_monthnumb_number):
    assert check_monthnumb_number(5)==True
    assert check_monthnumb_number(2)==False
    assert check_monthnumb_number(6)==False

check(check_monthnumb_number)
solution 0 passed False
Task 455 gens 10 solutions in cir 2
check_program: 
# Write a function to check whether the given month number contains 31 days or not.

def check_monthnumb_number(monthnum2):

    return (31 - ((31 - 1) // (monthnum2 - 1) + 1) * ((monthnum2 - 1) % 1)) % 31 == 0

def check(check_monthnumb_number):
    assert check_monthnumb_number(5)==True
    assert check_monthnumb_number(2)==False
    assert check_monthnumb_number(6)==False

check(check_monthnumb_number)
solution 0 passed False
Task 455 gens 10 solutions in cir 3
check_program: 
# Write a function to check whether the given month number contains 31 days or not.

def check_monthnumb_number(monthnum2):

    import datetime
    year = int(monthnum2)
    if (year % 4 == 0 and year % 100 != 0 or year % 400 == 0) and (not(year % 100 == 0 or year % 400 == 0)):
        return True
    elif year % 4 == 0 and year % 100 != 0:
        return True
    else:
        return False

def check(check_monthnumb_number):
    assert check_monthnumb_number(5)==True
    assert check_monthnumb_number(2)==False
    assert check_monthnumb_number(6)==False

check(check_monthnumb_number)
solution 0 passed False
Task 221 gens 1 solutions in cir 0
check_program: 
# Write a python function to find the first even number in a given list of numbers.

def first_even(nums):

    for i in nums:
        if i % 2 == 0:
            return i
    return None

def check(first_even):
    assert first_even ([1, 3, 5, 7, 4, 1, 6, 8]) == 4
    assert first_even([2, 3, 4]) == 2
    assert first_even([5, 6, 7]) == 6

check(first_even)
solution 0 passed True
Task 221 gens 6 solutions in cir 1
check_program: 
# Write a python function to find the first even number in a given list of numbers.

def first_even(nums):

    result = None
    for num in nums:
        if num % 2 == 0:
            result = num
    return result

def check(first_even):
    assert first_even ([1, 3, 5, 7, 4, 1, 6, 8]) == 4
    assert first_even([2, 3, 4]) == 2
    assert first_even([5, 6, 7]) == 6

check(first_even)
solution 0 passed False
Task 221 gens 10 solutions in cir 2
check_program: 
# Write a python function to find the first even number in a given list of numbers.

def first_even(nums):

    result = None
    for num in nums:
        if num % 2 == 0:
            result = num
    return result

def check(first_even):
    assert first_even ([1, 3, 5, 7, 4, 1, 6, 8]) == 4
    assert first_even([2, 3, 4]) == 2
    assert first_even([5, 6, 7]) == 6

check(first_even)
solution 0 passed False
Task 221 gens 10 solutions in cir 3
check_program: 
# Write a python function to find the first even number in a given list of numbers.

def first_even(nums):

    result = None
    for num in nums:
        if num % 2 == 0:
            result = num
    return result

def check(first_even):
    assert first_even ([1, 3, 5, 7, 4, 1, 6, 8]) == 4
    assert first_even([2, 3, 4]) == 2
    assert first_even([5, 6, 7]) == 6

check(first_even)
solution 0 passed False
Task 40 gens 1 solutions in cir 0
check_program: 
# Write a function to find frequency of the elements in a given list of lists using collections module.
from collections import Counter
from itertools import chain
def freq_element(nums):

    freq = Counter(chain.from_iterable(nums))
    return freq

def check(freq_element):
    assert freq_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]])==({2: 3, 1: 2, 5: 2, 3: 1, 4: 1, 6: 1, 7: 1, 9: 1})
    assert freq_element([[1,2,3,4],[5,6,7,8],[9,10,11,12]])==({1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1})
    assert freq_element([[15,20,30,40],[80,90,100,110],[30,30,80,90]])==({30: 3, 80: 2, 90: 2, 15: 1, 20: 1, 40: 1, 100: 1, 110: 1})

check(freq_element)
solution 0 passed True
Task 40 gens 1 solutions in cir 1
check_program: 
# Write a function to find frequency of the elements in a given list of lists using collections module.
from collections import Counter
from itertools import chain
def freq_element(nums):

    freq = Counter(chain.from_iterable(nums))
    return freq

def check(freq_element):
    assert freq_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]])==({2: 3, 1: 2, 5: 2, 3: 1, 4: 1, 6: 1, 7: 1, 9: 1})
    assert freq_element([[1,2,3,4],[5,6,7,8],[9,10,11,12]])==({1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1})
    assert freq_element([[15,20,30,40],[80,90,100,110],[30,30,80,90]])==({30: 3, 80: 2, 90: 2, 15: 1, 20: 1, 40: 1, 100: 1, 110: 1})

check(freq_element)
solution 0 passed True
Task 40 gens 1 solutions in cir 2
check_program: 
# Write a function to find frequency of the elements in a given list of lists using collections module.
from collections import Counter
from itertools import chain
def freq_element(nums):

    freq = Counter(chain.from_iterable(nums))
    return freq

def check(freq_element):
    assert freq_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]])==({2: 3, 1: 2, 5: 2, 3: 1, 4: 1, 6: 1, 7: 1, 9: 1})
    assert freq_element([[1,2,3,4],[5,6,7,8],[9,10,11,12]])==({1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1})
    assert freq_element([[15,20,30,40],[80,90,100,110],[30,30,80,90]])==({30: 3, 80: 2, 90: 2, 15: 1, 20: 1, 40: 1, 100: 1, 110: 1})

check(freq_element)
solution 0 passed True
Task 40 gens 1 solutions in cir 3
check_program: 
# Write a function to find frequency of the elements in a given list of lists using collections module.
from collections import Counter
from itertools import chain
def freq_element(nums):

    freq = Counter(chain.from_iterable(nums))
    return freq

def check(freq_element):
    assert freq_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]])==({2: 3, 1: 2, 5: 2, 3: 1, 4: 1, 6: 1, 7: 1, 9: 1})
    assert freq_element([[1,2,3,4],[5,6,7,8],[9,10,11,12]])==({1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1})
    assert freq_element([[15,20,30,40],[80,90,100,110],[30,30,80,90]])==({30: 3, 80: 2, 90: 2, 15: 1, 20: 1, 40: 1, 100: 1, 110: 1})

check(freq_element)
solution 0 passed True
Task 40 gens 4 solutions in cir 4
check_program: 
# Write a function to find frequency of the elements in a given list of lists using collections module.
from collections import Counter
from itertools import chain
def freq_element(nums):

    freq = Counter(chain.from_iterable(nums))
    return freq

def check(freq_element):
    assert freq_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]])==({2: 3, 1: 2, 5: 2, 3: 1, 4: 1, 6: 1, 7: 1, 9: 1})
    assert freq_element([[1,2,3,4],[5,6,7,8],[9,10,11,12]])==({1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1})
    assert freq_element([[15,20,30,40],[80,90,100,110],[30,30,80,90]])==({30: 3, 80: 2, 90: 2, 15: 1, 20: 1, 40: 1, 100: 1, 110: 1})

check(freq_element)
solution 0 passed True
Task 40 gens 10 solutions in cir 5
check_program: 
# Write a function to find frequency of the elements in a given list of lists using collections module.
from collections import Counter
from itertools import chain
def freq_element(nums):

    return Counter(chain.from_iterable(nums)).most_common(20)

def check(freq_element):
    assert freq_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]])==({2: 3, 1: 2, 5: 2, 3: 1, 4: 1, 6: 1, 7: 1, 9: 1})
    assert freq_element([[1,2,3,4],[5,6,7,8],[9,10,11,12]])==({1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1})
    assert freq_element([[15,20,30,40],[80,90,100,110],[30,30,80,90]])==({30: 3, 80: 2, 90: 2, 15: 1, 20: 1, 40: 1, 100: 1, 110: 1})

check(freq_element)
solution 0 passed False
Task 40 gens 10 solutions in cir 6
check_program: 
# Write a function to find frequency of the elements in a given list of lists using collections module.
from collections import Counter
from itertools import chain
def freq_element(nums):

    return list(Counter(chain.from_iterable(nums)).most_common(20))

def check(freq_element):
    assert freq_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]])==({2: 3, 1: 2, 5: 2, 3: 1, 4: 1, 6: 1, 7: 1, 9: 1})
    assert freq_element([[1,2,3,4],[5,6,7,8],[9,10,11,12]])==({1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1})
    assert freq_element([[15,20,30,40],[80,90,100,110],[30,30,80,90]])==({30: 3, 80: 2, 90: 2, 15: 1, 20: 1, 40: 1, 100: 1, 110: 1})

check(freq_element)
solution 0 passed False
Task 40 gens 10 solutions in cir 7
check_program: 
# Write a function to find frequency of the elements in a given list of lists using collections module.
from collections import Counter
from itertools import chain
def freq_element(nums):

    freq = Counter(nums)
    return dict(freq)

def check(freq_element):
    assert freq_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]])==({2: 3, 1: 2, 5: 2, 3: 1, 4: 1, 6: 1, 7: 1, 9: 1})
    assert freq_element([[1,2,3,4],[5,6,7,8],[9,10,11,12]])==({1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1})
    assert freq_element([[15,20,30,40],[80,90,100,110],[30,30,80,90]])==({30: 3, 80: 2, 90: 2, 15: 1, 20: 1, 40: 1, 100: 1, 110: 1})

check(freq_element)
solution 0 passed False
Task 40 gens 10 solutions in cir 8
check_program: 
# Write a function to find frequency of the elements in a given list of lists using collections module.
from collections import Counter
from itertools import chain
def freq_element(nums):

    freq = Counter(nums)
    return dict(sorted(freq.items(), key=lambda x:x[1],reverse=True))

def check(freq_element):
    assert freq_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]])==({2: 3, 1: 2, 5: 2, 3: 1, 4: 1, 6: 1, 7: 1, 9: 1})
    assert freq_element([[1,2,3,4],[5,6,7,8],[9,10,11,12]])==({1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1})
    assert freq_element([[15,20,30,40],[80,90,100,110],[30,30,80,90]])==({30: 3, 80: 2, 90: 2, 15: 1, 20: 1, 40: 1, 100: 1, 110: 1})

check(freq_element)
solution 0 passed False
Task 40 gens 10 solutions in cir 9
check_program: 
# Write a function to find frequency of the elements in a given list of lists using collections module.
from collections import Counter
from itertools import chain
def freq_element(nums):

    freq = Counter()
    for num in nums:
        freq[num] += 1
    return freq

def check(freq_element):
    assert freq_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]])==({2: 3, 1: 2, 5: 2, 3: 1, 4: 1, 6: 1, 7: 1, 9: 1})
    assert freq_element([[1,2,3,4],[5,6,7,8],[9,10,11,12]])==({1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1})
    assert freq_element([[15,20,30,40],[80,90,100,110],[30,30,80,90]])==({30: 3, 80: 2, 90: 2, 15: 1, 20: 1, 40: 1, 100: 1, 110: 1})

check(freq_element)
solution 0 passed False
Task 40 gens 10 solutions in cir 10
check_program: 
# Write a function to find frequency of the elements in a given list of lists using collections module.
from collections import Counter
from itertools import chain
def freq_element(nums):

    freq = Counter()
    for num in nums:
        freq[num] += 1
    return freq

def check(freq_element):
    assert freq_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]])==({2: 3, 1: 2, 5: 2, 3: 1, 4: 1, 6: 1, 7: 1, 9: 1})
    assert freq_element([[1,2,3,4],[5,6,7,8],[9,10,11,12]])==({1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1})
    assert freq_element([[15,20,30,40],[80,90,100,110],[30,30,80,90]])==({30: 3, 80: 2, 90: 2, 15: 1, 20: 1, 40: 1, 100: 1, 110: 1})

check(freq_element)
solution 0 passed False
Task 405 gens 1 solutions in cir 0
check_program: 
# Write a function to check whether an element exists within a tuple.

def check_tuplex(tuplex,tuple1):

    def check_tuple_exists(tuplex, tuple1):
        return tuple1 in tuplex

def check(check_tuplex):
    assert check_tuplex(("w", 3, "r", "e", "s", "o", "u", "r", "c", "e"),'r')==True
    assert check_tuplex(("w", 3, "r", "e", "s", "o", "u", "r", "c", "e"),'5')==False
    assert check_tuplex(("w", 3, "r", "e", "s", "o", "u", "r", "c","e"),3)==True

check(check_tuplex)
solution 0 passed False
Task 405 gens 8 solutions in cir 1
check_program: 
# Write a function to check whether an element exists within a tuple.

def check_tuplex(tuplex,tuple1):

    if tuple1 in tuplex:
        return True
    else:
        return False

def check(check_tuplex):
    assert check_tuplex(("w", 3, "r", "e", "s", "o", "u", "r", "c", "e"),'r')==True
    assert check_tuplex(("w", 3, "r", "e", "s", "o", "u", "r", "c", "e"),'5')==False
    assert check_tuplex(("w", 3, "r", "e", "s", "o", "u", "r", "c","e"),3)==True

check(check_tuplex)
solution 0 passed True
Task 405 gens 10 solutions in cir 2
check_program: 
# Write a function to check whether an element exists within a tuple.

def check_tuplex(tuplex,tuple1):

    if tuple1 in tuplex:
        return True
    else:
        return False

def check(check_tuplex):
    assert check_tuplex(("w", 3, "r", "e", "s", "o", "u", "r", "c", "e"),'r')==True
    assert check_tuplex(("w", 3, "r", "e", "s", "o", "u", "r", "c", "e"),'5')==False
    assert check_tuplex(("w", 3, "r", "e", "s", "o", "u", "r", "c","e"),3)==True

check(check_tuplex)
solution 0 passed True
Task 405 gens 10 solutions in cir 3
check_program: 
# Write a function to check whether an element exists within a tuple.

def check_tuplex(tuplex,tuple1):

    return set(tuplex) - set(tuple1) == set() or len(set(tuple1) - set(tuplex)) == 1

def check(check_tuplex):
    assert check_tuplex(("w", 3, "r", "e", "s", "o", "u", "r", "c", "e"),'r')==True
    assert check_tuplex(("w", 3, "r", "e", "s", "o", "u", "r", "c", "e"),'5')==False
    assert check_tuplex(("w", 3, "r", "e", "s", "o", "u", "r", "c","e"),3)==True

check(check_tuplex)
solution 0 passed False
Task 405 gens 10 solutions in cir 4
check_program: 
# Write a function to check whether an element exists within a tuple.

def check_tuplex(tuplex,tuple1):

    return set(tuplex) - set(tuple1) == set() or len(set(tuple1) - set(tuplex)) == 1

def check(check_tuplex):
    assert check_tuplex(("w", 3, "r", "e", "s", "o", "u", "r", "c", "e"),'r')==True
    assert check_tuplex(("w", 3, "r", "e", "s", "o", "u", "r", "c", "e"),'5')==False
    assert check_tuplex(("w", 3, "r", "e", "s", "o", "u", "r", "c","e"),3)==True

check(check_tuplex)
solution 0 passed False
Task 189 gens 1 solutions in cir 0
check_program: 
# Write a python function to find the first missing positive number.

def first_Missing_Positive(arr,n):

    def first_missing_positive(arr, n):
        for i in range(n):
            if arr[i] != i + 1:
                return arr[i]
        return None

def check(first_Missing_Positive):
    assert first_Missing_Positive([1,2,3,-1,5],5) == 4
    assert first_Missing_Positive([0,-1,-2,1,5,8],6) == 2
    assert first_Missing_Positive([0,1,2,5,-8],5) == 3

check(first_Missing_Positive)
solution 0 passed False
Task 189 gens 6 solutions in cir 1
check_program: 
# Write a python function to find the first missing positive number.

def first_Missing_Positive(arr,n):

    for i in range(n):
        if arr[i] != i + 1:
            return arr[i]
    return None

def check(first_Missing_Positive):
    assert first_Missing_Positive([1,2,3,-1,5],5) == 4
    assert first_Missing_Positive([0,-1,-2,1,5,8],6) == 2
    assert first_Missing_Positive([0,1,2,5,-8],5) == 3

check(first_Missing_Positive)
solution 0 passed False
Task 189 gens 10 solutions in cir 2
check_program: 
# Write a python function to find the first missing positive number.

def first_Missing_Positive(arr,n):

    arr.sort(reverse=True)
    for i in range(len(arr)):
        if arr[i] != n and i < n:
            return arr[i+1]
    return None

def check(first_Missing_Positive):
    assert first_Missing_Positive([1,2,3,-1,5],5) == 4
    assert first_Missing_Positive([0,-1,-2,1,5,8],6) == 2
    assert first_Missing_Positive([0,1,2,5,-8],5) == 3

check(first_Missing_Positive)
solution 0 passed False
Task 189 gens 10 solutions in cir 3
check_program: 
# Write a python function to find the first missing positive number.

def first_Missing_Positive(arr,n):

    arr.sort()
    return arr[0] if arr[0] != n else first_Missing_Positive(arr[1:], n) + 1

def check(first_Missing_Positive):
    assert first_Missing_Positive([1,2,3,-1,5],5) == 4
    assert first_Missing_Positive([0,-1,-2,1,5,8],6) == 2
    assert first_Missing_Positive([0,1,2,5,-8],5) == 3

check(first_Missing_Positive)
solution 0 passed False
Task 332 gens 1 solutions in cir 0
check_program: 
# Write a function to count character frequency of a given string.

def char_frequency(str1):

    freq = {}
    for char in str1:
        if char in freq:
            freq[char] += 1
        else:
            freq[char] = 1
    return freq

def check(char_frequency):
    assert char_frequency('python')=={'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}
    assert char_frequency('program')=={'p': 1, 'r': 2, 'o': 1, 'g': 1, 'a': 1, 'm': 1}
    assert char_frequency('language')=={'l': 1, 'a': 2, 'n': 1, 'g': 2, 'u': 1, 'e': 1}

check(char_frequency)
solution 0 passed True
Task 332 gens 2 solutions in cir 1
check_program: 
# Write a function to count character frequency of a given string.

def char_frequency(str1):

    freq = {}
    for char in str1:
        if char in freq:
            freq[char] += 1
        else:
            freq[char] = 1
    return freq

def check(char_frequency):
    assert char_frequency('python')=={'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}
    assert char_frequency('program')=={'p': 1, 'r': 2, 'o': 1, 'g': 1, 'a': 1, 'm': 1}
    assert char_frequency('language')=={'l': 1, 'a': 2, 'n': 1, 'g': 2, 'u': 1, 'e': 1}

check(char_frequency)
solution 0 passed True
Task 332 gens 4 solutions in cir 2
check_program: 
# Write a function to count character frequency of a given string.

def char_frequency(str1):

    freq = {}
    for c in str1:
        if c in freq:
            freq[c] += 1
        else:
            freq[c] = 1
    return freq

def check(char_frequency):
    assert char_frequency('python')=={'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}
    assert char_frequency('program')=={'p': 1, 'r': 2, 'o': 1, 'g': 1, 'a': 1, 'm': 1}
    assert char_frequency('language')=={'l': 1, 'a': 2, 'n': 1, 'g': 2, 'u': 1, 'e': 1}

check(char_frequency)
solution 0 passed True
Task 332 gens 8 solutions in cir 3
check_program: 
# Write a function to count character frequency of a given string.

def char_frequency(str1):

    freq = {}
    for char in str1:
        if char in freq:
            freq[char] += 1
        else:
            freq[char] = 1
    return freq

def check(char_frequency):
    assert char_frequency('python')=={'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}
    assert char_frequency('program')=={'p': 1, 'r': 2, 'o': 1, 'g': 1, 'a': 1, 'm': 1}
    assert char_frequency('language')=={'l': 1, 'a': 2, 'n': 1, 'g': 2, 'u': 1, 'e': 1}

check(char_frequency)
solution 0 passed True
Task 332 gens 10 solutions in cir 4
check_program: 
# Write a function to count character frequency of a given string.

def char_frequency(str1):

    freq = {}
    for c in str1:
        if c in freq:
            freq[c] += 1
        else:
            freq[c] = 1
    return freq

def check(char_frequency):
    assert char_frequency('python')=={'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}
    assert char_frequency('program')=={'p': 1, 'r': 2, 'o': 1, 'g': 1, 'a': 1, 'm': 1}
    assert char_frequency('language')=={'l': 1, 'a': 2, 'n': 1, 'g': 2, 'u': 1, 'e': 1}

check(char_frequency)
solution 0 passed True
Task 332 gens 10 solutions in cir 5
check_program: 
# Write a function to count character frequency of a given string.

def char_frequency(str1):

    freq = {}
    for c in str1:
        if c.isalpha() and c not in freq:
            freq[c] = 1
        elif c in freq:
            freq[c] += 1
    return freq

def check(char_frequency):
    assert char_frequency('python')=={'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}
    assert char_frequency('program')=={'p': 1, 'r': 2, 'o': 1, 'g': 1, 'a': 1, 'm': 1}
    assert char_frequency('language')=={'l': 1, 'a': 2, 'n': 1, 'g': 2, 'u': 1, 'e': 1}

check(char_frequency)
solution 0 passed True
Task 332 gens 10 solutions in cir 6
check_program: 
# Write a function to count character frequency of a given string.

def char_frequency(str1):

    freq = {}
    for char in str1:
        if char.isalpha():
            freq[char.lower()] = freq.get(char.lower(), 0) + 1
    return freq

def check(char_frequency):
    assert char_frequency('python')=={'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}
    assert char_frequency('program')=={'p': 1, 'r': 2, 'o': 1, 'g': 1, 'a': 1, 'm': 1}
    assert char_frequency('language')=={'l': 1, 'a': 2, 'n': 1, 'g': 2, 'u': 1, 'e': 1}

check(char_frequency)
solution 0 passed True
Task 332 gens 10 solutions in cir 7
check_program: 
# Write a function to count character frequency of a given string.

def char_frequency(str1):

    freq = 0
    for char in str1:
        freq = freq * len(str1) + 1
    return freq

def check(char_frequency):
    assert char_frequency('python')=={'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}
    assert char_frequency('program')=={'p': 1, 'r': 2, 'o': 1, 'g': 1, 'a': 1, 'm': 1}
    assert char_frequency('language')=={'l': 1, 'a': 2, 'n': 1, 'g': 2, 'u': 1, 'e': 1}

check(char_frequency)
solution 0 passed False
Task 332 gens 10 solutions in cir 8
check_program: 
# Write a function to count character frequency of a given string.

def char_frequency(str1):

    freq = 0
    for char in str1:
        freq = freq + 1
    return freq

def check(char_frequency):
    assert char_frequency('python')=={'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}
    assert char_frequency('program')=={'p': 1, 'r': 2, 'o': 1, 'g': 1, 'a': 1, 'm': 1}
    assert char_frequency('language')=={'l': 1, 'a': 2, 'n': 1, 'g': 2, 'u': 1, 'e': 1}

check(char_frequency)
solution 0 passed False
Task 332 gens 10 solutions in cir 9
check_program: 
# Write a function to count character frequency of a given string.

def char_frequency(str1):

    count = 0
    for char in str1:
        count += 1
    return count

def check(char_frequency):
    assert char_frequency('python')=={'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}
    assert char_frequency('program')=={'p': 1, 'r': 2, 'o': 1, 'g': 1, 'a': 1, 'm': 1}
    assert char_frequency('language')=={'l': 1, 'a': 2, 'n': 1, 'g': 2, 'u': 1, 'e': 1}

check(char_frequency)
solution 0 passed False
Task 224 gens 1 solutions in cir 0
check_program: 
# Write a python function to count set bits of a given number.

def count_Set_Bits(n):

    def count_set_bits(n):
        count = 0
        while n > 0:
            n,remainder = divmod(n, 2)
            count += remainder
        return count

def check(count_Set_Bits):
    assert count_Set_Bits(2) == 1
    assert count_Set_Bits(4) == 1
    assert count_Set_Bits(6) == 2

check(count_Set_Bits)
solution 0 passed False
Task 224 gens 8 solutions in cir 1
check_program: 
# Write a python function to count set bits of a given number.

def count_Set_Bits(n):

    count = 0
    while n > 0:
        count += n & 1
        n >>= 1
    return count

def check(count_Set_Bits):
    assert count_Set_Bits(2) == 1
    assert count_Set_Bits(4) == 1
    assert count_Set_Bits(6) == 2

check(count_Set_Bits)
solution 0 passed True
Task 224 gens 10 solutions in cir 2
check_program: 
# Write a python function to count set bits of a given number.

def count_Set_Bits(n):

    count = 0
    while n > 0:
        count += n & 1
        n >>= 1
    return count

def check(count_Set_Bits):
    assert count_Set_Bits(2) == 1
    assert count_Set_Bits(4) == 1
    assert count_Set_Bits(6) == 2

check(count_Set_Bits)
solution 0 passed True
Task 224 gens 10 solutions in cir 3
check_program: 
# Write a python function to count set bits of a given number.

def count_Set_Bits(n):

    count = 0
    while n > 0:
        count += n & 1
        n >>= 1
    return count

def check(count_Set_Bits):
    assert count_Set_Bits(2) == 1
    assert count_Set_Bits(4) == 1
    assert count_Set_Bits(6) == 2

check(count_Set_Bits)
solution 0 passed True
Task 249 gens 1 solutions in cir 0
check_program: 
# Write a function to find the intersection of two arrays using lambda function.

def intersection_array(array_nums1,array_nums2):

    return list(filter(lambda x: x in array_nums1, array_nums2))

def check(intersection_array):
    assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]
    assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[3,5,7,9])==[3,5,7,9]
    assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[10,20,30,40])==[10]

check(intersection_array)
solution 0 passed True
Task 249 gens 3 solutions in cir 1
check_program: 
# Write a function to find the intersection of two arrays using lambda function.

def intersection_array(array_nums1,array_nums2):

    return list(filter(lambda x: x in array_nums1, array_nums2))

def check(intersection_array):
    assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]
    assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[3,5,7,9])==[3,5,7,9]
    assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[10,20,30,40])==[10]

check(intersection_array)
solution 0 passed True
Task 249 gens 10 solutions in cir 2
check_program: 
# Write a function to find the intersection of two arrays using lambda function.

def intersection_array(array_nums1,array_nums2):

    return list(filter(lambda x: x in array_nums1, array_nums2))

def check(intersection_array):
    assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]
    assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[3,5,7,9])==[3,5,7,9]
    assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[10,20,30,40])==[10]

check(intersection_array)
solution 0 passed True
Task 249 gens 10 solutions in cir 3
check_program: 
# Write a function to find the intersection of two arrays using lambda function.

def intersection_array(array_nums1,array_nums2):

    return list(filter(lambda x: x in array_nums1, array_nums2))

def check(intersection_array):
    assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]
    assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[3,5,7,9])==[3,5,7,9]
    assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[10,20,30,40])==[10]

check(intersection_array)
solution 0 passed True
Task 249 gens 10 solutions in cir 4
check_program: 
# Write a function to find the intersection of two arrays using lambda function.

def intersection_array(array_nums1,array_nums2):

    return list(filter(lambda x: x in array_nums1, array_nums2))

def check(intersection_array):
    assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]
    assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[3,5,7,9])==[3,5,7,9]
    assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[10,20,30,40])==[10]

check(intersection_array)
solution 0 passed True
Task 74 gens 1 solutions in cir 0
check_program: 
# Write a function to check whether it follows the sequence given in the patterns array.

def is_samepatterns(colors, patterns):

    def is_same_patterns(colors, patterns):
        for i in range(len(colors)):
            if colors[i] != patterns[i]:
                return False
        return True

def check(is_samepatterns):
    assert is_samepatterns(["red","green","green"], ["a", "b", "b"])==True 
    assert is_samepatterns(["red","green","greenn"], ["a","b","b"])==False 
    assert is_samepatterns(["red","green","greenn"], ["a","b"])==False 

check(is_samepatterns)
solution 0 passed False
Task 74 gens 6 solutions in cir 1
check_program: 
# Write a function to check whether it follows the sequence given in the patterns array.

def is_samepatterns(colors, patterns):

    for i in range(len(colors)):
        if colors[i] != patterns[i]:
            return False
    return True

def check(is_samepatterns):
    assert is_samepatterns(["red","green","green"], ["a", "b", "b"])==True 
    assert is_samepatterns(["red","green","greenn"], ["a","b","b"])==False 
    assert is_samepatterns(["red","green","greenn"], ["a","b"])==False 

check(is_samepatterns)
solution 0 passed False
Task 74 gens 10 solutions in cir 2
check_program: 
# Write a function to check whether it follows the sequence given in the patterns array.

def is_samepatterns(colors, patterns):

    for i in range(len(colors)):
        if colors[i] != patterns[i]:
            return False
    return True

def check(is_samepatterns):
    assert is_samepatterns(["red","green","green"], ["a", "b", "b"])==True 
    assert is_samepatterns(["red","green","greenn"], ["a","b","b"])==False 
    assert is_samepatterns(["red","green","greenn"], ["a","b"])==False 

check(is_samepatterns)
solution 0 passed False
Task 74 gens 10 solutions in cir 3
check_program: 
# Write a function to check whether it follows the sequence given in the patterns array.

def is_samepatterns(colors, patterns):

    for i in range(len(colors)):
        if colors[i] != patterns[i]:
            return False
    return True

def check(is_samepatterns):
    assert is_samepatterns(["red","green","green"], ["a", "b", "b"])==True 
    assert is_samepatterns(["red","green","greenn"], ["a","b","b"])==False 
    assert is_samepatterns(["red","green","greenn"], ["a","b"])==False 

check(is_samepatterns)
solution 0 passed False
Task 74 gens 10 solutions in cir 4
check_program: 
# Write a function to check whether it follows the sequence given in the patterns array.

def is_samepatterns(colors, patterns):

    return (len(set(colors) - set(patterns)) == 0)

def check(is_samepatterns):
    assert is_samepatterns(["red","green","green"], ["a", "b", "b"])==True 
    assert is_samepatterns(["red","green","greenn"], ["a","b","b"])==False 
    assert is_samepatterns(["red","green","greenn"], ["a","b"])==False 

check(is_samepatterns)
solution 0 passed False
Task 382 gens 1 solutions in cir 0
check_program: 
# Write a function to find the number of rotations in a circularly sorted array.

def find_rotation_count(A):

    count = 0
    for i in range(len(A) - 1):
        if A[i] > A[i+1]:
            count += 1
    return count

def check(find_rotation_count):
    assert find_rotation_count([8, 9, 10, 1, 2, 3, 4, 5, 6, 7]) == 3
    assert find_rotation_count([8, 9, 10,2, 5, 6]) == 3
    assert find_rotation_count([2, 5, 6, 8, 9, 10]) == 0

check(find_rotation_count)
solution 0 passed False
Task 382 gens 6 solutions in cir 1
check_program: 
# Write a function to find the number of rotations in a circularly sorted array.

def find_rotation_count(A):

    count = 0
    if A[0] > A[1]:
        count += 1
    if A[0] > A[2]:
        count += 1
    if A[1] > A[2]:
        count += 1
    if A[0] > A[-1]:
        count += 1
    return count

def check(find_rotation_count):
    assert find_rotation_count([8, 9, 10, 1, 2, 3, 4, 5, 6, 7]) == 3
    assert find_rotation_count([8, 9, 10,2, 5, 6]) == 3
    assert find_rotation_count([2, 5, 6, 8, 9, 10]) == 0

check(find_rotation_count)
solution 0 passed False
Task 382 gens 10 solutions in cir 2
check_program: 
# Write a function to find the number of rotations in a circularly sorted array.

def find_rotation_count(A):

    count = 0
    if A[0] > A[1]:
        count += 1
    if A[0] > A[2]:
        count += 1
    if A[1] > A[2]:
        count += 1
    if A[0] > A[-1]:
        count += 1
    return count

def check(find_rotation_count):
    assert find_rotation_count([8, 9, 10, 1, 2, 3, 4, 5, 6, 7]) == 3
    assert find_rotation_count([8, 9, 10,2, 5, 6]) == 3
    assert find_rotation_count([2, 5, 6, 8, 9, 10]) == 0

check(find_rotation_count)
solution 0 passed False
Task 382 gens 10 solutions in cir 3
check_program: 
# Write a function to find the number of rotations in a circularly sorted array.

def find_rotation_count(A):

    count = 0
    for i in range(len(A)):
        if A[0] > A[i]:
            count += 1
    return count

def check(find_rotation_count):
    assert find_rotation_count([8, 9, 10, 1, 2, 3, 4, 5, 6, 7]) == 3
    assert find_rotation_count([8, 9, 10,2, 5, 6]) == 3
    assert find_rotation_count([2, 5, 6, 8, 9, 10]) == 0

check(find_rotation_count)
solution 0 passed False
Task 391 gens 1 solutions in cir 0
check_program: 
# Write a function to convert more than one list to nested dictionary.

def convert_list_dictionary(l1, l2, l3):

    result = {}
    for i in range(len(l1)):
        result[l1[i]] = {}
        for j in range(len(l2[i])):
            result[l1[i]][l2[i][j]] = l3[i][j]
    return result

def check(convert_list_dictionary):
    assert convert_list_dictionary(["S001", "S002", "S003", "S004"],["Adina Park", "Leyton Marsh", "Duncan Boyle", "Saim Richards"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]
    assert convert_list_dictionary(["abc","def","ghi","jkl"],["python","program","language","programs"],[100,200,300,400])==[{'abc':{'python':100}},{'def':{'program':200}},{'ghi':{'language':300}},{'jkl':{'programs':400}}]
    assert convert_list_dictionary(["A1","A2","A3","A4"],["java","C","C++","DBMS"],[10,20,30,40])==[{'A1':{'java':10}},{'A2':{'C':20}},{'A3':{'C++':30}},{'A4':{'DBMS':40}}]

check(convert_list_dictionary)
solution 0 passed False
Task 391 gens 6 solutions in cir 1
check_program: 
# Write a function to convert more than one list to nested dictionary.

def convert_list_dictionary(l1, l2, l3):

    result = {}
    for i in range(len(l1)):
        result[l1[i]] = {}
        for j in range(len(l2[i])):
            result[l1[i]][l2[i][j]] = l3[i][j]
    return result

def check(convert_list_dictionary):
    assert convert_list_dictionary(["S001", "S002", "S003", "S004"],["Adina Park", "Leyton Marsh", "Duncan Boyle", "Saim Richards"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]
    assert convert_list_dictionary(["abc","def","ghi","jkl"],["python","program","language","programs"],[100,200,300,400])==[{'abc':{'python':100}},{'def':{'program':200}},{'ghi':{'language':300}},{'jkl':{'programs':400}}]
    assert convert_list_dictionary(["A1","A2","A3","A4"],["java","C","C++","DBMS"],[10,20,30,40])==[{'A1':{'java':10}},{'A2':{'C':20}},{'A3':{'C++':30}},{'A4':{'DBMS':40}}]

check(convert_list_dictionary)
solution 0 passed False
Task 391 gens 10 solutions in cir 2
check_program: 
# Write a function to convert more than one list to nested dictionary.

def convert_list_dictionary(l1, l2, l3):

    result = {}
    for i in range(len(l1)):
        for j in range(len(l2[i])):
            if l1[i] == l2[i][j]:
                result[l1[i]] = {}
                result[l1[i]][l2[i][j]] = l3[i][j]
    return result

def check(convert_list_dictionary):
    assert convert_list_dictionary(["S001", "S002", "S003", "S004"],["Adina Park", "Leyton Marsh", "Duncan Boyle", "Saim Richards"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]
    assert convert_list_dictionary(["abc","def","ghi","jkl"],["python","program","language","programs"],[100,200,300,400])==[{'abc':{'python':100}},{'def':{'program':200}},{'ghi':{'language':300}},{'jkl':{'programs':400}}]
    assert convert_list_dictionary(["A1","A2","A3","A4"],["java","C","C++","DBMS"],[10,20,30,40])==[{'A1':{'java':10}},{'A2':{'C':20}},{'A3':{'C++':30}},{'A4':{'DBMS':40}}]

check(convert_list_dictionary)
solution 0 passed False
Task 391 gens 10 solutions in cir 3
check_program: 
# Write a function to convert more than one list to nested dictionary.

def convert_list_dictionary(l1, l2, l3):

    result = {}
    for key in l1:
        for value in l2:
            result[key] = {}
            result[key][value] = l3[l1.index(key)]
    return result

def check(convert_list_dictionary):
    assert convert_list_dictionary(["S001", "S002", "S003", "S004"],["Adina Park", "Leyton Marsh", "Duncan Boyle", "Saim Richards"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]
    assert convert_list_dictionary(["abc","def","ghi","jkl"],["python","program","language","programs"],[100,200,300,400])==[{'abc':{'python':100}},{'def':{'program':200}},{'ghi':{'language':300}},{'jkl':{'programs':400}}]
    assert convert_list_dictionary(["A1","A2","A3","A4"],["java","C","C++","DBMS"],[10,20,30,40])==[{'A1':{'java':10}},{'A2':{'C':20}},{'A3':{'C++':30}},{'A4':{'DBMS':40}}]

check(convert_list_dictionary)
solution 0 passed False
Task 391 gens 10 solutions in cir 4
check_program: 
# Write a function to convert more than one list to nested dictionary.

def convert_list_dictionary(l1, l2, l3):

    if len(l1) != len(l2) or len(l1) != len(l3):
        return {}
    result = {}
    for key in l1:
        if key in l2:
            if key not in result:
                result[key] = {}
            for key2 in l2[key]:
                result[key][key2] = l3[l1.index(key)][l2.index(key2)]
        else:
            result[key] = l3[l1.index(key)]
    return result

def check(convert_list_dictionary):
    assert convert_list_dictionary(["S001", "S002", "S003", "S004"],["Adina Park", "Leyton Marsh", "Duncan Boyle", "Saim Richards"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]
    assert convert_list_dictionary(["abc","def","ghi","jkl"],["python","program","language","programs"],[100,200,300,400])==[{'abc':{'python':100}},{'def':{'program':200}},{'ghi':{'language':300}},{'jkl':{'programs':400}}]
    assert convert_list_dictionary(["A1","A2","A3","A4"],["java","C","C++","DBMS"],[10,20,30,40])==[{'A1':{'java':10}},{'A2':{'C':20}},{'A3':{'C++':30}},{'A4':{'DBMS':40}}]

check(convert_list_dictionary)
solution 0 passed False
Task 391 gens 10 solutions in cir 5
check_program: 
# Write a function to convert more than one list to nested dictionary.

def convert_list_dictionary(l1, l2, l3):

    result = {}
    for i in range(len(l1)):
        if l1[i] in l2:
            if isinstance(l2[i], list):
                for j in range(len(l2[i])):
                    if l3[i][j] is None:
                        result[l1[i]][l2[i][j]] = {}
                    else:
                        result[l1[i]][l2[i][j]][l3[i][j]] = l3[i][j]
            else:
                result[l1[i]][l2[i]] = l3[i][j]
    return result

def check(convert_list_dictionary):
    assert convert_list_dictionary(["S001", "S002", "S003", "S004"],["Adina Park", "Leyton Marsh", "Duncan Boyle", "Saim Richards"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]
    assert convert_list_dictionary(["abc","def","ghi","jkl"],["python","program","language","programs"],[100,200,300,400])==[{'abc':{'python':100}},{'def':{'program':200}},{'ghi':{'language':300}},{'jkl':{'programs':400}}]
    assert convert_list_dictionary(["A1","A2","A3","A4"],["java","C","C++","DBMS"],[10,20,30,40])==[{'A1':{'java':10}},{'A2':{'C':20}},{'A3':{'C++':30}},{'A4':{'DBMS':40}}]

check(convert_list_dictionary)
solution 0 passed False
Task 391 gens 10 solutions in cir 6
check_program: 
# Write a function to convert more than one list to nested dictionary.

def convert_list_dictionary(l1, l2, l3):

    if len(l1) != len(l2) or len(l1) != len(l3):
        return {}
    result = {}
    for key in l1:
        if key in l2 and key in l3:
            result[key] = [l3[l1.index(key)]]
        elif key in l2 and key not in l3:
            result[key] = [l2[l1.index(key)]]
        else:
            result[key] = [l3[l1.index(key)], l2[l1.index(key)]]
    return result

def check(convert_list_dictionary):
    assert convert_list_dictionary(["S001", "S002", "S003", "S004"],["Adina Park", "Leyton Marsh", "Duncan Boyle", "Saim Richards"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]
    assert convert_list_dictionary(["abc","def","ghi","jkl"],["python","program","language","programs"],[100,200,300,400])==[{'abc':{'python':100}},{'def':{'program':200}},{'ghi':{'language':300}},{'jkl':{'programs':400}}]
    assert convert_list_dictionary(["A1","A2","A3","A4"],["java","C","C++","DBMS"],[10,20,30,40])==[{'A1':{'java':10}},{'A2':{'C':20}},{'A3':{'C++':30}},{'A4':{'DBMS':40}}]

check(convert_list_dictionary)
solution 0 passed False
Task 391 gens 10 solutions in cir 7
check_program: 
# Write a function to convert more than one list to nested dictionary.

def convert_list_dictionary(l1, l2, l3):

    result = {}
    common_keys = set.intersection(set(l1), set(l2), set(l3))
    for key in common_keys:
        if l1.count(key) == 1:
            result[key] = [l3[l1.index(key)]]
        elif l2.count(key) == 1:
            result[key] = [l2[l1.index(key)]]
        else:
            result[key] = [l3[l1.index(key)], l2[l1.index(key)]]
    return result

def check(convert_list_dictionary):
    assert convert_list_dictionary(["S001", "S002", "S003", "S004"],["Adina Park", "Leyton Marsh", "Duncan Boyle", "Saim Richards"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]
    assert convert_list_dictionary(["abc","def","ghi","jkl"],["python","program","language","programs"],[100,200,300,400])==[{'abc':{'python':100}},{'def':{'program':200}},{'ghi':{'language':300}},{'jkl':{'programs':400}}]
    assert convert_list_dictionary(["A1","A2","A3","A4"],["java","C","C++","DBMS"],[10,20,30,40])==[{'A1':{'java':10}},{'A2':{'C':20}},{'A3':{'C++':30}},{'A4':{'DBMS':40}}]

check(convert_list_dictionary)
solution 0 passed False
Task 391 gens 10 solutions in cir 8
check_program: 
# Write a function to convert more than one list to nested dictionary.

def convert_list_dictionary(l1, l2, l3):

    result = {}
    for key1 in l1:
        for key2 in l2:
            if key1 == key2:
                result[key1] = {'': l3[key1]}
    return result

def check(convert_list_dictionary):
    assert convert_list_dictionary(["S001", "S002", "S003", "S004"],["Adina Park", "Leyton Marsh", "Duncan Boyle", "Saim Richards"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]
    assert convert_list_dictionary(["abc","def","ghi","jkl"],["python","program","language","programs"],[100,200,300,400])==[{'abc':{'python':100}},{'def':{'program':200}},{'ghi':{'language':300}},{'jkl':{'programs':400}}]
    assert convert_list_dictionary(["A1","A2","A3","A4"],["java","C","C++","DBMS"],[10,20,30,40])==[{'A1':{'java':10}},{'A2':{'C':20}},{'A3':{'C++':30}},{'A4':{'DBMS':40}}]

check(convert_list_dictionary)
solution 0 passed False
Task 391 gens 10 solutions in cir 9
check_program: 
# Write a function to convert more than one list to nested dictionary.

def convert_list_dictionary(l1, l2, l3):

    result = {}
    for key1 in l1:
        for key2 in l2:
            if key1 == key2:
                result[key1] = {'': l3[key1]}
    return result

def check(convert_list_dictionary):
    assert convert_list_dictionary(["S001", "S002", "S003", "S004"],["Adina Park", "Leyton Marsh", "Duncan Boyle", "Saim Richards"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]
    assert convert_list_dictionary(["abc","def","ghi","jkl"],["python","program","language","programs"],[100,200,300,400])==[{'abc':{'python':100}},{'def':{'program':200}},{'ghi':{'language':300}},{'jkl':{'programs':400}}]
    assert convert_list_dictionary(["A1","A2","A3","A4"],["java","C","C++","DBMS"],[10,20,30,40])==[{'A1':{'java':10}},{'A2':{'C':20}},{'A3':{'C++':30}},{'A4':{'DBMS':40}}]

check(convert_list_dictionary)
solution 0 passed False
Task 391 gens 10 solutions in cir 10
check_program: 
# Write a function to convert more than one list to nested dictionary.

def convert_list_dictionary(l1, l2, l3):

    result = {}
    if len(l1) != len(l2) or len(l1) != len(l3):
        return result
    for key in l1:
        if key in l2 and key in l3:
            result[key] = [l3[l1.index(key)]]
        elif key in l2 and key not in l3:
            result[key] = [l2[l1.index(key)]]
        else:
            result[key] = [l3[l1.index(key)], l2[l1.index(key)]]
    return result

def check(convert_list_dictionary):
    assert convert_list_dictionary(["S001", "S002", "S003", "S004"],["Adina Park", "Leyton Marsh", "Duncan Boyle", "Saim Richards"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]
    assert convert_list_dictionary(["abc","def","ghi","jkl"],["python","program","language","programs"],[100,200,300,400])==[{'abc':{'python':100}},{'def':{'program':200}},{'ghi':{'language':300}},{'jkl':{'programs':400}}]
    assert convert_list_dictionary(["A1","A2","A3","A4"],["java","C","C++","DBMS"],[10,20,30,40])==[{'A1':{'java':10}},{'A2':{'C':20}},{'A3':{'C++':30}},{'A4':{'DBMS':40}}]

check(convert_list_dictionary)
solution 0 passed False
Task 82 gens 1 solutions in cir 0
check_program: 
# Write a function to find the volume of a sphere.
import math
def volume_sphere(r):

    return 4/3 * math.pi * r**3

def check(volume_sphere):
    assert volume_sphere(10)==4188.790204786391
    assert volume_sphere(25)==65449.84694978735
    assert volume_sphere(20)==33510.32163829113

check(volume_sphere)
solution 0 passed True
Task 82 gens 2 solutions in cir 1
check_program: 
# Write a function to find the volume of a sphere.
import math
def volume_sphere(r):

    return 4/3 * math.pi * r**3

def check(volume_sphere):
    assert volume_sphere(10)==4188.790204786391
    assert volume_sphere(25)==65449.84694978735
    assert volume_sphere(20)==33510.32163829113

check(volume_sphere)
solution 0 passed True
Task 82 gens 6 solutions in cir 2
check_program: 
# Write a function to find the volume of a sphere.
import math
def volume_sphere(r):

    return math.pi * r**3 / 4

def check(volume_sphere):
    assert volume_sphere(10)==4188.790204786391
    assert volume_sphere(25)==65449.84694978735
    assert volume_sphere(20)==33510.32163829113

check(volume_sphere)
solution 0 passed False
Task 82 gens 10 solutions in cir 3
check_program: 
# Write a function to find the volume of a sphere.
import math
def volume_sphere(r):

    return math.pi * r**3 / 4

def check(volume_sphere):
    assert volume_sphere(10)==4188.790204786391
    assert volume_sphere(25)==65449.84694978735
    assert volume_sphere(20)==33510.32163829113

check(volume_sphere)
solution 0 passed False
Task 82 gens 10 solutions in cir 4
check_program: 
# Write a function to find the volume of a sphere.
import math
def volume_sphere(r):

    return math.pi * r**3 / 4

def check(volume_sphere):
    assert volume_sphere(10)==4188.790204786391
    assert volume_sphere(25)==65449.84694978735
    assert volume_sphere(20)==33510.32163829113

check(volume_sphere)
solution 0 passed False
Task 82 gens 10 solutions in cir 5
check_program: 
# Write a function to find the volume of a sphere.
import math
def volume_sphere(r):

    return math.pi * r ** 3 / 4

def check(volume_sphere):
    assert volume_sphere(10)==4188.790204786391
    assert volume_sphere(25)==65449.84694978735
    assert volume_sphere(20)==33510.32163829113

check(volume_sphere)
solution 0 passed False
Task 82 gens 10 solutions in cir 6
check_program: 
# Write a function to find the volume of a sphere.
import math
def volume_sphere(r):

    return 4*math.pi*r**3

def check(volume_sphere):
    assert volume_sphere(10)==4188.790204786391
    assert volume_sphere(25)==65449.84694978735
    assert volume_sphere(20)==33510.32163829113

check(volume_sphere)
solution 0 passed False
Task 82 gens 10 solutions in cir 7
check_program: 
# Write a function to find the volume of a sphere.
import math
def volume_sphere(r):

    return math.pi * r ** 3 / 4

def check(volume_sphere):
    assert volume_sphere(10)==4188.790204786391
    assert volume_sphere(25)==65449.84694978735
    assert volume_sphere(20)==33510.32163829113

check(volume_sphere)
solution 0 passed False
Task 82 gens 10 solutions in cir 8
check_program: 
# Write a function to find the volume of a sphere.
import math
def volume_sphere(r):

    return math.pi * r**3 / 4

def check(volume_sphere):
    assert volume_sphere(10)==4188.790204786391
    assert volume_sphere(25)==65449.84694978735
    assert volume_sphere(20)==33510.32163829113

check(volume_sphere)
solution 0 passed False
Task 82 gens 10 solutions in cir 9
check_program: 
# Write a function to find the volume of a sphere.
import math
def volume_sphere(r):

    return math.pi * r**3 / 4

def check(volume_sphere):
    assert volume_sphere(10)==4188.790204786391
    assert volume_sphere(25)==65449.84694978735
    assert volume_sphere(20)==33510.32163829113

check(volume_sphere)
solution 0 passed False
Task 82 gens 10 solutions in cir 10
check_program: 
# Write a function to find the volume of a sphere.
import math
def volume_sphere(r):

    return 4.0/3.0*math.pi*r**3

def check(volume_sphere):
    assert volume_sphere(10)==4188.790204786391
    assert volume_sphere(25)==65449.84694978735
    assert volume_sphere(20)==33510.32163829113

check(volume_sphere)
solution 0 passed True
Task 401 gens 1 solutions in cir 0
check_program: 
# Write a function to perform index wise addition of tuple elements in the given two nested tuples.

def add_nested_tuples(test_tup1, test_tup2):

    result = []
    for i in range(len(test_tup1)):
        result.append(test_tup1[i] + test_tup2[i])
    return result

def check(add_nested_tuples):
    assert add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))
    assert add_nested_tuples(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))
    assert add_nested_tuples(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))

check(add_nested_tuples)
solution 0 passed False
Task 401 gens 2 solutions in cir 1
check_program: 
# Write a function to perform index wise addition of tuple elements in the given two nested tuples.

def add_nested_tuples(test_tup1, test_tup2):

    result = []
    for i in range(len(test_tup1)):
        result.append(test_tup1[i] + test_tup2[i])
    return result

def check(add_nested_tuples):
    assert add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))
    assert add_nested_tuples(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))
    assert add_nested_tuples(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))

check(add_nested_tuples)
solution 0 passed False
Task 401 gens 5 solutions in cir 2
check_program: 
# Write a function to perform index wise addition of tuple elements in the given two nested tuples.

def add_nested_tuples(test_tup1, test_tup2):

    result = []
    for i in range(len(tup1)):
        result.append(tup1[i] + tup2[i])
    return result

def check(add_nested_tuples):
    assert add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))
    assert add_nested_tuples(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))
    assert add_nested_tuples(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))

check(add_nested_tuples)
solution 0 passed False
Task 401 gens 10 solutions in cir 3
check_program: 
# Write a function to perform index wise addition of tuple elements in the given two nested tuples.

def add_nested_tuples(test_tup1, test_tup2):

    res = []
    for i in range(len(test_tup1)):
        res.append(test_tup1[i] + test_tup2[i])
    return res

def check(add_nested_tuples):
    assert add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))
    assert add_nested_tuples(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))
    assert add_nested_tuples(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))

check(add_nested_tuples)
solution 0 passed False
Task 401 gens 10 solutions in cir 4
check_program: 
# Write a function to perform index wise addition of tuple elements in the given two nested tuples.

def add_nested_tuples(test_tup1, test_tup2):

    if len(test_tup1) != len(test_tup2):
        return test_tup1
    elif len(test_tup1) == len(test_tup2) and all(x+y == y+x for x,y in zip(test_tup1, test_tup2)):
        return test_tup1
    else:
        return None

def check(add_nested_tuples):
    assert add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))
    assert add_nested_tuples(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))
    assert add_nested_tuples(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))

check(add_nested_tuples)
solution 0 passed False
Task 401 gens 10 solutions in cir 5
check_program: 
# Write a function to perform index wise addition of tuple elements in the given two nested tuples.

def add_nested_tuples(test_tup1, test_tup2):

    if len(test_tup1) != len(test_tup2):
        return test_tup1
    elif len(test_tup1) == len(test_tup2) and all(x+y == y+x for x,y in zip(test_tup1, test_tup2)):
        return test_tup1
    else:
        return None

def check(add_nested_tuples):
    assert add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))
    assert add_nested_tuples(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))
    assert add_nested_tuples(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))

check(add_nested_tuples)
solution 0 passed False
Task 178 gens 1 solutions in cir 0
check_program: 
# Write a function to search some literals strings in a string.
import re
def string_literals(patterns,text):

    result = []
    for pattern in patterns:
        match = re.search(pattern,text)
        if match:
            result.append(match.group())
    return result

def check(string_literals):
    assert string_literals(['language'],'python language')==('Matched!')
    assert string_literals(['program'],'python language')==('Not Matched!')
    assert string_literals(['python'],'programming language')==('Not Matched!')

check(string_literals)
solution 0 passed False
Task 178 gens 3 solutions in cir 1
check_program: 
# Write a function to search some literals strings in a string.
import re
def string_literals(patterns,text):

    result = []
    for pattern in patterns:
        match = re.search(pattern, text)
        if match:
            result.append(match.group())
    return result

def check(string_literals):
    assert string_literals(['language'],'python language')==('Matched!')
    assert string_literals(['program'],'python language')==('Not Matched!')
    assert string_literals(['python'],'programming language')==('Not Matched!')

check(string_literals)
solution 0 passed False
Task 178 gens 5 solutions in cir 2
check_program: 
# Write a function to search some literals strings in a string.
import re
def string_literals(patterns,text):

    result = []
    for pattern in patterns:
        match = re.search(pattern, text)
        if match:
            result.append(match.group())
    return result

def check(string_literals):
    assert string_literals(['language'],'python language')==('Matched!')
    assert string_literals(['program'],'python language')==('Not Matched!')
    assert string_literals(['python'],'programming language')==('Not Matched!')

check(string_literals)
solution 0 passed False
Task 178 gens 10 solutions in cir 3
check_program: 
# Write a function to search some literals strings in a string.
import re
def string_literals(patterns,text):

    result = []
    for pattern in patterns:
        match = re.findall(pattern, text)
        if match:
            result.append(match[0])
    return result

def check(string_literals):
    assert string_literals(['language'],'python language')==('Matched!')
    assert string_literals(['program'],'python language')==('Not Matched!')
    assert string_literals(['python'],'programming language')==('Not Matched!')

check(string_literals)
solution 0 passed False
Task 178 gens 10 solutions in cir 4
check_program: 
# Write a function to search some literals strings in a string.
import re
def string_literals(patterns,text):

    result = []
    for pattern in patterns:
        match = re.search(pattern,text)
        if match:
            result.append(match.group(0))
    return result

def check(string_literals):
    assert string_literals(['language'],'python language')==('Matched!')
    assert string_literals(['program'],'python language')==('Not Matched!')
    assert string_literals(['python'],'programming language')==('Not Matched!')

check(string_literals)
solution 0 passed False
Task 178 gens 10 solutions in cir 5
check_program: 
# Write a function to search some literals strings in a string.
import re
def string_literals(patterns,text):

    result = []
    for pattern in patterns:
        match = re.search(pattern,text)
        if match:
            result.append(match.group(0))
    return result

def check(string_literals):
    assert string_literals(['language'],'python language')==('Matched!')
    assert string_literals(['program'],'python language')==('Not Matched!')
    assert string_literals(['python'],'programming language')==('Not Matched!')

check(string_literals)
solution 0 passed False
Task 210 gens 1 solutions in cir 0
check_program: 
# Write a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.
import re
def is_allowed_specific_char(string):

    pattern = re.compile(r'^[a-zA-Z0-9]+$')
    return pattern.match(string) is not None

def check(is_allowed_specific_char):
    assert is_allowed_specific_char("ABCDEFabcdef123450") == True
    assert is_allowed_specific_char("*&%@#!}{") == False
    assert is_allowed_specific_char("HELLOhowareyou98765") == True

check(is_allowed_specific_char)
solution 0 passed True
Task 210 gens 3 solutions in cir 1
check_program: 
# Write a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.
import re
def is_allowed_specific_char(string):

    pattern = re.compile(r'^[a-zA-Z0-9]+$')
    return pattern.match(string) is not None

def check(is_allowed_specific_char):
    assert is_allowed_specific_char("ABCDEFabcdef123450") == True
    assert is_allowed_specific_char("*&%@#!}{") == False
    assert is_allowed_specific_char("HELLOhowareyou98765") == True

check(is_allowed_specific_char)
solution 0 passed True
Task 210 gens 8 solutions in cir 2
check_program: 
# Write a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.
import re
def is_allowed_specific_char(string):

    pattern = re.compile(r'^[a-zA-Z0-9]+$')
    return pattern.match(string) is not None

def check(is_allowed_specific_char):
    assert is_allowed_specific_char("ABCDEFabcdef123450") == True
    assert is_allowed_specific_char("*&%@#!}{") == False
    assert is_allowed_specific_char("HELLOhowareyou98765") == True

check(is_allowed_specific_char)
solution 0 passed True
Task 210 gens 10 solutions in cir 3
check_program: 
# Write a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.
import re
def is_allowed_specific_char(string):

    pattern = re.compile(r'^[a-zA-Z0-9]+$')
    return pattern.match(string) is not None

def check(is_allowed_specific_char):
    assert is_allowed_specific_char("ABCDEFabcdef123450") == True
    assert is_allowed_specific_char("*&%@#!}{") == False
    assert is_allowed_specific_char("HELLOhowareyou98765") == True

check(is_allowed_specific_char)
solution 0 passed True
Task 210 gens 10 solutions in cir 4
check_program: 
# Write a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.
import re
def is_allowed_specific_char(string):

    pattern = re.compile(r'^[a-zA-Z0-9]+$')
    return bool(pattern.match(string))

def check(is_allowed_specific_char):
    assert is_allowed_specific_char("ABCDEFabcdef123450") == True
    assert is_allowed_specific_char("*&%@#!}{") == False
    assert is_allowed_specific_char("HELLOhowareyou98765") == True

check(is_allowed_specific_char)
solution 0 passed True
Task 210 gens 10 solutions in cir 5
check_program: 
# Write a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.
import re
def is_allowed_specific_char(string):

    pattern = re.compile(r'^[a-zA-Z0-9]+$')
    return bool(pattern.match(string))

def check(is_allowed_specific_char):
    assert is_allowed_specific_char("ABCDEFabcdef123450") == True
    assert is_allowed_specific_char("*&%@#!}{") == False
    assert is_allowed_specific_char("HELLOhowareyou98765") == True

check(is_allowed_specific_char)
solution 0 passed True
Task 482 gens 1 solutions in cir 0
check_program: 
# Write a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.
import re 
def match(text):

    return re.findall(r'[A-Z][a-z]+', text)

def check(match):
    assert match("Geeks") == 'Yes'
    assert match("geeksforGeeks") == 'Yes'
    assert match("geeks") == 'No'

check(match)
solution 0 passed False
Task 482 gens 1 solutions in cir 1
check_program: 
# Write a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.
import re 
def match(text):

    return re.findall(r'[A-Z][a-z]+', text)

def check(match):
    assert match("Geeks") == 'Yes'
    assert match("geeksforGeeks") == 'Yes'
    assert match("geeks") == 'No'

check(match)
solution 0 passed False
Task 482 gens 3 solutions in cir 2
check_program: 
# Write a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.
import re 
def match(text):

    return re.findall(r'[A-Z][a-z]+', text)

def check(match):
    assert match("Geeks") == 'Yes'
    assert match("geeksforGeeks") == 'Yes'
    assert match("geeks") == 'No'

check(match)
solution 0 passed False
Task 482 gens 3 solutions in cir 3
check_program: 
# Write a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.
import re 
def match(text):

    return re.findall(r'\b[A-Z][a-z]+[\s\S]*\b', text)

def check(match):
    assert match("Geeks") == 'Yes'
    assert match("geeksforGeeks") == 'Yes'
    assert match("geeks") == 'No'

check(match)
solution 0 passed False
Task 482 gens 4 solutions in cir 4
check_program: 
# Write a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.
import re 
def match(text):

    return re.findall(r'\b[A-Z][a-z]+[\s\S]*\b', text)

def check(match):
    assert match("Geeks") == 'Yes'
    assert match("geeksforGeeks") == 'Yes'
    assert match("geeks") == 'No'

check(match)
solution 0 passed False
Task 482 gens 7 solutions in cir 5
check_program: 
# Write a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.
import re 
def match(text):

    return re.findall(r'\b\w[a-z]+\b', text)

def check(match):
    assert match("Geeks") == 'Yes'
    assert match("geeksforGeeks") == 'Yes'
    assert match("geeks") == 'No'

check(match)
solution 0 passed False
Task 482 gens 9 solutions in cir 6
check_program: 
# Write a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.
import re 
def match(text):

    return re.findall(r'\b[A-Z][a-z]+[\s\S]*\b', text)

def check(match):
    assert match("Geeks") == 'Yes'
    assert match("geeksforGeeks") == 'Yes'
    assert match("geeks") == 'No'

check(match)
solution 0 passed False
Task 482 gens 10 solutions in cir 7
check_program: 
# Write a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.
import re 
def match(text):

    return re.findall(r'\b[A-Z][a-z]+[\s\S]*\b', text)

def check(match):
    assert match("Geeks") == 'Yes'
    assert match("geeksforGeeks") == 'Yes'
    assert match("geeks") == 'No'

check(match)
solution 0 passed False
Task 482 gens 10 solutions in cir 8
check_program: 
# Write a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.
import re 
def match(text):

    return re.findall(r'\b[A-Z][a-z]+[\s\S]*\b', text)

def check(match):
    assert match("Geeks") == 'Yes'
    assert match("geeksforGeeks") == 'Yes'
    assert match("geeks") == 'No'

check(match)
solution 0 passed False
Task 482 gens 10 solutions in cir 9
check_program: 
# Write a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.
import re 
def match(text):

    return re.findall(r'\b[A-Z][a-z]+[\s\S]*\b', text)

def check(match):
    assert match("Geeks") == 'Yes'
    assert match("geeksforGeeks") == 'Yes'
    assert match("geeks") == 'No'

check(match)
solution 0 passed False
Task 482 gens 10 solutions in cir 10
check_program: 
# Write a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.
import re 
def match(text):

    return re.findall(r'\b[A-Z][a-z]+[\s\S]*\b', text)

def check(match):
    assert match("Geeks") == 'Yes'
    assert match("geeksforGeeks") == 'Yes'
    assert match("geeks") == 'No'

check(match)
solution 0 passed False
Task 187 gens 1 solutions in cir 0
check_program: 
# Write a function to find the longest common subsequence for the given two sequences.

def longest_common_subsequence(X, Y, m, n):

    if m == 0 or n == 0:
        return []
    if X[0] == Y[0]:
        return [X[0]]
    if X[m-1] == Y[n-1]:
        return [X[m-1]]
    if X[m-1] < Y[n-1]:
        return longest_common_subsequence(X, Y, m-1, n)
    if X[m-1] > Y[n-1]:
        return longest_common_subsequence(X, Y, m, n-1)
    return []

def check(longest_common_subsequence):
    assert longest_common_subsequence("AGGTAB" , "GXTXAYB", 6, 7) == 4
    assert longest_common_subsequence("ABCDGH" , "AEDFHR", 6, 6) == 3
    assert longest_common_subsequence("AXYT" , "AYZX", 4, 4) == 2

check(longest_common_subsequence)
solution 0 passed False
Task 187 gens 8 solutions in cir 1
check_program: 
# Write a function to find the longest common subsequence for the given two sequences.

def longest_common_subsequence(X, Y, m, n):

    if m == 0 or n == 0:
        return []
    if X[0] == Y[0]:
        return [X[0]]
    if X[m-1] == Y[n-1]:
        return [X[m-1]]
    if X[m-1] < Y[n-1]:
        return longest_common_subsequence(X, Y, m-1, n)
    if X[m-1] > Y[n-1]:
        return longest_common_subsequence(X, Y, m, n-1)
    return []

def check(longest_common_subsequence):
    assert longest_common_subsequence("AGGTAB" , "GXTXAYB", 6, 7) == 4
    assert longest_common_subsequence("ABCDGH" , "AEDFHR", 6, 6) == 3
    assert longest_common_subsequence("AXYT" , "AYZX", 4, 4) == 2

check(longest_common_subsequence)
solution 0 passed False
Task 187 gens 10 solutions in cir 2
check_program: 
# Write a function to find the longest common subsequence for the given two sequences.

def longest_common_subsequence(X, Y, m, n):

    if m == 0 or n == 0:
        return []
    if X[0] == Y[0]:
        return [X[0]]
    if X[m-1] == Y[n-1]:
        return [X[m-1]]
    if X[m-1] < Y[n-1]:
        return longest_common_subsequence(X, Y, m-1, n)
    if X[m-1] > Y[n-1]:
        return longest_common_subsequence(X, Y, m, n-1)
    if m > 0 and n > 0:
        return X[:m-1] + Y[n-1:] + longest_common_subsequence(X[m-1:], Y[:n-1], m-1, n-1)
    else:
        return X[:m]

def check(longest_common_subsequence):
    assert longest_common_subsequence("AGGTAB" , "GXTXAYB", 6, 7) == 4
    assert longest_common_subsequence("ABCDGH" , "AEDFHR", 6, 6) == 3
    assert longest_common_subsequence("AXYT" , "AYZX", 4, 4) == 2

check(longest_common_subsequence)
solution 0 passed False
Task 187 gens 10 solutions in cir 3
check_program: 
# Write a function to find the longest common subsequence for the given two sequences.

def longest_common_subsequence(X, Y, m, n):

    if X == Y:
        return [X[0]]
    if m == 0 or n == 0:
        return []
    if X[0] < Y[0]:
        return longest_common_subsequence(X, Y, m, n-1)
    if X[0] > Y[0]:
        return longest_common_subsequence(Y, X, m, n-1)
    if m > 0 and n > 0:
        return X[:m-1] + Y[:n-1] + longest_common_subsequence(X[m-1:], Y[n-1:], m-1, n-1)
    else:
        return X[:m]

def check(longest_common_subsequence):
    assert longest_common_subsequence("AGGTAB" , "GXTXAYB", 6, 7) == 4
    assert longest_common_subsequence("ABCDGH" , "AEDFHR", 6, 6) == 3
    assert longest_common_subsequence("AXYT" , "AYZX", 4, 4) == 2

check(longest_common_subsequence)
solution 0 passed False
Task 417 gens 1 solutions in cir 0
check_program: 
# Write a function to find common first element in given list of tuple.

def group_tuples(Input):

    return tuple(zip(*Input))

def check(group_tuples):
    assert group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]
    assert group_tuples([('a', 'b'), ('a', 'c'), ('d', 'e')]) == [('a', 'b', 'c'), ('d', 'e')]
    assert group_tuples([('f', 'g'), ('f', 'g'), ('h', 'i')]) == [('f', 'g', 'g'), ('h', 'i')]

check(group_tuples)
solution 0 passed False
Task 417 gens 10 solutions in cir 1
check_program: 
# Write a function to find common first element in given list of tuple.

def group_tuples(Input):

    return tuple(zip(*Input))

def check(group_tuples):
    assert group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]
    assert group_tuples([('a', 'b'), ('a', 'c'), ('d', 'e')]) == [('a', 'b', 'c'), ('d', 'e')]
    assert group_tuples([('f', 'g'), ('f', 'g'), ('h', 'i')]) == [('f', 'g', 'g'), ('h', 'i')]

check(group_tuples)
solution 0 passed False
Task 417 gens 10 solutions in cir 2
check_program: 
# Write a function to find common first element in given list of tuple.

def group_tuples(Input):

    return list(set(tuple(Input) for sublist in Input for _ in range(len(sublist))))

def check(group_tuples):
    assert group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]
    assert group_tuples([('a', 'b'), ('a', 'c'), ('d', 'e')]) == [('a', 'b', 'c'), ('d', 'e')]
    assert group_tuples([('f', 'g'), ('f', 'g'), ('h', 'i')]) == [('f', 'g', 'g'), ('h', 'i')]

check(group_tuples)
solution 0 passed False
Task 417 gens 10 solutions in cir 3
check_program: 
# Write a function to find common first element in given list of tuple.

def group_tuples(Input):

    return list(tuple(zip(*[iter(Input)] * 2))[0])

def check(group_tuples):
    assert group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]
    assert group_tuples([('a', 'b'), ('a', 'c'), ('d', 'e')]) == [('a', 'b', 'c'), ('d', 'e')]
    assert group_tuples([('f', 'g'), ('f', 'g'), ('h', 'i')]) == [('f', 'g', 'g'), ('h', 'i')]

check(group_tuples)
solution 0 passed False
Task 417 gens 10 solutions in cir 4
check_program: 
# Write a function to find common first element in given list of tuple.

def group_tuples(Input):

    return list(tuple(zip(*[iter(Input)] * 2))[0])

def check(group_tuples):
    assert group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]
    assert group_tuples([('a', 'b'), ('a', 'c'), ('d', 'e')]) == [('a', 'b', 'c'), ('d', 'e')]
    assert group_tuples([('f', 'g'), ('f', 'g'), ('h', 'i')]) == [('f', 'g', 'g'), ('h', 'i')]

check(group_tuples)
solution 0 passed False
Task 417 gens 10 solutions in cir 5
check_program: 
# Write a function to find common first element in given list of tuple.

def group_tuples(Input):

    return list(tuple(zip(*[iter(Input)] * 2))[0])

def check(group_tuples):
    assert group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]
    assert group_tuples([('a', 'b'), ('a', 'c'), ('d', 'e')]) == [('a', 'b', 'c'), ('d', 'e')]
    assert group_tuples([('f', 'g'), ('f', 'g'), ('h', 'i')]) == [('f', 'g', 'g'), ('h', 'i')]

check(group_tuples)
solution 0 passed False
Task 417 gens 10 solutions in cir 6
check_program: 
# Write a function to find common first element in given list of tuple.

def group_tuples(Input):

    return list(set(tuple(zip(*[iter(Input)] * 2))[0]))

def check(group_tuples):
    assert group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]
    assert group_tuples([('a', 'b'), ('a', 'c'), ('d', 'e')]) == [('a', 'b', 'c'), ('d', 'e')]
    assert group_tuples([('f', 'g'), ('f', 'g'), ('h', 'i')]) == [('f', 'g', 'g'), ('h', 'i')]

check(group_tuples)
solution 0 passed False
Task 417 gens 10 solutions in cir 7
check_program: 
# Write a function to find common first element in given list of tuple.

def group_tuples(Input):

    return list(set(tuple(zip(*[iter(Input)] * 2))[0]))

def check(group_tuples):
    assert group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]
    assert group_tuples([('a', 'b'), ('a', 'c'), ('d', 'e')]) == [('a', 'b', 'c'), ('d', 'e')]
    assert group_tuples([('f', 'g'), ('f', 'g'), ('h', 'i')]) == [('f', 'g', 'g'), ('h', 'i')]

check(group_tuples)
solution 0 passed False
Task 417 gens 10 solutions in cir 8
check_program: 
# Write a function to find common first element in given list of tuple.

def group_tuples(Input):

    return list(set(tuple(zip(*[iter(Input)] * 2))[0]))

def check(group_tuples):
    assert group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]
    assert group_tuples([('a', 'b'), ('a', 'c'), ('d', 'e')]) == [('a', 'b', 'c'), ('d', 'e')]
    assert group_tuples([('f', 'g'), ('f', 'g'), ('h', 'i')]) == [('f', 'g', 'g'), ('h', 'i')]

check(group_tuples)
solution 0 passed False
Task 417 gens 10 solutions in cir 9
check_program: 
# Write a function to find common first element in given list of tuple.

def group_tuples(Input):

    return list(set(tuple(zip(*[iter(Input)] * 2))[0]))

def check(group_tuples):
    assert group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]
    assert group_tuples([('a', 'b'), ('a', 'c'), ('d', 'e')]) == [('a', 'b', 'c'), ('d', 'e')]
    assert group_tuples([('f', 'g'), ('f', 'g'), ('h', 'i')]) == [('f', 'g', 'g'), ('h', 'i')]

check(group_tuples)
solution 0 passed False
Task 417 gens 10 solutions in cir 10
check_program: 
# Write a function to find common first element in given list of tuple.

def group_tuples(Input):

    return list(set(tuple(zip(*[iter(Input)]*2))[0]))

def check(group_tuples):
    assert group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]
    assert group_tuples([('a', 'b'), ('a', 'c'), ('d', 'e')]) == [('a', 'b', 'c'), ('d', 'e')]
    assert group_tuples([('f', 'g'), ('f', 'g'), ('h', 'i')]) == [('f', 'g', 'g'), ('h', 'i')]

check(group_tuples)
solution 0 passed False
Task 505 gens 1 solutions in cir 0
check_program: 
# Write a function to move all zeroes to the end of the given array.

def re_order(A):

    n = len(A)
    i = 0
    while i < n-1:
        if A[i] == 0:
            A[i], A[n-1-i] = A[n-1-i], A[i]
        i += 1
    return A

def check(re_order):
    assert re_order([6, 0, 8, 2, 3, 0, 4, 0, 1]) == [6, 8, 2, 3, 4, 1, 0, 0, 0]
    assert re_order([4, 0, 2, 7, 0, 9, 0, 12, 0]) == [4, 2, 7, 9, 12, 0, 0, 0, 0]
    assert re_order([3, 11, 0, 74, 14, 0, 1, 0, 2]) == [3, 11, 74, 14, 1, 2, 0, 0, 0]

check(re_order)
solution 0 passed False
Task 505 gens 10 solutions in cir 1
check_program: 
# Write a function to move all zeroes to the end of the given array.

def re_order(A):

    n = len(A)
    i = 0
    while i < n-1:
        if A[i] == 0:
            A[i+1], A[i] = A[i], A[i+1]
        i += 1
    return A

def check(re_order):
    assert re_order([6, 0, 8, 2, 3, 0, 4, 0, 1]) == [6, 8, 2, 3, 4, 1, 0, 0, 0]
    assert re_order([4, 0, 2, 7, 0, 9, 0, 12, 0]) == [4, 2, 7, 9, 12, 0, 0, 0, 0]
    assert re_order([3, 11, 0, 74, 14, 0, 1, 0, 2]) == [3, 11, 74, 14, 1, 2, 0, 0, 0]

check(re_order)
solution 0 passed False
Task 505 gens 10 solutions in cir 2
check_program: 
# Write a function to move all zeroes to the end of the given array.

def re_order(A):

    n = len(A)
    i = 0
    j = 0
    while i < n-1:
        if A[i] == 0:
            A[i+1], A[j] = A[j], A[i+1]
        i += 1
        j += 1
    return A

def check(re_order):
    assert re_order([6, 0, 8, 2, 3, 0, 4, 0, 1]) == [6, 8, 2, 3, 4, 1, 0, 0, 0]
    assert re_order([4, 0, 2, 7, 0, 9, 0, 12, 0]) == [4, 2, 7, 9, 12, 0, 0, 0, 0]
    assert re_order([3, 11, 0, 74, 14, 0, 1, 0, 2]) == [3, 11, 74, 14, 1, 2, 0, 0, 0]

check(re_order)
solution 0 passed False
Task 505 gens 10 solutions in cir 3
check_program: 
# Write a function to move all zeroes to the end of the given array.

def re_order(A):

    n = len(A)
    i = 0
    j = 0
    while i < n-1:
        if A[i] == 0:
            A[i+1], A[j] = A[j], A[i+1]
        i += 1
        j += 1
    return A

def check(re_order):
    assert re_order([6, 0, 8, 2, 3, 0, 4, 0, 1]) == [6, 8, 2, 3, 4, 1, 0, 0, 0]
    assert re_order([4, 0, 2, 7, 0, 9, 0, 12, 0]) == [4, 2, 7, 9, 12, 0, 0, 0, 0]
    assert re_order([3, 11, 0, 74, 14, 0, 1, 0, 2]) == [3, 11, 74, 14, 1, 2, 0, 0, 0]

check(re_order)
solution 0 passed False
Task 177 gens 1 solutions in cir 0
check_program: 
# Write a python function to find two distinct numbers such that their lcm lies within the given range.

def answer(L,R):

    largest_lcm = 0
    for i in range(L,R+1):
        gcd, lcm = calculate_lcm(i)
        if lcm > largest_lcm:
            largest_lcm = lcm
    return largest_lcm
def calculate_lcm(num):
    return num // gcd(num,num)

def check(answer):
    assert answer(3,8) == (3,6)
    assert answer(2,6) == (2,4)
    assert answer(1,3) == (1,2)

check(answer)
solution 0 passed False
Task 177 gens 10 solutions in cir 1
check_program: 
# Write a python function to find two distinct numbers such that their lcm lies within the given range.

def answer(L,R):

    largest_lcm = 0
    for num in range(L,R+1):
        gcd, lcm = calculate_lcm(num)
        if lcm > largest_lcm:
            largest_lcm = lcm
    return largest_lcm
def calculate_lcm(num):
    return num // gcd(num,num)

def check(answer):
    assert answer(3,8) == (3,6)
    assert answer(2,6) == (2,4)
    assert answer(1,3) == (1,2)

check(answer)
solution 0 passed False
Task 177 gens 10 solutions in cir 2
check_program: 
# Write a python function to find two distinct numbers such that their lcm lies within the given range.

def answer(L,R):

    largest_lcm = 0
    for i in range(L, R + 1):
        gcd, lcm = calculate_lcm(i)
        if lcm > largest_lcm and lcm <= R:
            largest_lcm = lcm
    if largest_lcm <= L:
        return None
    return largest_lcm, largest_lcm // gcd(largest_lcm, 2)
def calculate_lcm(num):
    if num % 2 == 0:
        return num // 2
    else:
        return num // (num + 1)

def check(answer):
    assert answer(3,8) == (3,6)
    assert answer(2,6) == (2,4)
    assert answer(1,3) == (1,2)

check(answer)
solution 0 passed False
Task 177 gens 10 solutions in cir 3
check_program: 
# Write a python function to find two distinct numbers such that their lcm lies within the given range.

def answer(L,R):

    largest_lcm = 0
    for i in range(L,R+1):
        gcd, lcm = calculate_lcm(i)
        if lcm > largest_lcm:
            largest_lcm = lcm
    if largest_lcm <= R and largest_lcm >= L:
        return (largest_lcm, i)
    return None
def calculate_lcm(num):
    for i in range(1,num+1):
        if i % num == 0:
            return num,i
    return None

def check(answer):
    assert answer(3,8) == (3,6)
    assert answer(2,6) == (2,4)
    assert answer(1,3) == (1,2)

check(answer)
solution 0 passed False
Task 177 gens 10 solutions in cir 4
check_program: 
# Write a python function to find two distinct numbers such that their lcm lies within the given range.

def answer(L,R):

    largest_lcm = 0
    for num in range(L, R+1):
        gcd, lcm = divmod(num,2)
        if lcm > largest_lcm:
            largest_lcm = lcm
    return (largest_lcm, largest_lcm)
def calculate_lcm(num):
    if num == 0:
        return 0
    if num == 1:
        return num
    g, lcm = divmod(num,2)
    if g != 0:
        return lcm // g
    else:
        return num

def check(answer):
    assert answer(3,8) == (3,6)
    assert answer(2,6) == (2,4)
    assert answer(1,3) == (1,2)

check(answer)
solution 0 passed False
Task 177 gens 10 solutions in cir 5
check_program: 
# Write a python function to find two distinct numbers such that their lcm lies within the given range.

def answer(L,R):

    largest_lcm = 0
    for num in range(L, R+1):
        gcd, lcm = divmod(num,2)
        if lcm > largest_lcm:
            largest_lcm = lcm
    if largest_lcm <= R and largest_lcm >= L:
        return largest_lcm, largest_lcm
    else:
        return (R, R)

def check(answer):
    assert answer(3,8) == (3,6)
    assert answer(2,6) == (2,4)
    assert answer(1,3) == (1,2)

check(answer)
solution 0 passed False
Task 229 gens 1 solutions in cir 0
check_program: 
# Write a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.

def re_arrange_array(arr, n):

    if n == len(arr):
        return arr
    else:
        mid = len(arr) // 2
        left_half = arr[:mid]
        right_half = arr[mid:]
        return re_arrange_array(left_half, n) + [arr[mid]] + re_arrange_array(right_half, n)

def check(re_arrange_array):
    assert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]
    assert re_arrange_array([12, -14, -26, 13, 15], 5) == [-14, -26, 12, 13, 15]
    assert re_arrange_array([10, 24, 36, -42, -39, -78, 85], 7) == [-42, -39, -78, 10, 24, 36, 85]

check(re_arrange_array)
solution 0 passed False
Task 229 gens 9 solutions in cir 1
check_program: 
# Write a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.

def re_arrange_array(arr, n):

    if n == len(arr):
        return arr
    else:
        mid = len(arr) // 2
        left_half = arr[:mid]
        right_half = arr[mid:]
        return re_arrange_array(left_half, n) + [arr[mid]] + re_arrange_array(right_half, n)

def check(re_arrange_array):
    assert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]
    assert re_arrange_array([12, -14, -26, 13, 15], 5) == [-14, -26, 12, 13, 15]
    assert re_arrange_array([10, 24, 36, -42, -39, -78, 85], 7) == [-42, -39, -78, 10, 24, 36, 85]

check(re_arrange_array)
solution 0 passed False
Task 229 gens 10 solutions in cir 2
check_program: 
# Write a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.

def re_arrange_array(arr, n):

    arr = sorted(arr)
    if n <= len(arr):
        return arr[:n]
    else:
        return arr[n:] + arr[:n]

def check(re_arrange_array):
    assert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]
    assert re_arrange_array([12, -14, -26, 13, 15], 5) == [-14, -26, 12, 13, 15]
    assert re_arrange_array([10, 24, 36, -42, -39, -78, 85], 7) == [-42, -39, -78, 10, 24, 36, 85]

check(re_arrange_array)
solution 0 passed False
Task 229 gens 10 solutions in cir 3
check_program: 
# Write a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.

def re_arrange_array(arr, n):

    if n > len(arr):
        return arr
    arr = sorted(arr)
    arr_copy = arr[:n]
    return arr_copy + arr[n:]

def check(re_arrange_array):
    assert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]
    assert re_arrange_array([12, -14, -26, 13, 15], 5) == [-14, -26, 12, 13, 15]
    assert re_arrange_array([10, 24, 36, -42, -39, -78, 85], 7) == [-42, -39, -78, 10, 24, 36, 85]

check(re_arrange_array)
solution 0 passed False
Task 490 gens 1 solutions in cir 0
check_program: 
# Write a function to extract all the pairs which are symmetric in the given tuple list.

def extract_symmetric(test_list):

    result = []
    for i in range(len(test_list)):
        for j in range(i+1, len(test_list)):
            if test_list[i] == test_list[j]:
                result.append(test_list[i])
    return result

def check(extract_symmetric):
    assert extract_symmetric([(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)] ) == {(8, 9), (6, 7)}
    assert extract_symmetric([(7, 8), (3, 4), (8, 7), (10, 9), (11, 3), (9, 10)] ) == {(9, 10), (7, 8)}
    assert extract_symmetric([(8, 9), (4, 5), (9, 8), (11, 10), (12, 4), (10, 11)] ) == {(8, 9), (10, 11)}

check(extract_symmetric)
solution 0 passed False
Task 490 gens 9 solutions in cir 1
check_program: 
# Write a function to extract all the pairs which are symmetric in the given tuple list.

def extract_symmetric(test_list):

    result = []
    for i in range(len(test_list)):
        for j in range(len(test_list)):
            if test_list[i] == test_list[j]:
                result.append(test_list[i])
    return result

def check(extract_symmetric):
    assert extract_symmetric([(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)] ) == {(8, 9), (6, 7)}
    assert extract_symmetric([(7, 8), (3, 4), (8, 7), (10, 9), (11, 3), (9, 10)] ) == {(9, 10), (7, 8)}
    assert extract_symmetric([(8, 9), (4, 5), (9, 8), (11, 10), (12, 4), (10, 11)] ) == {(8, 9), (10, 11)}

check(extract_symmetric)
solution 0 passed False
Task 490 gens 10 solutions in cir 2
check_program: 
# Write a function to extract all the pairs which are symmetric in the given tuple list.

def extract_symmetric(test_list):

    result = []
    for i in range(len(test_list)):
        for j in range(i+1, len(test_list)):
            if test_list[i] != test_list[j]:
                if i != j:
                    result.append(test_list[i])
    return result

def check(extract_symmetric):
    assert extract_symmetric([(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)] ) == {(8, 9), (6, 7)}
    assert extract_symmetric([(7, 8), (3, 4), (8, 7), (10, 9), (11, 3), (9, 10)] ) == {(9, 10), (7, 8)}
    assert extract_symmetric([(8, 9), (4, 5), (9, 8), (11, 10), (12, 4), (10, 11)] ) == {(8, 9), (10, 11)}

check(extract_symmetric)
solution 0 passed False
Task 490 gens 10 solutions in cir 3
check_program: 
# Write a function to extract all the pairs which are symmetric in the given tuple list.

def extract_symmetric(test_list):

    result = []
    for i in range(len(test_list)):
        for j in range(i+1, len(test_list)):
            if test_list[i] != test_list[j]:
                if i != j:
                    result.append((test_list[i], test_list[j]))
    return result

def check(extract_symmetric):
    assert extract_symmetric([(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)] ) == {(8, 9), (6, 7)}
    assert extract_symmetric([(7, 8), (3, 4), (8, 7), (10, 9), (11, 3), (9, 10)] ) == {(9, 10), (7, 8)}
    assert extract_symmetric([(8, 9), (4, 5), (9, 8), (11, 10), (12, 4), (10, 11)] ) == {(8, 9), (10, 11)}

check(extract_symmetric)
solution 0 passed False
Task 490 gens 10 solutions in cir 4
check_program: 
# Write a function to extract all the pairs which are symmetric in the given tuple list.

def extract_symmetric(test_list):

    result = []
    for i in range(len(test_list)):
        for j in range(i+1, len(test_list)):
            if test_list[i] != test_list[j]:
                if i != j:
                    result.append((test_list[i], test_list[j]))
    return result

def check(extract_symmetric):
    assert extract_symmetric([(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)] ) == {(8, 9), (6, 7)}
    assert extract_symmetric([(7, 8), (3, 4), (8, 7), (10, 9), (11, 3), (9, 10)] ) == {(9, 10), (7, 8)}
    assert extract_symmetric([(8, 9), (4, 5), (9, 8), (11, 10), (12, 4), (10, 11)] ) == {(8, 9), (10, 11)}

check(extract_symmetric)
solution 0 passed False
Task 490 gens 10 solutions in cir 5
check_program: 
# Write a function to extract all the pairs which are symmetric in the given tuple list.

def extract_symmetric(test_list):

    result = []
    for i in range(len(test_list)):
        for j in range(i+1, len(test_list)):
            if test_list[i] != test_list[j]:
                if i != j:
                    if test_list[i] < test_list[j]:
                        result.append((test_list[i], test_list[j]))
                    else:
                        result.append((test_list[j], test_list[i]))
    return result

def check(extract_symmetric):
    assert extract_symmetric([(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)] ) == {(8, 9), (6, 7)}
    assert extract_symmetric([(7, 8), (3, 4), (8, 7), (10, 9), (11, 3), (9, 10)] ) == {(9, 10), (7, 8)}
    assert extract_symmetric([(8, 9), (4, 5), (9, 8), (11, 10), (12, 4), (10, 11)] ) == {(8, 9), (10, 11)}

check(extract_symmetric)
solution 0 passed False
Task 490 gens 10 solutions in cir 6
check_program: 
# Write a function to extract all the pairs which are symmetric in the given tuple list.

def extract_symmetric(test_list):

    result = []
    for i in range(len(test_list)):
        for j in range(i+1, len(test_list)):
            if test_list[i] != test_list[j]:
                if i != j:
                    if test_list[i] < test_list[j]:
                        result.append((test_list[i], test_list[j]))
                    else:
                        result.append((test_list[j], test_list[i]))
    return result

def check(extract_symmetric):
    assert extract_symmetric([(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)] ) == {(8, 9), (6, 7)}
    assert extract_symmetric([(7, 8), (3, 4), (8, 7), (10, 9), (11, 3), (9, 10)] ) == {(9, 10), (7, 8)}
    assert extract_symmetric([(8, 9), (4, 5), (9, 8), (11, 10), (12, 4), (10, 11)] ) == {(8, 9), (10, 11)}

check(extract_symmetric)
solution 0 passed False
Task 490 gens 10 solutions in cir 7
check_program: 
# Write a function to extract all the pairs which are symmetric in the given tuple list.

def extract_symmetric(test_list):

    result = []
    for i in range(len(test_list)):
        for j in range(i+1, len(test_list)):
            if test_list[i] != test_list[j]:
                if i != j:
                    if test_list[i] < test_list[j]:
                        result.append((test_list[i], test_list[j]))
                    else:
                        result.append((test_list[j], test_list[i]))
    return result

def check(extract_symmetric):
    assert extract_symmetric([(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)] ) == {(8, 9), (6, 7)}
    assert extract_symmetric([(7, 8), (3, 4), (8, 7), (10, 9), (11, 3), (9, 10)] ) == {(9, 10), (7, 8)}
    assert extract_symmetric([(8, 9), (4, 5), (9, 8), (11, 10), (12, 4), (10, 11)] ) == {(8, 9), (10, 11)}

check(extract_symmetric)
solution 0 passed False
Task 490 gens 10 solutions in cir 8
check_program: 
# Write a function to extract all the pairs which are symmetric in the given tuple list.

def extract_symmetric(test_list):

    result = []
    for i in range(len(test_list)):
        for j in range(i+1, len(test_list)):
            if test_list[i] != test_list[j]:
                if i != j:
                    result.append((test_list[i], test_list[j]))
    return result

def check(extract_symmetric):
    assert extract_symmetric([(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)] ) == {(8, 9), (6, 7)}
    assert extract_symmetric([(7, 8), (3, 4), (8, 7), (10, 9), (11, 3), (9, 10)] ) == {(9, 10), (7, 8)}
    assert extract_symmetric([(8, 9), (4, 5), (9, 8), (11, 10), (12, 4), (10, 11)] ) == {(8, 9), (10, 11)}

check(extract_symmetric)
solution 0 passed False
Task 490 gens 10 solutions in cir 9
check_program: 
# Write a function to extract all the pairs which are symmetric in the given tuple list.

def extract_symmetric(test_list):

    result = []
    for i in range(len(test_list)):
        for j in range(len(test_list)):
            if i != j and test_list[i] != test_list[j]:
                if i < j:
                    if test_list[i] < test_list[j]:
                        result.append((test_list[i], test_list[j]))
                    else:
                        result.append((test_list[j], test_list[i]))
    return result

def check(extract_symmetric):
    assert extract_symmetric([(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)] ) == {(8, 9), (6, 7)}
    assert extract_symmetric([(7, 8), (3, 4), (8, 7), (10, 9), (11, 3), (9, 10)] ) == {(9, 10), (7, 8)}
    assert extract_symmetric([(8, 9), (4, 5), (9, 8), (11, 10), (12, 4), (10, 11)] ) == {(8, 9), (10, 11)}

check(extract_symmetric)
solution 0 passed False
Task 490 gens 10 solutions in cir 10
check_program: 
# Write a function to extract all the pairs which are symmetric in the given tuple list.

def extract_symmetric(test_list):

    result = []
    for i in range(len(test_list)):
        for j in range(len(test_list)):
            if i != j and test_list[i] != test_list[j]:
                if i < j:
                    if test_list[i] < test_list[j]:
                        result.append((test_list[i], test_list[j]))
                    else:
                        result.append((test_list[j], test_list[i]))
    return result

def check(extract_symmetric):
    assert extract_symmetric([(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)] ) == {(8, 9), (6, 7)}
    assert extract_symmetric([(7, 8), (3, 4), (8, 7), (10, 9), (11, 3), (9, 10)] ) == {(9, 10), (7, 8)}
    assert extract_symmetric([(8, 9), (4, 5), (9, 8), (11, 10), (12, 4), (10, 11)] ) == {(8, 9), (10, 11)}

check(extract_symmetric)
solution 0 passed False
Task 173 gens 1 solutions in cir 0
check_program: 
# Write a function to remove everything except alphanumeric characters from a string.
import re
def remove_splchar(text):

    return re.sub(r'[^a-zA-Z0-9]', '', text)

def check(remove_splchar):
    assert remove_splchar('python  @#&^%$*program123')==('pythonprogram123')
    assert remove_splchar('python %^$@!^&*()  programming24%$^^()    language')==('pythonprogramming24language')
    assert remove_splchar('python   ^%&^()(+_)(_^&67)                  program')==('python67program')

check(remove_splchar)
solution 0 passed True
Task 173 gens 1 solutions in cir 1
check_program: 
# Write a function to remove everything except alphanumeric characters from a string.
import re
def remove_splchar(text):

    return re.sub(r'[^a-zA-Z0-9]', '', text)

def check(remove_splchar):
    assert remove_splchar('python  @#&^%$*program123')==('pythonprogram123')
    assert remove_splchar('python %^$@!^&*()  programming24%$^^()    language')==('pythonprogramming24language')
    assert remove_splchar('python   ^%&^()(+_)(_^&67)                  program')==('python67program')

check(remove_splchar)
solution 0 passed True
Task 173 gens 1 solutions in cir 2
check_program: 
# Write a function to remove everything except alphanumeric characters from a string.
import re
def remove_splchar(text):

    return re.sub(r'[^a-zA-Z0-9]', '', text)

def check(remove_splchar):
    assert remove_splchar('python  @#&^%$*program123')==('pythonprogram123')
    assert remove_splchar('python %^$@!^&*()  programming24%$^^()    language')==('pythonprogramming24language')
    assert remove_splchar('python   ^%&^()(+_)(_^&67)                  program')==('python67program')

check(remove_splchar)
solution 0 passed True
Task 173 gens 1 solutions in cir 3
check_program: 
# Write a function to remove everything except alphanumeric characters from a string.
import re
def remove_splchar(text):

    return re.sub(r'[^a-zA-Z0-9]', '', text)

def check(remove_splchar):
    assert remove_splchar('python  @#&^%$*program123')==('pythonprogram123')
    assert remove_splchar('python %^$@!^&*()  programming24%$^^()    language')==('pythonprogramming24language')
    assert remove_splchar('python   ^%&^()(+_)(_^&67)                  program')==('python67program')

check(remove_splchar)
solution 0 passed True
Task 173 gens 1 solutions in cir 4
check_program: 
# Write a function to remove everything except alphanumeric characters from a string.
import re
def remove_splchar(text):

    return re.sub(r'[^a-zA-Z0-9]', '', text)

def check(remove_splchar):
    assert remove_splchar('python  @#&^%$*program123')==('pythonprogram123')
    assert remove_splchar('python %^$@!^&*()  programming24%$^^()    language')==('pythonprogramming24language')
    assert remove_splchar('python   ^%&^()(+_)(_^&67)                  program')==('python67program')

check(remove_splchar)
solution 0 passed True
Task 173 gens 1 solutions in cir 5
check_program: 
# Write a function to remove everything except alphanumeric characters from a string.
import re
def remove_splchar(text):

    return re.sub(r'[^a-zA-Z0-9]', '', text)

def check(remove_splchar):
    assert remove_splchar('python  @#&^%$*program123')==('pythonprogram123')
    assert remove_splchar('python %^$@!^&*()  programming24%$^^()    language')==('pythonprogramming24language')
    assert remove_splchar('python   ^%&^()(+_)(_^&67)                  program')==('python67program')

check(remove_splchar)
solution 0 passed True
Task 173 gens 1 solutions in cir 6
check_program: 
# Write a function to remove everything except alphanumeric characters from a string.
import re
def remove_splchar(text):

    return re.sub(r'[^a-zA-Z0-9]', '', text)

def check(remove_splchar):
    assert remove_splchar('python  @#&^%$*program123')==('pythonprogram123')
    assert remove_splchar('python %^$@!^&*()  programming24%$^^()    language')==('pythonprogramming24language')
    assert remove_splchar('python   ^%&^()(+_)(_^&67)                  program')==('python67program')

check(remove_splchar)
solution 0 passed True
Task 173 gens 1 solutions in cir 7
check_program: 
# Write a function to remove everything except alphanumeric characters from a string.
import re
def remove_splchar(text):

    return re.sub(r'[^a-zA-Z0-9]', '', text)

def check(remove_splchar):
    assert remove_splchar('python  @#&^%$*program123')==('pythonprogram123')
    assert remove_splchar('python %^$@!^&*()  programming24%$^^()    language')==('pythonprogramming24language')
    assert remove_splchar('python   ^%&^()(+_)(_^&67)                  program')==('python67program')

check(remove_splchar)
solution 0 passed True
Task 173 gens 1 solutions in cir 8
check_program: 
# Write a function to remove everything except alphanumeric characters from a string.
import re
def remove_splchar(text):

    return re.sub(r'[^a-zA-Z0-9]', '', text)

def check(remove_splchar):
    assert remove_splchar('python  @#&^%$*program123')==('pythonprogram123')
    assert remove_splchar('python %^$@!^&*()  programming24%$^^()    language')==('pythonprogramming24language')
    assert remove_splchar('python   ^%&^()(+_)(_^&67)                  program')==('python67program')

check(remove_splchar)
solution 0 passed True
Task 173 gens 1 solutions in cir 9
check_program: 
# Write a function to remove everything except alphanumeric characters from a string.
import re
def remove_splchar(text):

    return re.sub(r'[^a-zA-Z0-9]', '', text)

def check(remove_splchar):
    assert remove_splchar('python  @#&^%$*program123')==('pythonprogram123')
    assert remove_splchar('python %^$@!^&*()  programming24%$^^()    language')==('pythonprogramming24language')
    assert remove_splchar('python   ^%&^()(+_)(_^&67)                  program')==('python67program')

check(remove_splchar)
solution 0 passed True
Task 173 gens 1 solutions in cir 10
check_program: 
# Write a function to remove everything except alphanumeric characters from a string.
import re
def remove_splchar(text):

    return re.sub(r'[^a-zA-Z0-9]', '', text)

def check(remove_splchar):
    assert remove_splchar('python  @#&^%$*program123')==('pythonprogram123')
    assert remove_splchar('python %^$@!^&*()  programming24%$^^()    language')==('pythonprogramming24language')
    assert remove_splchar('python   ^%&^()(+_)(_^&67)                  program')==('python67program')

check(remove_splchar)
solution 0 passed True
Task 301 gens 1 solutions in cir 0
check_program: 
# Write a function to find the depth of a dictionary.

def dict_depth(d):

    if not d:
        return 0
    return 1 + max(dict_depth(d[key]), key in d[key])

def check(dict_depth):
    assert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4
    assert dict_depth({'a':1, 'b': {'c':'python'}})==2
    assert dict_depth({1: 'Sun', 2: {3: {4:'Mon'}}})==3

check(dict_depth)
solution 0 passed False
Task 301 gens 9 solutions in cir 1
check_program: 
# Write a function to find the depth of a dictionary.

def dict_depth(d):

    if not d:
        return 0
    return 1 + max(dict_depth(d[key]), key in d[key])

def check(dict_depth):
    assert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4
    assert dict_depth({'a':1, 'b': {'c':'python'}})==2
    assert dict_depth({1: 'Sun', 2: {3: {4:'Mon'}}})==3

check(dict_depth)
solution 0 passed False
Task 301 gens 10 solutions in cir 2
check_program: 
# Write a function to find the depth of a dictionary.

def dict_depth(d):

    if not d:
        return 0
    return 1 + max(d.get(key), key in d)

def check(dict_depth):
    assert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4
    assert dict_depth({'a':1, 'b': {'c':'python'}})==2
    assert dict_depth({1: 'Sun', 2: {3: {4:'Mon'}}})==3

check(dict_depth)
solution 0 passed False
Task 301 gens 10 solutions in cir 3
check_program: 
# Write a function to find the depth of a dictionary.

def dict_depth(d):

    if not d:
        return 0
    return 1 + max(d.get(key), key in d)

def check(dict_depth):
    assert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4
    assert dict_depth({'a':1, 'b': {'c':'python'}})==2
    assert dict_depth({1: 'Sun', 2: {3: {4:'Mon'}}})==3

check(dict_depth)
solution 0 passed False
Task 301 gens 10 solutions in cir 4
check_program: 
# Write a function to find the depth of a dictionary.

def dict_depth(d):

    stack = []
    for key, value in d.items():
        if isinstance(value, dict):
            return 1 + max(dict_depth(value), key in value)
        if value is None:
            return 0
        stack.append((key, value))
    return len(stack)

def check(dict_depth):
    assert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4
    assert dict_depth({'a':1, 'b': {'c':'python'}})==2
    assert dict_depth({1: 'Sun', 2: {3: {4:'Mon'}}})==3

check(dict_depth)
solution 0 passed False
Task 301 gens 10 solutions in cir 5
check_program: 
# Write a function to find the depth of a dictionary.

def dict_depth(d):

    if not d:
        return 0
    return 1 + max(d.get(key, 0), key in d)

def check(dict_depth):
    assert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4
    assert dict_depth({'a':1, 'b': {'c':'python'}})==2
    assert dict_depth({1: 'Sun', 2: {3: {4:'Mon'}}})==3

check(dict_depth)
solution 0 passed False
Task 301 gens 10 solutions in cir 6
check_program: 
# Write a function to find the depth of a dictionary.

def dict_depth(d):

    if not d:
        return 0
    return 1 + max(d.get(key, 0), key in d)

def check(dict_depth):
    assert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4
    assert dict_depth({'a':1, 'b': {'c':'python'}})==2
    assert dict_depth({1: 'Sun', 2: {3: {4:'Mon'}}})==3

check(dict_depth)
solution 0 passed False
Task 301 gens 10 solutions in cir 7
check_program: 
# Write a function to find the depth of a dictionary.

def dict_depth(d):

    if not d:
        return 0
    return 1 + max(d.get(key, 0), key in d)

def check(dict_depth):
    assert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4
    assert dict_depth({'a':1, 'b': {'c':'python'}})==2
    assert dict_depth({1: 'Sun', 2: {3: {4:'Mon'}}})==3

check(dict_depth)
solution 0 passed False
Task 301 gens 10 solutions in cir 8
check_program: 
# Write a function to find the depth of a dictionary.

def dict_depth(d):

    return max(d.values()) + 1 if d else 0

def check(dict_depth):
    assert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4
    assert dict_depth({'a':1, 'b': {'c':'python'}})==2
    assert dict_depth({1: 'Sun', 2: {3: {4:'Mon'}}})==3

check(dict_depth)
solution 0 passed False
Task 301 gens 10 solutions in cir 9
check_program: 
# Write a function to find the depth of a dictionary.

def dict_depth(d):

    if not d:
        return 0
    return 1 + max(d.get(key, 0), key in d and dict_depth(d[key]))

def check(dict_depth):
    assert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4
    assert dict_depth({'a':1, 'b': {'c':'python'}})==2
    assert dict_depth({1: 'Sun', 2: {3: {4:'Mon'}}})==3

check(dict_depth)
solution 0 passed False
Task 301 gens 10 solutions in cir 10
check_program: 
# Write a function to find the depth of a dictionary.

def dict_depth(d):

    if not d:
        return 0
    return 1 + max(d.get(key, 0), key in d)

def check(dict_depth):
    assert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4
    assert dict_depth({'a':1, 'b': {'c':'python'}})==2
    assert dict_depth({1: 'Sun', 2: {3: {4:'Mon'}}})==3

check(dict_depth)
solution 0 passed False
Task 120 gens 1 solutions in cir 0
check_program: 
# Write a function to find the maximum product from the pairs of tuples within a given list.

def max_product_tuple(list1):

    result = 0
    for i in range(len(list1)):
        for j in range(i+1, len(list1)):
            result = max(result, list1[i] * list1[j])
    return result

def check(max_product_tuple):
    assert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36
    assert max_product_tuple([(10,20), (15,2), (5,10)] )==200
    assert max_product_tuple([(11,44), (10,15), (20,5), (12, 9)] )==484

check(max_product_tuple)
solution 0 passed False
Task 120 gens 6 solutions in cir 1
check_program: 
# Write a function to find the maximum product from the pairs of tuples within a given list.

def max_product_tuple(list1):

    result = 0
    for i in range(len(list1)):
        for j in range(i+1, len(list1)):
            result = max(result, list1[i] * list1[j])
    return result

def check(max_product_tuple):
    assert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36
    assert max_product_tuple([(10,20), (15,2), (5,10)] )==200
    assert max_product_tuple([(11,44), (10,15), (20,5), (12, 9)] )==484

check(max_product_tuple)
solution 0 passed False
Task 120 gens 10 solutions in cir 2
check_program: 
# Write a function to find the maximum product from the pairs of tuples within a given list.

def max_product_tuple(list1):

    result = 0
    for pair in list1:
        result = max(result, *pair)
    return result

def check(max_product_tuple):
    assert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36
    assert max_product_tuple([(10,20), (15,2), (5,10)] )==200
    assert max_product_tuple([(11,44), (10,15), (20,5), (12, 9)] )==484

check(max_product_tuple)
solution 0 passed False
Task 120 gens 10 solutions in cir 3
check_program: 
# Write a function to find the maximum product from the pairs of tuples within a given list.

def max_product_tuple(list1):

    result = 0
    for pair in list1:
        result = max(result, *pair)
    return result

def check(max_product_tuple):
    assert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36
    assert max_product_tuple([(10,20), (15,2), (5,10)] )==200
    assert max_product_tuple([(11,44), (10,15), (20,5), (12, 9)] )==484

check(max_product_tuple)
solution 0 passed False
Task 120 gens 10 solutions in cir 4
check_program: 
# Write a function to find the maximum product from the pairs of tuples within a given list.

def max_product_tuple(list1):

    result = 0
    for pair in list1:
        if pair:
            result = max(result, *pair)
    return result

def check(max_product_tuple):
    assert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36
    assert max_product_tuple([(10,20), (15,2), (5,10)] )==200
    assert max_product_tuple([(11,44), (10,15), (20,5), (12, 9)] )==484

check(max_product_tuple)
solution 0 passed False
Task 120 gens 10 solutions in cir 5
check_program: 
# Write a function to find the maximum product from the pairs of tuples within a given list.

def max_product_tuple(list1):

    result = 0
    for pair in list1:
        result = max(result, *pair)
    return result

def check(max_product_tuple):
    assert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36
    assert max_product_tuple([(10,20), (15,2), (5,10)] )==200
    assert max_product_tuple([(11,44), (10,15), (20,5), (12, 9)] )==484

check(max_product_tuple)
solution 0 passed False
Task 120 gens 10 solutions in cir 6
check_program: 
# Write a function to find the maximum product from the pairs of tuples within a given list.

def max_product_tuple(list1):

    result = 0
    for pair in list1:
        result = max(result, max(pair[0], pair[1]))
    return result

def check(max_product_tuple):
    assert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36
    assert max_product_tuple([(10,20), (15,2), (5,10)] )==200
    assert max_product_tuple([(11,44), (10,15), (20,5), (12, 9)] )==484

check(max_product_tuple)
solution 0 passed False
Task 120 gens 10 solutions in cir 7
check_program: 
# Write a function to find the maximum product from the pairs of tuples within a given list.

def max_product_tuple(list1):

    result = 0
    for pair in list1:
        if pair:
            result = max(result, *pair)
    return result

def check(max_product_tuple):
    assert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36
    assert max_product_tuple([(10,20), (15,2), (5,10)] )==200
    assert max_product_tuple([(11,44), (10,15), (20,5), (12, 9)] )==484

check(max_product_tuple)
solution 0 passed False
Task 120 gens 10 solutions in cir 8
check_program: 
# Write a function to find the maximum product from the pairs of tuples within a given list.

def max_product_tuple(list1):

    result = 0
    for pair in list1:
        result = max(result, *pair)
    return result

def check(max_product_tuple):
    assert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36
    assert max_product_tuple([(10,20), (15,2), (5,10)] )==200
    assert max_product_tuple([(11,44), (10,15), (20,5), (12, 9)] )==484

check(max_product_tuple)
solution 0 passed False
Task 120 gens 10 solutions in cir 9
check_program: 
# Write a function to find the maximum product from the pairs of tuples within a given list.

def max_product_tuple(list1):

    result = 0
    for pair in list1:
        if pair:
            result = max(pair)
    return result

def check(max_product_tuple):
    assert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36
    assert max_product_tuple([(10,20), (15,2), (5,10)] )==200
    assert max_product_tuple([(11,44), (10,15), (20,5), (12, 9)] )==484

check(max_product_tuple)
solution 0 passed False
Task 120 gens 10 solutions in cir 10
check_program: 
# Write a function to find the maximum product from the pairs of tuples within a given list.

def max_product_tuple(list1):

    result = 0
    for pair in list1:
        product = max(*pair)
        result = max(result, product)
    return result

def check(max_product_tuple):
    assert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36
    assert max_product_tuple([(10,20), (15,2), (5,10)] )==200
    assert max_product_tuple([(11,44), (10,15), (20,5), (12, 9)] )==484

check(max_product_tuple)
solution 0 passed False
Task 219 gens 1 solutions in cir 0
check_program: 
# Write a function to extract maximum and minimum k elements in the given tuple.

def extract_min_max(test_tup, K):

    return (min(test_tup[:K]), max(test_tup[K:]))

def check(extract_min_max):
    assert extract_min_max((5, 20, 3, 7, 6, 8), 2) == (3, 5, 8, 20)
    assert extract_min_max((4, 5, 6, 1, 2, 7), 3) == (1, 2, 4, 5, 6, 7)
    assert extract_min_max((2, 3, 4, 8, 9, 11, 7), 4) == (2, 3, 4, 7, 8, 9, 11)

check(extract_min_max)
solution 0 passed False
Task 219 gens 5 solutions in cir 1
check_program: 
# Write a function to extract maximum and minimum k elements in the given tuple.

def extract_min_max(test_tup, K):

    return min(test_tup[:K]), max(test_tup[K:])

def check(extract_min_max):
    assert extract_min_max((5, 20, 3, 7, 6, 8), 2) == (3, 5, 8, 20)
    assert extract_min_max((4, 5, 6, 1, 2, 7), 3) == (1, 2, 4, 5, 6, 7)
    assert extract_min_max((2, 3, 4, 8, 9, 11, 7), 4) == (2, 3, 4, 7, 8, 9, 11)

check(extract_min_max)
solution 0 passed False
Task 219 gens 10 solutions in cir 2
check_program: 
# Write a function to extract maximum and minimum k elements in the given tuple.

def extract_min_max(test_tup, K):

    if K >= len(test_tup):
        return None, None
    return min(test_tup[:K]), max(test_tup[K:])

def check(extract_min_max):
    assert extract_min_max((5, 20, 3, 7, 6, 8), 2) == (3, 5, 8, 20)
    assert extract_min_max((4, 5, 6, 1, 2, 7), 3) == (1, 2, 4, 5, 6, 7)
    assert extract_min_max((2, 3, 4, 8, 9, 11, 7), 4) == (2, 3, 4, 7, 8, 9, 11)

check(extract_min_max)
solution 0 passed False
Task 219 gens 10 solutions in cir 3
check_program: 
# Write a function to extract maximum and minimum k elements in the given tuple.

def extract_min_max(test_tup, K):

    if K < 0 or K >= len(test_tup):
        return None, None
    if K == 0:
        return min(test_tup), max(test_tup)
    return min(test_tup[:K]), max(test_tup[K:])

def check(extract_min_max):
    assert extract_min_max((5, 20, 3, 7, 6, 8), 2) == (3, 5, 8, 20)
    assert extract_min_max((4, 5, 6, 1, 2, 7), 3) == (1, 2, 4, 5, 6, 7)
    assert extract_min_max((2, 3, 4, 8, 9, 11, 7), 4) == (2, 3, 4, 7, 8, 9, 11)

check(extract_min_max)
solution 0 passed False
Task 219 gens 10 solutions in cir 4
check_program: 
# Write a function to extract maximum and minimum k elements in the given tuple.

def extract_min_max(test_tup, K):

    if K < 0 or K >= len(test_tup):
        return None, None
    if K == 0:
        return min(test_tup), max(test_tup)
    return min(test_tup[:K]), max(test_tup[K:])

def check(extract_min_max):
    assert extract_min_max((5, 20, 3, 7, 6, 8), 2) == (3, 5, 8, 20)
    assert extract_min_max((4, 5, 6, 1, 2, 7), 3) == (1, 2, 4, 5, 6, 7)
    assert extract_min_max((2, 3, 4, 8, 9, 11, 7), 4) == (2, 3, 4, 7, 8, 9, 11)

check(extract_min_max)
solution 0 passed False
Task 219 gens 10 solutions in cir 5
check_program: 
# Write a function to extract maximum and minimum k elements in the given tuple.

def extract_min_max(test_tup, K):

    if K < 0 or K >= len(test_tup):
        return None, None
    if K == 0:
        return min(test_tup), max(test_tup)
    return min(test_tup[:K]), max(test_tup[K:])

def check(extract_min_max):
    assert extract_min_max((5, 20, 3, 7, 6, 8), 2) == (3, 5, 8, 20)
    assert extract_min_max((4, 5, 6, 1, 2, 7), 3) == (1, 2, 4, 5, 6, 7)
    assert extract_min_max((2, 3, 4, 8, 9, 11, 7), 4) == (2, 3, 4, 7, 8, 9, 11)

check(extract_min_max)
solution 0 passed False
Task 219 gens 10 solutions in cir 6
check_program: 
# Write a function to extract maximum and minimum k elements in the given tuple.

def extract_min_max(test_tup, K):

    if K < 0 or K >= len(test_tup):
        return None, None
    if K == 0:
        return min(test_tup), max(test_tup)
    return min(test_tup[:K]), max(test_tup[K:])

def check(extract_min_max):
    assert extract_min_max((5, 20, 3, 7, 6, 8), 2) == (3, 5, 8, 20)
    assert extract_min_max((4, 5, 6, 1, 2, 7), 3) == (1, 2, 4, 5, 6, 7)
    assert extract_min_max((2, 3, 4, 8, 9, 11, 7), 4) == (2, 3, 4, 7, 8, 9, 11)

check(extract_min_max)
solution 0 passed False
Task 219 gens 10 solutions in cir 7
check_program: 
# Write a function to extract maximum and minimum k elements in the given tuple.

def extract_min_max(test_tup, K):

    if K < 0 or K >= len(test_tup):
        return None, None
    if K == 0:
        return min(test_tup), max(test_tup)
    return min(test_tup[:K]), max(test_tup[K:])

def check(extract_min_max):
    assert extract_min_max((5, 20, 3, 7, 6, 8), 2) == (3, 5, 8, 20)
    assert extract_min_max((4, 5, 6, 1, 2, 7), 3) == (1, 2, 4, 5, 6, 7)
    assert extract_min_max((2, 3, 4, 8, 9, 11, 7), 4) == (2, 3, 4, 7, 8, 9, 11)

check(extract_min_max)
solution 0 passed False
Task 219 gens 10 solutions in cir 8
check_program: 
# Write a function to extract maximum and minimum k elements in the given tuple.

def extract_min_max(test_tup, K):

    if K > len(test_tup):
        return None, None
    if K == 0:
        return min(test_tup), max(test_tup)
    else:
        return min(test_tup[:K]), max(test_tup[K:])

def check(extract_min_max):
    assert extract_min_max((5, 20, 3, 7, 6, 8), 2) == (3, 5, 8, 20)
    assert extract_min_max((4, 5, 6, 1, 2, 7), 3) == (1, 2, 4, 5, 6, 7)
    assert extract_min_max((2, 3, 4, 8, 9, 11, 7), 4) == (2, 3, 4, 7, 8, 9, 11)

check(extract_min_max)
solution 0 passed False
Task 128 gens 1 solutions in cir 0
check_program: 
# Write a function to shortlist words that are longer than n from a given list of words.

def long_words(n, str):

    result = []
    for word in str:
        if len(word) > n:
            result.append(word)
    return result

def check(long_words):
    assert long_words(3,"python is a programming language")==['python','programming','language']
    assert long_words(2,"writing a program")==['writing','program']
    assert long_words(5,"sorting list")==['sorting']

check(long_words)
solution 0 passed False
Task 128 gens 4 solutions in cir 1
check_program: 
# Write a function to shortlist words that are longer than n from a given list of words.

def long_words(n, str):

    result = []
    for word in str:
        if len(word) > n:
            result.append(word)
    return result

def check(long_words):
    assert long_words(3,"python is a programming language")==['python','programming','language']
    assert long_words(2,"writing a program")==['writing','program']
    assert long_words(5,"sorting list")==['sorting']

check(long_words)
solution 0 passed False
Task 128 gens 10 solutions in cir 2
check_program: 
# Write a function to shortlist words that are longer than n from a given list of words.

def long_words(n, str):

    return list(filter(lambda x: len(x)>n, str.split()))

def check(long_words):
    assert long_words(3,"python is a programming language")==['python','programming','language']
    assert long_words(2,"writing a program")==['writing','program']
    assert long_words(5,"sorting list")==['sorting']

check(long_words)
solution 0 passed True
Task 128 gens 10 solutions in cir 3
check_program: 
# Write a function to shortlist words that are longer than n from a given list of words.

def long_words(n, str):

    words = str.split()
    return list(filter(lambda x: len(x)>n, words))

def check(long_words):
    assert long_words(3,"python is a programming language")==['python','programming','language']
    assert long_words(2,"writing a program")==['writing','program']
    assert long_words(5,"sorting list")==['sorting']

check(long_words)
solution 0 passed True
Task 128 gens 10 solutions in cir 4
check_program: 
# Write a function to shortlist words that are longer than n from a given list of words.

def long_words(n, str):

    words = str.split()
    return list(filter(lambda x: len(x)>n, words))

def check(long_words):
    assert long_words(3,"python is a programming language")==['python','programming','language']
    assert long_words(2,"writing a program")==['writing','program']
    assert long_words(5,"sorting list")==['sorting']

check(long_words)
solution 0 passed True
Task 115 gens 1 solutions in cir 0
check_program: 
# Write a function to check whether all dictionaries in a list are empty or not.

def empty_dit(list1):

    def empty_dict(list1):
        empty_dicts = [d for d in list1 if not d]
        return empty_dicts

def check(empty_dit):
    assert empty_dit([{},{},{}])==True
    assert empty_dit([{1,2},{},{}])==False
    assert empty_dit({})==True

check(empty_dit)
solution 0 passed False
Task 115 gens 10 solutions in cir 1
check_program: 
# Write a function to check whether all dictionaries in a list are empty or not.

def empty_dit(list1):

    return all([not dict for dict in list1])

def check(empty_dit):
    assert empty_dit([{},{},{}])==True
    assert empty_dit([{1,2},{},{}])==False
    assert empty_dit({})==True

check(empty_dit)
solution 0 passed True
Task 115 gens 10 solutions in cir 2
check_program: 
# Write a function to check whether all dictionaries in a list are empty or not.

def empty_dit(list1):

    return all([not dict for dict in list1])

def check(empty_dit):
    assert empty_dit([{},{},{}])==True
    assert empty_dit([{1,2},{},{}])==False
    assert empty_dit({})==True

check(empty_dit)
solution 0 passed True
Task 115 gens 10 solutions in cir 3
check_program: 
# Write a function to check whether all dictionaries in a list are empty or not.

def empty_dit(list1):

    return all([not dict for dict in list1 if dict])

def check(empty_dit):
    assert empty_dit([{},{},{}])==True
    assert empty_dit([{1,2},{},{}])==False
    assert empty_dit({})==True

check(empty_dit)
solution 0 passed True
Task 31 gens 1 solutions in cir 0
check_program: 
# Write a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.

def func(nums, k):

    import heapq as hq
    freq = {}
    for num in nums:
        if num in freq:
            freq[num] += 1
        else:
            freq[num] = 1
    heap = [(num, freq[num]) for num, freq in freq.items()]
    heapq.heapify(heap)
    result = []
    for num, freq in heap:
        if k > 0 and freq > k:
            break
        result.append(num)
        k -= freq
    return result

def check(func):
    assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]
    assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],1)==[1]
    assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],5)==[6, 5, 7, 8, 1]

check(func)
solution 0 passed False
Task 31 gens 6 solutions in cir 1
check_program: 
# Write a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.

def func(nums, k):

    freq = {}
    for num in nums:
        if num in freq:
            freq[num] += 1
        else:
            freq[num] = 1
    heap = [(num, freq[num]) for num, freq in freq.items()]
    heapq.heapify(heap)
    result = []
    for num, freq in heap:
        if k > 0 and freq > k:
            break
        result.append(num)
        k -= freq
    return result

def check(func):
    assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]
    assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],1)==[1]
    assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],5)==[6, 5, 7, 8, 1]

check(func)
solution 0 passed False
Task 31 gens 10 solutions in cir 2
check_program: 
# Write a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.

def func(nums, k):

    from heapq import nlargest
    num_dict = {}
    for num in nums:
        num_dict[num] = num_dict.get(num, 0) + 1
    res = nlargest(k, num_dict.items(), key=lambda x: x[1])
    return [num for num, x in res]

def check(func):
    assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]
    assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],1)==[1]
    assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],5)==[6, 5, 7, 8, 1]

check(func)
solution 0 passed False
Task 31 gens 10 solutions in cir 3
check_program: 
# Write a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.

def func(nums, k):

    from heapq import nlargest
    num_dict = {}
    for num in nums:
        num_dict[num] = num_dict.get(num, 0) + 1
    res = nlargest(k, num_dict.items(), key=lambda x: x[1])
    return [num for num, x in res]

def check(func):
    assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]
    assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],1)==[1]
    assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],5)==[6, 5, 7, 8, 1]

check(func)
solution 0 passed False
Task 394 gens 1 solutions in cir 0
check_program: 
# Write a function to check if given tuple is distinct or not.

def check_distinct(test_tup):

    return len(set(test_tup)) == len(test_tup)

def check(check_distinct):
    assert check_distinct((1, 4, 5, 6, 1, 4)) == False
    assert check_distinct((1, 4, 5, 6)) == True
    assert check_distinct((2, 3, 4, 5, 6)) == True

check(check_distinct)
solution 0 passed True
Task 394 gens 3 solutions in cir 1
check_program: 
# Write a function to check if given tuple is distinct or not.

def check_distinct(test_tup):

    return len(set(test_tup)) == len(test_tup)

def check(check_distinct):
    assert check_distinct((1, 4, 5, 6, 1, 4)) == False
    assert check_distinct((1, 4, 5, 6)) == True
    assert check_distinct((2, 3, 4, 5, 6)) == True

check(check_distinct)
solution 0 passed True
Task 394 gens 10 solutions in cir 2
check_program: 
# Write a function to check if given tuple is distinct or not.

def check_distinct(test_tup):

    import collections
    unique_values = collections.Counter(test_tup).most_common(1)
    return len(unique_values) > 1

def check(check_distinct):
    assert check_distinct((1, 4, 5, 6, 1, 4)) == False
    assert check_distinct((1, 4, 5, 6)) == True
    assert check_distinct((2, 3, 4, 5, 6)) == True

check(check_distinct)
solution 0 passed False
Task 394 gens 10 solutions in cir 3
check_program: 
# Write a function to check if given tuple is distinct or not.

def check_distinct(test_tup):

    unique_values = set()
    for value in test_tup:
        if value not in unique_values:
            unique_values.add(value)
    return len(unique_values) == 1

def check(check_distinct):
    assert check_distinct((1, 4, 5, 6, 1, 4)) == False
    assert check_distinct((1, 4, 5, 6)) == True
    assert check_distinct((2, 3, 4, 5, 6)) == True

check(check_distinct)
solution 0 passed False
Task 394 gens 10 solutions in cir 4
check_program: 
# Write a function to check if given tuple is distinct or not.

def check_distinct(test_tup):

    from collections import defaultdict
    distinct_dict = defaultdict(int)
    for t in test_tup:
        distinct_dict[t] += 1
        if distinct_dict[t] > 1:
            return False
    return len(distinct_dict) == 1

def check(check_distinct):
    assert check_distinct((1, 4, 5, 6, 1, 4)) == False
    assert check_distinct((1, 4, 5, 6)) == True
    assert check_distinct((2, 3, 4, 5, 6)) == True

check(check_distinct)
solution 0 passed False
Task 126 gens 1 solutions in cir 0
check_program: 
# Write a python function to find the sum of common divisors of two given numbers.

def sum(a,b):

    return a * b // gcd(a,b)

def check(sum):
    assert sum(10,15) == 6
    assert sum(100,150) == 93
    assert sum(4,6) == 3

check(sum)
solution 0 passed False
Task 126 gens 5 solutions in cir 1
check_program: 
# Write a python function to find the sum of common divisors of two given numbers.

def sum(a,b):

    from math import gcd
    return a * b // gcd(a,b)

def check(sum):
    assert sum(10,15) == 6
    assert sum(100,150) == 93
    assert sum(4,6) == 3

check(sum)
solution 0 passed False
Task 126 gens 10 solutions in cir 2
check_program: 
# Write a python function to find the sum of common divisors of two given numbers.

def sum(a,b):

    from math import gcd
    return a * b // gcd(a, b)

def check(sum):
    assert sum(10,15) == 6
    assert sum(100,150) == 93
    assert sum(4,6) == 3

check(sum)
solution 0 passed False
Task 126 gens 10 solutions in cir 3
check_program: 
# Write a python function to find the sum of common divisors of two given numbers.

def sum(a,b):

    from math import gcd
    return a * b // gcd(a, b)

def check(sum):
    assert sum(10,15) == 6
    assert sum(100,150) == 93
    assert sum(4,6) == 3

check(sum)
solution 0 passed False
Task 452 gens 1 solutions in cir 0
check_program: 
# Write a function that gives loss amount if the given amount has loss else return none.

def loss_amount(actual_cost,sale_amount):

    if sale_amount < actual_cost:
        return actual_cost - sale_amount
    else:
        return None

def check(loss_amount):
    assert loss_amount(1500,1200)==None
    assert loss_amount(100,200)==100
    assert loss_amount(2000,5000)==3000

check(loss_amount)
solution 0 passed False
Task 452 gens 3 solutions in cir 1
check_program: 
# Write a function that gives loss amount if the given amount has loss else return none.

def loss_amount(actual_cost,sale_amount):

    if sale_amount < actual_cost:
        return actual_cost - sale_amount
    else:
        return None

def check(loss_amount):
    assert loss_amount(1500,1200)==None
    assert loss_amount(100,200)==100
    assert loss_amount(2000,5000)==3000

check(loss_amount)
solution 0 passed False
Task 452 gens 10 solutions in cir 2
check_program: 
# Write a function that gives loss amount if the given amount has loss else return none.

def loss_amount(actual_cost,sale_amount):

    if sale_amount < actual_cost:
        return actual_cost - sale_amount
    else:
        return None

def check(loss_amount):
    assert loss_amount(1500,1200)==None
    assert loss_amount(100,200)==100
    assert loss_amount(2000,5000)==3000

check(loss_amount)
solution 0 passed False
Task 452 gens 10 solutions in cir 3
check_program: 
# Write a function that gives loss amount if the given amount has loss else return none.

def loss_amount(actual_cost,sale_amount):

    if actual_cost > sale_amount:
        return actual_cost - sale_amount
    else:
        return None

def check(loss_amount):
    assert loss_amount(1500,1200)==None
    assert loss_amount(100,200)==100
    assert loss_amount(2000,5000)==3000

check(loss_amount)
solution 0 passed False
Task 452 gens 10 solutions in cir 4
check_program: 
# Write a function that gives loss amount if the given amount has loss else return none.

def loss_amount(actual_cost,sale_amount):

    return actual_cost - sale_amount

def check(loss_amount):
    assert loss_amount(1500,1200)==None
    assert loss_amount(100,200)==100
    assert loss_amount(2000,5000)==3000

check(loss_amount)
solution 0 passed False
Task 452 gens 10 solutions in cir 5
check_program: 
# Write a function that gives loss amount if the given amount has loss else return none.

def loss_amount(actual_cost,sale_amount):

    return (actual_cost - sale_amount) if actual_cost != sale_amount else 0

def check(loss_amount):
    assert loss_amount(1500,1200)==None
    assert loss_amount(100,200)==100
    assert loss_amount(2000,5000)==3000

check(loss_amount)
solution 0 passed False
Task 20 gens 1 solutions in cir 0
check_program: 
# Write a function to check if the given number is woodball or not.

def is_woodall(x):

    if x == 0:
        return False
    if x % 2 == 0:
        return False
    if x % 3 == 0:
        return False
    if x % 5 == 0:
        return False
    if x % 7 == 0:
        return False
    return True

def check(is_woodall):
    assert is_woodall(383) == True
    assert is_woodall(254) == False
    assert is_woodall(200) == False

check(is_woodall)
solution 0 passed True
Task 20 gens 6 solutions in cir 1
check_program: 
# Write a function to check if the given number is woodball or not.

def is_woodall(x):

    return (x % 2 != 0) or (x % 3 != 0) or (x % 5 != 0) or (x % 7 != 0) or (x % 6 != 0)

def check(is_woodall):
    assert is_woodall(383) == True
    assert is_woodall(254) == False
    assert is_woodall(200) == False

check(is_woodall)
solution 0 passed False
Task 20 gens 10 solutions in cir 2
check_program: 
# Write a function to check if the given number is woodball or not.

def is_woodall(x):

    return (x % 2 != 0) or (x % 3 != 0) or (x % 5 != 0) or (x % 7 != 0) or (x % 6 != 0)

def check(is_woodall):
    assert is_woodall(383) == True
    assert is_woodall(254) == False
    assert is_woodall(200) == False

check(is_woodall)
solution 0 passed False
Task 20 gens 10 solutions in cir 3
check_program: 
# Write a function to check if the given number is woodball or not.

def is_woodall(x):

    if x % 2 != 0 and x % 3 != 0 and x % 5 != 0 and x % 7 != 0 and x % 6 != 0 and x % 4 != 0:
        return True
    return False

def check(is_woodall):
    assert is_woodall(383) == True
    assert is_woodall(254) == False
    assert is_woodall(200) == False

check(is_woodall)
solution 0 passed True
Task 143 gens 1 solutions in cir 0
check_program: 
# Write a function to find number of lists present in the given tuple.

def find_lists(Input):

    count = 0
    for elem in Input:
        if isinstance(elem, list):
            count += 1
    return count

def check(find_lists):
    assert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2
    assert find_lists(([1, 2], [3, 4], [5, 6]))  == 3
    assert find_lists(([9, 8, 7, 6, 5, 4, 3, 2, 1])) == 1

check(find_lists)
solution 0 passed False
Task 143 gens 4 solutions in cir 1
check_program: 
# Write a function to find number of lists present in the given tuple.

def find_lists(Input):

    count = 0
    for elem in Input:
        if isinstance(elem, list):
            count += 1
    return count

def check(find_lists):
    assert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2
    assert find_lists(([1, 2], [3, 4], [5, 6]))  == 3
    assert find_lists(([9, 8, 7, 6, 5, 4, 3, 2, 1])) == 1

check(find_lists)
solution 0 passed False
Task 143 gens 10 solutions in cir 2
check_program: 
# Write a function to find number of lists present in the given tuple.

def find_lists(Input):

    import re
    n = len(Input)
    if n == 0:
        return 0
    for i in range(1,n):
        if Input[i-1] != Input[i]:
            return i
    return n

def check(find_lists):
    assert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2
    assert find_lists(([1, 2], [3, 4], [5, 6]))  == 3
    assert find_lists(([9, 8, 7, 6, 5, 4, 3, 2, 1])) == 1

check(find_lists)
solution 0 passed False
Task 143 gens 10 solutions in cir 3
check_program: 
# Write a function to find number of lists present in the given tuple.

def find_lists(Input):

    return sum(1 for i,x in enumerate(Input) if i > 0 and Input[i] != Input[i-1])

def check(find_lists):
    assert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2
    assert find_lists(([1, 2], [3, 4], [5, 6]))  == 3
    assert find_lists(([9, 8, 7, 6, 5, 4, 3, 2, 1])) == 1

check(find_lists)
solution 0 passed False
Task 143 gens 10 solutions in cir 4
check_program: 
# Write a function to find number of lists present in the given tuple.

def find_lists(Input):

    if len(Input) == 0:
        return 0
    for i in range(1, len(Input)):
        if Input[i-1] != Input[i]:
            return i
    return len(Input)

def check(find_lists):
    assert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2
    assert find_lists(([1, 2], [3, 4], [5, 6]))  == 3
    assert find_lists(([9, 8, 7, 6, 5, 4, 3, 2, 1])) == 1

check(find_lists)
solution 0 passed False
Task 143 gens 10 solutions in cir 5
check_program: 
# Write a function to find number of lists present in the given tuple.

def find_lists(Input):

    return sum(1 for i,x in enumerate(Input) if i > 0 and Input[i] != Input[i-1])

def check(find_lists):
    assert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2
    assert find_lists(([1, 2], [3, 4], [5, 6]))  == 3
    assert find_lists(([9, 8, 7, 6, 5, 4, 3, 2, 1])) == 1

check(find_lists)
solution 0 passed False
Task 143 gens 10 solutions in cir 6
check_program: 
# Write a function to find number of lists present in the given tuple.

def find_lists(Input):

    count = 0
    for i in range(1, len(Input)):
        if Input[i] != Input[i - 1]:
            count += 1
    return count

def check(find_lists):
    assert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2
    assert find_lists(([1, 2], [3, 4], [5, 6]))  == 3
    assert find_lists(([9, 8, 7, 6, 5, 4, 3, 2, 1])) == 1

check(find_lists)
solution 0 passed False
Task 143 gens 10 solutions in cir 7
check_program: 
# Write a function to find number of lists present in the given tuple.

def find_lists(Input):

    return sum(1 for i in range(1,len(Input)) if Input[i] != Input[i-1])

def check(find_lists):
    assert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2
    assert find_lists(([1, 2], [3, 4], [5, 6]))  == 3
    assert find_lists(([9, 8, 7, 6, 5, 4, 3, 2, 1])) == 1

check(find_lists)
solution 0 passed False
Task 143 gens 10 solutions in cir 8
check_program: 
# Write a function to find number of lists present in the given tuple.

def find_lists(Input):

    return sum(1 for i in range(1,len(Input)) if Input[i] != Input[i-1])

def check(find_lists):
    assert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2
    assert find_lists(([1, 2], [3, 4], [5, 6]))  == 3
    assert find_lists(([9, 8, 7, 6, 5, 4, 3, 2, 1])) == 1

check(find_lists)
solution 0 passed False
Task 143 gens 10 solutions in cir 9
check_program: 
# Write a function to find number of lists present in the given tuple.

def find_lists(Input):

    return sum(1 for i in range(1,len(Input)) if Input[i] != Input[i-1])

def check(find_lists):
    assert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2
    assert find_lists(([1, 2], [3, 4], [5, 6]))  == 3
    assert find_lists(([9, 8, 7, 6, 5, 4, 3, 2, 1])) == 1

check(find_lists)
solution 0 passed False
Task 143 gens 10 solutions in cir 10
check_program: 
# Write a function to find number of lists present in the given tuple.

def find_lists(Input):

    count = 0
    if Input is None:
        return count
    elif isinstance(Input, list) or isinstance(Input, tuple):
        count += 1
        for item in Input:
            if isinstance(item, list) or isinstance(item, tuple):
                count += find_lists(item)
    return count

def check(find_lists):
    assert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2
    assert find_lists(([1, 2], [3, 4], [5, 6]))  == 3
    assert find_lists(([9, 8, 7, 6, 5, 4, 3, 2, 1])) == 1

check(find_lists)
solution 0 passed False
Task 269 gens 1 solutions in cir 0
check_program: 
# Write a function to find the ascii value of a character.

def ascii_value(k):

    return ord(k)

def check(ascii_value):
    assert ascii_value('A')==65
    assert ascii_value('R')==82
    assert ascii_value('S')==83

check(ascii_value)
solution 0 passed True
Task 269 gens 3 solutions in cir 1
check_program: 
# Write a function to find the ascii value of a character.

def ascii_value(k):

    return ord(k)

def check(ascii_value):
    assert ascii_value('A')==65
    assert ascii_value('R')==82
    assert ascii_value('S')==83

check(ascii_value)
solution 0 passed True
Task 269 gens 5 solutions in cir 2
check_program: 
# Write a function to find the ascii value of a character.

def ascii_value(k):

    return ord(k)

def check(ascii_value):
    assert ascii_value('A')==65
    assert ascii_value('R')==82
    assert ascii_value('S')==83

check(ascii_value)
solution 0 passed True
Task 269 gens 10 solutions in cir 3
check_program: 
# Write a function to find the ascii value of a character.

def ascii_value(k):

    return ord(k)

def check(ascii_value):
    assert ascii_value('A')==65
    assert ascii_value('R')==82
    assert ascii_value('S')==83

check(ascii_value)
solution 0 passed True
Task 269 gens 10 solutions in cir 4
check_program: 
# Write a function to find the ascii value of a character.

def ascii_value(k):

    try:
        return ord(k)
    except TypeError:
        return 0

def check(ascii_value):
    assert ascii_value('A')==65
    assert ascii_value('R')==82
    assert ascii_value('S')==83

check(ascii_value)
solution 0 passed True
Task 269 gens 10 solutions in cir 5
check_program: 
# Write a function to find the ascii value of a character.

def ascii_value(k):

    try:
        return ord(k)
    except ValueError:
        return None

def check(ascii_value):
    assert ascii_value('A')==65
    assert ascii_value('R')==82
    assert ascii_value('S')==83

check(ascii_value)
solution 0 passed True
Task 269 gens 10 solutions in cir 6
check_program: 
# Write a function to find the ascii value of a character.

def ascii_value(k):

    return ord(k)

def check(ascii_value):
    assert ascii_value('A')==65
    assert ascii_value('R')==82
    assert ascii_value('S')==83

check(ascii_value)
solution 0 passed True
Task 269 gens 10 solutions in cir 7
check_program: 
# Write a function to find the ascii value of a character.

def ascii_value(k):

    return ord(k)

def check(ascii_value):
    assert ascii_value('A')==65
    assert ascii_value('R')==82
    assert ascii_value('S')==83

check(ascii_value)
solution 0 passed True
Task 269 gens 10 solutions in cir 8
check_program: 
# Write a function to find the ascii value of a character.

def ascii_value(k):

    return ord(k)

def check(ascii_value):
    assert ascii_value('A')==65
    assert ascii_value('R')==82
    assert ascii_value('S')==83

check(ascii_value)
solution 0 passed True
Task 269 gens 10 solutions in cir 9
check_program: 
# Write a function to find the ascii value of a character.

def ascii_value(k):

    return ord(k)

def check(ascii_value):
    assert ascii_value('A')==65
    assert ascii_value('R')==82
    assert ascii_value('S')==83

check(ascii_value)
solution 0 passed True
Task 269 gens 10 solutions in cir 10
check_program: 
# Write a function to find the ascii value of a character.

def ascii_value(k):

    return ord(k)

def check(ascii_value):
    assert ascii_value('A')==65
    assert ascii_value('R')==82
    assert ascii_value('S')==83

check(ascii_value)
solution 0 passed True
Task 174 gens 1 solutions in cir 0
check_program: 
# Write a function to group a sequence of key-value pairs into a dictionary of lists.

def group_keyvalue(l):

    d = {}
    for key, value in l:
        if key not in d:
            d[key] = []
        d[key].append(value)
    return d

def check(group_keyvalue):
    assert group_keyvalue([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])=={'yellow': [1, 3], 'blue': [2, 4], 'red': [1]}
    assert group_keyvalue([('python', 1), ('python', 2), ('python', 3), ('python', 4), ('python', 5)])=={'python': [1,2,3,4,5]}
    assert group_keyvalue([('yellow',100), ('blue', 200), ('yellow', 300), ('blue', 400), ('red', 100)])=={'yellow': [100, 300], 'blue': [200, 400], 'red': [100]}

check(group_keyvalue)
solution 0 passed True
Task 174 gens 8 solutions in cir 1
check_program: 
# Write a function to group a sequence of key-value pairs into a dictionary of lists.

def group_keyvalue(l):

    d = {}
    for key, value in l:
        if key not in d:
            d[key] = [value]
        else:
            d[key].append(value)
    return d

def check(group_keyvalue):
    assert group_keyvalue([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])=={'yellow': [1, 3], 'blue': [2, 4], 'red': [1]}
    assert group_keyvalue([('python', 1), ('python', 2), ('python', 3), ('python', 4), ('python', 5)])=={'python': [1,2,3,4,5]}
    assert group_keyvalue([('yellow',100), ('blue', 200), ('yellow', 300), ('blue', 400), ('red', 100)])=={'yellow': [100, 300], 'blue': [200, 400], 'red': [100]}

check(group_keyvalue)
solution 0 passed True
Task 174 gens 10 solutions in cir 2
check_program: 
# Write a function to group a sequence of key-value pairs into a dictionary of lists.

def group_keyvalue(l):

    d = {}
    for key, value in l:
        if key not in d:
            d[key] = [value]
        else:
            d[key].append(value)
    return d

def check(group_keyvalue):
    assert group_keyvalue([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])=={'yellow': [1, 3], 'blue': [2, 4], 'red': [1]}
    assert group_keyvalue([('python', 1), ('python', 2), ('python', 3), ('python', 4), ('python', 5)])=={'python': [1,2,3,4,5]}
    assert group_keyvalue([('yellow',100), ('blue', 200), ('yellow', 300), ('blue', 400), ('red', 100)])=={'yellow': [100, 300], 'blue': [200, 400], 'red': [100]}

check(group_keyvalue)
solution 0 passed True
Task 174 gens 10 solutions in cir 3
check_program: 
# Write a function to group a sequence of key-value pairs into a dictionary of lists.

def group_keyvalue(l):

    result = {}
    for x in l:
        if x[0] not in result:
            result[x[0]] = [x[1]]
        else:
            result[x[0]].append(x[1])
    return result

def check(group_keyvalue):
    assert group_keyvalue([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])=={'yellow': [1, 3], 'blue': [2, 4], 'red': [1]}
    assert group_keyvalue([('python', 1), ('python', 2), ('python', 3), ('python', 4), ('python', 5)])=={'python': [1,2,3,4,5]}
    assert group_keyvalue([('yellow',100), ('blue', 200), ('yellow', 300), ('blue', 400), ('red', 100)])=={'yellow': [100, 300], 'blue': [200, 400], 'red': [100]}

check(group_keyvalue)
solution 0 passed True
Task 174 gens 10 solutions in cir 4
check_program: 
# Write a function to group a sequence of key-value pairs into a dictionary of lists.

def group_keyvalue(l):

    d = {}
    for key, value in l:
        if key in d:
            d[key].append(value)
        else:
            d[key] = [value]
    return d

def check(group_keyvalue):
    assert group_keyvalue([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])=={'yellow': [1, 3], 'blue': [2, 4], 'red': [1]}
    assert group_keyvalue([('python', 1), ('python', 2), ('python', 3), ('python', 4), ('python', 5)])=={'python': [1,2,3,4,5]}
    assert group_keyvalue([('yellow',100), ('blue', 200), ('yellow', 300), ('blue', 400), ('red', 100)])=={'yellow': [100, 300], 'blue': [200, 400], 'red': [100]}

check(group_keyvalue)
solution 0 passed True
Task 174 gens 10 solutions in cir 5
check_program: 
# Write a function to group a sequence of key-value pairs into a dictionary of lists.

def group_keyvalue(l):

    result = {}
    for x in l:
        if x[0] in result:
            result[x[0]].append(x[1])
        else:
            result[x[0]] = [x[1]]
    return result

def check(group_keyvalue):
    assert group_keyvalue([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])=={'yellow': [1, 3], 'blue': [2, 4], 'red': [1]}
    assert group_keyvalue([('python', 1), ('python', 2), ('python', 3), ('python', 4), ('python', 5)])=={'python': [1,2,3,4,5]}
    assert group_keyvalue([('yellow',100), ('blue', 200), ('yellow', 300), ('blue', 400), ('red', 100)])=={'yellow': [100, 300], 'blue': [200, 400], 'red': [100]}

check(group_keyvalue)
solution 0 passed True
Task 174 gens 10 solutions in cir 6
check_program: 
# Write a function to group a sequence of key-value pairs into a dictionary of lists.

def group_keyvalue(l):

    result = {}
    for x in l:
        if x[0] in result:
            result[x[0]].append(x[1])
        else:
            result[x[0]] = [x[1]]
    return result

def check(group_keyvalue):
    assert group_keyvalue([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])=={'yellow': [1, 3], 'blue': [2, 4], 'red': [1]}
    assert group_keyvalue([('python', 1), ('python', 2), ('python', 3), ('python', 4), ('python', 5)])=={'python': [1,2,3,4,5]}
    assert group_keyvalue([('yellow',100), ('blue', 200), ('yellow', 300), ('blue', 400), ('red', 100)])=={'yellow': [100, 300], 'blue': [200, 400], 'red': [100]}

check(group_keyvalue)
solution 0 passed True
Task 174 gens 10 solutions in cir 7
check_program: 
# Write a function to group a sequence of key-value pairs into a dictionary of lists.

def group_keyvalue(l):

    result = {}
    for key, value in l:
        if key not in result:
            result[key] = [value]
        else:
            result[key].append(value)
    return result

def check(group_keyvalue):
    assert group_keyvalue([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])=={'yellow': [1, 3], 'blue': [2, 4], 'red': [1]}
    assert group_keyvalue([('python', 1), ('python', 2), ('python', 3), ('python', 4), ('python', 5)])=={'python': [1,2,3,4,5]}
    assert group_keyvalue([('yellow',100), ('blue', 200), ('yellow', 300), ('blue', 400), ('red', 100)])=={'yellow': [100, 300], 'blue': [200, 400], 'red': [100]}

check(group_keyvalue)
solution 0 passed True
Task 174 gens 10 solutions in cir 8
check_program: 
# Write a function to group a sequence of key-value pairs into a dictionary of lists.

def group_keyvalue(l):

    result = {}
    for key, value in l:
        if key not in result:
            result[key] = [value]
        else:
            result[key].append(value)
    return result

def check(group_keyvalue):
    assert group_keyvalue([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])=={'yellow': [1, 3], 'blue': [2, 4], 'red': [1]}
    assert group_keyvalue([('python', 1), ('python', 2), ('python', 3), ('python', 4), ('python', 5)])=={'python': [1,2,3,4,5]}
    assert group_keyvalue([('yellow',100), ('blue', 200), ('yellow', 300), ('blue', 400), ('red', 100)])=={'yellow': [100, 300], 'blue': [200, 400], 'red': [100]}

check(group_keyvalue)
solution 0 passed True
Task 174 gens 10 solutions in cir 9
check_program: 
# Write a function to group a sequence of key-value pairs into a dictionary of lists.

def group_keyvalue(l):

    result = {}
    for key, value in l:
        if key in result:
            result[key].append(value)
        else:
            result[key] = [value]
    return result

def check(group_keyvalue):
    assert group_keyvalue([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])=={'yellow': [1, 3], 'blue': [2, 4], 'red': [1]}
    assert group_keyvalue([('python', 1), ('python', 2), ('python', 3), ('python', 4), ('python', 5)])=={'python': [1,2,3,4,5]}
    assert group_keyvalue([('yellow',100), ('blue', 200), ('yellow', 300), ('blue', 400), ('red', 100)])=={'yellow': [100, 300], 'blue': [200, 400], 'red': [100]}

check(group_keyvalue)
solution 0 passed True
Task 174 gens 10 solutions in cir 10
check_program: 
# Write a function to group a sequence of key-value pairs into a dictionary of lists.

def group_keyvalue(l):

    result = {}
    for key, value in l:
        if key in result:
            result[key].append(value)
        else:
            result[key] = [value]
    return result

def check(group_keyvalue):
    assert group_keyvalue([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])=={'yellow': [1, 3], 'blue': [2, 4], 'red': [1]}
    assert group_keyvalue([('python', 1), ('python', 2), ('python', 3), ('python', 4), ('python', 5)])=={'python': [1,2,3,4,5]}
    assert group_keyvalue([('yellow',100), ('blue', 200), ('yellow', 300), ('blue', 400), ('red', 100)])=={'yellow': [100, 300], 'blue': [200, 400], 'red': [100]}

check(group_keyvalue)
solution 0 passed True
Task 406 gens 1 solutions in cir 0
check_program: 
# Write a python function to find the parity of a given number.

def find_Parity(x):

    if x % 2 == 0:
        return 0
    else:
        return 1

def check(find_Parity):
    assert find_Parity(12) == "Even Parity"
    assert find_Parity(7) == "Odd Parity"
    assert find_Parity(10) == "Even Parity"

check(find_Parity)
solution 0 passed False
Task 406 gens 3 solutions in cir 1
check_program: 
# Write a python function to find the parity of a given number.

def find_Parity(x):

    return x % 2

def check(find_Parity):
    assert find_Parity(12) == "Even Parity"
    assert find_Parity(7) == "Odd Parity"
    assert find_Parity(10) == "Even Parity"

check(find_Parity)
solution 0 passed False
Task 406 gens 10 solutions in cir 2
check_program: 
# Write a python function to find the parity of a given number.

def find_Parity(x):

    return (x % 2)

def check(find_Parity):
    assert find_Parity(12) == "Even Parity"
    assert find_Parity(7) == "Odd Parity"
    assert find_Parity(10) == "Even Parity"

check(find_Parity)
solution 0 passed False
Task 406 gens 10 solutions in cir 3
check_program: 
# Write a python function to find the parity of a given number.

def find_Parity(x):

    import math
    if x == 0:
        return 0
    elif x % 2 == 0:
        return 1
    elif x % 2 == 1:
        return 1
    else:
        return 0

def check(find_Parity):
    assert find_Parity(12) == "Even Parity"
    assert find_Parity(7) == "Odd Parity"
    assert find_Parity(10) == "Even Parity"

check(find_Parity)
solution 0 passed False
Task 406 gens 10 solutions in cir 4
check_program: 
# Write a python function to find the parity of a given number.

def find_Parity(x):

    return int(x % 2)

def check(find_Parity):
    assert find_Parity(12) == "Even Parity"
    assert find_Parity(7) == "Odd Parity"
    assert find_Parity(10) == "Even Parity"

check(find_Parity)
solution 0 passed False
Task 302 gens 1 solutions in cir 0
check_program: 
# Write a python function to find the most significant bit number which is also a set bit.

def set_Bit_Number(n):

    return int(n & -(n >> 1))

def check(set_Bit_Number):
    assert set_Bit_Number(6) == 4
    assert set_Bit_Number(10) == 8
    assert set_Bit_Number(18) == 16

check(set_Bit_Number)
solution 0 passed False
Task 302 gens 6 solutions in cir 1
check_program: 
# Write a python function to find the most significant bit number which is also a set bit.

def set_Bit_Number(n):

    return int(n & -(n >> 1))

def check(set_Bit_Number):
    assert set_Bit_Number(6) == 4
    assert set_Bit_Number(10) == 8
    assert set_Bit_Number(18) == 16

check(set_Bit_Number)
solution 0 passed False
Task 302 gens 10 solutions in cir 2
check_program: 
# Write a python function to find the most significant bit number which is also a set bit.

def set_Bit_Number(n):

    return int(n & -(n >> 1))

def check(set_Bit_Number):
    assert set_Bit_Number(6) == 4
    assert set_Bit_Number(10) == 8
    assert set_Bit_Number(18) == 16

check(set_Bit_Number)
solution 0 passed False
Task 302 gens 10 solutions in cir 3
check_program: 
# Write a python function to find the most significant bit number which is also a set bit.

def set_Bit_Number(n):

    return n & (-n)

def check(set_Bit_Number):
    assert set_Bit_Number(6) == 4
    assert set_Bit_Number(10) == 8
    assert set_Bit_Number(18) == 16

check(set_Bit_Number)
solution 0 passed False
Task 302 gens 10 solutions in cir 4
check_program: 
# Write a python function to find the most significant bit number which is also a set bit.

def set_Bit_Number(n):

    return n & ~(n - 1)

def check(set_Bit_Number):
    assert set_Bit_Number(6) == 4
    assert set_Bit_Number(10) == 8
    assert set_Bit_Number(18) == 16

check(set_Bit_Number)
solution 0 passed False
Task 302 gens 10 solutions in cir 5
check_program: 
# Write a python function to find the most significant bit number which is also a set bit.

def set_Bit_Number(n):

    msb_position = (n - 1) // 2
    return n & ((1 << msb_position) - 1)

def check(set_Bit_Number):
    assert set_Bit_Number(6) == 4
    assert set_Bit_Number(10) == 8
    assert set_Bit_Number(18) == 16

check(set_Bit_Number)
solution 0 passed False
Task 302 gens 10 solutions in cir 6
check_program: 
# Write a python function to find the most significant bit number which is also a set bit.

def set_Bit_Number(n):

    msb_position = (n - 1) // 2
    return n & ((1 << msb_position) - 1)

def check(set_Bit_Number):
    assert set_Bit_Number(6) == 4
    assert set_Bit_Number(10) == 8
    assert set_Bit_Number(18) == 16

check(set_Bit_Number)
solution 0 passed False
Task 302 gens 10 solutions in cir 7
check_program: 
# Write a python function to find the most significant bit number which is also a set bit.

def set_Bit_Number(n):

    msb_position = int((n-1) / 2)
    return n & (2**msb_position - 1)

def check(set_Bit_Number):
    assert set_Bit_Number(6) == 4
    assert set_Bit_Number(10) == 8
    assert set_Bit_Number(18) == 16

check(set_Bit_Number)
solution 0 passed False
Task 302 gens 10 solutions in cir 8
check_program: 
# Write a python function to find the most significant bit number which is also a set bit.

def set_Bit_Number(n):

    msb_position = int((n-1) / 2)
    return n & (2**msb_position - 1)

def check(set_Bit_Number):
    assert set_Bit_Number(6) == 4
    assert set_Bit_Number(10) == 8
    assert set_Bit_Number(18) == 16

check(set_Bit_Number)
solution 0 passed False
Task 302 gens 10 solutions in cir 9
check_program: 
# Write a python function to find the most significant bit number which is also a set bit.

def set_Bit_Number(n):

    msb_position = (n - 1) // 2
    if n == 0:
        return 0
    else:
        return n & (2 ** msb_position - 1)

def check(set_Bit_Number):
    assert set_Bit_Number(6) == 4
    assert set_Bit_Number(10) == 8
    assert set_Bit_Number(18) == 16

check(set_Bit_Number)
solution 0 passed False
Task 302 gens 10 solutions in cir 10
check_program: 
# Write a python function to find the most significant bit number which is also a set bit.

def set_Bit_Number(n):

    msb_position = (n - 1) // 2
    if n == 0:
        return 0
    else:
        return n & (2 ** msb_position - 1)

def check(set_Bit_Number):
    assert set_Bit_Number(6) == 4
    assert set_Bit_Number(10) == 8
    assert set_Bit_Number(18) == 16

check(set_Bit_Number)
solution 0 passed False
Task 422 gens 1 solutions in cir 0
check_program: 
# Write a python function to find the average of cubes of first n natural numbers.

def find_Average_Of_Cube(n):

    sum_of_cubes = 0
    for i in range(1,n+1):
        sum_of_cubes += i**3
    average = sum_of_cubes/n
    return average

def check(find_Average_Of_Cube):
    assert find_Average_Of_Cube(2) == 4.5
    assert find_Average_Of_Cube(3) == 12
    assert find_Average_Of_Cube(1) == 1

check(find_Average_Of_Cube)
solution 0 passed True
Task 422 gens 10 solutions in cir 1
check_program: 
# Write a python function to find the average of cubes of first n natural numbers.

def find_Average_Of_Cube(n):

    sum = 0
    for i in range(1,n+1):
        sum += i**3
    avg = sum/n
    return avg

def check(find_Average_Of_Cube):
    assert find_Average_Of_Cube(2) == 4.5
    assert find_Average_Of_Cube(3) == 12
    assert find_Average_Of_Cube(1) == 1

check(find_Average_Of_Cube)
solution 0 passed True
Task 422 gens 10 solutions in cir 2
check_program: 
# Write a python function to find the average of cubes of first n natural numbers.

def find_Average_Of_Cube(n):

    return sum(range(1,n+1)**3) / n

def check(find_Average_Of_Cube):
    assert find_Average_Of_Cube(2) == 4.5
    assert find_Average_Of_Cube(3) == 12
    assert find_Average_Of_Cube(1) == 1

check(find_Average_Of_Cube)
solution 0 passed False
Task 422 gens 10 solutions in cir 3
check_program: 
# Write a python function to find the average of cubes of first n natural numbers.

def find_Average_Of_Cube(n):

    return sum(int(x)**3 for x in str(n))

def check(find_Average_Of_Cube):
    assert find_Average_Of_Cube(2) == 4.5
    assert find_Average_Of_Cube(3) == 12
    assert find_Average_Of_Cube(1) == 1

check(find_Average_Of_Cube)
solution 0 passed False
Task 422 gens 10 solutions in cir 4
check_program: 
# Write a python function to find the average of cubes of first n natural numbers.

def find_Average_Of_Cube(n):

    return sum(int(x)**3 for x in str(n))

def check(find_Average_Of_Cube):
    assert find_Average_Of_Cube(2) == 4.5
    assert find_Average_Of_Cube(3) == 12
    assert find_Average_Of_Cube(1) == 1

check(find_Average_Of_Cube)
solution 0 passed False
Task 422 gens 10 solutions in cir 5
check_program: 
# Write a python function to find the average of cubes of first n natural numbers.

def find_Average_Of_Cube(n):

    return sum(int(x)**3 for x in str(n))

def check(find_Average_Of_Cube):
    assert find_Average_Of_Cube(2) == 4.5
    assert find_Average_Of_Cube(3) == 12
    assert find_Average_Of_Cube(1) == 1

check(find_Average_Of_Cube)
solution 0 passed False
Task 422 gens 10 solutions in cir 6
check_program: 
# Write a python function to find the average of cubes of first n natural numbers.

def find_Average_Of_Cube(n):

    return sum([int(n)**3 for i in range(1,n+1)]) / n if n > 0 else 0

def check(find_Average_Of_Cube):
    assert find_Average_Of_Cube(2) == 4.5
    assert find_Average_Of_Cube(3) == 12
    assert find_Average_Of_Cube(1) == 1

check(find_Average_Of_Cube)
solution 0 passed False
Task 422 gens 10 solutions in cir 7
check_program: 
# Write a python function to find the average of cubes of first n natural numbers.

def find_Average_Of_Cube(n):

    return sum(int(x)**3 for x in str(n))

def check(find_Average_Of_Cube):
    assert find_Average_Of_Cube(2) == 4.5
    assert find_Average_Of_Cube(3) == 12
    assert find_Average_Of_Cube(1) == 1

check(find_Average_Of_Cube)
solution 0 passed False
Task 422 gens 10 solutions in cir 8
check_program: 
# Write a python function to find the average of cubes of first n natural numbers.

def find_Average_Of_Cube(n):

    return sum(int(x)**3 for x in str(n))/len(str(n))

def check(find_Average_Of_Cube):
    assert find_Average_Of_Cube(2) == 4.5
    assert find_Average_Of_Cube(3) == 12
    assert find_Average_Of_Cube(1) == 1

check(find_Average_Of_Cube)
solution 0 passed False
Task 422 gens 10 solutions in cir 9
check_program: 
# Write a python function to find the average of cubes of first n natural numbers.

def find_Average_Of_Cube(n):

    return sum(int(x)**3 for x in str(n))/len(str(n))

def check(find_Average_Of_Cube):
    assert find_Average_Of_Cube(2) == 4.5
    assert find_Average_Of_Cube(3) == 12
    assert find_Average_Of_Cube(1) == 1

check(find_Average_Of_Cube)
solution 0 passed False
Task 422 gens 10 solutions in cir 10
check_program: 
# Write a python function to find the average of cubes of first n natural numbers.

def find_Average_Of_Cube(n):

    return sum([int(n)**3 for i in range(1,n+1)]) / n if n > 0 else 0

def check(find_Average_Of_Cube):
    assert find_Average_Of_Cube(2) == 4.5
    assert find_Average_Of_Cube(3) == 12
    assert find_Average_Of_Cube(1) == 1

check(find_Average_Of_Cube)
solution 0 passed False
Task 372 gens 1 solutions in cir 0
check_program: 
# Write a function to sort a given list of elements in ascending order using heap queue algorithm.
import heapq as hq
def heap_assending(nums):

    hq.heapify(nums)
    return nums

def check(heap_assending):
    assert heap_assending([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==[1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18]
    assert heap_assending([25, 35, 22, 85, 14, 65, 75, 25, 58])==[14, 22, 25, 25, 35, 58, 65, 75, 85]
    assert heap_assending([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]

check(heap_assending)
solution 0 passed False
Task 372 gens 2 solutions in cir 1
check_program: 
# Write a function to sort a given list of elements in ascending order using heap queue algorithm.
import heapq as hq
def heap_assending(nums):

    hq.heapify(nums)
    return nums

def check(heap_assending):
    assert heap_assending([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==[1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18]
    assert heap_assending([25, 35, 22, 85, 14, 65, 75, 25, 58])==[14, 22, 25, 25, 35, 58, 65, 75, 85]
    assert heap_assending([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]

check(heap_assending)
solution 0 passed False
Task 372 gens 6 solutions in cir 2
check_program: 
# Write a function to sort a given list of elements in ascending order using heap queue algorithm.
import heapq as hq
def heap_assending(nums):

    hq.heapify(nums)
    nums.sort()
    return nums

def check(heap_assending):
    assert heap_assending([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==[1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18]
    assert heap_assending([25, 35, 22, 85, 14, 65, 75, 25, 58])==[14, 22, 25, 25, 35, 58, 65, 75, 85]
    assert heap_assending([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]

check(heap_assending)
solution 0 passed True
Task 372 gens 10 solutions in cir 3
check_program: 
# Write a function to sort a given list of elements in ascending order using heap queue algorithm.
import heapq as hq
def heap_assending(nums):

    hq.heapify(nums)
    nums.sort()
    return nums

def check(heap_assending):
    assert heap_assending([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==[1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18]
    assert heap_assending([25, 35, 22, 85, 14, 65, 75, 25, 58])==[14, 22, 25, 25, 35, 58, 65, 75, 85]
    assert heap_assending([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]

check(heap_assending)
solution 0 passed True
Task 372 gens 10 solutions in cir 4
check_program: 
# Write a function to sort a given list of elements in ascending order using heap queue algorithm.
import heapq as hq
def heap_assending(nums):

    hq.heapify(nums)
    nums.sort(reverse=False)
    return nums

def check(heap_assending):
    assert heap_assending([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==[1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18]
    assert heap_assending([25, 35, 22, 85, 14, 65, 75, 25, 58])==[14, 22, 25, 25, 35, 58, 65, 75, 85]
    assert heap_assending([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]

check(heap_assending)
solution 0 passed True
Task 372 gens 10 solutions in cir 5
check_program: 
# Write a function to sort a given list of elements in ascending order using heap queue algorithm.
import heapq as hq
def heap_assending(nums):

    hq.heapify(nums)
    nums.sort(reverse=False)
    return nums

def check(heap_assending):
    assert heap_assending([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==[1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18]
    assert heap_assending([25, 35, 22, 85, 14, 65, 75, 25, 58])==[14, 22, 25, 25, 35, 58, 65, 75, 85]
    assert heap_assending([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]

check(heap_assending)
solution 0 passed True
Task 226 gens 1 solutions in cir 0
check_program: 
# Write a python function to remove the characters which have odd index values of a given string.

def odd_values_string(str):

    return ''.join([chr(i) for i in range(len(str)) if i % 2 != 0])

def check(odd_values_string):
    assert odd_values_string('abcdef') == 'ace'
    assert odd_values_string('python') == 'pto'
    assert odd_values_string('data') == 'dt'

check(odd_values_string)
solution 0 passed False
Task 226 gens 3 solutions in cir 1
check_program: 
# Write a python function to remove the characters which have odd index values of a given string.

def odd_values_string(str):

    return ''.join([chr(i) for i in range(len(s)) if i % 2 != 0])

def check(odd_values_string):
    assert odd_values_string('abcdef') == 'ace'
    assert odd_values_string('python') == 'pto'
    assert odd_values_string('data') == 'dt'

check(odd_values_string)
solution 0 passed False
Task 226 gens 8 solutions in cir 2
check_program: 
# Write a python function to remove the characters which have odd index values of a given string.

def odd_values_string(str):

    return ''.join([chr(i) for i in range(len(str)) if i % 2 != 0])

def check(odd_values_string):
    assert odd_values_string('abcdef') == 'ace'
    assert odd_values_string('python') == 'pto'
    assert odd_values_string('data') == 'dt'

check(odd_values_string)
solution 0 passed False
Task 226 gens 10 solutions in cir 3
check_program: 
# Write a python function to remove the characters which have odd index values of a given string.

def odd_values_string(str):

    if len(str) % 2 != 0:
        return ''.join([char for i, char in enumerate(str) if i % 2 != 0])
    else:
        return str

def check(odd_values_string):
    assert odd_values_string('abcdef') == 'ace'
    assert odd_values_string('python') == 'pto'
    assert odd_values_string('data') == 'dt'

check(odd_values_string)
solution 0 passed False
Task 226 gens 10 solutions in cir 4
check_program: 
# Write a python function to remove the characters which have odd index values of a given string.

def odd_values_string(str):

    if len(str) % 2 != 0:
        return ''.join([char for i, char in enumerate(str) if i % 2 != 0])
    else:
        return str

def check(odd_values_string):
    assert odd_values_string('abcdef') == 'ace'
    assert odd_values_string('python') == 'pto'
    assert odd_values_string('data') == 'dt'

check(odd_values_string)
solution 0 passed False
Task 226 gens 10 solutions in cir 5
check_program: 
# Write a python function to remove the characters which have odd index values of a given string.

def odd_values_string(str):

    result = ''
    for char in str:
        if char.isalnum():
            result += char
        else:
            result += char if char.islower() else char.upper()
    return result

def check(odd_values_string):
    assert odd_values_string('abcdef') == 'ace'
    assert odd_values_string('python') == 'pto'
    assert odd_values_string('data') == 'dt'

check(odd_values_string)
solution 0 passed False
Task 325 gens 1 solutions in cir 0
check_program: 
# Write a python function to find the minimum number of squares whose sum is equal to a given number.

def get_Min_Squares(n):

    min_squares = n
    while n % 2 == 0:
        n = n // 2
    return min_squares

def check(get_Min_Squares):
    assert get_Min_Squares(6) == 3
    assert get_Min_Squares(2) == 2
    assert get_Min_Squares(4) == 1

check(get_Min_Squares)
solution 0 passed False
Task 325 gens 9 solutions in cir 1
check_program: 
# Write a python function to find the minimum number of squares whose sum is equal to a given number.

def get_Min_Squares(n):

    count = 0
    while n > 0:
        n, remainder = divmod(n, 2)
        count += 1
    return count

def check(get_Min_Squares):
    assert get_Min_Squares(6) == 3
    assert get_Min_Squares(2) == 2
    assert get_Min_Squares(4) == 1

check(get_Min_Squares)
solution 0 passed False
Task 325 gens 10 solutions in cir 2
check_program: 
# Write a python function to find the minimum number of squares whose sum is equal to a given number.

def get_Min_Squares(n):

    count = 0
    while n > 0:
        n, remainder = divmod(n, 2)
        count += 1
    return count

def check(get_Min_Squares):
    assert get_Min_Squares(6) == 3
    assert get_Min_Squares(2) == 2
    assert get_Min_Squares(4) == 1

check(get_Min_Squares)
solution 0 passed False
Task 325 gens 10 solutions in cir 3
check_program: 
# Write a python function to find the minimum number of squares whose sum is equal to a given number.

def get_Min_Squares(n):

    return int(n/2)

def check(get_Min_Squares):
    assert get_Min_Squares(6) == 3
    assert get_Min_Squares(2) == 2
    assert get_Min_Squares(4) == 1

check(get_Min_Squares)
solution 0 passed False
Task 325 gens 10 solutions in cir 4
check_program: 
# Write a python function to find the minimum number of squares whose sum is equal to a given number.

def get_Min_Squares(n):

    count = 0
    for i in range(1,n//2+1):
        count += 1
    return count

def check(get_Min_Squares):
    assert get_Min_Squares(6) == 3
    assert get_Min_Squares(2) == 2
    assert get_Min_Squares(4) == 1

check(get_Min_Squares)
solution 0 passed False
Task 325 gens 10 solutions in cir 5
check_program: 
# Write a python function to find the minimum number of squares whose sum is equal to a given number.

def get_Min_Squares(n):

    count = 0
    for i in range(1,n//2+1):
        count += 1
    return count

def check(get_Min_Squares):
    assert get_Min_Squares(6) == 3
    assert get_Min_Squares(2) == 2
    assert get_Min_Squares(4) == 1

check(get_Min_Squares)
solution 0 passed False
Task 325 gens 10 solutions in cir 6
check_program: 
# Write a python function to find the minimum number of squares whose sum is equal to a given number.

def get_Min_Squares(n):

    count = 0
    if n <= 0:
        return count
    for i in range(1, n // 2 + 1):
        count += 1
    return count

def check(get_Min_Squares):
    assert get_Min_Squares(6) == 3
    assert get_Min_Squares(2) == 2
    assert get_Min_Squares(4) == 1

check(get_Min_Squares)
solution 0 passed False
Task 325 gens 10 solutions in cir 7
check_program: 
# Write a python function to find the minimum number of squares whose sum is equal to a given number.

def get_Min_Squares(n):

    count = 0
    for i in range(1, n // 2 + 1):
        count += 1
    return count

def check(get_Min_Squares):
    assert get_Min_Squares(6) == 3
    assert get_Min_Squares(2) == 2
    assert get_Min_Squares(4) == 1

check(get_Min_Squares)
solution 0 passed False
Task 325 gens 10 solutions in cir 8
check_program: 
# Write a python function to find the minimum number of squares whose sum is equal to a given number.

def get_Min_Squares(n):

    count = 0
    if n % 2 != 0:
        for i in range(1, n//2+1):
            count += 1
    else:
        for i in range(1, n//2+1):
            count += 1
    return count

def check(get_Min_Squares):
    assert get_Min_Squares(6) == 3
    assert get_Min_Squares(2) == 2
    assert get_Min_Squares(4) == 1

check(get_Min_Squares)
solution 0 passed False
Task 325 gens 10 solutions in cir 9
check_program: 
# Write a python function to find the minimum number of squares whose sum is equal to a given number.

def get_Min_Squares(n):

    count = 0
    if n % 2 != 0:
        for i in range(1, n//2+1):
            count += 1
    else:
        for i in range(1, n//2+1):
            count += 1
    return count

def check(get_Min_Squares):
    assert get_Min_Squares(6) == 3
    assert get_Min_Squares(2) == 2
    assert get_Min_Squares(4) == 1

check(get_Min_Squares)
solution 0 passed False
Task 325 gens 10 solutions in cir 10
check_program: 
# Write a python function to find the minimum number of squares whose sum is equal to a given number.

def get_Min_Squares(n):

    count = 0
    if n <= 0:
        return count
    for i in range(1, n // 2 + 1):
        count += 1
    return count

def check(get_Min_Squares):
    assert get_Min_Squares(6) == 3
    assert get_Min_Squares(2) == 2
    assert get_Min_Squares(4) == 1

check(get_Min_Squares)
solution 0 passed False
Task 68 gens 1 solutions in cir 0
check_program: 
# Write a python function to check whether the given array is monotonic or not.

def is_Monotonic(A):

    if len(A) < 2:
        return True
    else:
        return A[0] <= A[1]

def check(is_Monotonic):
    assert is_Monotonic([6, 5, 4, 4]) == True
    assert is_Monotonic([1, 2, 2, 3]) == True
    assert is_Monotonic([1, 3, 2]) == False

check(is_Monotonic)
solution 0 passed False
Task 68 gens 7 solutions in cir 1
check_program: 
# Write a python function to check whether the given array is monotonic or not.

def is_Monotonic(A):

    if len(A) < 2:
        return True
    else:
        return A[0] <= A[1]

def check(is_Monotonic):
    assert is_Monotonic([6, 5, 4, 4]) == True
    assert is_Monotonic([1, 2, 2, 3]) == True
    assert is_Monotonic([1, 3, 2]) == False

check(is_Monotonic)
solution 0 passed False
Task 68 gens 10 solutions in cir 2
check_program: 
# Write a python function to check whether the given array is monotonic or not.

def is_Monotonic(A):

    if len(A) < 2:
        return True
    else:
        return A[0] <= A[1] or A[0] == A[1]

def check(is_Monotonic):
    assert is_Monotonic([6, 5, 4, 4]) == True
    assert is_Monotonic([1, 2, 2, 3]) == True
    assert is_Monotonic([1, 3, 2]) == False

check(is_Monotonic)
solution 0 passed False
Task 68 gens 10 solutions in cir 3
check_program: 
# Write a python function to check whether the given array is monotonic or not.

def is_Monotonic(A):

    if len(A) < 2:
        return True
    else:
        return A[0] <= A[1]

def check(is_Monotonic):
    assert is_Monotonic([6, 5, 4, 4]) == True
    assert is_Monotonic([1, 2, 2, 3]) == True
    assert is_Monotonic([1, 3, 2]) == False

check(is_Monotonic)
solution 0 passed False
Task 449 gens 1 solutions in cir 0
check_program: 
# Write a python function to check whether the triangle is valid or not if 3 points are given.

def check_Triangle(x1,y1,x2,y2,x3,y3):

    def check_triangle(x1, y1, x2, y2, x3, y3):
        if (x1 > x2) and (x2 > x3) and (y1 > y2) and (y2 > y3) and (x1 < x3):
            return True
        else:
            return False

def check(check_Triangle):
    assert check_Triangle(1,5,2,5,4,6) == 'Yes'
    assert check_Triangle(1,1,1,4,1,5) == 'No'
    assert check_Triangle(1,1,1,1,1,1) == 'No'

check(check_Triangle)
solution 0 passed False
Task 449 gens 9 solutions in cir 1
check_program: 
# Write a python function to check whether the triangle is valid or not if 3 points are given.

def check_Triangle(x1,y1,x2,y2,x3,y3):

    return (x1 > x2 and x2 > x3 and y1 > y2 and y2 > y3 and x1 < x3)

def check(check_Triangle):
    assert check_Triangle(1,5,2,5,4,6) == 'Yes'
    assert check_Triangle(1,1,1,4,1,5) == 'No'
    assert check_Triangle(1,1,1,1,1,1) == 'No'

check(check_Triangle)
solution 0 passed False
Task 449 gens 10 solutions in cir 2
check_program: 
# Write a python function to check whether the triangle is valid or not if 3 points are given.

def check_Triangle(x1,y1,x2,y2,x3,y3):

    return (x1 > x2 and x2 > x3 and y1 > y2 and y2 > y3 and x1 < x3)

def check(check_Triangle):
    assert check_Triangle(1,5,2,5,4,6) == 'Yes'
    assert check_Triangle(1,1,1,4,1,5) == 'No'
    assert check_Triangle(1,1,1,1,1,1) == 'No'

check(check_Triangle)
solution 0 passed False
Task 449 gens 10 solutions in cir 3
check_program: 
# Write a python function to check whether the triangle is valid or not if 3 points are given.

def check_Triangle(x1,y1,x2,y2,x3,y3):

    return (x1 > x2 and x2 > x3 and y1 > y2 and y2 > y3 and x1 < x3)

def check(check_Triangle):
    assert check_Triangle(1,5,2,5,4,6) == 'Yes'
    assert check_Triangle(1,1,1,4,1,5) == 'No'
    assert check_Triangle(1,1,1,1,1,1) == 'No'

check(check_Triangle)
solution 0 passed False
Task 468 gens 1 solutions in cir 0
check_program: 
# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.

def max_product(arr, n ):

    result = 0
    for i in range(n):
        if i == 0:
            result = arr[i]
        else:
            result = max(result, arr[i-1] * arr[i])
    return result

def check(max_product):
    assert max_product([3, 100, 4, 5, 150, 6], 6) == 45000 
    assert max_product([4, 42, 55, 68, 80], 5) == 50265600
    assert max_product([10, 22, 9, 33, 21, 50, 41, 60], 8) == 21780000 

check(max_product)
solution 0 passed False
Task 468 gens 8 solutions in cir 1
check_program: 
# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.

def max_product(arr, n ):

    result = 1
    for i in range(n):
        if i == 0:
            result = arr[i]
        else:
            result = max(result, arr[i-1] * arr[i])
    return result

def check(max_product):
    assert max_product([3, 100, 4, 5, 150, 6], 6) == 45000 
    assert max_product([4, 42, 55, 68, 80], 5) == 50265600
    assert max_product([10, 22, 9, 33, 21, 50, 41, 60], 8) == 21780000 

check(max_product)
solution 0 passed False
Task 468 gens 10 solutions in cir 2
check_program: 
# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.

def max_product(arr, n ):

    result = 0
    for i in range(n-1):
        current = arr[i]
        while current > 0:
            result = max(result, current * (n - i - 1))
            current = current / 10
    return result

def check(max_product):
    assert max_product([3, 100, 4, 5, 150, 6], 6) == 45000 
    assert max_product([4, 42, 55, 68, 80], 5) == 50265600
    assert max_product([10, 22, 9, 33, 21, 50, 41, 60], 8) == 21780000 

check(max_product)
solution 0 passed False
Task 468 gens 10 solutions in cir 3
check_program: 
# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.

def max_product(arr, n ):

    result = 1
    for i in range(n):
        if i == 0:
            result = arr[i]
        else:
            result = max(result, arr[i] * arr[i-1])
    return result

def check(max_product):
    assert max_product([3, 100, 4, 5, 150, 6], 6) == 45000 
    assert max_product([4, 42, 55, 68, 80], 5) == 50265600
    assert max_product([10, 22, 9, 33, 21, 50, 41, 60], 8) == 21780000 

check(max_product)
solution 0 passed False
Task 468 gens 10 solutions in cir 4
check_program: 
# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.

def max_product(arr, n ):

    result = 1
    for i in range(n):
        if i == 0:
            result = arr[i]
        else:
            result = max(result, arr[i] * arr[i-1])
    return result

def check(max_product):
    assert max_product([3, 100, 4, 5, 150, 6], 6) == 45000 
    assert max_product([4, 42, 55, 68, 80], 5) == 50265600
    assert max_product([10, 22, 9, 33, 21, 50, 41, 60], 8) == 21780000 

check(max_product)
solution 0 passed False
Task 321 gens 1 solutions in cir 0
check_program: 
# Write a function to find the demlo number for the given number.

def find_demlo(s):

    return None

def check(find_demlo):
    assert find_demlo("111111") == '12345654321'
    assert find_demlo("1111") == '1234321'
    assert find_demlo("13333122222") == '123456789101110987654321'

check(find_demlo)
solution 0 passed False
Task 321 gens 10 solutions in cir 1
check_program: 
# Write a function to find the demlo number for the given number.

def find_demlo(s):

    if s.startswith('-'):
        return int(s[1:])
    elif s.endswith('+'):
        return int(s[:-1])
    elif s.endswith('-'):
        return -int(s[:-1])
    elif s.endswith('+'):
        return -1
    else:
        return None

def check(find_demlo):
    assert find_demlo("111111") == '12345654321'
    assert find_demlo("1111") == '1234321'
    assert find_demlo("13333122222") == '123456789101110987654321'

check(find_demlo)
solution 0 passed False
Task 321 gens 10 solutions in cir 2
check_program: 
# Write a function to find the demlo number for the given number.

def find_demlo(s):

    import re
    if s.startswith("-") or s.endswith("-"):
        return find_demlo(s[1:-1])
    digits = [int(d) for d in re.findall(r"\d+", s)]
    if len(digits) == 1:
        return str(digits[0])
    result = ""
    for i in range(len(digits)-1):
        if digits[i] > digits[i+1]:
            result = "-" + result
        else:
            result = digits[i] + result
    return result

def check(find_demlo):
    assert find_demlo("111111") == '12345654321'
    assert find_demlo("1111") == '1234321'
    assert find_demlo("13333122222") == '123456789101110987654321'

check(find_demlo)
solution 0 passed False
Task 321 gens 10 solutions in cir 3
check_program: 
# Write a function to find the demlo number for the given number.

def find_demlo(s):

    import re
    if s.startswith("-") or s.endswith("-"):
        return find_demlo(s[1:-1])
    digits = [int(d) for d in re.findall(r"\d+", s)]
    if len(digits) == 1:
        return str(digits[0])
    result = ""
    for i in range(len(digits)-1):
        if digits[i] > digits[i+1]:
            result = "-" + result
        else:
            result = digits[i] + result
    return result

def check(find_demlo):
    assert find_demlo("111111") == '12345654321'
    assert find_demlo("1111") == '1234321'
    assert find_demlo("13333122222") == '123456789101110987654321'

check(find_demlo)
solution 0 passed False
Task 410 gens 1 solutions in cir 0
check_program: 
# Write a function to find the minimum value in a given heterogeneous list.

def min_val(listval):

    return min(listval)

def check(min_val):
    assert min_val(['Python', 3, 2, 4, 5, 'version'])==2
    assert min_val(['Python', 15, 20, 25])==15
    assert min_val(['Python', 30, 20, 40, 50, 'version'])==20

check(min_val)
solution 0 passed False
Task 410 gens 4 solutions in cir 1
check_program: 
# Write a function to find the minimum value in a given heterogeneous list.

def min_val(listval):

    if len(lst) == 0:
        return None
    else:
        return min(lst)

def check(min_val):
    assert min_val(['Python', 3, 2, 4, 5, 'version'])==2
    assert min_val(['Python', 15, 20, 25])==15
    assert min_val(['Python', 30, 20, 40, 50, 'version'])==20

check(min_val)
solution 0 passed False
Task 410 gens 10 solutions in cir 2
check_program: 
# Write a function to find the minimum value in a given heterogeneous list.

def min_val(listval):

    return sorted(lst, reverse=True)[0]

def check(min_val):
    assert min_val(['Python', 3, 2, 4, 5, 'version'])==2
    assert min_val(['Python', 15, 20, 25])==15
    assert min_val(['Python', 30, 20, 40, 50, 'version'])==20

check(min_val)
solution 0 passed False
Task 410 gens 10 solutions in cir 3
check_program: 
# Write a function to find the minimum value in a given heterogeneous list.

def min_val(listval):

    return min(lst, key=lambda x: x if len(x) == 1 else -1)

def check(min_val):
    assert min_val(['Python', 3, 2, 4, 5, 'version'])==2
    assert min_val(['Python', 15, 20, 25])==15
    assert min_val(['Python', 30, 20, 40, 50, 'version'])==20

check(min_val)
solution 0 passed False
Task 410 gens 10 solutions in cir 4
check_program: 
# Write a function to find the minimum value in a given heterogeneous list.

def min_val(listval):

    return min(filter(lambda x: x >= -1 and x <= 12, listval))

def check(min_val):
    assert min_val(['Python', 3, 2, 4, 5, 'version'])==2
    assert min_val(['Python', 15, 20, 25])==15
    assert min_val(['Python', 30, 20, 40, 50, 'version'])==20

check(min_val)
solution 0 passed False
Task 263 gens 1 solutions in cir 0
check_program: 
# Write a function to merge two dictionaries.

def merge_dict(d1,d2):

    merged_dict = {}
    for key, value in d1.items():
        merged_dict[key] = value
    for key, value in d2.items():
        merged_dict[key] = value
    return merged_dict

def check(merge_dict):
    assert merge_dict({'a': 100, 'b': 200},{'x': 300, 'y': 200})=={'x': 300, 'y': 200, 'a': 100, 'b': 200}
    assert merge_dict({'a':900,'b':900,'d':900},{'a':900,'b':900,'d':900})=={'a':900,'b':900,'d':900,'a':900,'b':900,'d':900}
    assert merge_dict({'a':10,'b':20},{'x':30,'y':40})=={'x':30,'y':40,'a':10,'b':20}

check(merge_dict)
solution 0 passed True
Task 263 gens 10 solutions in cir 1
check_program: 
# Write a function to merge two dictionaries.

def merge_dict(d1,d2):

    result = {}
    for key in d1:
        result[key] = d1[key]
    for key in d2:
        result[key] = d2[key]
    return result

def check(merge_dict):
    assert merge_dict({'a': 100, 'b': 200},{'x': 300, 'y': 200})=={'x': 300, 'y': 200, 'a': 100, 'b': 200}
    assert merge_dict({'a':900,'b':900,'d':900},{'a':900,'b':900,'d':900})=={'a':900,'b':900,'d':900,'a':900,'b':900,'d':900}
    assert merge_dict({'a':10,'b':20},{'x':30,'y':40})=={'x':30,'y':40,'a':10,'b':20}

check(merge_dict)
solution 0 passed True
Task 263 gens 10 solutions in cir 2
check_program: 
# Write a function to merge two dictionaries.

def merge_dict(d1,d2):

    result = {}
    for key in d1:
        result[key] = d1[key]
    for key in d2:
        result[key] = d2[key]
    return result

def check(merge_dict):
    assert merge_dict({'a': 100, 'b': 200},{'x': 300, 'y': 200})=={'x': 300, 'y': 200, 'a': 100, 'b': 200}
    assert merge_dict({'a':900,'b':900,'d':900},{'a':900,'b':900,'d':900})=={'a':900,'b':900,'d':900,'a':900,'b':900,'d':900}
    assert merge_dict({'a':10,'b':20},{'x':30,'y':40})=={'x':30,'y':40,'a':10,'b':20}

check(merge_dict)
solution 0 passed True
Task 263 gens 10 solutions in cir 3
check_program: 
# Write a function to merge two dictionaries.

def merge_dict(d1,d2):

    result = {}
    for key in d1:
        result[key] = d1[key]
    for key in d2:
        result[key] = d2[key]
    return result

def check(merge_dict):
    assert merge_dict({'a': 100, 'b': 200},{'x': 300, 'y': 200})=={'x': 300, 'y': 200, 'a': 100, 'b': 200}
    assert merge_dict({'a':900,'b':900,'d':900},{'a':900,'b':900,'d':900})=={'a':900,'b':900,'d':900,'a':900,'b':900,'d':900}
    assert merge_dict({'a':10,'b':20},{'x':30,'y':40})=={'x':30,'y':40,'a':10,'b':20}

check(merge_dict)
solution 0 passed True
Task 315 gens 1 solutions in cir 0
check_program: 
# Write a python function to find the first maximum length of even word.

def find_Max_Len_Even(str):

    max_len = 0
    for i in range(len(str)):
        if str[i] == 'E' and i % 2 == 0:
            max_len = i
    return max_len

def check(find_Max_Len_Even):
    assert find_Max_Len_Even("python language") == "language"
    assert find_Max_Len_Even("maximum even length") == "length"
    assert find_Max_Len_Even("eve") == "-1"

check(find_Max_Len_Even)
solution 0 passed False
Task 315 gens 10 solutions in cir 1
check_program: 
# Write a python function to find the first maximum length of even word.

def find_Max_Len_Even(str):

    max_len = 0
    for i in range(len(str)):
        if str[i] == 'E' and i % 2 == 0:
            max_len = i
    return max_len

def check(find_Max_Len_Even):
    assert find_Max_Len_Even("python language") == "language"
    assert find_Max_Len_Even("maximum even length") == "length"
    assert find_Max_Len_Even("eve") == "-1"

check(find_Max_Len_Even)
solution 0 passed False
Task 315 gens 10 solutions in cir 2
check_program: 
# Write a python function to find the first maximum length of even word.

def find_Max_Len_Even(str):

    even_chars = set()
    max_len = 0
    for i in range(len(str)):
        if str[i] in even_chars:
            max_len = i
        even_chars.add(str[i])
    return max_len

def check(find_Max_Len_Even):
    assert find_Max_Len_Even("python language") == "language"
    assert find_Max_Len_Even("maximum even length") == "length"
    assert find_Max_Len_Even("eve") == "-1"

check(find_Max_Len_Even)
solution 0 passed False
Task 315 gens 10 solutions in cir 3
check_program: 
# Write a python function to find the first maximum length of even word.

def find_Max_Len_Even(str):

    max_len = 0
    even = ''
    for i, c in enumerate(str):
        if c == 'E' or c == 'e':
            max_len = i
        elif c in {'a','e','A','E'}:
            even += c
    return len(even) if even == 'EE' else max_len

def check(find_Max_Len_Even):
    assert find_Max_Len_Even("python language") == "language"
    assert find_Max_Len_Even("maximum even length") == "length"
    assert find_Max_Len_Even("eve") == "-1"

check(find_Max_Len_Even)
solution 0 passed False
Task 459 gens 1 solutions in cir 0
check_program: 
# Write a function to remove uppercase substrings from a given string by using regex.
import re
def remove_uppercase(str1):

    return re.sub(r'[A-Z]', '', str1)

def check(remove_uppercase):
    assert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'
    assert remove_uppercase('wAtchTheinTernEtrAdIo') == 'wtchheinerntrdo'
    assert remove_uppercase('VoicESeaRchAndreComMendaTionS') == 'oiceachndreomendaion'

check(remove_uppercase)
solution 0 passed True
Task 459 gens 1 solutions in cir 1
check_program: 
# Write a function to remove uppercase substrings from a given string by using regex.
import re
def remove_uppercase(str1):

    return re.sub(r'[A-Z]', '', str1)

def check(remove_uppercase):
    assert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'
    assert remove_uppercase('wAtchTheinTernEtrAdIo') == 'wtchheinerntrdo'
    assert remove_uppercase('VoicESeaRchAndreComMendaTionS') == 'oiceachndreomendaion'

check(remove_uppercase)
solution 0 passed True
Task 459 gens 1 solutions in cir 2
check_program: 
# Write a function to remove uppercase substrings from a given string by using regex.
import re
def remove_uppercase(str1):

    return re.sub(r'[A-Z]', '', str1)

def check(remove_uppercase):
    assert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'
    assert remove_uppercase('wAtchTheinTernEtrAdIo') == 'wtchheinerntrdo'
    assert remove_uppercase('VoicESeaRchAndreComMendaTionS') == 'oiceachndreomendaion'

check(remove_uppercase)
solution 0 passed True
Task 459 gens 1 solutions in cir 3
check_program: 
# Write a function to remove uppercase substrings from a given string by using regex.
import re
def remove_uppercase(str1):

    return re.sub(r'[A-Z]', '', str1)

def check(remove_uppercase):
    assert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'
    assert remove_uppercase('wAtchTheinTernEtrAdIo') == 'wtchheinerntrdo'
    assert remove_uppercase('VoicESeaRchAndreComMendaTionS') == 'oiceachndreomendaion'

check(remove_uppercase)
solution 0 passed True
Task 459 gens 1 solutions in cir 4
check_program: 
# Write a function to remove uppercase substrings from a given string by using regex.
import re
def remove_uppercase(str1):

    return re.sub(r'[A-Z]', '', str1)

def check(remove_uppercase):
    assert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'
    assert remove_uppercase('wAtchTheinTernEtrAdIo') == 'wtchheinerntrdo'
    assert remove_uppercase('VoicESeaRchAndreComMendaTionS') == 'oiceachndreomendaion'

check(remove_uppercase)
solution 0 passed True
Task 459 gens 1 solutions in cir 5
check_program: 
# Write a function to remove uppercase substrings from a given string by using regex.
import re
def remove_uppercase(str1):

    return re.sub(r'[A-Z]', '', str1)

def check(remove_uppercase):
    assert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'
    assert remove_uppercase('wAtchTheinTernEtrAdIo') == 'wtchheinerntrdo'
    assert remove_uppercase('VoicESeaRchAndreComMendaTionS') == 'oiceachndreomendaion'

check(remove_uppercase)
solution 0 passed True
Task 459 gens 1 solutions in cir 6
check_program: 
# Write a function to remove uppercase substrings from a given string by using regex.
import re
def remove_uppercase(str1):

    return re.sub(r'[A-Z]', '', str1)

def check(remove_uppercase):
    assert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'
    assert remove_uppercase('wAtchTheinTernEtrAdIo') == 'wtchheinerntrdo'
    assert remove_uppercase('VoicESeaRchAndreComMendaTionS') == 'oiceachndreomendaion'

check(remove_uppercase)
solution 0 passed True
Task 459 gens 1 solutions in cir 7
check_program: 
# Write a function to remove uppercase substrings from a given string by using regex.
import re
def remove_uppercase(str1):

    return re.sub(r'[A-Z]', '', str1)

def check(remove_uppercase):
    assert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'
    assert remove_uppercase('wAtchTheinTernEtrAdIo') == 'wtchheinerntrdo'
    assert remove_uppercase('VoicESeaRchAndreComMendaTionS') == 'oiceachndreomendaion'

check(remove_uppercase)
solution 0 passed True
Task 459 gens 1 solutions in cir 8
check_program: 
# Write a function to remove uppercase substrings from a given string by using regex.
import re
def remove_uppercase(str1):

    return re.sub(r'[A-Z]', '', str1)

def check(remove_uppercase):
    assert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'
    assert remove_uppercase('wAtchTheinTernEtrAdIo') == 'wtchheinerntrdo'
    assert remove_uppercase('VoicESeaRchAndreComMendaTionS') == 'oiceachndreomendaion'

check(remove_uppercase)
solution 0 passed True
Task 459 gens 1 solutions in cir 9
check_program: 
# Write a function to remove uppercase substrings from a given string by using regex.
import re
def remove_uppercase(str1):

    return re.sub(r'[A-Z]', '', str1)

def check(remove_uppercase):
    assert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'
    assert remove_uppercase('wAtchTheinTernEtrAdIo') == 'wtchheinerntrdo'
    assert remove_uppercase('VoicESeaRchAndreComMendaTionS') == 'oiceachndreomendaion'

check(remove_uppercase)
solution 0 passed True
Task 459 gens 1 solutions in cir 10
check_program: 
# Write a function to remove uppercase substrings from a given string by using regex.
import re
def remove_uppercase(str1):

    return re.sub(r'[A-Z]', '', str1)

def check(remove_uppercase):
    assert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'
    assert remove_uppercase('wAtchTheinTernEtrAdIo') == 'wtchheinerntrdo'
    assert remove_uppercase('VoicESeaRchAndreComMendaTionS') == 'oiceachndreomendaion'

check(remove_uppercase)
solution 0 passed True
Task 83 gens 1 solutions in cir 0
check_program: 
# Write a python function to find the character made by adding all the characters of the given string.

def get_Char(strr):

    return ''.join(strr)

def check(get_Char):
    assert get_Char("abc") == "f"
    assert get_Char("gfg") == "t"
    assert get_Char("ab") == "c"

check(get_Char)
solution 0 passed False
Task 83 gens 3 solutions in cir 1
check_program: 
# Write a python function to find the character made by adding all the characters of the given string.

def get_Char(strr):

    return ''.join(strr)

def check(get_Char):
    assert get_Char("abc") == "f"
    assert get_Char("gfg") == "t"
    assert get_Char("ab") == "c"

check(get_Char)
solution 0 passed False
Task 83 gens 10 solutions in cir 2
check_program: 
# Write a python function to find the character made by adding all the characters of the given string.

def get_Char(strr):

    return ''.join(strr)

def check(get_Char):
    assert get_Char("abc") == "f"
    assert get_Char("gfg") == "t"
    assert get_Char("ab") == "c"

check(get_Char)
solution 0 passed False
Task 83 gens 10 solutions in cir 3
check_program: 
# Write a python function to find the character made by adding all the characters of the given string.

def get_Char(strr):

    if len(strr) == 0:
        return ""
    else:
        return chr(ord(strr[0]) + (ord(strr[0]) % 2 if len(strr) > 1 else 0))

def check(get_Char):
    assert get_Char("abc") == "f"
    assert get_Char("gfg") == "t"
    assert get_Char("ab") == "c"

check(get_Char)
solution 0 passed False
Task 83 gens 10 solutions in cir 4
check_program: 
# Write a python function to find the character made by adding all the characters of the given string.

def get_Char(strr):

    if len(strr) == 0:
        return ""
    else:
        return chr(ord(strr[0]) + (ord(strr[0]) % 2 if len(strr) > 1 else 0))

def check(get_Char):
    assert get_Char("abc") == "f"
    assert get_Char("gfg") == "t"
    assert get_Char("ab") == "c"

check(get_Char)
solution 0 passed False
Task 145 gens 1 solutions in cir 0
check_program: 
# Write a python function to find the maximum difference between any two elements in a given array.

def max_Abs_Diff(arr,n):

    return max(abs(arr[i]-arr[j]) for i in range(n) for j in range(i+1,n))

def check(max_Abs_Diff):
    assert max_Abs_Diff((2,1,5,3),4) == 4
    assert max_Abs_Diff((9,3,2,5,1),5) == 8
    assert max_Abs_Diff((3,2,1),3) == 2

check(max_Abs_Diff)
solution 0 passed True
Task 145 gens 4 solutions in cir 1
check_program: 
# Write a python function to find the maximum difference between any two elements in a given array.

def max_Abs_Diff(arr,n):

    return max(abs(arr[i]-arr[j]) for i in range(n) for j in range(i+1,n))

def check(max_Abs_Diff):
    assert max_Abs_Diff((2,1,5,3),4) == 4
    assert max_Abs_Diff((9,3,2,5,1),5) == 8
    assert max_Abs_Diff((3,2,1),3) == 2

check(max_Abs_Diff)
solution 0 passed True
Task 145 gens 10 solutions in cir 2
check_program: 
# Write a python function to find the maximum difference between any two elements in a given array.

def max_Abs_Diff(arr,n):

    return max(abs(arr[i]-arr[j]) for i in range(n) for j in range(i+1,n))

def check(max_Abs_Diff):
    assert max_Abs_Diff((2,1,5,3),4) == 4
    assert max_Abs_Diff((9,3,2,5,1),5) == 8
    assert max_Abs_Diff((3,2,1),3) == 2

check(max_Abs_Diff)
solution 0 passed True
Task 145 gens 10 solutions in cir 3
check_program: 
# Write a python function to find the maximum difference between any two elements in a given array.

def max_Abs_Diff(arr,n):

    result = 0
    for i in range(n-1):
        for j in range(n-1):
            if abs(arr[i] - arr[j]) > result:
                result = abs(arr[i] - arr[j])
    return result

def check(max_Abs_Diff):
    assert max_Abs_Diff((2,1,5,3),4) == 4
    assert max_Abs_Diff((9,3,2,5,1),5) == 8
    assert max_Abs_Diff((3,2,1),3) == 2

check(max_Abs_Diff)
solution 0 passed False
Task 145 gens 10 solutions in cir 4
check_program: 
# Write a python function to find the maximum difference between any two elements in a given array.

def max_Abs_Diff(arr,n):

    max_diff = 0
    for i in range(len(arr)-1):
        if abs(arr[i]-arr[i+1]) > max_diff:
            max_diff = abs(arr[i]-arr[i+1])
    return max_diff

def check(max_Abs_Diff):
    assert max_Abs_Diff((2,1,5,3),4) == 4
    assert max_Abs_Diff((9,3,2,5,1),5) == 8
    assert max_Abs_Diff((3,2,1),3) == 2

check(max_Abs_Diff)
solution 0 passed False
Task 209 gens 1 solutions in cir 0
check_program: 
# Write a function to delete the smallest element from the given heap and then insert a new item.
import heapq as hq
def heap_replace(heap,a):

    new_heap = []
    for i in heap:
        if i < a:
            new_heap.append(i)
        else:
            new_heap.append(a)
    return new_heap

def check(heap_replace):
    assert heap_replace( [25, 44, 68, 21, 39, 23, 89],21)==[21, 25, 23, 44, 39, 68, 89]
    assert heap_replace([25, 44, 68, 21, 39, 23, 89],110)== [23, 25, 68, 44, 39, 110, 89]
    assert heap_replace([25, 44, 68, 21, 39, 23, 89],500)==[23, 25, 68, 44, 39, 500, 89]

check(heap_replace)
solution 0 passed False
Task 209 gens 6 solutions in cir 1
check_program: 
# Write a function to delete the smallest element from the given heap and then insert a new item.
import heapq as hq
def heap_replace(heap,a):

    new_heap = []
    for i in heap:
        if i < a:
            new_heap.append(i)
        else:
            new_heap.append(a)
    return new_heap

def check(heap_replace):
    assert heap_replace( [25, 44, 68, 21, 39, 23, 89],21)==[21, 25, 23, 44, 39, 68, 89]
    assert heap_replace([25, 44, 68, 21, 39, 23, 89],110)== [23, 25, 68, 44, 39, 110, 89]
    assert heap_replace([25, 44, 68, 21, 39, 23, 89],500)==[23, 25, 68, 44, 39, 500, 89]

check(heap_replace)
solution 0 passed False
Task 209 gens 10 solutions in cir 2
check_program: 
# Write a function to delete the smallest element from the given heap and then insert a new item.
import heapq as hq
def heap_replace(heap,a):

    new_heap = []
    for i in heap:
        if i > a:
            new_heap.append(i)
        else:
            new_heap.append(i)
    return new_heap

def check(heap_replace):
    assert heap_replace( [25, 44, 68, 21, 39, 23, 89],21)==[21, 25, 23, 44, 39, 68, 89]
    assert heap_replace([25, 44, 68, 21, 39, 23, 89],110)== [23, 25, 68, 44, 39, 110, 89]
    assert heap_replace([25, 44, 68, 21, 39, 23, 89],500)==[23, 25, 68, 44, 39, 500, 89]

check(heap_replace)
solution 0 passed False
Task 209 gens 10 solutions in cir 3
check_program: 
# Write a function to delete the smallest element from the given heap and then insert a new item.
import heapq as hq
def heap_replace(heap,a):

    new_heap = []
    for i in heap:
        if i > a:
            new_heap.append(i)
        else:
            new_heap.append(i)
    return new_heap

def check(heap_replace):
    assert heap_replace( [25, 44, 68, 21, 39, 23, 89],21)==[21, 25, 23, 44, 39, 68, 89]
    assert heap_replace([25, 44, 68, 21, 39, 23, 89],110)== [23, 25, 68, 44, 39, 110, 89]
    assert heap_replace([25, 44, 68, 21, 39, 23, 89],500)==[23, 25, 68, 44, 39, 500, 89]

check(heap_replace)
solution 0 passed False
Task 330 gens 1 solutions in cir 0
check_program: 
# Write a function to find all three, four, five characters long words in the given string by using regex.
import re
def find_char(text):

    words = re.findall(r'\w{3,5}', text)
    return words

def check(find_char):
    assert find_char('For the four consumer complaints contact manager AKR reddy') == ['For', 'the', 'four', 'AKR', 'reddy']
    assert find_char('Certain service are subject to change MSR') == ['are', 'MSR']
    assert find_char('Third party legal desclaimers') == ['Third', 'party', 'legal']

check(find_char)
solution 0 passed False
Task 330 gens 2 solutions in cir 1
check_program: 
# Write a function to find all three, four, five characters long words in the given string by using regex.
import re
def find_char(text):

    words = re.findall(r'\b\w{3,5}\b', text)
    return words

def check(find_char):
    assert find_char('For the four consumer complaints contact manager AKR reddy') == ['For', 'the', 'four', 'AKR', 'reddy']
    assert find_char('Certain service are subject to change MSR') == ['are', 'MSR']
    assert find_char('Third party legal desclaimers') == ['Third', 'party', 'legal']

check(find_char)
solution 0 passed True
Task 330 gens 4 solutions in cir 2
check_program: 
# Write a function to find all three, four, five characters long words in the given string by using regex.
import re
def find_char(text):

    return re.findall(r'\b\w{3,5}\b', text)

def check(find_char):
    assert find_char('For the four consumer complaints contact manager AKR reddy') == ['For', 'the', 'four', 'AKR', 'reddy']
    assert find_char('Certain service are subject to change MSR') == ['are', 'MSR']
    assert find_char('Third party legal desclaimers') == ['Third', 'party', 'legal']

check(find_char)
solution 0 passed True
Task 330 gens 5 solutions in cir 3
check_program: 
# Write a function to find all three, four, five characters long words in the given string by using regex.
import re
def find_char(text):

    words = re.findall(r'\b\w{3,5}\b', text)
    return words

def check(find_char):
    assert find_char('For the four consumer complaints contact manager AKR reddy') == ['For', 'the', 'four', 'AKR', 'reddy']
    assert find_char('Certain service are subject to change MSR') == ['are', 'MSR']
    assert find_char('Third party legal desclaimers') == ['Third', 'party', 'legal']

check(find_char)
solution 0 passed True
Task 330 gens 4 solutions in cir 4
check_program: 
# Write a function to find all three, four, five characters long words in the given string by using regex.
import re
def find_char(text):

    return re.findall(r'\b\w{3,5}\b', text)

def check(find_char):
    assert find_char('For the four consumer complaints contact manager AKR reddy') == ['For', 'the', 'four', 'AKR', 'reddy']
    assert find_char('Certain service are subject to change MSR') == ['are', 'MSR']
    assert find_char('Third party legal desclaimers') == ['Third', 'party', 'legal']

check(find_char)
solution 0 passed True
Task 330 gens 5 solutions in cir 5
check_program: 
# Write a function to find all three, four, five characters long words in the given string by using regex.
import re
def find_char(text):

    return re.findall(r'\b\w{3,5}\b', text)

def check(find_char):
    assert find_char('For the four consumer complaints contact manager AKR reddy') == ['For', 'the', 'four', 'AKR', 'reddy']
    assert find_char('Certain service are subject to change MSR') == ['are', 'MSR']
    assert find_char('Third party legal desclaimers') == ['Third', 'party', 'legal']

check(find_char)
solution 0 passed True
Task 330 gens 7 solutions in cir 6
check_program: 
# Write a function to find all three, four, five characters long words in the given string by using regex.
import re
def find_char(text):

    words = re.findall(r'\b\w{3,5}\b', text)
    return words

def check(find_char):
    assert find_char('For the four consumer complaints contact manager AKR reddy') == ['For', 'the', 'four', 'AKR', 'reddy']
    assert find_char('Certain service are subject to change MSR') == ['are', 'MSR']
    assert find_char('Third party legal desclaimers') == ['Third', 'party', 'legal']

check(find_char)
solution 0 passed True
Task 330 gens 10 solutions in cir 7
check_program: 
# Write a function to find all three, four, five characters long words in the given string by using regex.
import re
def find_char(text):

    words = re.findall(r'\b\w{3,5}\b', text)
    return words

def check(find_char):
    assert find_char('For the four consumer complaints contact manager AKR reddy') == ['For', 'the', 'four', 'AKR', 'reddy']
    assert find_char('Certain service are subject to change MSR') == ['are', 'MSR']
    assert find_char('Third party legal desclaimers') == ['Third', 'party', 'legal']

check(find_char)
solution 0 passed True
Task 330 gens 9 solutions in cir 8
check_program: 
# Write a function to find all three, four, five characters long words in the given string by using regex.
import re
def find_char(text):

    words = []
    for word in re.findall(r'\b\w{3,5}\b', text):
        words.append(word)
    return words

def check(find_char):
    assert find_char('For the four consumer complaints contact manager AKR reddy') == ['For', 'the', 'four', 'AKR', 'reddy']
    assert find_char('Certain service are subject to change MSR') == ['are', 'MSR']
    assert find_char('Third party legal desclaimers') == ['Third', 'party', 'legal']

check(find_char)
solution 0 passed True
Task 330 gens 10 solutions in cir 9
check_program: 
# Write a function to find all three, four, five characters long words in the given string by using regex.
import re
def find_char(text):

    words = []
    regex = r'\b\w{3,5}\b'
    for match in re.finditer(regex, text):
        words.append(match.group())
    return words

def check(find_char):
    assert find_char('For the four consumer complaints contact manager AKR reddy') == ['For', 'the', 'four', 'AKR', 'reddy']
    assert find_char('Certain service are subject to change MSR') == ['are', 'MSR']
    assert find_char('Third party legal desclaimers') == ['Third', 'party', 'legal']

check(find_char)
solution 0 passed True
Task 330 gens 10 solutions in cir 10
check_program: 
# Write a function to find all three, four, five characters long words in the given string by using regex.
import re
def find_char(text):

    words = []
    regex = re.compile(r'\b\w{3,5}\b', re.IGNORECASE)
    for match in regex.finditer(text):
        words.append(match.group())
    return words

def check(find_char):
    assert find_char('For the four consumer complaints contact manager AKR reddy') == ['For', 'the', 'four', 'AKR', 'reddy']
    assert find_char('Certain service are subject to change MSR') == ['are', 'MSR']
    assert find_char('Third party legal desclaimers') == ['Third', 'party', 'legal']

check(find_char)
solution 0 passed True
Task 183 gens 1 solutions in cir 0
check_program: 
# Write a function to count all the distinct pairs having a difference of k in any array.

def count_pairs(arr, n, k):

    count = 0
    for i in range(n):
        for j in range(i + 1, n):
            if abs(arr[i] - arr[j]) == k:
                count += 1
    return count

def check(count_pairs):
    assert count_pairs([1, 5, 3, 4, 2], 5, 3) == 2
    assert count_pairs([8, 12, 16, 4, 0, 20], 6, 4) == 5
    assert count_pairs([2, 4, 1, 3, 4], 5, 2) == 3

check(count_pairs)
solution 0 passed True
Task 183 gens 4 solutions in cir 1
check_program: 
# Write a function to count all the distinct pairs having a difference of k in any array.

def count_pairs(arr, n, k):

    count = 0
    for i in range(n):
        for j in range(i + 1, n):
            if abs(arr[i] - arr[j]) == k:
                count += 1
    return count

def check(count_pairs):
    assert count_pairs([1, 5, 3, 4, 2], 5, 3) == 2
    assert count_pairs([8, 12, 16, 4, 0, 20], 6, 4) == 5
    assert count_pairs([2, 4, 1, 3, 4], 5, 2) == 3

check(count_pairs)
solution 0 passed True
Task 183 gens 10 solutions in cir 2
check_program: 
# Write a function to count all the distinct pairs having a difference of k in any array.

def count_pairs(arr, n, k):

    from collections import Counter
    unique_differences = Counter(arr) - Counter([0])
    count = sum(1 for a, b in zip(unique_differences, unique_differences) if b - a == k)
    return count

def check(count_pairs):
    assert count_pairs([1, 5, 3, 4, 2], 5, 3) == 2
    assert count_pairs([8, 12, 16, 4, 0, 20], 6, 4) == 5
    assert count_pairs([2, 4, 1, 3, 4], 5, 2) == 3

check(count_pairs)
solution 0 passed False
Task 183 gens 10 solutions in cir 3
check_program: 
# Write a function to count all the distinct pairs having a difference of k in any array.

def count_pairs(arr, n, k):

    from collections import Counter
    unique_differences = Counter(arr) - Counter([0])
    count = sum(1 for a, b in zip(unique_differences, unique_differences) if b - a == k)
    return count

def check(count_pairs):
    assert count_pairs([1, 5, 3, 4, 2], 5, 3) == 2
    assert count_pairs([8, 12, 16, 4, 0, 20], 6, 4) == 5
    assert count_pairs([2, 4, 1, 3, 4], 5, 2) == 3

check(count_pairs)
solution 0 passed False
Task 183 gens 10 solutions in cir 4
check_program: 
# Write a function to count all the distinct pairs having a difference of k in any array.

def count_pairs(arr, n, k):

    result = 0
    for i in range(1, n+1):
        for j in range(i, n+1):
            if abs(arr[i] - arr[j]) == k:
                result += 1
    return result

def check(count_pairs):
    assert count_pairs([1, 5, 3, 4, 2], 5, 3) == 2
    assert count_pairs([8, 12, 16, 4, 0, 20], 6, 4) == 5
    assert count_pairs([2, 4, 1, 3, 4], 5, 2) == 3

check(count_pairs)
solution 0 passed False
Task 182 gens 1 solutions in cir 0
check_program: 
# Write a function to find uppercase, lowercase, special character and numeric values using regex.
import re
def find_character(string):

    pattern = re.compile(r'[A-Za-z\d]')
    return list(pattern.findall(string))

def check(find_character):
    assert find_character("ThisIsGeeksforGeeks") == (['T', 'I', 'G', 'G'], ['h', 'i', 's', 's', 'e', 'e', 'k', 's', 'f', 'o', 'r', 'e', 'e', 'k', 's'], [], [])
    assert find_character("Hithere2") == (['H'], ['i', 't', 'h', 'e', 'r', 'e'], ['2'], [])
    assert find_character("HeyFolks32") == (['H', 'F'], ['e', 'y', 'o', 'l', 'k', 's'], ['3', '2'], [])

check(find_character)
solution 0 passed False
Task 182 gens 7 solutions in cir 1
check_program: 
# Write a function to find uppercase, lowercase, special character and numeric values using regex.
import re
def find_character(string):

    pattern = re.compile(r'[A-Za-z\d]')
    return pattern.findall(string)

def check(find_character):
    assert find_character("ThisIsGeeksforGeeks") == (['T', 'I', 'G', 'G'], ['h', 'i', 's', 's', 'e', 'e', 'k', 's', 'f', 'o', 'r', 'e', 'e', 'k', 's'], [], [])
    assert find_character("Hithere2") == (['H'], ['i', 't', 'h', 'e', 'r', 'e'], ['2'], [])
    assert find_character("HeyFolks32") == (['H', 'F'], ['e', 'y', 'o', 'l', 'k', 's'], ['3', '2'], [])

check(find_character)
solution 0 passed False
Task 182 gens 10 solutions in cir 2
check_program: 
# Write a function to find uppercase, lowercase, special character and numeric values using regex.
import re
def find_character(string):

    pattern = re.compile(r'[A-Za-z\d]')
    return [char for char in pattern.findall(string) if char.isupper()] + [char for char in pattern.findall(string) if char.islower()] + [char for char in pattern.findall(string) if char.isspace()] + [char for char in pattern.findall(string) if char.isdigit()]

def check(find_character):
    assert find_character("ThisIsGeeksforGeeks") == (['T', 'I', 'G', 'G'], ['h', 'i', 's', 's', 'e', 'e', 'k', 's', 'f', 'o', 'r', 'e', 'e', 'k', 's'], [], [])
    assert find_character("Hithere2") == (['H'], ['i', 't', 'h', 'e', 'r', 'e'], ['2'], [])
    assert find_character("HeyFolks32") == (['H', 'F'], ['e', 'y', 'o', 'l', 'k', 's'], ['3', '2'], [])

check(find_character)
solution 0 passed False
Task 182 gens 10 solutions in cir 3
check_program: 
# Write a function to find uppercase, lowercase, special character and numeric values using regex.
import re
def find_character(string):

    pattern = re.compile(r'[A-Za-z\d]')
    return [char for char in pattern.findall(string) if char.isupper()] + [char for char in pattern.findall(string) if char.islower()] + [char for char in pattern.findall(string) if char.isspace()] + [char for char in pattern.findall(string) if char.isdigit()]

def check(find_character):
    assert find_character("ThisIsGeeksforGeeks") == (['T', 'I', 'G', 'G'], ['h', 'i', 's', 's', 'e', 'e', 'k', 's', 'f', 'o', 'r', 'e', 'e', 'k', 's'], [], [])
    assert find_character("Hithere2") == (['H'], ['i', 't', 'h', 'e', 'r', 'e'], ['2'], [])
    assert find_character("HeyFolks32") == (['H', 'F'], ['e', 'y', 'o', 'l', 'k', 's'], ['3', '2'], [])

check(find_character)
solution 0 passed False
Task 373 gens 1 solutions in cir 0
check_program: 
# Write a function to find the volume of a cuboid.

def volume_cuboid(l,w,h):

    return l*w*h

def check(volume_cuboid):
    assert volume_cuboid(1,2,3)==6
    assert volume_cuboid(5,7,9)==315
    assert volume_cuboid(10,15,21)==3150

check(volume_cuboid)
solution 0 passed True
Task 373 gens 2 solutions in cir 1
check_program: 
# Write a function to find the volume of a cuboid.

def volume_cuboid(l,w,h):

    return l*w*h

def check(volume_cuboid):
    assert volume_cuboid(1,2,3)==6
    assert volume_cuboid(5,7,9)==315
    assert volume_cuboid(10,15,21)==3150

check(volume_cuboid)
solution 0 passed True
Task 373 gens 2 solutions in cir 2
check_program: 
# Write a function to find the volume of a cuboid.

def volume_cuboid(l,w,h):

    return l * w * h

def check(volume_cuboid):
    assert volume_cuboid(1,2,3)==6
    assert volume_cuboid(5,7,9)==315
    assert volume_cuboid(10,15,21)==3150

check(volume_cuboid)
solution 0 passed True
Task 373 gens 2 solutions in cir 3
check_program: 
# Write a function to find the volume of a cuboid.

def volume_cuboid(l,w,h):

    return l*w*h

def check(volume_cuboid):
    assert volume_cuboid(1,2,3)==6
    assert volume_cuboid(5,7,9)==315
    assert volume_cuboid(10,15,21)==3150

check(volume_cuboid)
solution 0 passed True
Task 373 gens 2 solutions in cir 4
check_program: 
# Write a function to find the volume of a cuboid.

def volume_cuboid(l,w,h):

    return l*w*h

def check(volume_cuboid):
    assert volume_cuboid(1,2,3)==6
    assert volume_cuboid(5,7,9)==315
    assert volume_cuboid(10,15,21)==3150

check(volume_cuboid)
solution 0 passed True
Task 373 gens 2 solutions in cir 5
check_program: 
# Write a function to find the volume of a cuboid.

def volume_cuboid(l,w,h):

    return l*w*h

def check(volume_cuboid):
    assert volume_cuboid(1,2,3)==6
    assert volume_cuboid(5,7,9)==315
    assert volume_cuboid(10,15,21)==3150

check(volume_cuboid)
solution 0 passed True
Task 373 gens 2 solutions in cir 6
check_program: 
# Write a function to find the volume of a cuboid.

def volume_cuboid(l,w,h):

    return l*w*h

def check(volume_cuboid):
    assert volume_cuboid(1,2,3)==6
    assert volume_cuboid(5,7,9)==315
    assert volume_cuboid(10,15,21)==3150

check(volume_cuboid)
solution 0 passed True
Task 373 gens 2 solutions in cir 7
check_program: 
# Write a function to find the volume of a cuboid.

def volume_cuboid(l,w,h):

    return l*w*h

def check(volume_cuboid):
    assert volume_cuboid(1,2,3)==6
    assert volume_cuboid(5,7,9)==315
    assert volume_cuboid(10,15,21)==3150

check(volume_cuboid)
solution 0 passed True
Task 373 gens 2 solutions in cir 8
check_program: 
# Write a function to find the volume of a cuboid.

def volume_cuboid(l,w,h):

    return l*w*h

def check(volume_cuboid):
    assert volume_cuboid(1,2,3)==6
    assert volume_cuboid(5,7,9)==315
    assert volume_cuboid(10,15,21)==3150

check(volume_cuboid)
solution 0 passed True
Task 373 gens 2 solutions in cir 9
check_program: 
# Write a function to find the volume of a cuboid.

def volume_cuboid(l,w,h):

    return l*w*h

def check(volume_cuboid):
    assert volume_cuboid(1,2,3)==6
    assert volume_cuboid(5,7,9)==315
    assert volume_cuboid(10,15,21)==3150

check(volume_cuboid)
solution 0 passed True
Task 373 gens 2 solutions in cir 10
check_program: 
# Write a function to find the volume of a cuboid.

def volume_cuboid(l,w,h):

    return l*w*h

def check(volume_cuboid):
    assert volume_cuboid(1,2,3)==6
    assert volume_cuboid(5,7,9)==315
    assert volume_cuboid(10,15,21)==3150

check(volume_cuboid)
solution 0 passed True
Task 375 gens 1 solutions in cir 0
check_program: 
# Write a function to round the given number to the nearest multiple of a specific number.

def round_num(n,m):

    return n // m * m

def check(round_num):
    assert round_num(4722,10)==4720
    assert round_num(1111,5)==1110
    assert round_num(219,2)==218

check(round_num)
solution 0 passed True
Task 375 gens 9 solutions in cir 1
check_program: 
# Write a function to round the given number to the nearest multiple of a specific number.

def round_num(n,m):

    return round(n / m) * m

def check(round_num):
    assert round_num(4722,10)==4720
    assert round_num(1111,5)==1110
    assert round_num(219,2)==218

check(round_num)
solution 0 passed False
Task 375 gens 10 solutions in cir 2
check_program: 
# Write a function to round the given number to the nearest multiple of a specific number.

def round_num(n,m):

    return round(n,m)

def check(round_num):
    assert round_num(4722,10)==4720
    assert round_num(1111,5)==1110
    assert round_num(219,2)==218

check(round_num)
solution 0 passed False
Task 375 gens 10 solutions in cir 3
check_program: 
# Write a function to round the given number to the nearest multiple of a specific number.

def round_num(n,m):

    return round(n / m) * m

def check(round_num):
    assert round_num(4722,10)==4720
    assert round_num(1111,5)==1110
    assert round_num(219,2)==218

check(round_num)
solution 0 passed False
Task 469 gens 1 solutions in cir 0
check_program: 
# Write a function to find the maximum profit earned from a maximum of k stock transactions

def max_profit(price, k):

    profit = 0
    for i in range(k):
        if price[i] > price[i+1]:
            profit += price[i] - price[i+1]
        else:
            profit -= price[i] + price[i+1]
    return profit

def check(max_profit):
    assert max_profit([1, 5, 2, 3, 7, 6, 4, 5], 3) == 10
    assert max_profit([2, 4, 7, 5, 4, 3, 5], 2) == 7
    assert max_profit([10, 6, 8, 4, 2], 2) == 2

check(max_profit)
solution 0 passed False
Task 469 gens 5 solutions in cir 1
check_program: 
# Write a function to find the maximum profit earned from a maximum of k stock transactions

def max_profit(price, k):

    profit = 0
    for i in range(k):
        if price[i] > price[i+1]:
            profit += price[i] - price[i+1]
        else:
            profit -= price[i] + price[i+1]
    return profit

def check(max_profit):
    assert max_profit([1, 5, 2, 3, 7, 6, 4, 5], 3) == 10
    assert max_profit([2, 4, 7, 5, 4, 3, 5], 2) == 7
    assert max_profit([10, 6, 8, 4, 2], 2) == 2

check(max_profit)
solution 0 passed False
Task 469 gens 10 solutions in cir 2
check_program: 
# Write a function to find the maximum profit earned from a maximum of k stock transactions

def max_profit(price, k):

    if k == 0:
        return 0
    max_profit = 0
    for i in range(k):
        if price[i] > price[i+1]:
            max_profit = max(max_profit, price[i] - price[i+1])
        else:
            max_profit = max(max_profit, price[i] + price[i+1])
    return max_profit

def check(max_profit):
    assert max_profit([1, 5, 2, 3, 7, 6, 4, 5], 3) == 10
    assert max_profit([2, 4, 7, 5, 4, 3, 5], 2) == 7
    assert max_profit([10, 6, 8, 4, 2], 2) == 2

check(max_profit)
solution 0 passed False
Task 469 gens 10 solutions in cir 3
check_program: 
# Write a function to find the maximum profit earned from a maximum of k stock transactions

def max_profit(price, k):

    if k == 0:
        return 0
    max_profit = 0
    for i in range(k):
        if price[i] > price[i+1]:
            max_profit = max(max_profit, price[i] - price[i+1])
        else:
            max_profit = max(max_profit, price[i] + price[i+1])
    return max_profit

def check(max_profit):
    assert max_profit([1, 5, 2, 3, 7, 6, 4, 5], 3) == 10
    assert max_profit([2, 4, 7, 5, 4, 3, 5], 2) == 7
    assert max_profit([10, 6, 8, 4, 2], 2) == 2

check(max_profit)
solution 0 passed False
Task 97 gens 1 solutions in cir 0
check_program: 
# Write a function to find frequency count of list of lists.

def frequency_lists(list1):

    freq = {}
    for sublist in list1:
        if sublist in freq:
            freq[sublist] += 1
        else:
            freq[sublist] = 1
    return freq

def check(frequency_lists):
    assert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}
    assert frequency_lists([[1,2,3,4],[5,6,7,8],[9,10,11,12]])=={1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1,10:1,11:1,12:1}
    assert frequency_lists([[20,30,40,17],[18,16,14,13],[10,20,30,40]])=={20:2,30:2,40:2,17: 1,18:1, 16: 1,14: 1,13: 1, 10: 1}

check(frequency_lists)
solution 0 passed False
Task 97 gens 5 solutions in cir 1
check_program: 
# Write a function to find frequency count of list of lists.

def frequency_lists(list1):

    freq = {}
    for sublist in list1:
        if sublist in freq:
            freq[sublist] += 1
        else:
            freq[sublist] = 1
    return freq

def check(frequency_lists):
    assert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}
    assert frequency_lists([[1,2,3,4],[5,6,7,8],[9,10,11,12]])=={1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1,10:1,11:1,12:1}
    assert frequency_lists([[20,30,40,17],[18,16,14,13],[10,20,30,40]])=={20:2,30:2,40:2,17: 1,18:1, 16: 1,14: 1,13: 1, 10: 1}

check(frequency_lists)
solution 0 passed False
Task 97 gens 10 solutions in cir 2
check_program: 
# Write a function to find frequency count of list of lists.

def frequency_lists(list1):

    freq = {}
    for sublst in list1:
        for word in sublst:
            if word in freq:
                freq[word] += 1
            else:
                freq[word] = 1
    return freq

def check(frequency_lists):
    assert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}
    assert frequency_lists([[1,2,3,4],[5,6,7,8],[9,10,11,12]])=={1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1,10:1,11:1,12:1}
    assert frequency_lists([[20,30,40,17],[18,16,14,13],[10,20,30,40]])=={20:2,30:2,40:2,17: 1,18:1, 16: 1,14: 1,13: 1, 10: 1}

check(frequency_lists)
solution 0 passed True
Task 97 gens 10 solutions in cir 3
check_program: 
# Write a function to find frequency count of list of lists.

def frequency_lists(list1):

    freq = {}
    for lst in list1:
        for i in lst:
            if i in freq:
                freq[i] += 1
            else:
                freq[i] = 1
    return freq

def check(frequency_lists):
    assert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}
    assert frequency_lists([[1,2,3,4],[5,6,7,8],[9,10,11,12]])=={1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1,10:1,11:1,12:1}
    assert frequency_lists([[20,30,40,17],[18,16,14,13],[10,20,30,40]])=={20:2,30:2,40:2,17: 1,18:1, 16: 1,14: 1,13: 1, 10: 1}

check(frequency_lists)
solution 0 passed True
Task 97 gens 10 solutions in cir 4
check_program: 
# Write a function to find frequency count of list of lists.

def frequency_lists(list1):

    freq = {}
    for sublst in list1:
        for word in sublst:
            if word in freq:
                freq[word] += 1
            else:
                freq[word] = 1
    return freq

def check(frequency_lists):
    assert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}
    assert frequency_lists([[1,2,3,4],[5,6,7,8],[9,10,11,12]])=={1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1,10:1,11:1,12:1}
    assert frequency_lists([[20,30,40,17],[18,16,14,13],[10,20,30,40]])=={20:2,30:2,40:2,17: 1,18:1, 16: 1,14: 1,13: 1, 10: 1}

check(frequency_lists)
solution 0 passed True
Task 97 gens 10 solutions in cir 5
check_program: 
# Write a function to find frequency count of list of lists.

def frequency_lists(list1):

    freq = {}
    for sublist in list1:
        for item in sublist:
            if item in freq:
                freq[item] += 1
            else:
                freq[item] = 1
    return freq

def check(frequency_lists):
    assert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}
    assert frequency_lists([[1,2,3,4],[5,6,7,8],[9,10,11,12]])=={1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1,10:1,11:1,12:1}
    assert frequency_lists([[20,30,40,17],[18,16,14,13],[10,20,30,40]])=={20:2,30:2,40:2,17: 1,18:1, 16: 1,14: 1,13: 1, 10: 1}

check(frequency_lists)
solution 0 passed True
Task 97 gens 10 solutions in cir 6
check_program: 
# Write a function to find frequency count of list of lists.

def frequency_lists(list1):

    freq = {}
    for sublist in list1:
        for element in sublist:
            if element in freq:
                freq[element] += 1
            else:
                freq[element] = 1
    return freq

def check(frequency_lists):
    assert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}
    assert frequency_lists([[1,2,3,4],[5,6,7,8],[9,10,11,12]])=={1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1,10:1,11:1,12:1}
    assert frequency_lists([[20,30,40,17],[18,16,14,13],[10,20,30,40]])=={20:2,30:2,40:2,17: 1,18:1, 16: 1,14: 1,13: 1, 10: 1}

check(frequency_lists)
solution 0 passed True
Task 97 gens 10 solutions in cir 7
check_program: 
# Write a function to find frequency count of list of lists.

def frequency_lists(list1):

    freq = {}
    for sublist in list1:
        for word in sublist:
            if word not in freq:
                freq[word] = 0
            freq[word] += 1
    return freq

def check(frequency_lists):
    assert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}
    assert frequency_lists([[1,2,3,4],[5,6,7,8],[9,10,11,12]])=={1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1,10:1,11:1,12:1}
    assert frequency_lists([[20,30,40,17],[18,16,14,13],[10,20,30,40]])=={20:2,30:2,40:2,17: 1,18:1, 16: 1,14: 1,13: 1, 10: 1}

check(frequency_lists)
solution 0 passed True
Task 97 gens 10 solutions in cir 8
check_program: 
# Write a function to find frequency count of list of lists.

def frequency_lists(list1):

    freq = {}
    for sublist in list1:
        for word in sublist:
            if word not in freq:
                freq[word] = 0
            freq[word] += 1
    return freq

def check(frequency_lists):
    assert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}
    assert frequency_lists([[1,2,3,4],[5,6,7,8],[9,10,11,12]])=={1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1,10:1,11:1,12:1}
    assert frequency_lists([[20,30,40,17],[18,16,14,13],[10,20,30,40]])=={20:2,30:2,40:2,17: 1,18:1, 16: 1,14: 1,13: 1, 10: 1}

check(frequency_lists)
solution 0 passed True
Task 97 gens 10 solutions in cir 9
check_program: 
# Write a function to find frequency count of list of lists.

def frequency_lists(list1):

    freq = {}
    for sublist in list1:
        for element in sublist:
            if element in freq:
                freq[element] += 1
            else:
                freq[element] = 1
    return freq

def check(frequency_lists):
    assert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}
    assert frequency_lists([[1,2,3,4],[5,6,7,8],[9,10,11,12]])=={1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1,10:1,11:1,12:1}
    assert frequency_lists([[20,30,40,17],[18,16,14,13],[10,20,30,40]])=={20:2,30:2,40:2,17: 1,18:1, 16: 1,14: 1,13: 1, 10: 1}

check(frequency_lists)
solution 0 passed True
Task 97 gens 10 solutions in cir 10
check_program: 
# Write a function to find frequency count of list of lists.

def frequency_lists(list1):

    freq = {}
    for sublist in list1:
        for element in sublist:
            if element in freq:
                freq[element] += 1
            else:
                freq[element] = 1
    return freq

def check(frequency_lists):
    assert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}
    assert frequency_lists([[1,2,3,4],[5,6,7,8],[9,10,11,12]])=={1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1,10:1,11:1,12:1}
    assert frequency_lists([[20,30,40,17],[18,16,14,13],[10,20,30,40]])=={20:2,30:2,40:2,17: 1,18:1, 16: 1,14: 1,13: 1, 10: 1}

check(frequency_lists)
solution 0 passed True
Task 361 gens 1 solutions in cir 0
check_program: 
# Write a function to remove empty lists from a given list of lists.

def remove_empty(list1):

    return [x for x in list1 if x]

def check(remove_empty):
    assert remove_empty([[], [], [], 'Red', 'Green', [1,2], 'Blue', [], []])==['Red', 'Green', [1, 2], 'Blue']
    assert remove_empty([[], [], [],[],[], 'Green', [1,2], 'Blue', [], []])==[ 'Green', [1, 2], 'Blue']
    assert remove_empty([[], [], [], 'Python',[],[], 'programming', 'language',[],[],[], [], []])==['Python', 'programming', 'language']

check(remove_empty)
solution 0 passed True
Task 361 gens 5 solutions in cir 1
check_program: 
# Write a function to remove empty lists from a given list of lists.

def remove_empty(list1):

    return [x for x in list1 if x]

def check(remove_empty):
    assert remove_empty([[], [], [], 'Red', 'Green', [1,2], 'Blue', [], []])==['Red', 'Green', [1, 2], 'Blue']
    assert remove_empty([[], [], [],[],[], 'Green', [1,2], 'Blue', [], []])==[ 'Green', [1, 2], 'Blue']
    assert remove_empty([[], [], [], 'Python',[],[], 'programming', 'language',[],[],[], [], []])==['Python', 'programming', 'language']

check(remove_empty)
solution 0 passed True
Task 361 gens 10 solutions in cir 2
check_program: 
# Write a function to remove empty lists from a given list of lists.

def remove_empty(list1):

    return [x for x in list1 if x]

def check(remove_empty):
    assert remove_empty([[], [], [], 'Red', 'Green', [1,2], 'Blue', [], []])==['Red', 'Green', [1, 2], 'Blue']
    assert remove_empty([[], [], [],[],[], 'Green', [1,2], 'Blue', [], []])==[ 'Green', [1, 2], 'Blue']
    assert remove_empty([[], [], [], 'Python',[],[], 'programming', 'language',[],[],[], [], []])==['Python', 'programming', 'language']

check(remove_empty)
solution 0 passed True
Task 361 gens 10 solutions in cir 3
check_program: 
# Write a function to remove empty lists from a given list of lists.

def remove_empty(list1):

    return [x for x in list1 if x]

def check(remove_empty):
    assert remove_empty([[], [], [], 'Red', 'Green', [1,2], 'Blue', [], []])==['Red', 'Green', [1, 2], 'Blue']
    assert remove_empty([[], [], [],[],[], 'Green', [1,2], 'Blue', [], []])==[ 'Green', [1, 2], 'Blue']
    assert remove_empty([[], [], [], 'Python',[],[], 'programming', 'language',[],[],[], [], []])==['Python', 'programming', 'language']

check(remove_empty)
solution 0 passed True
Task 78 gens 1 solutions in cir 0
check_program: 
# Write a python function to find number of integers with odd number of set bits.

def count_With_Odd_SetBits(n):

    count = 0
    while n > 0:
        n,remainder = divmod(n,2)
        if remainder == 1:
            count += 1
    return count

def check(count_With_Odd_SetBits):
    assert count_With_Odd_SetBits(5) == 3
    assert count_With_Odd_SetBits(10) == 5
    assert count_With_Odd_SetBits(15) == 8

check(count_With_Odd_SetBits)
solution 0 passed False
Task 78 gens 5 solutions in cir 1
check_program: 
# Write a python function to find number of integers with odd number of set bits.

def count_With_Odd_SetBits(n):

    count = 0
    while n > 0:
        n,remainder = divmod(n,2)
        if remainder == 1:
            count += 1
    return count

def check(count_With_Odd_SetBits):
    assert count_With_Odd_SetBits(5) == 3
    assert count_With_Odd_SetBits(10) == 5
    assert count_With_Odd_SetBits(15) == 8

check(count_With_Odd_SetBits)
solution 0 passed False
Task 78 gens 10 solutions in cir 2
check_program: 
# Write a python function to find number of integers with odd number of set bits.

def count_With_Odd_SetBits(n):

    count = 0
    for i in range(0,n,-2):
        if n%2 != 0:
            count += 1
    return count

def check(count_With_Odd_SetBits):
    assert count_With_Odd_SetBits(5) == 3
    assert count_With_Odd_SetBits(10) == 5
    assert count_With_Odd_SetBits(15) == 8

check(count_With_Odd_SetBits)
solution 0 passed False
Task 78 gens 10 solutions in cir 3
check_program: 
# Write a python function to find number of integers with odd number of set bits.

def count_With_Odd_SetBits(n):

    count = 0
    for i in range(n):
        if n & (1<<i):
            count += 1
    return count

def check(count_With_Odd_SetBits):
    assert count_With_Odd_SetBits(5) == 3
    assert count_With_Odd_SetBits(10) == 5
    assert count_With_Odd_SetBits(15) == 8

check(count_With_Odd_SetBits)
solution 0 passed False
Task 421 gens 1 solutions in cir 0
check_program: 
# Write a function to concatenate each element of tuple by the delimiter.

def concatenate_tuple(test_tup):

    return tuple(test_tup)

def check(concatenate_tuple):
    assert concatenate_tuple(("ID", "is", 4, "UTS") ) == 'ID-is-4-UTS'
    assert concatenate_tuple(("QWE", "is", 4, "RTY") ) == 'QWE-is-4-RTY'
    assert concatenate_tuple(("ZEN", "is", 4, "OP") ) == 'ZEN-is-4-OP'

check(concatenate_tuple)
solution 0 passed False
Task 421 gens 9 solutions in cir 1
check_program: 
# Write a function to concatenate each element of tuple by the delimiter.

def concatenate_tuple(test_tup):

    return "".join(str(x) for x in test_tup)

def check(concatenate_tuple):
    assert concatenate_tuple(("ID", "is", 4, "UTS") ) == 'ID-is-4-UTS'
    assert concatenate_tuple(("QWE", "is", 4, "RTY") ) == 'QWE-is-4-RTY'
    assert concatenate_tuple(("ZEN", "is", 4, "OP") ) == 'ZEN-is-4-OP'

check(concatenate_tuple)
solution 0 passed False
Task 421 gens 10 solutions in cir 2
check_program: 
# Write a function to concatenate each element of tuple by the delimiter.

def concatenate_tuple(test_tup):

    return ''.join(str(elt) for elt in test_tup)

def check(concatenate_tuple):
    assert concatenate_tuple(("ID", "is", 4, "UTS") ) == 'ID-is-4-UTS'
    assert concatenate_tuple(("QWE", "is", 4, "RTY") ) == 'QWE-is-4-RTY'
    assert concatenate_tuple(("ZEN", "is", 4, "OP") ) == 'ZEN-is-4-OP'

check(concatenate_tuple)
solution 0 passed False
Task 421 gens 10 solutions in cir 3
check_program: 
# Write a function to concatenate each element of tuple by the delimiter.

def concatenate_tuple(test_tup):

    return ''.join(str(elt) for elt in test_tup)

def check(concatenate_tuple):
    assert concatenate_tuple(("ID", "is", 4, "UTS") ) == 'ID-is-4-UTS'
    assert concatenate_tuple(("QWE", "is", 4, "RTY") ) == 'QWE-is-4-RTY'
    assert concatenate_tuple(("ZEN", "is", 4, "OP") ) == 'ZEN-is-4-OP'

check(concatenate_tuple)
solution 0 passed False
Task 421 gens 10 solutions in cir 4
check_program: 
# Write a function to concatenate each element of tuple by the delimiter.

def concatenate_tuple(test_tup):

    return "".join([str(e) for e in test_tup])

def check(concatenate_tuple):
    assert concatenate_tuple(("ID", "is", 4, "UTS") ) == 'ID-is-4-UTS'
    assert concatenate_tuple(("QWE", "is", 4, "RTY") ) == 'QWE-is-4-RTY'
    assert concatenate_tuple(("ZEN", "is", 4, "OP") ) == 'ZEN-is-4-OP'

check(concatenate_tuple)
solution 0 passed False
Task 421 gens 10 solutions in cir 5
check_program: 
# Write a function to concatenate each element of tuple by the delimiter.

def concatenate_tuple(test_tup):

    return "".join([str(e) for e in test_tup])

def check(concatenate_tuple):
    assert concatenate_tuple(("ID", "is", 4, "UTS") ) == 'ID-is-4-UTS'
    assert concatenate_tuple(("QWE", "is", 4, "RTY") ) == 'QWE-is-4-RTY'
    assert concatenate_tuple(("ZEN", "is", 4, "OP") ) == 'ZEN-is-4-OP'

check(concatenate_tuple)
solution 0 passed False
Task 476 gens 1 solutions in cir 0
check_program: 
# Write a python function to find the sum of the largest and smallest value in a given array.

def big_sum(nums):

    return max(nums) + min(nums)

def check(big_sum):
    assert big_sum([1,2,3]) == 4
    assert big_sum([-1,2,3,4]) == 3
    assert big_sum([2,3,6]) == 8

check(big_sum)
solution 0 passed True
Task 476 gens 2 solutions in cir 1
check_program: 
# Write a python function to find the sum of the largest and smallest value in a given array.

def big_sum(nums):

    return max(nums) + min(nums)

def check(big_sum):
    assert big_sum([1,2,3]) == 4
    assert big_sum([-1,2,3,4]) == 3
    assert big_sum([2,3,6]) == 8

check(big_sum)
solution 0 passed True
Task 476 gens 10 solutions in cir 2
check_program: 
# Write a python function to find the sum of the largest and smallest value in a given array.

def big_sum(nums):

    largest = nums[0]
    smallest = nums[0]
    for num in nums[1:]:
        largest = max(largest, num)
        smallest = min(smallest, num)
    return max(largest, smallest)

def check(big_sum):
    assert big_sum([1,2,3]) == 4
    assert big_sum([-1,2,3,4]) == 3
    assert big_sum([2,3,6]) == 8

check(big_sum)
solution 0 passed False
Task 476 gens 10 solutions in cir 3
check_program: 
# Write a python function to find the sum of the largest and smallest value in a given array.

def big_sum(nums):

    result = 0
    max_num = -1
    min_num = -1
    for num in nums:
        if num > max_num:
            max_num = num
        if num < min_num:
            min_num = num
        result += num
    return result

def check(big_sum):
    assert big_sum([1,2,3]) == 4
    assert big_sum([-1,2,3,4]) == 3
    assert big_sum([2,3,6]) == 8

check(big_sum)
solution 0 passed False
Task 476 gens 10 solutions in cir 4
check_program: 
# Write a python function to find the sum of the largest and smallest value in a given array.

def big_sum(nums):

    max_num = -1
    min_num = -1
    result = 0
    for num in nums:
        if num > max_num:
            max_num = num
        if num < min_num:
            min_num = num
        result += num
    return result

def check(big_sum):
    assert big_sum([1,2,3]) == 4
    assert big_sum([-1,2,3,4]) == 3
    assert big_sum([2,3,6]) == 8

check(big_sum)
solution 0 passed False
Task 308 gens 1 solutions in cir 0
check_program: 
# Write a function to find the specified number of largest products from two given lists.

def large_product(nums1, nums2, N):

    result = []
    for i in range(N):
        prod = 1
        for num in nums1:
            prod *= num
        for num in nums2:
            prod *= num
        if prod > max(result):
            result.append(prod)
    return result

def check(large_product):
    assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]
    assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],4)==[60, 54, 50, 48]
    assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],5)==[60, 54, 50, 48, 45]

check(large_product)
solution 0 passed False
Task 308 gens 6 solutions in cir 1
check_program: 
# Write a function to find the specified number of largest products from two given lists.

def large_product(nums1, nums2, N):

    result = []
    for i in range(N):
        prod = 1
        for num in nums1:
            prod *= num
        for num in nums2:
            prod *= num
        if prod > max(result):
            result.append(prod)
    return result

def check(large_product):
    assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]
    assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],4)==[60, 54, 50, 48]
    assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],5)==[60, 54, 50, 48, 45]

check(large_product)
solution 0 passed False
Task 308 gens 10 solutions in cir 2
check_program: 
# Write a function to find the specified number of largest products from two given lists.

def large_product(nums1, nums2, N):

    max_prod = 0
    prod_list = []
    for num1 in nums1:
        for num2 in nums2:
            prod = num1 * num2
            if prod > max_prod:
                max_prod = prod
                prod_list.append(prod)
    return prod_list[:N]

def check(large_product):
    assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]
    assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],4)==[60, 54, 50, 48]
    assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],5)==[60, 54, 50, 48, 45]

check(large_product)
solution 0 passed False
Task 308 gens 10 solutions in cir 3
check_program: 
# Write a function to find the specified number of largest products from two given lists.

def large_product(nums1, nums2, N):

    max_prod = 0
    prod_list = []
    for num1 in nums1:
        for num2 in nums2:
            prod = num1 * num2
            if prod > max_prod:
                max_prod = prod
                prod_list.append(prod)
    return prod_list[:N]

def check(large_product):
    assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]
    assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],4)==[60, 54, 50, 48]
    assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],5)==[60, 54, 50, 48, 45]

check(large_product)
solution 0 passed False
Task 362 gens 1 solutions in cir 0
check_program: 
# Write a python function to find the item with maximum occurrences in a given list.

def max_occurrences(nums):

    max_num = nums[0]
    max_count = 1
    for num in nums:
        if num > max_num:
            max_num = num
            max_count = 1
        else:
            max_count += 1
    return max_count

def check(max_occurrences):
    assert max_occurrences([1,2,3,1,2,3,12,4,2]) ==  2
    assert max_occurrences([1,2,6,7,0,1,0,1,0]) == 1,0
    assert max_occurrences([1,2,3,1,2,4,1]) == 1

check(max_occurrences)
solution 0 passed False
Task 362 gens 7 solutions in cir 1
check_program: 
# Write a python function to find the item with maximum occurrences in a given list.

def max_occurrences(nums):

    return max(nums)

def check(max_occurrences):
    assert max_occurrences([1,2,3,1,2,3,12,4,2]) ==  2
    assert max_occurrences([1,2,6,7,0,1,0,1,0]) == 1,0
    assert max_occurrences([1,2,3,1,2,4,1]) == 1

check(max_occurrences)
solution 0 passed False
Task 362 gens 10 solutions in cir 2
check_program: 
# Write a python function to find the item with maximum occurrences in a given list.

def max_occurrences(nums):

    return max(nums)

def check(max_occurrences):
    assert max_occurrences([1,2,3,1,2,3,12,4,2]) ==  2
    assert max_occurrences([1,2,6,7,0,1,0,1,0]) == 1,0
    assert max_occurrences([1,2,3,1,2,4,1]) == 1

check(max_occurrences)
solution 0 passed False
Task 362 gens 10 solutions in cir 3
check_program: 
# Write a python function to find the item with maximum occurrences in a given list.

def max_occurrences(nums):

    freq = {}
    for num in nums:
        if num in freq:
            freq[num] += 1
        else:
            freq[num] = 1
    return max(freq.items(), key=lambda x: x[1])[0]

def check(max_occurrences):
    assert max_occurrences([1,2,3,1,2,3,12,4,2]) ==  2
    assert max_occurrences([1,2,6,7,0,1,0,1,0]) == 1,0
    assert max_occurrences([1,2,3,1,2,4,1]) == 1

check(max_occurrences)
solution 0 passed True
Task 362 gens 10 solutions in cir 4
check_program: 
# Write a python function to find the item with maximum occurrences in a given list.

def max_occurrences(nums):

    return max(nums)

def check(max_occurrences):
    assert max_occurrences([1,2,3,1,2,3,12,4,2]) ==  2
    assert max_occurrences([1,2,6,7,0,1,0,1,0]) == 1,0
    assert max_occurrences([1,2,3,1,2,4,1]) == 1

check(max_occurrences)
solution 0 passed False
Task 362 gens 10 solutions in cir 5
check_program: 
# Write a python function to find the item with maximum occurrences in a given list.

def max_occurrences(nums):

    max_count = {num: 0 for num in nums}
    max_num = nums[0]
    for num in nums:
        max_count[num] += 1
        if max_count[num] > max_count[max_num]:
            max_num = num
    return max_num

def check(max_occurrences):
    assert max_occurrences([1,2,3,1,2,3,12,4,2]) ==  2
    assert max_occurrences([1,2,6,7,0,1,0,1,0]) == 1,0
    assert max_occurrences([1,2,3,1,2,4,1]) == 1

check(max_occurrences)
solution 0 passed True
Task 44 gens 1 solutions in cir 0
check_program: 
# Write a function that matches a word at the beginning of a string.
import re
def text_match_string(text):

    import re
    pattern = re.compile(r'^(\w+)$')
    match = pattern.match(text)
    return match.group(1)

def check(text_match_string):
    assert text_match_string(" python")==('Not matched!')
    assert text_match_string("python")==('Found a match!')
    assert text_match_string("  lang")==('Not matched!')

check(text_match_string)
solution 0 passed False
Task 44 gens 4 solutions in cir 1
check_program: 
# Write a function that matches a word at the beginning of a string.
import re
def text_match_string(text):

    import re
    pattern = re.compile(r'^(\w+)$')
    match = pattern.match(text)
    return match.group(1)

def check(text_match_string):
    assert text_match_string(" python")==('Not matched!')
    assert text_match_string("python")==('Found a match!')
    assert text_match_string("  lang")==('Not matched!')

check(text_match_string)
solution 0 passed False
Task 44 gens 10 solutions in cir 2
check_program: 
# Write a function that matches a word at the beginning of a string.
import re
def text_match_string(text):

    import re
    pattern = re.compile(r'^(\w+)$')
    match = pattern.match(text)
    return match.group(1)

def check(text_match_string):
    assert text_match_string(" python")==('Not matched!')
    assert text_match_string("python")==('Found a match!')
    assert text_match_string("  lang")==('Not matched!')

check(text_match_string)
solution 0 passed False
Task 44 gens 10 solutions in cir 3
check_program: 
# Write a function that matches a word at the beginning of a string.
import re
def text_match_string(text):

    pattern = re.compile(r'^(\w+)$')
    match = pattern.match(text)
    if match:
        return match.group(1)
    return None

def check(text_match_string):
    assert text_match_string(" python")==('Not matched!')
    assert text_match_string("python")==('Found a match!')
    assert text_match_string("  lang")==('Not matched!')

check(text_match_string)
solution 0 passed False
Task 44 gens 10 solutions in cir 4
check_program: 
# Write a function that matches a word at the beginning of a string.
import re
def text_match_string(text):

    pattern = re.compile(r'^(\w+)$')
    match = pattern.match(text)
    if match:
        return match.group(1)
    return None

def check(text_match_string):
    assert text_match_string(" python")==('Not matched!')
    assert text_match_string("python")==('Found a match!')
    assert text_match_string("  lang")==('Not matched!')

check(text_match_string)
solution 0 passed False
Task 61 gens 1 solutions in cir 0
check_program: 
# Write a python function to count number of substrings with the sum of digits equal to their length.
from collections import defaultdict
def count_Substrings(s,n):

    count = defaultdict(int)
    for i in range(len(s)):
        for j in range(i+1, len(s)):
            sum_digits = sum(int(d) for d in str(s[i:j+1]))
            if sum_digits == j:
                count[sum_digits] += 1
    return count

def check(count_Substrings):
    assert count_Substrings('112112',6) == 6
    assert count_Substrings('111',3) == 6
    assert count_Substrings('1101112',7) == 12

check(count_Substrings)
solution 0 passed False
Task 61 gens 6 solutions in cir 1
check_program: 
# Write a python function to count number of substrings with the sum of digits equal to their length.
from collections import defaultdict
def count_Substrings(s,n):

    count = defaultdict(int)
    for i in range(len(s)):
        for j in range(i+1, len(s)):
            sum_digits = sum(int(d) for d in str(s[i:j+1]))
            if sum_digits == j:
                count[sum_digits] += 1
    return count

def check(count_Substrings):
    assert count_Substrings('112112',6) == 6
    assert count_Substrings('111',3) == 6
    assert count_Substrings('1101112',7) == 12

check(count_Substrings)
solution 0 passed False
Task 61 gens 10 solutions in cir 2
check_program: 
# Write a python function to count number of substrings with the sum of digits equal to their length.
from collections import defaultdict
def count_Substrings(s,n):

    from typing import List
    count = defaultdict(int)
    all_str = ''.join(str(i) for i in range(10))
    for i in range(len(s)):
        for j in range(len(all_str)):
            if s[i:j+1] == all_str[j]:
                count[sum(int(digit) for digit in s[i:j+1])] += 1
    return count[n]

def check(count_Substrings):
    assert count_Substrings('112112',6) == 6
    assert count_Substrings('111',3) == 6
    assert count_Substrings('1101112',7) == 12

check(count_Substrings)
solution 0 passed False
Task 61 gens 10 solutions in cir 3
check_program: 
# Write a python function to count number of substrings with the sum of digits equal to their length.
from collections import defaultdict
def count_Substrings(s,n):

    count = defaultdict(int)
    all_str = ''.join(str(i) for i in range(10))
    for i in range(len(s)):
        for j in range(len(all_str)):
            if s[i:j+1] == all_str[j]:
                count[sum(int(digit) for digit in s[i:j+1])] += 1
    return count[n]

def check(count_Substrings):
    assert count_Substrings('112112',6) == 6
    assert count_Substrings('111',3) == 6
    assert count_Substrings('1101112',7) == 12

check(count_Substrings)
solution 0 passed False
Task 61 gens 10 solutions in cir 4
check_program: 
# Write a python function to count number of substrings with the sum of digits equal to their length.
from collections import defaultdict
def count_Substrings(s,n):

    count = defaultdict(int)
    all_str = ''.join(str(i) for i in range(10))
    for i in range(len(s)):
        for j in range(len(all_str)):
            if s[i:j+1] == all_str[j]:
                count[sum(int(digit) for digit in s[i:j+1])] += 1
    return count[n]

def check(count_Substrings):
    assert count_Substrings('112112',6) == 6
    assert count_Substrings('111',3) == 6
    assert count_Substrings('1101112',7) == 12

check(count_Substrings)
solution 0 passed False
Task 99 gens 1 solutions in cir 0
check_program: 
# Write a function to convert the given decimal number to its binary equivalent.

def decimal_to_binary(n):

    binary_num = ""
    while n > 0:
        binary_num = str(n % 2) + binary_num
        n = n // 2
    return binary_num

def check(decimal_to_binary):
    assert decimal_to_binary(8) == '1000'
    assert decimal_to_binary(18) == '10010'
    assert decimal_to_binary(7) == '111' 

check(decimal_to_binary)
solution 0 passed True
Task 99 gens 2 solutions in cir 1
check_program: 
# Write a function to convert the given decimal number to its binary equivalent.

def decimal_to_binary(n):

    binary_num = ""
    while n > 0:
        binary_num = str(n % 2) + binary_num
        n = n // 2
    return binary_num

def check(decimal_to_binary):
    assert decimal_to_binary(8) == '1000'
    assert decimal_to_binary(18) == '10010'
    assert decimal_to_binary(7) == '111' 

check(decimal_to_binary)
solution 0 passed True
Task 99 gens 4 solutions in cir 2
check_program: 
# Write a function to convert the given decimal number to its binary equivalent.

def decimal_to_binary(n):

    binary_num = ""
    while n > 0:
        binary_num = str(n % 2) + binary_num
        n = n // 2
    return binary_num

def check(decimal_to_binary):
    assert decimal_to_binary(8) == '1000'
    assert decimal_to_binary(18) == '10010'
    assert decimal_to_binary(7) == '111' 

check(decimal_to_binary)
solution 0 passed True
Task 99 gens 10 solutions in cir 3
check_program: 
# Write a function to convert the given decimal number to its binary equivalent.

def decimal_to_binary(n):

    binary_num = ""
    while n > 0:
        binary_num = str(n % 2) + binary_num
        n = n // 2
    return binary_num

def check(decimal_to_binary):
    assert decimal_to_binary(8) == '1000'
    assert decimal_to_binary(18) == '10010'
    assert decimal_to_binary(7) == '111' 

check(decimal_to_binary)
solution 0 passed True
Task 99 gens 10 solutions in cir 4
check_program: 
# Write a function to convert the given decimal number to its binary equivalent.

def decimal_to_binary(n):

    binary_num = ""
    while n > 0:
        binary_num = str(n % 2) + binary_num
        n = n // 2
    return binary_num

def check(decimal_to_binary):
    assert decimal_to_binary(8) == '1000'
    assert decimal_to_binary(18) == '10010'
    assert decimal_to_binary(7) == '111' 

check(decimal_to_binary)
solution 0 passed True
Task 99 gens 10 solutions in cir 5
check_program: 
# Write a function to convert the given decimal number to its binary equivalent.

def decimal_to_binary(n):

    return bin(n)[2:].zfill(len(str(n))).replace("0>", "").replace("<", "")

def check(decimal_to_binary):
    assert decimal_to_binary(8) == '1000'
    assert decimal_to_binary(18) == '10010'
    assert decimal_to_binary(7) == '111' 

check(decimal_to_binary)
solution 0 passed True
Task 99 gens 10 solutions in cir 6
check_program: 
# Write a function to convert the given decimal number to its binary equivalent.

def decimal_to_binary(n):

    return bin(n)[2:].zfill(len(str(n))).replace("0>", "").replace("<", "")

def check(decimal_to_binary):
    assert decimal_to_binary(8) == '1000'
    assert decimal_to_binary(18) == '10010'
    assert decimal_to_binary(7) == '111' 

check(decimal_to_binary)
solution 0 passed True
Task 13 gens 1 solutions in cir 0
check_program: 
# Write a function to count the most common words in a dictionary.
from collections import Counter
def count_common(words):

    return Counter(words).most_common(1)[0][0]

def check(count_common):
    assert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',"black",'pink','green','green','pink','green','pink','white','orange',"orange",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]
    assert count_common(['one', 'two', 'three', 'four', 'five', 'one', 'two', 'one', 'three', 'one']) == [('one', 4), ('two', 2), ('three', 2), ('four', 1)]
    assert count_common(['Facebook', 'Apple', 'Amazon', 'Netflix', 'Google', 'Apple', 'Netflix', 'Amazon']) == [('Apple', 2), ('Amazon', 2), ('Netflix', 2), ('Facebook', 1)]

check(count_common)
solution 0 passed False
Task 13 gens 6 solutions in cir 1
check_program: 
# Write a function to count the most common words in a dictionary.
from collections import Counter
def count_common(words):

    return Counter(words).most_common(1)[0][0]

def check(count_common):
    assert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',"black",'pink','green','green','pink','green','pink','white','orange',"orange",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]
    assert count_common(['one', 'two', 'three', 'four', 'five', 'one', 'two', 'one', 'three', 'one']) == [('one', 4), ('two', 2), ('three', 2), ('four', 1)]
    assert count_common(['Facebook', 'Apple', 'Amazon', 'Netflix', 'Google', 'Apple', 'Netflix', 'Amazon']) == [('Apple', 2), ('Amazon', 2), ('Netflix', 2), ('Facebook', 1)]

check(count_common)
solution 0 passed False
Task 13 gens 10 solutions in cir 2
check_program: 
# Write a function to count the most common words in a dictionary.
from collections import Counter
def count_common(words):

    return max(word for word, count in Counter(words).items() if count == Counter(words)[word])

def check(count_common):
    assert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',"black",'pink','green','green','pink','green','pink','white','orange',"orange",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]
    assert count_common(['one', 'two', 'three', 'four', 'five', 'one', 'two', 'one', 'three', 'one']) == [('one', 4), ('two', 2), ('three', 2), ('four', 1)]
    assert count_common(['Facebook', 'Apple', 'Amazon', 'Netflix', 'Google', 'Apple', 'Netflix', 'Amazon']) == [('Apple', 2), ('Amazon', 2), ('Netflix', 2), ('Facebook', 1)]

check(count_common)
solution 0 passed False
Task 13 gens 10 solutions in cir 3
check_program: 
# Write a function to count the most common words in a dictionary.
from collections import Counter
def count_common(words):

    return max(words, key=lambda x: Counter(words).get(x, 0))

def check(count_common):
    assert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',"black",'pink','green','green','pink','green','pink','white','orange',"orange",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]
    assert count_common(['one', 'two', 'three', 'four', 'five', 'one', 'two', 'one', 'three', 'one']) == [('one', 4), ('two', 2), ('three', 2), ('four', 1)]
    assert count_common(['Facebook', 'Apple', 'Amazon', 'Netflix', 'Google', 'Apple', 'Netflix', 'Amazon']) == [('Apple', 2), ('Amazon', 2), ('Netflix', 2), ('Facebook', 1)]

check(count_common)
solution 0 passed False
Task 88 gens 1 solutions in cir 0
check_program: 
# Write a function to get the frequency of the elements in a list.
import collections
def freq_count(list1):

    freq = collections.Counter(list1)
    return freq

def check(freq_count):
    assert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1}) 
    assert freq_count([1,2,3,4,3,2,4,1,3,1,4])==({1:3, 2:2,3:3,4:3}) 
    assert freq_count([5,6,7,4,9,10,4,5,6,7,9,5])==({10:1,5:3,6:2,7:2,4:2,9:2}) 

check(freq_count)
solution 0 passed True
Task 88 gens 4 solutions in cir 1
check_program: 
# Write a function to get the frequency of the elements in a list.
import collections
def freq_count(list1):

    freq = collections.Counter(lst)
    return freq

def check(freq_count):
    assert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1}) 
    assert freq_count([1,2,3,4,3,2,4,1,3,1,4])==({1:3, 2:2,3:3,4:3}) 
    assert freq_count([5,6,7,4,9,10,4,5,6,7,9,5])==({10:1,5:3,6:2,7:2,4:2,9:2}) 

check(freq_count)
solution 0 passed False
Task 88 gens 10 solutions in cir 2
check_program: 
# Write a function to get the frequency of the elements in a list.
import collections
def freq_count(list1):

    freq = collections.Counter()
    for el in list1:
        if el is not None:
            freq[el] += 1
    return freq

def check(freq_count):
    assert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1}) 
    assert freq_count([1,2,3,4,3,2,4,1,3,1,4])==({1:3, 2:2,3:3,4:3}) 
    assert freq_count([5,6,7,4,9,10,4,5,6,7,9,5])==({10:1,5:3,6:2,7:2,4:2,9:2}) 

check(freq_count)
solution 0 passed True
Task 88 gens 10 solutions in cir 3
check_program: 
# Write a function to get the frequency of the elements in a list.
import collections
def freq_count(list1):

    freq = collections.Counter()
    for el in list1:
        if el is not None:
            freq[el] += 1
    return freq

def check(freq_count):
    assert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1}) 
    assert freq_count([1,2,3,4,3,2,4,1,3,1,4])==({1:3, 2:2,3:3,4:3}) 
    assert freq_count([5,6,7,4,9,10,4,5,6,7,9,5])==({10:1,5:3,6:2,7:2,4:2,9:2}) 

check(freq_count)
solution 0 passed True
Task 88 gens 10 solutions in cir 4
check_program: 
# Write a function to get the frequency of the elements in a list.
import collections
def freq_count(list1):

    from collections import Counter
    freq = Counter()
    for el in list1:
        if el is not None:
            freq[el] += 1
    return freq

def check(freq_count):
    assert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1}) 
    assert freq_count([1,2,3,4,3,2,4,1,3,1,4])==({1:3, 2:2,3:3,4:3}) 
    assert freq_count([5,6,7,4,9,10,4,5,6,7,9,5])==({10:1,5:3,6:2,7:2,4:2,9:2}) 

check(freq_count)
solution 0 passed True
Task 235 gens 1 solutions in cir 0
check_program: 
# Write a python function to set all even bits of a given number.

def even_bit_set_number(n):

    result = 0
    while n > 0:
        if n % 2 == 0:
            result += 1
        n = n >> 1
    return result

def check(even_bit_set_number):
    assert even_bit_set_number(10) == 10
    assert even_bit_set_number(20) == 30
    assert even_bit_set_number(30) == 30

check(even_bit_set_number)
solution 0 passed False
Task 235 gens 3 solutions in cir 1
check_program: 
# Write a python function to set all even bits of a given number.

def even_bit_set_number(n):

    result = 0
    while n > 0:
        if n % 2 == 0:
            result += 1
        n = n >> 1
    return result

def check(even_bit_set_number):
    assert even_bit_set_number(10) == 10
    assert even_bit_set_number(20) == 30
    assert even_bit_set_number(30) == 30

check(even_bit_set_number)
solution 0 passed False
Task 235 gens 7 solutions in cir 2
check_program: 
# Write a python function to set all even bits of a given number.

def even_bit_set_number(n):

    return bin(n).count('0')

def check(even_bit_set_number):
    assert even_bit_set_number(10) == 10
    assert even_bit_set_number(20) == 30
    assert even_bit_set_number(30) == 30

check(even_bit_set_number)
solution 0 passed False
Task 235 gens 10 solutions in cir 3
check_program: 
# Write a python function to set all even bits of a given number.

def even_bit_set_number(n):

    return bin(n).count('0')

def check(even_bit_set_number):
    assert even_bit_set_number(10) == 10
    assert even_bit_set_number(20) == 30
    assert even_bit_set_number(30) == 30

check(even_bit_set_number)
solution 0 passed False
Task 235 gens 10 solutions in cir 4
check_program: 
# Write a python function to set all even bits of a given number.

def even_bit_set_number(n):

    return int(bin(n).replace('0b',''),2)

def check(even_bit_set_number):
    assert even_bit_set_number(10) == 10
    assert even_bit_set_number(20) == 30
    assert even_bit_set_number(30) == 30

check(even_bit_set_number)
solution 0 passed False
Task 483 gens 1 solutions in cir 0
check_program: 
# Write a python function to find the first natural number whose factorial is divisible by x.

def first_Factorial_Divisible_Number(x):

    result = 1
    while result! = 0:
        result = result * (x % result)
        x = x / result
    return x

def check(first_Factorial_Divisible_Number):
    assert first_Factorial_Divisible_Number(10) == 5
    assert first_Factorial_Divisible_Number(15) == 5
    assert first_Factorial_Divisible_Number(5) == 4

check(first_Factorial_Divisible_Number)
solution 0 passed False
Task 483 gens 9 solutions in cir 1
check_program: 
# Write a python function to find the first natural number whose factorial is divisible by x.

def first_Factorial_Divisible_Number(x):

    result = 1
    while x % result:
        result = result * (x // result)
        x = x % result
    return x

def check(first_Factorial_Divisible_Number):
    assert first_Factorial_Divisible_Number(10) == 5
    assert first_Factorial_Divisible_Number(15) == 5
    assert first_Factorial_Divisible_Number(5) == 4

check(first_Factorial_Divisible_Number)
solution 0 passed False
Task 483 gens 10 solutions in cir 2
check_program: 
# Write a python function to find the first natural number whose factorial is divisible by x.

def first_Factorial_Divisible_Number(x):

    result = 1
    while x % result:
        result = result * (x // result)
        x = x % result
    return x

def check(first_Factorial_Divisible_Number):
    assert first_Factorial_Divisible_Number(10) == 5
    assert first_Factorial_Divisible_Number(15) == 5
    assert first_Factorial_Divisible_Number(5) == 4

check(first_Factorial_Divisible_Number)
solution 0 passed False
Task 483 gens 10 solutions in cir 3
check_program: 
# Write a python function to find the first natural number whose factorial is divisible by x.

def first_Factorial_Divisible_Number(x):

    result = 1
    while x % result != 0:
        result = result * (x // result)
        x = x % result
    return result

def check(first_Factorial_Divisible_Number):
    assert first_Factorial_Divisible_Number(10) == 5
    assert first_Factorial_Divisible_Number(15) == 5
    assert first_Factorial_Divisible_Number(5) == 4

check(first_Factorial_Divisible_Number)
solution 0 passed False
Task 416 gens 1 solutions in cir 0
check_program: 
# Write a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.
MAX = 1000000
def breakSum(n):

    if n == 0:
        return 0
    else:
        left = breakSum(n//3)
        right = breakSum((n//3) + 1)
        return max(left, right) + (n - (left + right))

def check(breakSum):
    assert breakSum(12) == 13
    assert breakSum(24) == 27
    assert breakSum(23) == 23

check(breakSum)
solution 0 passed False
Task 416 gens 6 solutions in cir 1
check_program: 
# Write a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.
MAX = 1000000
def breakSum(n):

    if n == 0:
        return 0
    elif n % 3 == 0:
        return n // 3
    else:
        left = breakSum(n - 1)
        right = breakSum((n - 1) + 1)
        return max(left, right) + (n - (left + right))

def check(breakSum):
    assert breakSum(12) == 13
    assert breakSum(24) == 27
    assert breakSum(23) == 23

check(breakSum)
solution 0 passed False
Task 416 gens 10 solutions in cir 2
check_program: 
# Write a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.
MAX = 1000000
def breakSum(n):

    if n == 0:
        return 0
    elif n % 3 == 0:
        return n // 3
    else:
        left = breakSum(n - 1)
        right = breakSum((n - 1) + 1)
        return max(left, right) + (n - (left + right))

def check(breakSum):
    assert breakSum(12) == 13
    assert breakSum(24) == 27
    assert breakSum(23) == 23

check(breakSum)
solution 0 passed False
Task 416 gens 10 solutions in cir 3
check_program: 
# Write a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.
MAX = 1000000
def breakSum(n):

    if n < 3:
        return n
    else:
        left = breakSum(n // 3)
        right = breakSum((n // 3) + 1)
        return max(left, right) + (n - (left + right))

def check(breakSum):
    assert breakSum(12) == 13
    assert breakSum(24) == 27
    assert breakSum(23) == 23

check(breakSum)
solution 0 passed False
Task 416 gens 10 solutions in cir 4
check_program: 
# Write a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.
MAX = 1000000
def breakSum(n):

    if n <= 1:
        return n
    if n % 3 == 0:
        return n // 3
    elif n == 1 or n == 2:
        return n
    else:
        return max(breakSum(n - 1), breakSum(n - 1) + breakSum(n - 1) + 1) + (n - (breakSum(n - 1) + breakSum(n - 1) + 1))

def check(breakSum):
    assert breakSum(12) == 13
    assert breakSum(24) == 27
    assert breakSum(23) == 23

check(breakSum)
solution 0 passed False
Task 190 gens 1 solutions in cir 0
check_program: 
# Write a python function to count the number of integral co-ordinates that lie inside a square.

def count_Intgral_Points(x1,y1,x2,y2):

    return (x1-x2)*(y2-y1)

def check(count_Intgral_Points):
    assert count_Intgral_Points(1,1,4,4) == 4
    assert count_Intgral_Points(1,2,1,2) == 1
    assert count_Intgral_Points(4,2,6,4) == 1

check(count_Intgral_Points)
solution 0 passed False
Task 190 gens 8 solutions in cir 1
check_program: 
# Write a python function to count the number of integral co-ordinates that lie inside a square.

def count_Intgral_Points(x1,y1,x2,y2):

    return (x2 - x1) * (y2 - y1)

def check(count_Intgral_Points):
    assert count_Intgral_Points(1,1,4,4) == 4
    assert count_Intgral_Points(1,2,1,2) == 1
    assert count_Intgral_Points(4,2,6,4) == 1

check(count_Intgral_Points)
solution 0 passed False
Task 190 gens 10 solutions in cir 2
check_program: 
# Write a python function to count the number of integral co-ordinates that lie inside a square.

def count_Intgral_Points(x1,y1,x2,y2):

    return (((x2-x1)*(y2-y1)) >= 0)

def check(count_Intgral_Points):
    assert count_Intgral_Points(1,1,4,4) == 4
    assert count_Intgral_Points(1,2,1,2) == 1
    assert count_Intgral_Points(4,2,6,4) == 1

check(count_Intgral_Points)
solution 0 passed False
Task 190 gens 10 solutions in cir 3
check_program: 
# Write a python function to count the number of integral co-ordinates that lie inside a square.

def count_Intgral_Points(x1,y1,x2,y2):

    if x1 < x2 and y1 < y2:
        return 1
    return 0

def check(count_Intgral_Points):
    assert count_Intgral_Points(1,1,4,4) == 4
    assert count_Intgral_Points(1,2,1,2) == 1
    assert count_Intgral_Points(4,2,6,4) == 1

check(count_Intgral_Points)
solution 0 passed False
Task 438 gens 1 solutions in cir 0
check_program: 
# Write a function to count bidirectional tuple pairs.

def count_bidirectional(test_list):

    count = 0
    for i in range(len(test_list)):
        for j in range(i, len(test_list)):
            if test_list[i] == test_list[j]:
                count += 1
    return count

def check(count_bidirectional):
    assert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '3'
    assert count_bidirectional([(5, 6), (1, 3), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '2'
    assert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 2), (6, 5), (2, 1)] ) == '4'

check(count_bidirectional)
solution 0 passed False
Task 438 gens 10 solutions in cir 1
check_program: 
# Write a function to count bidirectional tuple pairs.

def count_bidirectional(test_list):

    count = 0
    for i in range(len(test_list)):
        for j in range(i+1, len(test_list)):
            if test_list[i] == test_list[j]:
                count += 1
    return count

def check(count_bidirectional):
    assert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '3'
    assert count_bidirectional([(5, 6), (1, 3), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '2'
    assert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 2), (6, 5), (2, 1)] ) == '4'

check(count_bidirectional)
solution 0 passed False
Task 438 gens 10 solutions in cir 2
check_program: 
# Write a function to count bidirectional tuple pairs.

def count_bidirectional(test_list):

    import itertools
    from collections import Counter
    c1, c2 = Counter(test_list), Counter(test_list)
    return len(c1.keys()) - len(c2.keys()) // 2

def check(count_bidirectional):
    assert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '3'
    assert count_bidirectional([(5, 6), (1, 3), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '2'
    assert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 2), (6, 5), (2, 1)] ) == '4'

check(count_bidirectional)
solution 0 passed False
Task 438 gens 10 solutions in cir 3
check_program: 
# Write a function to count bidirectional tuple pairs.

def count_bidirectional(test_list):

    from typing import List
    count = 0
    if len(test_list) < 2:
        return count
    else:
        for i in range(1, len(test_list) - 1):
            if test_list[i] != test_list[i+1]:
                count += 1
        return count

def check(count_bidirectional):
    assert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '3'
    assert count_bidirectional([(5, 6), (1, 3), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '2'
    assert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 2), (6, 5), (2, 1)] ) == '4'

check(count_bidirectional)
solution 0 passed False
Task 52 gens 1 solutions in cir 0
check_program: 
# Write a function to caluclate area of a parallelogram.

def parallelogram_area(b,h):

    return b * h

def check(parallelogram_area):
    assert parallelogram_area(10,20)==200
    assert parallelogram_area(15,20)==300
    assert parallelogram_area(8,9)==72

check(parallelogram_area)
solution 0 passed True
Task 52 gens 2 solutions in cir 1
check_program: 
# Write a function to caluclate area of a parallelogram.

def parallelogram_area(b,h):

    return b * h

def check(parallelogram_area):
    assert parallelogram_area(10,20)==200
    assert parallelogram_area(15,20)==300
    assert parallelogram_area(8,9)==72

check(parallelogram_area)
solution 0 passed True
Task 52 gens 8 solutions in cir 2
check_program: 
# Write a function to caluclate area of a parallelogram.

def parallelogram_area(b,h):

    return b * h

def check(parallelogram_area):
    assert parallelogram_area(10,20)==200
    assert parallelogram_area(15,20)==300
    assert parallelogram_area(8,9)==72

check(parallelogram_area)
solution 0 passed True
Task 52 gens 10 solutions in cir 3
check_program: 
# Write a function to caluclate area of a parallelogram.

def parallelogram_area(b,h):

    return (b * h)

def check(parallelogram_area):
    assert parallelogram_area(10,20)==200
    assert parallelogram_area(15,20)==300
    assert parallelogram_area(8,9)==72

check(parallelogram_area)
solution 0 passed True
Task 52 gens 10 solutions in cir 4
check_program: 
# Write a function to caluclate area of a parallelogram.

def parallelogram_area(b,h):

    return (b * h)

def check(parallelogram_area):
    assert parallelogram_area(10,20)==200
    assert parallelogram_area(15,20)==300
    assert parallelogram_area(8,9)==72

check(parallelogram_area)
solution 0 passed True
Task 52 gens 10 solutions in cir 5
check_program: 
# Write a function to caluclate area of a parallelogram.

def parallelogram_area(b,h):

    return (b * h)

def check(parallelogram_area):
    assert parallelogram_area(10,20)==200
    assert parallelogram_area(15,20)==300
    assert parallelogram_area(8,9)==72

check(parallelogram_area)
solution 0 passed True
Task 52 gens 10 solutions in cir 6
check_program: 
# Write a function to caluclate area of a parallelogram.

def parallelogram_area(b,h):

    return (b * h)

def check(parallelogram_area):
    assert parallelogram_area(10,20)==200
    assert parallelogram_area(15,20)==300
    assert parallelogram_area(8,9)==72

check(parallelogram_area)
solution 0 passed True
Task 111 gens 1 solutions in cir 0
check_program: 
# Write a function to find common elements in given nested lists. * list item * list item * list item * list item

def common_in_nested_lists(nestedlist):

    if not nestedlist:
        return []
    common_elements = set()
    for sublist in nestedlist:
        for element in sublist:
            common_elements.add(element)
    return list(common_elements)

def check(common_in_nested_lists):
    assert common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])==[18, 12]
    assert common_in_nested_lists([[12, 5, 23, 25, 45], [7, 11, 5, 23, 28], [1, 5, 8, 18, 23, 16]])==[5,23]
    assert common_in_nested_lists([[2, 3,4, 1], [4, 5], [6,4, 8],[4, 5], [6, 8,4]])==[4]

check(common_in_nested_lists)
solution 0 passed False
Task 111 gens 6 solutions in cir 1
check_program: 
# Write a function to find common elements in given nested lists. * list item * list item * list item * list item

def common_in_nested_lists(nestedlist):

    if not nestedlist:
        return []
    common_elements = set()
    for sublist in nestedlist:
        for element in sublist:
            common_elements.add(element)
    return list(common_elements)

def check(common_in_nested_lists):
    assert common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])==[18, 12]
    assert common_in_nested_lists([[12, 5, 23, 25, 45], [7, 11, 5, 23, 28], [1, 5, 8, 18, 23, 16]])==[5,23]
    assert common_in_nested_lists([[2, 3,4, 1], [4, 5], [6,4, 8],[4, 5], [6, 8,4]])==[4]

check(common_in_nested_lists)
solution 0 passed False
Task 111 gens 10 solutions in cir 2
check_program: 
# Write a function to find common elements in given nested lists. * list item * list item * list item * list item

def common_in_nested_lists(nestedlist):

    if not nestedlist:
        return []
    common_elements = set()
    for sublist in nestedlist:
        for element in sublist:
            common_elements.add(element)
    return list(common_elements)

def check(common_in_nested_lists):
    assert common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])==[18, 12]
    assert common_in_nested_lists([[12, 5, 23, 25, 45], [7, 11, 5, 23, 28], [1, 5, 8, 18, 23, 16]])==[5,23]
    assert common_in_nested_lists([[2, 3,4, 1], [4, 5], [6,4, 8],[4, 5], [6, 8,4]])==[4]

check(common_in_nested_lists)
solution 0 passed False
Task 111 gens 10 solutions in cir 3
check_program: 
# Write a function to find common elements in given nested lists. * list item * list item * list item * list item

def common_in_nested_lists(nestedlist):

    if not nestedlist:
        return []
    common_elements = set()
    for sublist in nestedlist:
        for element in sublist:
            common_elements.add(element)
    return list(common_elements)

def check(common_in_nested_lists):
    assert common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])==[18, 12]
    assert common_in_nested_lists([[12, 5, 23, 25, 45], [7, 11, 5, 23, 28], [1, 5, 8, 18, 23, 16]])==[5,23]
    assert common_in_nested_lists([[2, 3,4, 1], [4, 5], [6,4, 8],[4, 5], [6, 8,4]])==[4]

check(common_in_nested_lists)
solution 0 passed False
Task 156 gens 1 solutions in cir 0
check_program: 
# Write a function to convert a tuple of string values to a tuple of integer values.

def tuple_int_str(tuple_str):

    return tuple(int(x) for x in tuple_str)

def check(tuple_int_str):
    assert tuple_int_str((('333', '33'), ('1416', '55')))==((333, 33), (1416, 55))
    assert tuple_int_str((('999', '99'), ('1000', '500')))==((999, 99), (1000, 500))
    assert tuple_int_str((('666', '66'), ('1500', '555')))==((666, 66), (1500, 555))

check(tuple_int_str)
solution 0 passed False
Task 156 gens 2 solutions in cir 1
check_program: 
# Write a function to convert a tuple of string values to a tuple of integer values.

def tuple_int_str(tuple_str):

    return tuple(int(x) for x in tuple_str)

def check(tuple_int_str):
    assert tuple_int_str((('333', '33'), ('1416', '55')))==((333, 33), (1416, 55))
    assert tuple_int_str((('999', '99'), ('1000', '500')))==((999, 99), (1000, 500))
    assert tuple_int_str((('666', '66'), ('1500', '555')))==((666, 66), (1500, 555))

check(tuple_int_str)
solution 0 passed False
Task 156 gens 5 solutions in cir 2
check_program: 
# Write a function to convert a tuple of string values to a tuple of integer values.

def tuple_int_str(tuple_str):

    return tuple(int(x) for x in tuple_str)

def check(tuple_int_str):
    assert tuple_int_str((('333', '33'), ('1416', '55')))==((333, 33), (1416, 55))
    assert tuple_int_str((('999', '99'), ('1000', '500')))==((999, 99), (1000, 500))
    assert tuple_int_str((('666', '66'), ('1500', '555')))==((666, 66), (1500, 555))

check(tuple_int_str)
solution 0 passed False
Task 156 gens 10 solutions in cir 3
check_program: 
# Write a function to convert a tuple of string values to a tuple of integer values.

def tuple_int_str(tuple_str):

    return tuple(int(x) for x in tuple_str)

def check(tuple_int_str):
    assert tuple_int_str((('333', '33'), ('1416', '55')))==((333, 33), (1416, 55))
    assert tuple_int_str((('999', '99'), ('1000', '500')))==((999, 99), (1000, 500))
    assert tuple_int_str((('666', '66'), ('1500', '555')))==((666, 66), (1500, 555))

check(tuple_int_str)
solution 0 passed False
Task 156 gens 10 solutions in cir 4
check_program: 
# Write a function to convert a tuple of string values to a tuple of integer values.

def tuple_int_str(tuple_str):

    return tuple(int(x) for x in tuple_str)

def check(tuple_int_str):
    assert tuple_int_str((('333', '33'), ('1416', '55')))==((333, 33), (1416, 55))
    assert tuple_int_str((('999', '99'), ('1000', '500')))==((999, 99), (1000, 500))
    assert tuple_int_str((('666', '66'), ('1500', '555')))==((666, 66), (1500, 555))

check(tuple_int_str)
solution 0 passed False
Task 156 gens 10 solutions in cir 5
check_program: 
# Write a function to convert a tuple of string values to a tuple of integer values.

def tuple_int_str(tuple_str):

    return tuple(int(x) for x in tuple_str)

def check(tuple_int_str):
    assert tuple_int_str((('333', '33'), ('1416', '55')))==((333, 33), (1416, 55))
    assert tuple_int_str((('999', '99'), ('1000', '500')))==((999, 99), (1000, 500))
    assert tuple_int_str((('666', '66'), ('1500', '555')))==((666, 66), (1500, 555))

check(tuple_int_str)
solution 0 passed False
Task 133 gens 1 solutions in cir 0
check_program: 
# Write a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.

def sum_negativenum(nums):

    nums = [25, 35, 22, 85, 14, 65, 75, 22, 58]
    sum_negativenum = sum(lambda x: -x if x < 0 else 0 for x in nums)
    print(sum_negativenum)

def check(sum_negativenum):
    assert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32
    assert sum_negativenum([10,15,-14,13,-18,12,-20])==-52
    assert sum_negativenum([19, -65, 57, 39, 152,-639, 121, 44, 90, -190])==-894

check(sum_negativenum)
solution 0 passed False
Task 133 gens 7 solutions in cir 1
check_program: 
# Write a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.

def sum_negativenum(nums):

    neg_nums = [x for x in nums if x < 0]
    return sum(neg_nums)

def check(sum_negativenum):
    assert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32
    assert sum_negativenum([10,15,-14,13,-18,12,-20])==-52
    assert sum_negativenum([19, -65, 57, 39, 152,-639, 121, 44, 90, -190])==-894

check(sum_negativenum)
solution 0 passed True
Task 133 gens 10 solutions in cir 2
check_program: 
# Write a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.

def sum_negativenum(nums):

    neg_nums = [x for x in nums if x < 0]
    return sum(neg_nums)

def check(sum_negativenum):
    assert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32
    assert sum_negativenum([10,15,-14,13,-18,12,-20])==-52
    assert sum_negativenum([19, -65, 57, 39, 152,-639, 121, 44, 90, -190])==-894

check(sum_negativenum)
solution 0 passed True
Task 133 gens 10 solutions in cir 3
check_program: 
# Write a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.

def sum_negativenum(nums):

    neg_nums = [x for x in nums if x < 0]
    return sum(neg_nums) if neg_nums else 0

def check(sum_negativenum):
    assert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32
    assert sum_negativenum([10,15,-14,13,-18,12,-20])==-52
    assert sum_negativenum([19, -65, 57, 39, 152,-639, 121, 44, 90, -190])==-894

check(sum_negativenum)
solution 0 passed True
Task 366 gens 1 solutions in cir 0
check_program: 
# Write a python function to find the largest product of the pair of adjacent elements from a given list of integers.

def adjacent_num_product(list_nums):

    result = 0
    for i in range(1, len(list_nums)):
        result = list_nums[i] * (list_nums[i-1] + list_nums[i])
    return result

def check(adjacent_num_product):
    assert adjacent_num_product([1,2,3,4,5,6]) == 30
    assert adjacent_num_product([1,2,3,4,5]) == 20
    assert adjacent_num_product([2,3]) == 6

check(adjacent_num_product)
solution 0 passed False
Task 366 gens 8 solutions in cir 1
check_program: 
# Write a python function to find the largest product of the pair of adjacent elements from a given list of integers.

def adjacent_num_product(list_nums):

    result = 0
    for i in range(1, len(list_nums)):
        result = list_nums[i] * (list_nums[i-1] + list_nums[i])
    return result

def check(adjacent_num_product):
    assert adjacent_num_product([1,2,3,4,5,6]) == 30
    assert adjacent_num_product([1,2,3,4,5]) == 20
    assert adjacent_num_product([2,3]) == 6

check(adjacent_num_product)
solution 0 passed False
Task 366 gens 10 solutions in cir 2
check_program: 
# Write a python function to find the largest product of the pair of adjacent elements from a given list of integers.

def adjacent_num_product(list_nums):

    result = 1
    for num in list_nums:
        result *= num
    return result

def check(adjacent_num_product):
    assert adjacent_num_product([1,2,3,4,5,6]) == 30
    assert adjacent_num_product([1,2,3,4,5]) == 20
    assert adjacent_num_product([2,3]) == 6

check(adjacent_num_product)
solution 0 passed False
Task 366 gens 10 solutions in cir 3
check_program: 
# Write a python function to find the largest product of the pair of adjacent elements from a given list of integers.

def adjacent_num_product(list_nums):

    result = 1
    for i in range(1, len(list_nums)):
        result = result * (list_nums[i] + list_nums[i-1])
    return result

def check(adjacent_num_product):
    assert adjacent_num_product([1,2,3,4,5,6]) == 30
    assert adjacent_num_product([1,2,3,4,5]) == 20
    assert adjacent_num_product([2,3]) == 6

check(adjacent_num_product)
solution 0 passed False
Task 366 gens 10 solutions in cir 4
check_program: 
# Write a python function to find the largest product of the pair of adjacent elements from a given list of integers.

def adjacent_num_product(list_nums):

    product = 1
    for i in range(1, len(list_nums)):
        if i > 0:
            product = (list_nums[i] * (list_nums[i] + list_nums[i-1]))
    return product

def check(adjacent_num_product):
    assert adjacent_num_product([1,2,3,4,5,6]) == 30
    assert adjacent_num_product([1,2,3,4,5]) == 20
    assert adjacent_num_product([2,3]) == 6

check(adjacent_num_product)
solution 0 passed False
Task 366 gens 10 solutions in cir 5
check_program: 
# Write a python function to find the largest product of the pair of adjacent elements from a given list of integers.

def adjacent_num_product(list_nums):

    if len(list_nums) <= 1:
        return 0
    result = 0
    for num in list_nums[1:]:
        if num != list_nums[0]:
            result = max(num * (list_nums[0] + list_nums[1]), result)
    return result

def check(adjacent_num_product):
    assert adjacent_num_product([1,2,3,4,5,6]) == 30
    assert adjacent_num_product([1,2,3,4,5]) == 20
    assert adjacent_num_product([2,3]) == 6

check(adjacent_num_product)
solution 0 passed False
Task 366 gens 10 solutions in cir 6
check_program: 
# Write a python function to find the largest product of the pair of adjacent elements from a given list of integers.

def adjacent_num_product(list_nums):

    prod = 1
    for i in range(len(list_nums)-1):
        prod *= (list_nums[i] + list_nums[i+1])
    return prod

def check(adjacent_num_product):
    assert adjacent_num_product([1,2,3,4,5,6]) == 30
    assert adjacent_num_product([1,2,3,4,5]) == 20
    assert adjacent_num_product([2,3]) == 6

check(adjacent_num_product)
solution 0 passed False
Task 366 gens 10 solutions in cir 7
check_program: 
# Write a python function to find the largest product of the pair of adjacent elements from a given list of integers.

def adjacent_num_product(list_nums):

    result = 1
    for num in list_nums:
        result *= num
    for i in range(1, len(list_nums)):
        result *= (list_nums[i] + list_nums[i-1])
    for i in range(len(list_nums)-2):
        result *= (list_nums[i] + list_nums[i+1])
    for i in range(len(list_nums)-3):
        result *= (list_nums[i] + list_nums[i+2])
    return result

def check(adjacent_num_product):
    assert adjacent_num_product([1,2,3,4,5,6]) == 30
    assert adjacent_num_product([1,2,3,4,5]) == 20
    assert adjacent_num_product([2,3]) == 6

check(adjacent_num_product)
solution 0 passed False
Task 366 gens 10 solutions in cir 8
check_program: 
# Write a python function to find the largest product of the pair of adjacent elements from a given list of integers.

def adjacent_num_product(list_nums):

    prod = 1
    for i in range(len(list_nums)-1):
        if list_nums[i] > 0:
            prod *= (list_nums[i] + list_nums[i+1])
        else:
            prod *= list_nums[i+1]
    return prod

def check(adjacent_num_product):
    assert adjacent_num_product([1,2,3,4,5,6]) == 30
    assert adjacent_num_product([1,2,3,4,5]) == 20
    assert adjacent_num_product([2,3]) == 6

check(adjacent_num_product)
solution 0 passed False
Task 247 gens 1 solutions in cir 0
check_program: 
# Write a function to find the longest palindromic subsequence in the given string.

def lps(str):

    if len(str) == 0:
        return []
    mid = len(str) // 2
    left = lps(str[:mid])
    right = lps(str[mid:])
    return max(left, right) + [str[mid]]

def check(lps):
    assert lps("TENS FOR TENS") == 5 
    assert lps("CARDIO FOR CARDS") == 7
    assert lps("PART OF THE JOURNEY IS PART") == 9 

check(lps)
solution 0 passed False
Task 247 gens 9 solutions in cir 1
check_program: 
# Write a function to find the longest palindromic subsequence in the given string.

def lps(str):

    if len(str) == 0:
        return []
    mid = len(str) // 2
    left = lps(str[:mid])
    right = lps(str[mid:])
    return max(left, right) + [str[mid]]

def check(lps):
    assert lps("TENS FOR TENS") == 5 
    assert lps("CARDIO FOR CARDS") == 7
    assert lps("PART OF THE JOURNEY IS PART") == 9 

check(lps)
solution 0 passed False
Task 247 gens 10 solutions in cir 2
check_program: 
# Write a function to find the longest palindromic subsequence in the given string.

def lps(str):

    import heapq
    if len(str) == 1:
        return str
    result = []
    for i in range(1, len(str)):
        for j in range(i+1, len(str)):
            if str[i] != str[j]:
                break
            else:
                result.append(str[i:j+1])
    max_len = max(len(result) for result in result)
    for i in range(max_len):
        for pal in result[i:]:
            if len(pal) == len(result[i]) - 1:
                max_len = max(max_len, len(pal) + 1)
    return max_len

def check(lps):
    assert lps("TENS FOR TENS") == 5 
    assert lps("CARDIO FOR CARDS") == 7
    assert lps("PART OF THE JOURNEY IS PART") == 9 

check(lps)
solution 0 passed False
Task 247 gens 10 solutions in cir 3
check_program: 
# Write a function to find the longest palindromic subsequence in the given string.

def lps(str):

    if len(str) == 0:
        return []
    mid = len(str) // 2
    l_max = r_max = -1
    l_start = r_start = None
    for i in range(mid-1):
        if str[i] == str[-1-i]:
            l_max = max(l_max, i+1)
            if l_start is None or l_start < i:
                l_start = i
            r_max = max(r_max, i+1)
            if r_start is None or r_start < i:
                r_start = i
    result = []
    if l_start is not None:
        for i in range(l_max):
            result.append(str[l_start+i])
            l_start += i+1
    if r_start is not None:
        for i in range(r_max-l_max):
            result.append(str[r_start-i])
            r_start -= i
    result = "".join(reversed(result))
    return result

def check(lps):
    assert lps("TENS FOR TENS") == 5 
    assert lps("CARDIO FOR CARDS") == 7
    assert lps("PART OF THE JOURNEY IS PART") == 9 

check(lps)
solution 0 passed False
Task 247 gens 10 solutions in cir 4
check_program: 
# Write a function to find the longest palindromic subsequence in the given string.

def lps(str):

    if len(str) == 0:
        return []
    mid = len(str) // 2
    l_max = r_max = -1
    l_start = r_start = None
    for i in range(mid-1):
        if str[i] == str[-1-i]:
            l_max = max(l_max, i+1)
            if l_start is None or l_start < i:
                l_start = i
            r_max = max(r_max, i+1)
            if r_start is None or r_start < i:
                r_start = i
    result = []
    if l_start is not None:
        for i in range(l_max):
            result.append(str[l_start+i])
            l_start += i+1
    if r_start is not None:
        for i in range(r_max-l_max):
            result.append(str[r_start-i])
            r_start -= i
    result = "".join(reversed(result))
    return result

def check(lps):
    assert lps("TENS FOR TENS") == 5 
    assert lps("CARDIO FOR CARDS") == 7
    assert lps("PART OF THE JOURNEY IS PART") == 9 

check(lps)
solution 0 passed False
Task 247 gens 10 solutions in cir 5
check_program: 
# Write a function to find the longest palindromic subsequence in the given string.

def lps(str):

    if len(str) < 2:
        return str
    max_lps = []
    lps_length = [0] * len(str)
    heap = []
    for lps in lps_length:
        for i in range(1, len(str)):
            if str[i] != str[lps + i - 1]:
                break
            heapq.heappush(heap, (lps + i, i))
    while heap:
        lps = heapq.heappop(heap)[1]
        max_lps.append(lps)
        lps_length[lps] = lps + 1
        for j in range(1, len(str)):
            if str[j] != str[lps + j - 1]:
                break
            heapq.heappush(heap, (lps + j, lps + 1))
    max_lps.reverse()
    result = ""
    for i in range(len(max_lps)):
        if i == len(max_lps) - 1:
            result += max_lps[i]
        else:
            result += max_lps[i] + str[max_lps[i + 1] - 1]
    return result.rstrip()

def check(lps):
    assert lps("TENS FOR TENS") == 5 
    assert lps("CARDIO FOR CARDS") == 7
    assert lps("PART OF THE JOURNEY IS PART") == 9 

check(lps)
solution 0 passed False
Task 247 gens 10 solutions in cir 6
check_program: 
# Write a function to find the longest palindromic subsequence in the given string.

def lps(str):

    if len(str) == 0:
        return []
    mid = len(str) // 2
    l_max, r_max = 0, 0
    l_start, r_start = None, None
    for i in range(mid-1):
        if str[i] == str[-1-i]:
            l_max = max(l_max, i+1)
            if l_start is None or l_start < i:
                l_start = i
            r_max = max(r_max, i+1)
            if r_start is None or r_start < i:
                r_start = i
    result = []
    if l_start is not None:
        for i in range(l_max):
            result.append(str[l_start+i])
            l_start += i+1
    if r_start is not None:
        for i in range(r_max-l_max):
            result.append(str[r_start-i])
            r_start -= i
    result = "".join(reversed(result))
    return result

def check(lps):
    assert lps("TENS FOR TENS") == 5 
    assert lps("CARDIO FOR CARDS") == 7
    assert lps("PART OF THE JOURNEY IS PART") == 9 

check(lps)
solution 0 passed False
Task 247 gens 10 solutions in cir 7
check_program: 
# Write a function to find the longest palindromic subsequence in the given string.

def lps(str):

    if len(str) < 2:
        return str
    max_lps = []
    lps_length = [0] * len(str)
    heap = []
    for lps in lps_length:
        for i in range(1, len(str)):
            if str[i] != str[lps + i - 1]:
                break
            heapq.heappush(heap, (lps + i, i))
    while heap:
        lps = heapq.heappop(heap)[1]
        max_lps.append(lps)
        lps_length[lps] = lps + 1
        for j in range(1, len(str)):
            if str[j] != str[lps + j - 1]:
                break
            heapq.heappush(heap, (lps + j, lps + 1))
    max_lps.reverse()
    result = ""
    for i in range(len(max_lps)):
        if i == len(max_lps) - 1:
            result += max_lps[i]
        else:
            result += max_lps[i] + str[max_lps[i + 1] - 1]
    return result.rstrip()

def check(lps):
    assert lps("TENS FOR TENS") == 5 
    assert lps("CARDIO FOR CARDS") == 7
    assert lps("PART OF THE JOURNEY IS PART") == 9 

check(lps)
solution 0 passed False
Task 247 gens 10 solutions in cir 8
check_program: 
# Write a function to find the longest palindromic subsequence in the given string.

def lps(str):

    if len(str) < 2:
        return str
    max_lps = []
    lps_length = [0] * len(str)
    heap = []
    for lps in lps_length:
        for i in range(1, len(str)):
            if str[i] != str[lps + i - 1]:
                break
            heapq.heappush(heap, (lps + i, i))
    while heap:
        lps = heapq.heappop(heap)[1]
        max_lps.append(lps)
        lps_length[lps] = lps + 1
        for j in range(1, len(str)):
            if str[j] != str[lps + j - 1]:
                break
            heapq.heappush(heap, (lps + j, lps + 1))
    max_lps.reverse()
    result = ""
    for i in range(len(max_lps)):
        if i == len(max_lps) - 1:
            result += max_lps[i]
        else:
            result += max_lps[i] + str[max_lps[i + 1] - 1]
    result = result.rstrip()
    return result

def check(lps):
    assert lps("TENS FOR TENS") == 5 
    assert lps("CARDIO FOR CARDS") == 7
    assert lps("PART OF THE JOURNEY IS PART") == 9 

check(lps)
solution 0 passed False
Task 247 gens 10 solutions in cir 9
check_program: 
# Write a function to find the longest palindromic subsequence in the given string.

def lps(str):

    lps_length = {}
    max_lps = []
    for sub in str:
        if sub in lps_length:
            lps_length[sub] = lps_length[sub] + 1
        else:
            lps_length[sub] = 1
            max_lps.append(sub)
    max_lps.sort()
    result = ""
    for i in range(len(max_lps)):
        if i == len(max_lps) - 1:
            result += max_lps[i]
        else:
            result += max_lps[i] + str[max_lps[i + 1] - 1]
    return result.rstrip()

def check(lps):
    assert lps("TENS FOR TENS") == 5 
    assert lps("CARDIO FOR CARDS") == 7
    assert lps("PART OF THE JOURNEY IS PART") == 9 

check(lps)
solution 0 passed False
Task 247 gens 10 solutions in cir 10
check_program: 
# Write a function to find the longest palindromic subsequence in the given string.

def lps(str):

    lps_length = {}
    max_lps = []
    for sub in str:
        if sub in lps_length:
            lps_length[sub] = lps_length[sub] + 1
        else:
            lps_length[sub] = 1
            max_lps.append(sub)
    max_lps.sort()
    result = ""
    for i in range(len(max_lps)):
        if i == len(max_lps) - 1:
            result += max_lps[i]
        else:
            result += max_lps[i] + str[max_lps[i + 1] - 1]
    return result.rstrip()

def check(lps):
    assert lps("TENS FOR TENS") == 5 
    assert lps("CARDIO FOR CARDS") == 7
    assert lps("PART OF THE JOURNEY IS PART") == 9 

check(lps)
solution 0 passed False
Task 319 gens 1 solutions in cir 0
check_program: 
# Write a function to find all five characters long word in the given string by using regex.
import re
def find_long_word(text):

    pattern = r'\b\w{5}\b'
    words = re.findall(pattern, text)
    return words

def check(find_long_word):
    assert find_long_word('Please move back to strem') == ['strem']
    assert find_long_word('4K Ultra HD streaming player') == ['Ultra']
    assert find_long_word('Streaming Media Player') == ['Media']

check(find_long_word)
solution 0 passed True
Task 319 gens 1 solutions in cir 1
check_program: 
# Write a function to find all five characters long word in the given string by using regex.
import re
def find_long_word(text):

    pattern = r'\b\w{5}\b'
    words = re.findall(pattern, text)
    return words

def check(find_long_word):
    assert find_long_word('Please move back to strem') == ['strem']
    assert find_long_word('4K Ultra HD streaming player') == ['Ultra']
    assert find_long_word('Streaming Media Player') == ['Media']

check(find_long_word)
solution 0 passed True
Task 319 gens 2 solutions in cir 2
check_program: 
# Write a function to find all five characters long word in the given string by using regex.
import re
def find_long_word(text):

    pattern = r'\b\w{5}\b'
    words = re.findall(pattern, text)
    return words

def check(find_long_word):
    assert find_long_word('Please move back to strem') == ['strem']
    assert find_long_word('4K Ultra HD streaming player') == ['Ultra']
    assert find_long_word('Streaming Media Player') == ['Media']

check(find_long_word)
solution 0 passed True
Task 319 gens 3 solutions in cir 3
check_program: 
# Write a function to find all five characters long word in the given string by using regex.
import re
def find_long_word(text):

    pattern = r'\b\w{5}\b'
    words = re.findall(pattern, text)
    return words

def check(find_long_word):
    assert find_long_word('Please move back to strem') == ['strem']
    assert find_long_word('4K Ultra HD streaming player') == ['Ultra']
    assert find_long_word('Streaming Media Player') == ['Media']

check(find_long_word)
solution 0 passed True
Task 319 gens 3 solutions in cir 4
check_program: 
# Write a function to find all five characters long word in the given string by using regex.
import re
def find_long_word(text):

    pattern = r'\b\w{5}\b'
    words = re.findall(pattern, text)
    return words

def check(find_long_word):
    assert find_long_word('Please move back to strem') == ['strem']
    assert find_long_word('4K Ultra HD streaming player') == ['Ultra']
    assert find_long_word('Streaming Media Player') == ['Media']

check(find_long_word)
solution 0 passed True
Task 319 gens 3 solutions in cir 5
check_program: 
# Write a function to find all five characters long word in the given string by using regex.
import re
def find_long_word(text):

    pattern = r'\b\w{5}\b'
    words = re.findall(pattern, text)
    return words

def check(find_long_word):
    assert find_long_word('Please move back to strem') == ['strem']
    assert find_long_word('4K Ultra HD streaming player') == ['Ultra']
    assert find_long_word('Streaming Media Player') == ['Media']

check(find_long_word)
solution 0 passed True
Task 319 gens 5 solutions in cir 6
check_program: 
# Write a function to find all five characters long word in the given string by using regex.
import re
def find_long_word(text):

    pattern = r'\b\w{5}\b'
    words = re.findall(pattern, text)
    return words

def check(find_long_word):
    assert find_long_word('Please move back to strem') == ['strem']
    assert find_long_word('4K Ultra HD streaming player') == ['Ultra']
    assert find_long_word('Streaming Media Player') == ['Media']

check(find_long_word)
solution 0 passed True
Task 319 gens 6 solutions in cir 7
check_program: 
# Write a function to find all five characters long word in the given string by using regex.
import re
def find_long_word(text):

    pattern = r'\b\w{5}\b'
    return [w for w in re.findall(pattern, text) if w]

def check(find_long_word):
    assert find_long_word('Please move back to strem') == ['strem']
    assert find_long_word('4K Ultra HD streaming player') == ['Ultra']
    assert find_long_word('Streaming Media Player') == ['Media']

check(find_long_word)
solution 0 passed True
Task 319 gens 10 solutions in cir 8
check_program: 
# Write a function to find all five characters long word in the given string by using regex.
import re
def find_long_word(text):

    pattern = r'\b\w{5,}\b'
    words = re.findall(pattern, text)
    return words

def check(find_long_word):
    assert find_long_word('Please move back to strem') == ['strem']
    assert find_long_word('4K Ultra HD streaming player') == ['Ultra']
    assert find_long_word('Streaming Media Player') == ['Media']

check(find_long_word)
solution 0 passed False
Task 319 gens 10 solutions in cir 9
check_program: 
# Write a function to find all five characters long word in the given string by using regex.
import re
def find_long_word(text):

    pattern = r'\b\w{5,}\b'
    words = re.findall(pattern, text)
    return [word for word in words if word.islower()]

def check(find_long_word):
    assert find_long_word('Please move back to strem') == ['strem']
    assert find_long_word('4K Ultra HD streaming player') == ['Ultra']
    assert find_long_word('Streaming Media Player') == ['Media']

check(find_long_word)
solution 0 passed False
Task 319 gens 10 solutions in cir 10
check_program: 
# Write a function to find all five characters long word in the given string by using regex.
import re
def find_long_word(text):

    pattern = r'\b\w{5,}\b'
    words = re.findall(pattern, text)
    return [word for word in words if word.islower()]

def check(find_long_word):
    assert find_long_word('Please move back to strem') == ['strem']
    assert find_long_word('4K Ultra HD streaming player') == ['Ultra']
    assert find_long_word('Streaming Media Player') == ['Media']

check(find_long_word)
solution 0 passed False
Task 428 gens 1 solutions in cir 0
check_program: 
# Write a function to sort the given array by using shell sort.

def shell_sort(my_list):

    for i in range(len(my_list)//2 - 1, -1, -1):
        for j in range(i, len(my_list), -1):
            temp = my_list[j]
            k = j
            while (k > i) and (my_list[k] < my_list[k-1]):
                my_list[k] = my_list[k-1]
                k -= 1
            my_list[j] = temp

def check(shell_sort):
    assert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]
    assert shell_sort([24, 22, 39, 34, 87, 73, 68]) == [22, 24, 34, 39, 68, 73, 87]
    assert shell_sort([32, 30, 16, 96, 82, 83, 74]) == [16, 30, 32, 74, 82, 83, 96]

check(shell_sort)
solution 0 passed False
Task 428 gens 10 solutions in cir 1
check_program: 
# Write a function to sort the given array by using shell sort.

def shell_sort(my_list):

    for i in range(len(my_list)):
        
        while i > 0 and my_list[i] < my_list[i-1]:
            my_list[i], my_list[i-1] = my_list[i-1], my_list[i]
            i -= 1
    return my_list

def check(shell_sort):
    assert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]
    assert shell_sort([24, 22, 39, 34, 87, 73, 68]) == [22, 24, 34, 39, 68, 73, 87]
    assert shell_sort([32, 30, 16, 96, 82, 83, 74]) == [16, 30, 32, 74, 82, 83, 96]

check(shell_sort)
solution 0 passed True
Task 428 gens 10 solutions in cir 2
check_program: 
# Write a function to sort the given array by using shell sort.

def shell_sort(my_list):

    for i in range(1, len(my_list)):
        for j in range(i, 0, -1):
            if my_list[j] < my_list[j-1]:
                my_list[j], my_list[j-1] = my_list[j-1], my_list[j]
    return my_list

def check(shell_sort):
    assert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]
    assert shell_sort([24, 22, 39, 34, 87, 73, 68]) == [22, 24, 34, 39, 68, 73, 87]
    assert shell_sort([32, 30, 16, 96, 82, 83, 74]) == [16, 30, 32, 74, 82, 83, 96]

check(shell_sort)
solution 0 passed True
Task 428 gens 10 solutions in cir 3
check_program: 
# Write a function to sort the given array by using shell sort.

def shell_sort(my_list):

    i = 0
    j = len(my_list) - 1
    while i < j:
        if my_list[i] > my_list[j]:
            my_list[i], my_list[j] = my_list[j], my_list[i]
            i += 1
        j -= 1
    return my_list

def check(shell_sort):
    assert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]
    assert shell_sort([24, 22, 39, 34, 87, 73, 68]) == [22, 24, 34, 39, 68, 73, 87]
    assert shell_sort([32, 30, 16, 96, 82, 83, 74]) == [16, 30, 32, 74, 82, 83, 96]

check(shell_sort)
solution 0 passed False
Task 257 gens 1 solutions in cir 0
check_program: 
# Write a function to swap two numbers.

def swap_numbers(a,b):

    temp = a
    a = b
    b = temp
    return a, b

def check(swap_numbers):
    assert swap_numbers(10,20)==(20,10)
    assert swap_numbers(15,17)==(17,15)
    assert swap_numbers(100,200)==(200,100)

check(swap_numbers)
solution 0 passed True
Task 257 gens 5 solutions in cir 1
check_program: 
# Write a function to swap two numbers.

def swap_numbers(a,b):

    return (a, b)

def check(swap_numbers):
    assert swap_numbers(10,20)==(20,10)
    assert swap_numbers(15,17)==(17,15)
    assert swap_numbers(100,200)==(200,100)

check(swap_numbers)
solution 0 passed False
Task 257 gens 8 solutions in cir 2
check_program: 
# Write a function to swap two numbers.

def swap_numbers(a,b):

    return (a, b)

def check(swap_numbers):
    assert swap_numbers(10,20)==(20,10)
    assert swap_numbers(15,17)==(17,15)
    assert swap_numbers(100,200)==(200,100)

check(swap_numbers)
solution 0 passed False
Task 257 gens 10 solutions in cir 3
check_program: 
# Write a function to swap two numbers.

def swap_numbers(a,b):

    return a, b

def check(swap_numbers):
    assert swap_numbers(10,20)==(20,10)
    assert swap_numbers(15,17)==(17,15)
    assert swap_numbers(100,200)==(200,100)

check(swap_numbers)
solution 0 passed False
Task 257 gens 10 solutions in cir 4
check_program: 
# Write a function to swap two numbers.

def swap_numbers(a,b):

    return a, b

def check(swap_numbers):
    assert swap_numbers(10,20)==(20,10)
    assert swap_numbers(15,17)==(17,15)
    assert swap_numbers(100,200)==(200,100)

check(swap_numbers)
solution 0 passed False
Task 257 gens 10 solutions in cir 5
check_program: 
# Write a function to swap two numbers.

def swap_numbers(a,b):

    if a > b:
        return b, a
    return a, b

def check(swap_numbers):
    assert swap_numbers(10,20)==(20,10)
    assert swap_numbers(15,17)==(17,15)
    assert swap_numbers(100,200)==(200,100)

check(swap_numbers)
solution 0 passed False
Task 257 gens 10 solutions in cir 6
check_program: 
# Write a function to swap two numbers.

def swap_numbers(a,b):

    return (a,b)

def check(swap_numbers):
    assert swap_numbers(10,20)==(20,10)
    assert swap_numbers(15,17)==(17,15)
    assert swap_numbers(100,200)==(200,100)

check(swap_numbers)
solution 0 passed False
Task 257 gens 10 solutions in cir 7
check_program: 
# Write a function to swap two numbers.

def swap_numbers(a,b):

    if a > b:
        return b, a
    return a, b

def check(swap_numbers):
    assert swap_numbers(10,20)==(20,10)
    assert swap_numbers(15,17)==(17,15)
    assert swap_numbers(100,200)==(200,100)

check(swap_numbers)
solution 0 passed False
Task 257 gens 10 solutions in cir 8
check_program: 
# Write a function to swap two numbers.

def swap_numbers(a,b):

    return (a, b) if a > b else (b, a)

def check(swap_numbers):
    assert swap_numbers(10,20)==(20,10)
    assert swap_numbers(15,17)==(17,15)
    assert swap_numbers(100,200)==(200,100)

check(swap_numbers)
solution 0 passed True
Task 257 gens 10 solutions in cir 9
check_program: 
# Write a function to swap two numbers.

def swap_numbers(a,b):

    return (a, b) if a > b else (b, a)

def check(swap_numbers):
    assert swap_numbers(10,20)==(20,10)
    assert swap_numbers(15,17)==(17,15)
    assert swap_numbers(100,200)==(200,100)

check(swap_numbers)
solution 0 passed True
Task 257 gens 10 solutions in cir 10
check_program: 
# Write a function to swap two numbers.

def swap_numbers(a,b):

    return (a, b) if a > b else (b, a)

def check(swap_numbers):
    assert swap_numbers(10,20)==(20,10)
    assert swap_numbers(15,17)==(17,15)
    assert swap_numbers(100,200)==(200,100)

check(swap_numbers)
solution 0 passed True
Task 279 gens 1 solutions in cir 0
check_program: 
# Write a function to find the nth decagonal number.

def is_num_decagonal(n):

    if n < 1 or n > 10:
        return False
    if n == 1 or n == 2:
        return True
    if n == 3:
        return True
    if n == 4:
        return True
    if n == 5:
        return True
    if n == 6:
        return True
    if n == 7:
        return True
    if n == 8:
        return True
    if n == 9:
        return True
    if n == 10:
        return True
    return False

def check(is_num_decagonal):
    assert is_num_decagonal(3) == 27
    assert is_num_decagonal(7) == 175
    assert is_num_decagonal(10) == 370

check(is_num_decagonal)
solution 0 passed False
Task 279 gens 10 solutions in cir 1
check_program: 
# Write a function to find the nth decagonal number.

def is_num_decagonal(n):

    if n < 1 or n > 10:
        return False
    if n == 1 or n == 2:
        return True
    if n == 3:
        return True
    if n == 4:
        return True
    if n == 5:
        return True
    if n == 6:
        return True
    if n == 7:
        return True
    if n == 8:
        return True
    if n == 9:
        return True
    if n == 10:
        return True
    return False

def check(is_num_decagonal):
    assert is_num_decagonal(3) == 27
    assert is_num_decagonal(7) == 175
    assert is_num_decagonal(10) == 370

check(is_num_decagonal)
solution 0 passed False
Task 279 gens 10 solutions in cir 2
check_program: 
# Write a function to find the nth decagonal number.

def is_num_decagonal(n):

    if n < 0 or n > 10:
        return False
    if n == 0:
        return True
    if n == 1:
        return True
    if n == 2:
        return True
    if n in (3, 4, 5, 6, 7, 8, 9, 10):
        return True
    return False

def check(is_num_decagonal):
    assert is_num_decagonal(3) == 27
    assert is_num_decagonal(7) == 175
    assert is_num_decagonal(10) == 370

check(is_num_decagonal)
solution 0 passed False
Task 279 gens 10 solutions in cir 3
check_program: 
# Write a function to find the nth decagonal number.

def is_num_decagonal(n):

    import math
    if n < 0 or n > 10:
        return False
    if n == 0:
        return True
    if n == 1:
        return True
    if n == 2:
        return True
    if n in (3, 4, 5, 6, 7, 8, 9, 10):
        return True
    return False

def check(is_num_decagonal):
    assert is_num_decagonal(3) == 27
    assert is_num_decagonal(7) == 175
    assert is_num_decagonal(10) == 370

check(is_num_decagonal)
solution 0 passed False
Task 234 gens 1 solutions in cir 0
check_program: 
# Write a function to find the volume of a cube.

def volume_cube(l):

    return l**3

def check(volume_cube):
    assert volume_cube(3)==27
    assert volume_cube(2)==8
    assert volume_cube(5)==125

check(volume_cube)
solution 0 passed True
Task 234 gens 4 solutions in cir 1
check_program: 
# Write a function to find the volume of a cube.

def volume_cube(l):

    return l * l * l

def check(volume_cube):
    assert volume_cube(3)==27
    assert volume_cube(2)==8
    assert volume_cube(5)==125

check(volume_cube)
solution 0 passed True
Task 234 gens 4 solutions in cir 2
check_program: 
# Write a function to find the volume of a cube.

def volume_cube(l):

    return l*l*l

def check(volume_cube):
    assert volume_cube(3)==27
    assert volume_cube(2)==8
    assert volume_cube(5)==125

check(volume_cube)
solution 0 passed True
Task 234 gens 7 solutions in cir 3
check_program: 
# Write a function to find the volume of a cube.

def volume_cube(l):

    return l * l * l

def check(volume_cube):
    assert volume_cube(3)==27
    assert volume_cube(2)==8
    assert volume_cube(5)==125

check(volume_cube)
solution 0 passed True
Task 234 gens 10 solutions in cir 4
check_program: 
# Write a function to find the volume of a cube.

def volume_cube(l):

    return l * l * l

def check(volume_cube):
    assert volume_cube(3)==27
    assert volume_cube(2)==8
    assert volume_cube(5)==125

check(volume_cube)
solution 0 passed True
Task 234 gens 10 solutions in cir 5
check_program: 
# Write a function to find the volume of a cube.

def volume_cube(l):

    return l * l * l * 3

def check(volume_cube):
    assert volume_cube(3)==27
    assert volume_cube(2)==8
    assert volume_cube(5)==125

check(volume_cube)
solution 0 passed False
Task 234 gens 10 solutions in cir 6
check_program: 
# Write a function to find the volume of a cube.

def volume_cube(l):

    return l * l * l

def check(volume_cube):
    assert volume_cube(3)==27
    assert volume_cube(2)==8
    assert volume_cube(5)==125

check(volume_cube)
solution 0 passed True
Task 234 gens 10 solutions in cir 7
check_program: 
# Write a function to find the volume of a cube.

def volume_cube(l):

    import math
    return math.pow(l,3)

def check(volume_cube):
    assert volume_cube(3)==27
    assert volume_cube(2)==8
    assert volume_cube(5)==125

check(volume_cube)
solution 0 passed True
Task 234 gens 10 solutions in cir 8
check_program: 
# Write a function to find the volume of a cube.

def volume_cube(l):

    return (l ** 3)

def check(volume_cube):
    assert volume_cube(3)==27
    assert volume_cube(2)==8
    assert volume_cube(5)==125

check(volume_cube)
solution 0 passed True
Task 234 gens 10 solutions in cir 9
check_program: 
# Write a function to find the volume of a cube.

def volume_cube(l):

    return l*l*l

def check(volume_cube):
    assert volume_cube(3)==27
    assert volume_cube(2)==8
    assert volume_cube(5)==125

check(volume_cube)
solution 0 passed True
Task 234 gens 10 solutions in cir 10
check_program: 
# Write a function to find the volume of a cube.

def volume_cube(l):

    return (l ** 3)

def check(volume_cube):
    assert volume_cube(3)==27
    assert volume_cube(2)==8
    assert volume_cube(5)==125

check(volume_cube)
solution 0 passed True
Task 350 gens 1 solutions in cir 0
check_program: 
# Write a python function to minimize the length of the string by removing occurrence of only one character.

def minimum_Length(s) :

    result = ""
    for i in range(len(s)):
        if s[i] not in s[:i]:
            result += s[i]
    return result

def check(minimum_Length):
    assert minimum_Length("mnm") == 1
    assert minimum_Length("abcda") == 3
    assert minimum_Length("abcb") == 2

check(minimum_Length)
solution 0 passed False
Task 350 gens 4 solutions in cir 1
check_program: 
# Write a python function to minimize the length of the string by removing occurrence of only one character.

def minimum_Length(s) :

    result = ""
    for i in range(len(s)):
        if s[i] not in s[:i]:
            result += s[i]
    return result

def check(minimum_Length):
    assert minimum_Length("mnm") == 1
    assert minimum_Length("abcda") == 3
    assert minimum_Length("abcb") == 2

check(minimum_Length)
solution 0 passed False
Task 350 gens 10 solutions in cir 2
check_program: 
# Write a python function to minimize the length of the string by removing occurrence of only one character.

def minimum_Length(s) :

    if len(s) == 1:
        return s
    for i in range(len(s)):
        for j in range(i+1):
            if s[i] != s[j]:
                return s[i]
    return ""

def check(minimum_Length):
    assert minimum_Length("mnm") == 1
    assert minimum_Length("abcda") == 3
    assert minimum_Length("abcb") == 2

check(minimum_Length)
solution 0 passed False
Task 350 gens 10 solutions in cir 3
check_program: 
# Write a python function to minimize the length of the string by removing occurrence of only one character.

def minimum_Length(s) :

    result = ""
    for i in range(len(s)):
        if s[i] not in s[:i]:
            result += s[i]
    return result

def check(minimum_Length):
    assert minimum_Length("mnm") == 1
    assert minimum_Length("abcda") == 3
    assert minimum_Length("abcb") == 2

check(minimum_Length)
solution 0 passed False
Task 443 gens 1 solutions in cir 0
check_program: 
# Write a python function to find the largest negative number from the given list.

def largest_neg(list1):

    largest_num = -1
    for num in list1:
        if num < 0:
            largest_num = num
    return largest_num

def check(largest_neg):
    assert largest_neg([1,2,3,-4,-6]) == -6
    assert largest_neg([1,2,3,-8,-9]) == -9
    assert largest_neg([1,2,3,4,-1]) == -1

check(largest_neg)
solution 0 passed True
Task 443 gens 9 solutions in cir 1
check_program: 
# Write a python function to find the largest negative number from the given list.

def largest_neg(list1):

    largest_num = -1
    for num in list1:
        if num < 0:
            largest_num = num
    if largest_num == -1:
        largest_num = 0
    return largest_num

def check(largest_neg):
    assert largest_neg([1,2,3,-4,-6]) == -6
    assert largest_neg([1,2,3,-8,-9]) == -9
    assert largest_neg([1,2,3,4,-1]) == -1

check(largest_neg)
solution 0 passed False
Task 443 gens 10 solutions in cir 2
check_program: 
# Write a python function to find the largest negative number from the given list.

def largest_neg(list1):

    largest_num = -1
    for num in list1:
        if num < 0:
            largest_num = num
    if largest_num == -1:
        largest_num = 0
    return largest_num

def check(largest_neg):
    assert largest_neg([1,2,3,-4,-6]) == -6
    assert largest_neg([1,2,3,-8,-9]) == -9
    assert largest_neg([1,2,3,4,-1]) == -1

check(largest_neg)
solution 0 passed False
Task 443 gens 10 solutions in cir 3
check_program: 
# Write a python function to find the largest negative number from the given list.

def largest_neg(list1):

    largest = 0
    for num in list1:
        if num < 0:
            largest = num
    return largest

def check(largest_neg):
    assert largest_neg([1,2,3,-4,-6]) == -6
    assert largest_neg([1,2,3,-8,-9]) == -9
    assert largest_neg([1,2,3,4,-1]) == -1

check(largest_neg)
solution 0 passed True
Task 446 gens 1 solutions in cir 0
check_program: 
# Write a python function to count the occurence of all elements of list in a tuple.
from collections import Counter 
def count_Occurrence(tup, lst):

    return tuple(Counter(lst).most_common(1))

def check(count_Occurrence):
    assert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3
    assert count_Occurrence((1, 2, 3, 1, 4, 6, 7, 1, 4),[1, 4, 7]) == 6
    assert count_Occurrence((1,2,3,4,5,6),[1,2]) == 2

check(count_Occurrence)
solution 0 passed False
Task 446 gens 3 solutions in cir 1
check_program: 
# Write a python function to count the occurence of all elements of list in a tuple.
from collections import Counter 
def count_Occurrence(tup, lst):

    return tuple(Counter(lst).most_common(1))

def check(count_Occurrence):
    assert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3
    assert count_Occurrence((1, 2, 3, 1, 4, 6, 7, 1, 4),[1, 4, 7]) == 6
    assert count_Occurrence((1,2,3,4,5,6),[1,2]) == 2

check(count_Occurrence)
solution 0 passed False
Task 446 gens 10 solutions in cir 2
check_program: 
# Write a python function to count the occurence of all elements of list in a tuple.
from collections import Counter 
def count_Occurrence(tup, lst):

    return tuple(Counter(lst).most_common(1))

def check(count_Occurrence):
    assert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3
    assert count_Occurrence((1, 2, 3, 1, 4, 6, 7, 1, 4),[1, 4, 7]) == 6
    assert count_Occurrence((1,2,3,4,5,6),[1,2]) == 2

check(count_Occurrence)
solution 0 passed False
Task 446 gens 10 solutions in cir 3
check_program: 
# Write a python function to count the occurence of all elements of list in a tuple.
from collections import Counter 
def count_Occurrence(tup, lst):

    return tuple(Counter(lst).most_common(1))

def check(count_Occurrence):
    assert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3
    assert count_Occurrence((1, 2, 3, 1, 4, 6, 7, 1, 4),[1, 4, 7]) == 6
    assert count_Occurrence((1,2,3,4,5,6),[1,2]) == 2

check(count_Occurrence)
solution 0 passed False
Task 446 gens 10 solutions in cir 4
check_program: 
# Write a python function to count the occurence of all elements of list in a tuple.
from collections import Counter 
def count_Occurrence(tup, lst):

    return Counter([x for x in lst if x in tup])

def check(count_Occurrence):
    assert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3
    assert count_Occurrence((1, 2, 3, 1, 4, 6, 7, 1, 4),[1, 4, 7]) == 6
    assert count_Occurrence((1,2,3,4,5,6),[1,2]) == 2

check(count_Occurrence)
solution 0 passed False
Task 47 gens 1 solutions in cir 0
check_program: 
# Write a python function to find the last digit when factorial of a divides factorial of b.

def compute_Last_Digit(A,B):

    if A == 0:
        return B
    else:
        return A % B

def check(compute_Last_Digit):
    assert compute_Last_Digit(2,4) == 2
    assert compute_Last_Digit(6,8) == 6
    assert compute_Last_Digit(1,2) == 2

check(compute_Last_Digit)
solution 0 passed False
Task 47 gens 5 solutions in cir 1
check_program: 
# Write a python function to find the last digit when factorial of a divides factorial of b.

def compute_Last_Digit(A,B):

    if A == 0:
        return B
    else:
        return A % B

def check(compute_Last_Digit):
    assert compute_Last_Digit(2,4) == 2
    assert compute_Last_Digit(6,8) == 6
    assert compute_Last_Digit(1,2) == 2

check(compute_Last_Digit)
solution 0 passed False
Task 47 gens 10 solutions in cir 2
check_program: 
# Write a python function to find the last digit when factorial of a divides factorial of b.

def compute_Last_Digit(A,B):

    if A == 0:
        return B
    elif A >= B:
        return A % B
    else:
        return B % 10

def check(compute_Last_Digit):
    assert compute_Last_Digit(2,4) == 2
    assert compute_Last_Digit(6,8) == 6
    assert compute_Last_Digit(1,2) == 2

check(compute_Last_Digit)
solution 0 passed False
Task 47 gens 10 solutions in cir 3
check_program: 
# Write a python function to find the last digit when factorial of a divides factorial of b.

def compute_Last_Digit(A,B):

    if A < B:
        return A
    else:
        return B % 10

def check(compute_Last_Digit):
    assert compute_Last_Digit(2,4) == 2
    assert compute_Last_Digit(6,8) == 6
    assert compute_Last_Digit(1,2) == 2

check(compute_Last_Digit)
solution 0 passed False
Task 165 gens 1 solutions in cir 0
check_program: 
# Write a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.

def count_char_position(str1):

    count = 0
    for i in range(len(str1)):
        if str1[i].islower() == str1[i].isupper():
            count += 1
    return count

def check(count_char_position):
    assert count_char_position("xbcefg") == 2
    assert count_char_position("ABcED") == 3
    assert count_char_position("AbgdeF") == 5

check(count_char_position)
solution 0 passed False
Task 165 gens 7 solutions in cir 1
check_program: 
# Write a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.

def count_char_position(str1):

    count = 0
    for i in range(len(str1)):
        if str1[i].islower() == str1[i].isupper():
            count += 1
    return count

def check(count_char_position):
    assert count_char_position("xbcefg") == 2
    assert count_char_position("ABcED") == 3
    assert count_char_position("AbgdeF") == 5

check(count_char_position)
solution 0 passed False
Task 165 gens 10 solutions in cir 2
check_program: 
# Write a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.

def count_char_position(str1):

    count = 0
    for ch in str1:
        if ch.islower() == True:
            count += 1
    return count

def check(count_char_position):
    assert count_char_position("xbcefg") == 2
    assert count_char_position("ABcED") == 3
    assert count_char_position("AbgdeF") == 5

check(count_char_position)
solution 0 passed False
Task 165 gens 10 solutions in cir 3
check_program: 
# Write a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.

def count_char_position(str1):

    count = 0
    for ch in str1:
        if ch.islower() == True:
            count += 1
    if count >= 3:
        return count
    else:
        return 0

def check(count_char_position):
    assert count_char_position("xbcefg") == 2
    assert count_char_position("ABcED") == 3
    assert count_char_position("AbgdeF") == 5

check(count_char_position)
solution 0 passed False
Task 165 gens 10 solutions in cir 4
check_program: 
# Write a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.

def count_char_position(str1):

    import re
    count = 0
    if re.search(r"\b\w\b", str1):
        count = len(str1.upper()) - len(str1) + 1
    for ch in str1:
        if ch.islower():
            count += 1
    return count

def check(count_char_position):
    assert count_char_position("xbcefg") == 2
    assert count_char_position("ABcED") == 3
    assert count_char_position("AbgdeF") == 5

check(count_char_position)
solution 0 passed False
Task 365 gens 1 solutions in cir 0
check_program: 
# Write a python function to count the number of digits of a given number.

def count_Digit(n):

    def count_digit(n):
        count = 0
        while n > 0:
            n, digit = n % 10, n // 10
            count += digit
        return count

def check(count_Digit):
    assert count_Digit(12345) == 5
    assert count_Digit(11223305) == 8
    assert count_Digit(4123459) == 7

check(count_Digit)
solution 0 passed False
Task 365 gens 7 solutions in cir 1
check_program: 
# Write a python function to count the number of digits of a given number.

def count_Digit(n):

    count = 0
    while n > 0:
        count += n % 10
        n = n // 10
    return count

def check(count_Digit):
    assert count_Digit(12345) == 5
    assert count_Digit(11223305) == 8
    assert count_Digit(4123459) == 7

check(count_Digit)
solution 0 passed False
Task 365 gens 10 solutions in cir 2
check_program: 
# Write a python function to count the number of digits of a given number.

def count_Digit(n):

    count = 0
    while n > 0:
        if n % 10 == 0:
            count += 1
        n = n // 10
    return count

def check(count_Digit):
    assert count_Digit(12345) == 5
    assert count_Digit(11223305) == 8
    assert count_Digit(4123459) == 7

check(count_Digit)
solution 0 passed False
Task 365 gens 10 solutions in cir 3
check_program: 
# Write a python function to count the number of digits of a given number.

def count_Digit(n):

    count = 0
    while n > 0:
        count += n % 10
        n = n // 10
    return count

def check(count_Digit):
    assert count_Digit(12345) == 5
    assert count_Digit(11223305) == 8
    assert count_Digit(4123459) == 7

check(count_Digit)
solution 0 passed False
Task 365 gens 10 solutions in cir 4
check_program: 
# Write a python function to count the number of digits of a given number.

def count_Digit(n):

    count = 0
    while n > 0:
        count += n % 10
        n = n // 10
    return count

def check(count_Digit):
    assert count_Digit(12345) == 5
    assert count_Digit(11223305) == 8
    assert count_Digit(4123459) == 7

check(count_Digit)
solution 0 passed False
Task 365 gens 10 solutions in cir 5
check_program: 
# Write a python function to count the number of digits of a given number.

def count_Digit(n):

    count = 0
    while n > 0:
        count += n % 10
        n = n // 10
    return count

def check(count_Digit):
    assert count_Digit(12345) == 5
    assert count_Digit(11223305) == 8
    assert count_Digit(4123459) == 7

check(count_Digit)
solution 0 passed False
Task 153 gens 1 solutions in cir 0
check_program: 
# Write a function to find the vertex of a parabola.

def parabola_vertex(a, b, c):

    x = -b / (2 * a)
    y = c - a * x + b * x ** 2
    return (x, y)

def check(parabola_vertex):
    assert parabola_vertex(5,3,2)==(-0.3, 1.55)
    assert parabola_vertex(9,8,4)==(-0.4444444444444444, 2.2222222222222223)
    assert parabola_vertex(2,4,6)==(-1.0, 4.0)

check(parabola_vertex)
solution 0 passed False
Task 153 gens 8 solutions in cir 1
check_program: 
# Write a function to find the vertex of a parabola.

def parabola_vertex(a, b, c):

    import math
    if a == 0:
        return (0, c)
    elif a < 0:
        x = -b / (2 * a)
        y = c - a * x + b * x ** 2
        return (x, y)
    else:
        x = -b / (2 * a)
        y = c - a * x + b * x ** 2
        return (x, y)

def check(parabola_vertex):
    assert parabola_vertex(5,3,2)==(-0.3, 1.55)
    assert parabola_vertex(9,8,4)==(-0.4444444444444444, 2.2222222222222223)
    assert parabola_vertex(2,4,6)==(-1.0, 4.0)

check(parabola_vertex)
solution 0 passed False
Task 153 gens 10 solutions in cir 2
check_program: 
# Write a function to find the vertex of a parabola.

def parabola_vertex(a, b, c):

    import math
    if a == 0:
        return (0, c)
    elif a < 0:
        x = -b / (2 * a)
        y = c - a * x + b * x ** 2
        return (x, y)
    else:
        x = -b / (2 * a)
        y = c - a * x + b * x ** 2
        return (x, y)

def check(parabola_vertex):
    assert parabola_vertex(5,3,2)==(-0.3, 1.55)
    assert parabola_vertex(9,8,4)==(-0.4444444444444444, 2.2222222222222223)
    assert parabola_vertex(2,4,6)==(-1.0, 4.0)

check(parabola_vertex)
solution 0 passed False
Task 153 gens 10 solutions in cir 3
check_program: 
# Write a function to find the vertex of a parabola.

def parabola_vertex(a, b, c):

    import math
    if a == 0:
        return (0, c)
    elif a < 0:
        x = -b / (2 * a)
        y = c - a * x + b * x ** 2
    elif a > 0:
        x = b / (2 * a)
        y = c - a * x + b * x ** 2
    else:
        x = -b / (2 * a)
        y = c - a * x + b * x ** 2
    return (x, y)

def check(parabola_vertex):
    assert parabola_vertex(5,3,2)==(-0.3, 1.55)
    assert parabola_vertex(9,8,4)==(-0.4444444444444444, 2.2222222222222223)
    assert parabola_vertex(2,4,6)==(-1.0, 4.0)

check(parabola_vertex)
solution 0 passed False
Task 153 gens 10 solutions in cir 4
check_program: 
# Write a function to find the vertex of a parabola.

def parabola_vertex(a, b, c):

    import math
    if a == 0:
        return (0, c)
    elif a < 0:
        x = -b / (2 * a)
        y = c - a * x + b * x ** 2
        return (x, y)
    elif a == 1:
        if b == 0:
            return (0, c)
        elif b == 1:
            if c >= 0:
                x = -b / (2 * a)
                y = c - a * x + b * x ** 2
                return (x, y)
            else:
                return (0, c)
    elif a > 1:
        if b == 0:
            return (0, c)
        elif b == 1:
            if c >= 0:
                x = -b / (2 * a)
                y = c - a * x + b * x ** 2
                return (x, y)
            else:
                return (0, c)

def check(parabola_vertex):
    assert parabola_vertex(5,3,2)==(-0.3, 1.55)
    assert parabola_vertex(9,8,4)==(-0.4444444444444444, 2.2222222222222223)
    assert parabola_vertex(2,4,6)==(-1.0, 4.0)

check(parabola_vertex)
solution 0 passed False
Task 153 gens 10 solutions in cir 5
check_program: 
# Write a function to find the vertex of a parabola.

def parabola_vertex(a, b, c):

    import math
    if a == 0:
        return (0, c)
    elif a < 0:
        x = -b / (2 * a)
        y = c - a * x + b * x ** 2
        return (x, y)
    elif a == 1:
        if b == 0:
            return (0, c)
        elif b == 1:
            if c >= 0:
                x = -b / (2 * a)
                y = c - a * x + b * x ** 2
                return (x, y)
            else:
                return (0, c)
    elif a > 1:
        if b == 0:
            return (0, c)
        elif b == 1:
            if c >= 0:
                x = -b / (2 * a)
                y = c - a * x + b * x ** 2
                return (x, y)
            else:
                return (0, c)

def check(parabola_vertex):
    assert parabola_vertex(5,3,2)==(-0.3, 1.55)
    assert parabola_vertex(9,8,4)==(-0.4444444444444444, 2.2222222222222223)
    assert parabola_vertex(2,4,6)==(-1.0, 4.0)

check(parabola_vertex)
solution 0 passed False
Task 153 gens 10 solutions in cir 6
check_program: 
# Write a function to find the vertex of a parabola.

def parabola_vertex(a, b, c):

    if a == 0:
        return (0, c)
    elif a < 0:
        x = -b / (2 * a)
        y = c - a * x + b * x ** 2
    elif a == 1:
        if b == 0:
            return (0, c)
        elif b == 1:
            x = (-c) / (2 * a)
            y = c - a * x + b * x ** 2
        elif b == -1:
            x = -b / (2 * a)
            y = -c - a * x - b * x ** 2
    elif a > 1:
        if b == 0:
            return (0, c)
        elif b == 1:
            x = -b / (2 * a)
            y = c - a * x + b * x ** 2
        elif b == -1:
            x = -b / (2 * a)
            y = -c - a * x - b * x ** 2
    else:
        return (0, 0)

def check(parabola_vertex):
    assert parabola_vertex(5,3,2)==(-0.3, 1.55)
    assert parabola_vertex(9,8,4)==(-0.4444444444444444, 2.2222222222222223)
    assert parabola_vertex(2,4,6)==(-1.0, 4.0)

check(parabola_vertex)
solution 0 passed False
Task 153 gens 10 solutions in cir 7
check_program: 
# Write a function to find the vertex of a parabola.

def parabola_vertex(a, b, c):

    if a == 0:
        return (0, c)
    elif a < 0:
        x = -b / (2 * a)
        y = c - a * x + b * x ** 2
        return (x, y)
    elif a == 1:
        if c >= 0:
            x = -b / (2 * a)
            y = c - a * x + b * x ** 2
            return (x, y)
        else:
            return (0, c)
    elif a > 1:
        if c >= 0:
            x = -b / (2 * a)
            y = c - a * x + b * x ** 2
            return (x, y)
        else:
            return (0, c)
    else:
        return (0, 0)

def check(parabola_vertex):
    assert parabola_vertex(5,3,2)==(-0.3, 1.55)
    assert parabola_vertex(9,8,4)==(-0.4444444444444444, 2.2222222222222223)
    assert parabola_vertex(2,4,6)==(-1.0, 4.0)

check(parabola_vertex)
solution 0 passed False
Task 153 gens 10 solutions in cir 8
check_program: 
# Write a function to find the vertex of a parabola.

def parabola_vertex(a, b, c):

    if a == 0:
        return (0, c)
    elif a < 0:
        x = -b / (2 * a)
        y = c - a * x + b * x ** 2
    elif a == 1:
        if b == 0:
            return (0, c)
        elif b == 1:
            x = (c) / (2 * a)
            y = c - a * x + b * x ** 2
        elif b == -1:
            x = -b / (2 * a)
            y = -c - a * x - b * x ** 2
    elif a > 1:
        if b == 0:
            return (0, c)
        elif b == 1:
            x = -b / (2 * a)
            y = c - a * x + b * x ** 2
        elif b == -1:
            x = -b / (2 * a)
            y = -c - a * x - b * x ** 2
    else:
        return (0, 0)

def check(parabola_vertex):
    assert parabola_vertex(5,3,2)==(-0.3, 1.55)
    assert parabola_vertex(9,8,4)==(-0.4444444444444444, 2.2222222222222223)
    assert parabola_vertex(2,4,6)==(-1.0, 4.0)

check(parabola_vertex)
solution 0 passed False
Task 153 gens 10 solutions in cir 9
check_program: 
# Write a function to find the vertex of a parabola.

def parabola_vertex(a, b, c):

    if a == 0:
        return (0, c)
    elif a < 0:
        x = -b / (2 * a)
        y = c - a * x + b * x ** 2
    elif a == 1:
        if b == 0:
            return (0, c)
        elif b == 1:
            x = (-c) / (2 * a)
            y = c - a * x + b * x ** 2
        elif b == -1:
            x = -b / (2 * a)
            y = -c - a * x - b * x ** 2
    elif a > 1:
        if b == 0:
            return (0, c)
        elif b == 1:
            x = -b / (2 * a)
            y = c - a * x + b * x ** 2
        elif b == -1:
            x = -b / (2 * a)
            y = -c - a * x - b * x ** 2
    else:
        return (0, 0)

def check(parabola_vertex):
    assert parabola_vertex(5,3,2)==(-0.3, 1.55)
    assert parabola_vertex(9,8,4)==(-0.4444444444444444, 2.2222222222222223)
    assert parabola_vertex(2,4,6)==(-1.0, 4.0)

check(parabola_vertex)
solution 0 passed False
Task 153 gens 10 solutions in cir 10
check_program: 
# Write a function to find the vertex of a parabola.

def parabola_vertex(a, b, c):

    if a==0:
        return (0, c)
    elif a==1 and b==0:
        return (0, c)
    elif a==1 and b==1:
        return (0, -c/a)
    elif a==1 and b==-1:
        return (a*c/b-1, a*c/b)
    elif a>1 and b==0:
        return (0, c)
    elif a>1 and b==1:
        return (0, -c/a)
    elif a>1 and b==-1:
        return (a*c/b+1,-a*c/b)
    else:
        return (0, 0)

def check(parabola_vertex):
    assert parabola_vertex(5,3,2)==(-0.3, 1.55)
    assert parabola_vertex(9,8,4)==(-0.4444444444444444, 2.2222222222222223)
    assert parabola_vertex(2,4,6)==(-1.0, 4.0)

check(parabola_vertex)
solution 0 passed False
Task 413 gens 1 solutions in cir 0
check_program: 
# Write a function to extract the nth element from a given list of tuples.

def extract_nth_element(list1, n):

    return list1[n]

def check(extract_nth_element):
    assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']
    assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,2)==[99, 96, 94, 98]
    assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)],1)==[98, 97, 91, 94]

check(extract_nth_element)
solution 0 passed False
Task 413 gens 9 solutions in cir 1
check_program: 
# Write a function to extract the nth element from a given list of tuples.

def extract_nth_element(list1, n):

    if n < 0:
        return list1[-(n+1)]
    if n >= len(list1):
        return None
    return list1[n]

def check(extract_nth_element):
    assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']
    assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,2)==[99, 96, 94, 98]
    assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)],1)==[98, 97, 91, 94]

check(extract_nth_element)
solution 0 passed False
Task 413 gens 10 solutions in cir 2
check_program: 
# Write a function to extract the nth element from a given list of tuples.

def extract_nth_element(list1, n):

    if n < 0:
        return list1[-n-1]
    for i, x in enumerate(list1):
        if i == n:
            return x
    return None

def check(extract_nth_element):
    assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']
    assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,2)==[99, 96, 94, 98]
    assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)],1)==[98, 97, 91, 94]

check(extract_nth_element)
solution 0 passed False
Task 413 gens 10 solutions in cir 3
check_program: 
# Write a function to extract the nth element from a given list of tuples.

def extract_nth_element(list1, n):

    if n == 0:
        return list1[0]
    elif n == len(list1) - 1:
        return list1[-1]
    elif n < 0:
        return None
    else:
        return list1[n]

def check(extract_nth_element):
    assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']
    assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,2)==[99, 96, 94, 98]
    assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)],1)==[98, 97, 91, 94]

check(extract_nth_element)
solution 0 passed False
Task 300 gens 1 solutions in cir 0
check_program: 
# Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.

def count_binary_seq(n):

    count = 0
    for i in range(2**n):
        if (n-1) % 2**(i-1) == 0:
            count += 1
    return count

def check(count_binary_seq):
    assert count_binary_seq(1) == 2.0
    assert count_binary_seq(2) == 6.0
    assert count_binary_seq(3) == 20.0

check(count_binary_seq)
solution 0 passed False
Task 300 gens 5 solutions in cir 1
check_program: 
# Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.

def count_binary_seq(n):

    count = 0
    for i in range(2**n):
        if (n-1) % 2**(i-1) == 0:
            count += 1
    return count

def check(count_binary_seq):
    assert count_binary_seq(1) == 2.0
    assert count_binary_seq(2) == 6.0
    assert count_binary_seq(3) == 20.0

check(count_binary_seq)
solution 0 passed False
Task 300 gens 10 solutions in cir 2
check_program: 
# Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.

def count_binary_seq(n):

    count = 0
    for i in range(2**n):
        if (n-1) % 2**(i) == 0:
            count += 1
    return count

def check(count_binary_seq):
    assert count_binary_seq(1) == 2.0
    assert count_binary_seq(2) == 6.0
    assert count_binary_seq(3) == 20.0

check(count_binary_seq)
solution 0 passed False
Task 300 gens 10 solutions in cir 3
check_program: 
# Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.

def count_binary_seq(n):

    count = 0
    for i in range(2**n):
        for j in range(n):
            if (n-j) % 2**i == 0:
                count += 1
    return count

def check(count_binary_seq):
    assert count_binary_seq(1) == 2.0
    assert count_binary_seq(2) == 6.0
    assert count_binary_seq(3) == 20.0

check(count_binary_seq)
solution 0 passed False
Task 349 gens 1 solutions in cir 0
check_program: 
# Write a python function to check whether the given string is a binary string or not.

def check(string) :

    if len(string) % 2 != 0:
        return False
    for i in range(len(string) // 2):
        if string[i] != string[len(string) // 2]:
            return False
    return True

def check(check):
    assert check("01010101010") == "Yes"
    assert check("name0") == "No"
    assert check("101") == "Yes"

check(check)
solution 0 passed False
Task 349 gens 2 solutions in cir 1
check_program: 
# Write a python function to check whether the given string is a binary string or not.

def check(string) :

    if len(string) % 2 != 0:
        return False
    for i in range(len(string) // 2):
        if string[i] != string[len(string) // 2]:
            return False
    return True

def check(check):
    assert check("01010101010") == "Yes"
    assert check("name0") == "No"
    assert check("101") == "Yes"

check(check)
solution 0 passed False
Task 349 gens 10 solutions in cir 2
check_program: 
# Write a python function to check whether the given string is a binary string or not.

def check(string) :

    if len(string) % 2 != 0:
        return False
    for i in range(len(string) // 2):
        if string[i] != string[len(string) // 2]:
            return False
    return True

def check(check):
    assert check("01010101010") == "Yes"
    assert check("name0") == "No"
    assert check("101") == "Yes"

check(check)
solution 0 passed False
Task 349 gens 10 solutions in cir 3
check_program: 
# Write a python function to check whether the given string is a binary string or not.

def check(string) :

    return len(string) % 2 == 0 and all(x == y for x, y in zip(string, string[::-1]))

def check(check):
    assert check("01010101010") == "Yes"
    assert check("name0") == "No"
    assert check("101") == "Yes"

check(check)
solution 0 passed False
Task 349 gens 10 solutions in cir 4
check_program: 
# Write a python function to check whether the given string is a binary string or not.

def check(string) :

    return len(string) % 2 == 0 and all(x == y for x, y in zip(string, string[::-1]))

def check(check):
    assert check("01010101010") == "Yes"
    assert check("name0") == "No"
    assert check("101") == "Yes"

check(check)
solution 0 passed False
Task 349 gens 10 solutions in cir 5
check_program: 
# Write a python function to check whether the given string is a binary string or not.

def check(string) :

    return len(string) % 2 == 0 and all(x == y for x, y in zip(string, string[::-1]))

def check(check):
    assert check("01010101010") == "Yes"
    assert check("name0") == "No"
    assert check("101") == "Yes"

check(check)
solution 0 passed False
Task 349 gens 10 solutions in cir 6
check_program: 
# Write a python function to check whether the given string is a binary string or not.

def check(string) :

    if len(string) % 2 != 0:
        return False
    count = 0
    for i in range(len(string) // 2):
        if string[i] != string[len(string) // 2]:
            count = 0
            continue
        count += 1
    return count % 2 == 0 and len(string) % 2 == 0

def check(check):
    assert check("01010101010") == "Yes"
    assert check("name0") == "No"
    assert check("101") == "Yes"

check(check)
solution 0 passed False
Task 349 gens 10 solutions in cir 7
check_program: 
# Write a python function to check whether the given string is a binary string or not.

def check(string) :

    if len(string) % 2 != 0:
        return False
    count = 0
    for i in range(len(string) // 2):
        if string[i] != string[len(string) // 2]:
            count = 0
            continue
        count += 1
    if count % 2 != 0:
        return False
    else:
        return True

def check(check):
    assert check("01010101010") == "Yes"
    assert check("name0") == "No"
    assert check("101") == "Yes"

check(check)
solution 0 passed False
Task 349 gens 10 solutions in cir 8
check_program: 
# Write a python function to check whether the given string is a binary string or not.

def check(string) :

    if len(string) % 2 != 0:
        return False
    count = 0
    for i in range(len(string) // 2):
        if string[i] != string[len(string) // 2]:
            count = 0
            continue
        count += 1
    if count % 2 == 0 and len(string) % 2 == 0:
        return True
    return False

def check(check):
    assert check("01010101010") == "Yes"
    assert check("name0") == "No"
    assert check("101") == "Yes"

check(check)
solution 0 passed False
Task 349 gens 10 solutions in cir 9
check_program: 
# Write a python function to check whether the given string is a binary string or not.

def check(string) :

    if len(string) % 2 != 0:
        return False
    count = 0
    for i in range(len(string) // 2):
        if string[i] != string[len(string) // 2]:
            return False
        count += 1
    if count % 2 == 0:
        return True
    return False

def check(check):
    assert check("01010101010") == "Yes"
    assert check("name0") == "No"
    assert check("101") == "Yes"

check(check)
solution 0 passed False
Task 349 gens 10 solutions in cir 10
check_program: 
# Write a python function to check whether the given string is a binary string or not.

def check(string) :

    if len(string) % 2 != 0:
        return False
    count = 0
    for i in range(len(string) // 2):
        if string[i] != string[len(string) // 2]:
            return False
        count += 1
    if count % 2 == 0:
        return True
    return False

def check(check):
    assert check("01010101010") == "Yes"
    assert check("name0") == "No"
    assert check("101") == "Yes"

check(check)
solution 0 passed False
Task 139 gens 1 solutions in cir 0
check_program: 
# Write a function to find the circumference of a circle.

def circle_circumference(r):

    return r * 2 * math.pi

def check(circle_circumference):
    assert circle_circumference(10)==62.830000000000005
    assert circle_circumference(5)==31.415000000000003
    assert circle_circumference(4)==25.132

check(circle_circumference)
solution 0 passed False
Task 139 gens 3 solutions in cir 1
check_program: 
# Write a function to find the circumference of a circle.

def circle_circumference(r):

    import math
    return r * 2 * math.pi

def check(circle_circumference):
    assert circle_circumference(10)==62.830000000000005
    assert circle_circumference(5)==31.415000000000003
    assert circle_circumference(4)==25.132

check(circle_circumference)
solution 0 passed False
Task 139 gens 10 solutions in cir 2
check_program: 
# Write a function to find the circumference of a circle.

def circle_circumference(r):

    import math
    return r * 2 * math.pi

def check(circle_circumference):
    assert circle_circumference(10)==62.830000000000005
    assert circle_circumference(5)==31.415000000000003
    assert circle_circumference(4)==25.132

check(circle_circumference)
solution 0 passed False
Task 139 gens 10 solutions in cir 3
check_program: 
# Write a function to find the circumference of a circle.

def circle_circumference(r):

    from math import pi
    return pi * r

def check(circle_circumference):
    assert circle_circumference(10)==62.830000000000005
    assert circle_circumference(5)==31.415000000000003
    assert circle_circumference(4)==25.132

check(circle_circumference)
solution 0 passed False
Task 139 gens 10 solutions in cir 4
check_program: 
# Write a function to find the circumference of a circle.

def circle_circumference(r):

    from math import pi
    return pi * r

def check(circle_circumference):
    assert circle_circumference(10)==62.830000000000005
    assert circle_circumference(5)==31.415000000000003
    assert circle_circumference(4)==25.132

check(circle_circumference)
solution 0 passed False
Task 489 gens 1 solutions in cir 0
check_program: 
# Write a python function to find the frequency of the largest value in a given array.

def frequency_Of_Largest(n,arr):

    largest_value = max(arr)
    count = 0
    for i in range(n):
        if arr[i] == largest_value:
            count += 1
    return count

def check(frequency_Of_Largest):
    assert frequency_Of_Largest(5,[1,2,3,4,4]) == 2
    assert frequency_Of_Largest(3,[5,6,5]) == 1
    assert frequency_Of_Largest(4,[2,7,7,7]) == 3

check(frequency_Of_Largest)
solution 0 passed True
Task 489 gens 7 solutions in cir 1
check_program: 
# Write a python function to find the frequency of the largest value in a given array.

def frequency_Of_Largest(n,arr):

    return (n + sum(arr) - max(arr)) / (n + sum(arr) - max(arr))

def check(frequency_Of_Largest):
    assert frequency_Of_Largest(5,[1,2,3,4,4]) == 2
    assert frequency_Of_Largest(3,[5,6,5]) == 1
    assert frequency_Of_Largest(4,[2,7,7,7]) == 3

check(frequency_Of_Largest)
solution 0 passed False
Task 489 gens 10 solutions in cir 2
check_program: 
# Write a python function to find the frequency of the largest value in a given array.

def frequency_Of_Largest(n,arr):

    return (n + sum(arr) - max(arr)) / (n + sum(arr) - max(arr))

def check(frequency_Of_Largest):
    assert frequency_Of_Largest(5,[1,2,3,4,4]) == 2
    assert frequency_Of_Largest(3,[5,6,5]) == 1
    assert frequency_Of_Largest(4,[2,7,7,7]) == 3

check(frequency_Of_Largest)
solution 0 passed False
Task 489 gens 10 solutions in cir 3
check_program: 
# Write a python function to find the frequency of the largest value in a given array.

def frequency_Of_Largest(n,arr):

    count = 0
    for x in arr:
        if x == n:
            count += 1
    return count

def check(frequency_Of_Largest):
    assert frequency_Of_Largest(5,[1,2,3,4,4]) == 2
    assert frequency_Of_Largest(3,[5,6,5]) == 1
    assert frequency_Of_Largest(4,[2,7,7,7]) == 3

check(frequency_Of_Largest)
solution 0 passed False
Task 489 gens 10 solutions in cir 4
check_program: 
# Write a python function to find the frequency of the largest value in a given array.

def frequency_Of_Largest(n,arr):

    return sum(1 for x in arr if x == max(arr))

def check(frequency_Of_Largest):
    assert frequency_Of_Largest(5,[1,2,3,4,4]) == 2
    assert frequency_Of_Largest(3,[5,6,5]) == 1
    assert frequency_Of_Largest(4,[2,7,7,7]) == 3

check(frequency_Of_Largest)
solution 0 passed True
Task 62 gens 1 solutions in cir 0
check_program: 
# Write a python function to find smallest number in a list.

def smallest_num(xs):

    return min(xs)

def check(smallest_num):
    assert smallest_num([10, 20, 1, 45, 99]) == 1
    assert smallest_num([1, 2, 3]) == 1
    assert smallest_num([45, 46, 50, 60]) == 45

check(smallest_num)
solution 0 passed True
Task 62 gens 2 solutions in cir 1
check_program: 
# Write a python function to find smallest number in a list.

def smallest_num(xs):

    if len(xs) == 0:
        return None
    return min(xs)

def check(smallest_num):
    assert smallest_num([10, 20, 1, 45, 99]) == 1
    assert smallest_num([1, 2, 3]) == 1
    assert smallest_num([45, 46, 50, 60]) == 45

check(smallest_num)
solution 0 passed True
Task 62 gens 6 solutions in cir 2
check_program: 
# Write a python function to find smallest number in a list.

def smallest_num(xs):

    if len(xs) == 0:
        return None
    return min(xs)

def check(smallest_num):
    assert smallest_num([10, 20, 1, 45, 99]) == 1
    assert smallest_num([1, 2, 3]) == 1
    assert smallest_num([45, 46, 50, 60]) == 45

check(smallest_num)
solution 0 passed True
Task 62 gens 10 solutions in cir 3
check_program: 
# Write a python function to find smallest number in a list.

def smallest_num(xs):

    if len(xs) == 0:
        return None
    return min(xs)

def check(smallest_num):
    assert smallest_num([10, 20, 1, 45, 99]) == 1
    assert smallest_num([1, 2, 3]) == 1
    assert smallest_num([45, 46, 50, 60]) == 45

check(smallest_num)
solution 0 passed True
Task 62 gens 10 solutions in cir 4
check_program: 
# Write a python function to find smallest number in a list.

def smallest_num(xs):

    if len(xs) == 0:
        return None
    return min(xs)

def check(smallest_num):
    assert smallest_num([10, 20, 1, 45, 99]) == 1
    assert smallest_num([1, 2, 3]) == 1
    assert smallest_num([45, 46, 50, 60]) == 45

check(smallest_num)
solution 0 passed True
Task 62 gens 10 solutions in cir 5
check_program: 
# Write a python function to find smallest number in a list.

def smallest_num(xs):

    if len(xs) == 0:
        return None
    return min(xs)

def check(smallest_num):
    assert smallest_num([10, 20, 1, 45, 99]) == 1
    assert smallest_num([1, 2, 3]) == 1
    assert smallest_num([45, 46, 50, 60]) == 45

check(smallest_num)
solution 0 passed True
Task 264 gens 1 solutions in cir 0
check_program: 
# Write a function to calculate a dog's age in dog's years.

def dog_age(h_age):

    dog_years = {
        0: 1,
        1: 1,
        2: 2,
        3: 3,
        4: 4,
        5: 5,
        6: 6,
        7: 7,
        8: 8,
        9: 9,
        10: 10,
        11: 11,
        12: 12
    }
    return dog_years[h_age]

def check(dog_age):
    assert dog_age(12)==61
    assert dog_age(15)==73
    assert dog_age(24)==109

check(dog_age)
solution 0 passed False
Task 264 gens 10 solutions in cir 1
check_program: 
# Write a function to calculate a dog's age in dog's years.

def dog_age(h_age):

    dog_years = {
        0: 1.0,
        1: 1.0,
        2: 2.0,
        3: 3.0,
        4: 4.0,
        5: 5.0,
        6: 6.0,
        7: 7.0,
        8: 8.0,
        9: 9.0,
        10: 10.0,
        11: 11.0,
        12: 12.0
    }
    return dog_years[h_age]

def check(dog_age):
    assert dog_age(12)==61
    assert dog_age(15)==73
    assert dog_age(24)==109

check(dog_age)
solution 0 passed False
Task 264 gens 10 solutions in cir 2
check_program: 
# Write a function to calculate a dog's age in dog's years.

def dog_age(h_age):

    years = {0: 1, 1: 1, 2: 2, 3: 3, 4: 4, 5: 5, 6: 6, 7: 7, 8: 8, 9: 9, 10: 10, 11: 11, 12: 12}
    return datetime.timedelta(days=years[h_age])

def check(dog_age):
    assert dog_age(12)==61
    assert dog_age(15)==73
    assert dog_age(24)==109

check(dog_age)
solution 0 passed False
Task 264 gens 10 solutions in cir 3
check_program: 
# Write a function to calculate a dog's age in dog's years.

def dog_age(h_age):

    import datetime
    if isinstance(h_age, datetime.timedelta):
        return h_age.days / 365
    return {0: 1, 1: 1, 2: 2, 3: 3, 4: 4, 5: 5, 6: 6, 7: 7, 8: 8, 9: 9, 10: 10, 11: 11, 12: 12}[h_age]

def check(dog_age):
    assert dog_age(12)==61
    assert dog_age(15)==73
    assert dog_age(24)==109

check(dog_age)
solution 0 passed False
Task 486 gens 1 solutions in cir 0
check_program: 
# Write a function to compute binomial probability for the given number.

def nCr(n, r):

    if r == 0:
        return 1
    elif r == 1:
        return n
    else:
        return nCr(n-1, r-1) + nCr(n-1, r)

def check(nCr):
    assert binomial_probability(10, 5, 1.0/3) == 0.13656454808718185
    assert binomial_probability(11, 6, 2.0/4) == 0.2255859375
    assert binomial_probability(12, 7, 3.0/5) == 0.227030335488

check(nCr)
solution 0 passed False
Task 486 gens 5 solutions in cir 1
check_program: 
# Write a function to compute binomial probability for the given number.

def nCr(n, r):

    if r == 0:
        return 1
    elif r == 1:
        return n
    elif r == 2:
        return nCr(n-1, 1) + nCr(n-1, 0)
    else:
        return nCr(n-1, r-1) + nCr(n-1, r-1) + nCr(n-1, r)

def check(nCr):
    assert binomial_probability(10, 5, 1.0/3) == 0.13656454808718185
    assert binomial_probability(11, 6, 2.0/4) == 0.2255859375
    assert binomial_probability(12, 7, 3.0/5) == 0.227030335488

check(nCr)
solution 0 passed False
Task 486 gens 10 solutions in cir 2
check_program: 
# Write a function to compute binomial probability for the given number.

def nCr(n, r):

    if r == 0:
        return 1
    elif r == 1:
        return n
    elif r == 2:
        return nCr(n-1, 1) + nCr(n-1, 0)
    else:
        return nCr(n-1, r-1) + nCr(n-1, r-1) + nCr(n-1, r)

def check(nCr):
    assert binomial_probability(10, 5, 1.0/3) == 0.13656454808718185
    assert binomial_probability(11, 6, 2.0/4) == 0.2255859375
    assert binomial_probability(12, 7, 3.0/5) == 0.227030335488

check(nCr)
solution 0 passed False
Task 486 gens 10 solutions in cir 3
check_program: 
# Write a function to compute binomial probability for the given number.

def nCr(n, r):

    if r == 0:
        return 1
    elif r == 1:
        return n
    elif r == 2:
        return nCr(n-1, 1) + nCr(n-1, 0)
    else:
        return nCr(n-1, r-1) + nCr(n-1, r-1) + nCr(n-1, r)

def check(nCr):
    assert binomial_probability(10, 5, 1.0/3) == 0.13656454808718185
    assert binomial_probability(11, 6, 2.0/4) == 0.2255859375
    assert binomial_probability(12, 7, 3.0/5) == 0.227030335488

check(nCr)
solution 0 passed False
Task 379 gens 1 solutions in cir 0
check_program: 
# Write a function to find the surface area of a cuboid.

def surfacearea_cuboid(l,w,h):

    return l*w*h

def check(surfacearea_cuboid):
    assert surfacearea_cuboid(1,2,3)==22
    assert surfacearea_cuboid(5,7,9)==286
    assert surfacearea_cuboid(10,15,21)==1350

check(surfacearea_cuboid)
solution 0 passed False
Task 379 gens 3 solutions in cir 1
check_program: 
# Write a function to find the surface area of a cuboid.

def surfacearea_cuboid(l,w,h):

    return l*w*h

def check(surfacearea_cuboid):
    assert surfacearea_cuboid(1,2,3)==22
    assert surfacearea_cuboid(5,7,9)==286
    assert surfacearea_cuboid(10,15,21)==1350

check(surfacearea_cuboid)
solution 0 passed False
Task 379 gens 10 solutions in cir 2
check_program: 
# Write a function to find the surface area of a cuboid.

def surfacearea_cuboid(l,w,h):

    return l*w*h

def check(surfacearea_cuboid):
    assert surfacearea_cuboid(1,2,3)==22
    assert surfacearea_cuboid(5,7,9)==286
    assert surfacearea_cuboid(10,15,21)==1350

check(surfacearea_cuboid)
solution 0 passed False
Task 379 gens 10 solutions in cir 3
check_program: 
# Write a function to find the surface area of a cuboid.

def surfacearea_cuboid(l,w,h):

    return l*w*h

def check(surfacearea_cuboid):
    assert surfacearea_cuboid(1,2,3)==22
    assert surfacearea_cuboid(5,7,9)==286
    assert surfacearea_cuboid(10,15,21)==1350

check(surfacearea_cuboid)
solution 0 passed False
Task 379 gens 10 solutions in cir 4
check_program: 
# Write a function to find the surface area of a cuboid.

def surfacearea_cuboid(l,w,h):

    import math
    return l * w * h

def check(surfacearea_cuboid):
    assert surfacearea_cuboid(1,2,3)==22
    assert surfacearea_cuboid(5,7,9)==286
    assert surfacearea_cuboid(10,15,21)==1350

check(surfacearea_cuboid)
solution 0 passed False
Task 461 gens 1 solutions in cir 0
check_program: 
# Write a python function to count the upper case characters in a given string.

def upper_ctr(str):

    count = 0
    for char in str:
        if char.isupper():
            count += 1
    return count

def check(upper_ctr):
    assert upper_ctr('PYthon') == 1
    assert upper_ctr('BigData') == 1
    assert upper_ctr('program') == 0

check(upper_ctr)
solution 0 passed False
Task 461 gens 1 solutions in cir 1
check_program: 
# Write a python function to count the upper case characters in a given string.

def upper_ctr(str):

    count = 0
    for char in str:
        if char.isupper():
            count += 1
    return count

def check(upper_ctr):
    assert upper_ctr('PYthon') == 1
    assert upper_ctr('BigData') == 1
    assert upper_ctr('program') == 0

check(upper_ctr)
solution 0 passed False
Task 461 gens 1 solutions in cir 2
check_program: 
# Write a python function to count the upper case characters in a given string.

def upper_ctr(str):

    count = 0
    for char in str:
        if char.isupper():
            count += 1
    return count

def check(upper_ctr):
    assert upper_ctr('PYthon') == 1
    assert upper_ctr('BigData') == 1
    assert upper_ctr('program') == 0

check(upper_ctr)
solution 0 passed False
Task 461 gens 1 solutions in cir 3
check_program: 
# Write a python function to count the upper case characters in a given string.

def upper_ctr(str):

    count = 0
    for char in str:
        if char.isupper():
            count += 1
    return count

def check(upper_ctr):
    assert upper_ctr('PYthon') == 1
    assert upper_ctr('BigData') == 1
    assert upper_ctr('program') == 0

check(upper_ctr)
solution 0 passed False
Task 461 gens 1 solutions in cir 4
check_program: 
# Write a python function to count the upper case characters in a given string.

def upper_ctr(str):

    count = 0
    for char in str:
        if char.isupper():
            count += 1
    return count

def check(upper_ctr):
    assert upper_ctr('PYthon') == 1
    assert upper_ctr('BigData') == 1
    assert upper_ctr('program') == 0

check(upper_ctr)
solution 0 passed False
Task 461 gens 1 solutions in cir 5
check_program: 
# Write a python function to count the upper case characters in a given string.

def upper_ctr(str):

    count = 0
    for char in str:
        if char.isupper():
            count += 1
    return count

def check(upper_ctr):
    assert upper_ctr('PYthon') == 1
    assert upper_ctr('BigData') == 1
    assert upper_ctr('program') == 0

check(upper_ctr)
solution 0 passed False
Task 461 gens 1 solutions in cir 6
check_program: 
# Write a python function to count the upper case characters in a given string.

def upper_ctr(str):

    count = 0
    for char in str:
        if char.isupper():
            count += 1
    return count

def check(upper_ctr):
    assert upper_ctr('PYthon') == 1
    assert upper_ctr('BigData') == 1
    assert upper_ctr('program') == 0

check(upper_ctr)
solution 0 passed False
Task 461 gens 1 solutions in cir 7
check_program: 
# Write a python function to count the upper case characters in a given string.

def upper_ctr(str):

    count = 0
    for char in str:
        if char.isupper():
            count += 1
    return count

def check(upper_ctr):
    assert upper_ctr('PYthon') == 1
    assert upper_ctr('BigData') == 1
    assert upper_ctr('program') == 0

check(upper_ctr)
solution 0 passed False
Task 461 gens 1 solutions in cir 8
check_program: 
# Write a python function to count the upper case characters in a given string.

def upper_ctr(str):

    count = 0
    for char in str:
        if char.isupper():
            count += 1
    return count

def check(upper_ctr):
    assert upper_ctr('PYthon') == 1
    assert upper_ctr('BigData') == 1
    assert upper_ctr('program') == 0

check(upper_ctr)
solution 0 passed False
Task 461 gens 1 solutions in cir 9
check_program: 
# Write a python function to count the upper case characters in a given string.

def upper_ctr(str):

    count = 0
    for char in str:
        if char.isupper():
            count += 1
    return count

def check(upper_ctr):
    assert upper_ctr('PYthon') == 1
    assert upper_ctr('BigData') == 1
    assert upper_ctr('program') == 0

check(upper_ctr)
solution 0 passed False
Task 461 gens 1 solutions in cir 10
check_program: 
# Write a python function to count the upper case characters in a given string.

def upper_ctr(str):

    count = 0
    for char in str:
        if char.isupper():
            count += 1
    return count

def check(upper_ctr):
    assert upper_ctr('PYthon') == 1
    assert upper_ctr('BigData') == 1
    assert upper_ctr('program') == 0

check(upper_ctr)
solution 0 passed False
Task 101 gens 1 solutions in cir 0
check_program: 
# Write a function to find the kth element in the given array.

def kth_element(arr, n, k):

    if n == 0:
        return arr[k-1]
    else:
        return kth_element(arr[n-1], n-1, k-1)

def check(kth_element):
    assert kth_element([12,3,5,7,19], 5, 2) == 3
    assert kth_element([17,24,8,23], 4, 3) == 8
    assert kth_element([16,21,25,36,4], 5, 4) == 36

check(kth_element)
solution 0 passed False
Task 101 gens 7 solutions in cir 1
check_program: 
# Write a function to find the kth element in the given array.

def kth_element(arr, n, k):

    if n == 0:
        return arr[k-1]
    else:
        return kth_element(arr[:n], n-1, k-1)

def check(kth_element):
    assert kth_element([12,3,5,7,19], 5, 2) == 3
    assert kth_element([17,24,8,23], 4, 3) == 8
    assert kth_element([16,21,25,36,4], 5, 4) == 36

check(kth_element)
solution 0 passed False
Task 101 gens 10 solutions in cir 2
check_program: 
# Write a function to find the kth element in the given array.

def kth_element(arr, n, k):

    if n < 0:
        return arr[k]
    if n == 0:
        return arr[0]
    if n == 1:
        return arr[0]
    if arr[0] == arr[1]:
        return arr[0]
    return arr[1]

def check(kth_element):
    assert kth_element([12,3,5,7,19], 5, 2) == 3
    assert kth_element([17,24,8,23], 4, 3) == 8
    assert kth_element([16,21,25,36,4], 5, 4) == 36

check(kth_element)
solution 0 passed False
Task 101 gens 10 solutions in cir 3
check_program: 
# Write a function to find the kth element in the given array.

def kth_element(arr, n, k):

    i = 0
    j = 1
    while i <= len(arr) and j <= n:
        if j == k:
            return arr[i]
        i += 1
        j += 1
    return None

def check(kth_element):
    assert kth_element([12,3,5,7,19], 5, 2) == 3
    assert kth_element([17,24,8,23], 4, 3) == 8
    assert kth_element([16,21,25,36,4], 5, 4) == 36

check(kth_element)
solution 0 passed True
Task 274 gens 1 solutions in cir 0
check_program: 
# Write a python function to find sum of even index binomial coefficients.
import math  
def even_binomial_Coeff_Sum( n):

    return sum( binomial_coeff(n, i) for i in range(1, n) if i % 2 == 0)

def check(even_binomial_Coeff_Sum):
    assert even_binomial_Coeff_Sum(4) == 8
    assert even_binomial_Coeff_Sum(6) == 32
    assert even_binomial_Coeff_Sum(2) == 2

check(even_binomial_Coeff_Sum)
solution 0 passed False
Task 274 gens 8 solutions in cir 1
check_program: 
# Write a python function to find sum of even index binomial coefficients.
import math  
def even_binomial_Coeff_Sum( n):

    return sum(binomial_coeff(n, i) for i in range(1, n) if i % 2 == 0)

def check(even_binomial_Coeff_Sum):
    assert even_binomial_Coeff_Sum(4) == 8
    assert even_binomial_Coeff_Sum(6) == 32
    assert even_binomial_Coeff_Sum(2) == 2

check(even_binomial_Coeff_Sum)
solution 0 passed False
Task 274 gens 10 solutions in cir 2
check_program: 
# Write a python function to find sum of even index binomial coefficients.
import math  
def even_binomial_Coeff_Sum( n):

    return sum( (n*i*((i-1)%2==0) for i in range(1,n+1)))

def check(even_binomial_Coeff_Sum):
    assert even_binomial_Coeff_Sum(4) == 8
    assert even_binomial_Coeff_Sum(6) == 32
    assert even_binomial_Coeff_Sum(2) == 2

check(even_binomial_Coeff_Sum)
solution 0 passed False
Task 274 gens 10 solutions in cir 3
check_program: 
# Write a python function to find sum of even index binomial coefficients.
import math  
def even_binomial_Coeff_Sum( n):

    binomial_values = []
    for i in range(1, n+1):
        binomial_values.append(math.factorial(n) // (math.factorial(n-i) * math.factorial(i)))
    return sum(x for x in binomial_values if x % 2 == 0)

def check(even_binomial_Coeff_Sum):
    assert even_binomial_Coeff_Sum(4) == 8
    assert even_binomial_Coeff_Sum(6) == 32
    assert even_binomial_Coeff_Sum(2) == 2

check(even_binomial_Coeff_Sum)
solution 0 passed False
Task 125 gens 1 solutions in cir 0
check_program: 
# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.

def find_length(string, n):

    count_0 = 0
    count_1 = 0
    for i in range(len(string)):
        if string[i] == '0':
            count_0 += 1
        else:
            count_1 += 1
    return max(count_0, count_1) - n

def check(find_length):
    assert find_length("11000010001", 11) == 6
    assert find_length("10111", 5) == 1
    assert find_length("11011101100101", 14) == 2 

check(find_length)
solution 0 passed False
Task 125 gens 5 solutions in cir 1
check_program: 
# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.

def find_length(string, n):

    count_0 = 0
    count_1 = 0
    for i in range(len(string)):
        if string[i] == '0':
            count_0 += 1
        else:
            count_1 += 1
    return max(count_0, count_1) - n

def check(find_length):
    assert find_length("11000010001", 11) == 6
    assert find_length("10111", 5) == 1
    assert find_length("11011101100101", 14) == 2 

check(find_length)
solution 0 passed False
Task 125 gens 10 solutions in cir 2
check_program: 
# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.

def find_length(string, n):

    count_0 = 0
    count_1 = 0
    max_diff = 0
    for i in range(len(string)):
        if string[i] == '0':
            count_0 += 1
        else:
            count_1 += 1
        max_diff = max(max_diff, abs(count_0 - n))
    return max_diff

def check(find_length):
    assert find_length("11000010001", 11) == 6
    assert find_length("10111", 5) == 1
    assert find_length("11011101100101", 14) == 2 

check(find_length)
solution 0 passed False
Task 125 gens 10 solutions in cir 3
check_program: 
# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.

def find_length(string, n):

    count_0 = count_1 = 0
    for i in range(len(string)):
        if string[i] == '0':
            count_0 += 1
        else:
            count_1 += 1
    return max(count_0, count_1) - n if n > count_0 else count_0 - n

def check(find_length):
    assert find_length("11000010001", 11) == 6
    assert find_length("10111", 5) == 1
    assert find_length("11011101100101", 14) == 2 

check(find_length)
solution 0 passed False
Task 429 gens 1 solutions in cir 0
check_program: 
# Write a function to extract the elementwise and tuples from the given two tuples.

def and_tuples(test_tup1, test_tup2):

    return tuple(set(test_tup1) & set(test_tup2))

def check(and_tuples):
    assert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)
    assert and_tuples((1, 2, 3, 4), (5, 6, 7, 8)) == (1, 2, 3, 0)
    assert and_tuples((8, 9, 11, 12), (7, 13, 14, 17)) == (0, 9, 10, 0)

check(and_tuples)
solution 0 passed False
Task 429 gens 4 solutions in cir 1
check_program: 
# Write a function to extract the elementwise and tuples from the given two tuples.

def and_tuples(test_tup1, test_tup2):

    return tuple(set(test_tup1) & set(test_tup2))

def check(and_tuples):
    assert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)
    assert and_tuples((1, 2, 3, 4), (5, 6, 7, 8)) == (1, 2, 3, 0)
    assert and_tuples((8, 9, 11, 12), (7, 13, 14, 17)) == (0, 9, 10, 0)

check(and_tuples)
solution 0 passed False
Task 429 gens 10 solutions in cir 2
check_program: 
# Write a function to extract the elementwise and tuples from the given two tuples.

def and_tuples(test_tup1, test_tup2):

    return tuple(set(test_tup1) & set(test_tup2))

def check(and_tuples):
    assert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)
    assert and_tuples((1, 2, 3, 4), (5, 6, 7, 8)) == (1, 2, 3, 0)
    assert and_tuples((8, 9, 11, 12), (7, 13, 14, 17)) == (0, 9, 10, 0)

check(and_tuples)
solution 0 passed False
Task 429 gens 10 solutions in cir 3
check_program: 
# Write a function to extract the elementwise and tuples from the given two tuples.

def and_tuples(test_tup1, test_tup2):

    return tuple(set(test_tup1) & set(test_tup2))

def check(and_tuples):
    assert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)
    assert and_tuples((1, 2, 3, 4), (5, 6, 7, 8)) == (1, 2, 3, 0)
    assert and_tuples((8, 9, 11, 12), (7, 13, 14, 17)) == (0, 9, 10, 0)

check(and_tuples)
solution 0 passed False
Task 429 gens 10 solutions in cir 4
check_program: 
# Write a function to extract the elementwise and tuples from the given two tuples.

def and_tuples(test_tup1, test_tup2):

    import itertools
    return tuple(set(itertools.chain(test_tup1, test_tup2)) & set(test_tup2))

def check(and_tuples):
    assert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)
    assert and_tuples((1, 2, 3, 4), (5, 6, 7, 8)) == (1, 2, 3, 0)
    assert and_tuples((8, 9, 11, 12), (7, 13, 14, 17)) == (0, 9, 10, 0)

check(and_tuples)
solution 0 passed False
Task 429 gens 10 solutions in cir 5
check_program: 
# Write a function to extract the elementwise and tuples from the given two tuples.

def and_tuples(test_tup1, test_tup2):

    import itertools
    return tuple(set(itertools.chain(test_tup1, test_tup2)) & set(test_tup2))

def check(and_tuples):
    assert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)
    assert and_tuples((1, 2, 3, 4), (5, 6, 7, 8)) == (1, 2, 3, 0)
    assert and_tuples((8, 9, 11, 12), (7, 13, 14, 17)) == (0, 9, 10, 0)

check(and_tuples)
solution 0 passed False
Task 429 gens 10 solutions in cir 6
check_program: 
# Write a function to extract the elementwise and tuples from the given two tuples.

def and_tuples(test_tup1, test_tup2):

    import itertools
    return tuple(set(itertools.chain(test_tup1, test_tup2)) & set(test_tup2))

def check(and_tuples):
    assert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)
    assert and_tuples((1, 2, 3, 4), (5, 6, 7, 8)) == (1, 2, 3, 0)
    assert and_tuples((8, 9, 11, 12), (7, 13, 14, 17)) == (0, 9, 10, 0)

check(and_tuples)
solution 0 passed False
Task 429 gens 10 solutions in cir 7
check_program: 
# Write a function to extract the elementwise and tuples from the given two tuples.

def and_tuples(test_tup1, test_tup2):

    return tuple(set(test_tup1) & set(test_tup2))

def check(and_tuples):
    assert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)
    assert and_tuples((1, 2, 3, 4), (5, 6, 7, 8)) == (1, 2, 3, 0)
    assert and_tuples((8, 9, 11, 12), (7, 13, 14, 17)) == (0, 9, 10, 0)

check(and_tuples)
solution 0 passed False
Task 429 gens 10 solutions in cir 8
check_program: 
# Write a function to extract the elementwise and tuples from the given two tuples.

def and_tuples(test_tup1, test_tup2):

    return tuple(set(test_tup1) & set(test_tup2))

def check(and_tuples):
    assert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)
    assert and_tuples((1, 2, 3, 4), (5, 6, 7, 8)) == (1, 2, 3, 0)
    assert and_tuples((8, 9, 11, 12), (7, 13, 14, 17)) == (0, 9, 10, 0)

check(and_tuples)
solution 0 passed False
Task 429 gens 10 solutions in cir 9
check_program: 
# Write a function to extract the elementwise and tuples from the given two tuples.

def and_tuples(test_tup1, test_tup2):

    import itertools
    return tuple(set(itertools.chain(test_tup1, test_tup2)) & set(test_tup2))

def check(and_tuples):
    assert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)
    assert and_tuples((1, 2, 3, 4), (5, 6, 7, 8)) == (1, 2, 3, 0)
    assert and_tuples((8, 9, 11, 12), (7, 13, 14, 17)) == (0, 9, 10, 0)

check(and_tuples)
solution 0 passed False
Task 429 gens 10 solutions in cir 10
check_program: 
# Write a function to extract the elementwise and tuples from the given two tuples.

def and_tuples(test_tup1, test_tup2):

    return tuple(set(test_tup1).intersection(test_tup2))

def check(and_tuples):
    assert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)
    assert and_tuples((1, 2, 3, 4), (5, 6, 7, 8)) == (1, 2, 3, 0)
    assert and_tuples((8, 9, 11, 12), (7, 13, 14, 17)) == (0, 9, 10, 0)

check(and_tuples)
solution 0 passed False
Task 491 gens 1 solutions in cir 0
check_program: 
# Write a function to find the sum of geometric progression series.
import math
def sum_gp(a,n,r):

    result = 0
    for i in range(1,n+1):
        result += a*r**i
    return result

def check(sum_gp):
    assert sum_gp(1,5,2)==31
    assert sum_gp(1,5,4)==341
    assert sum_gp(2,6,3)==728

check(sum_gp)
solution 0 passed False
Task 491 gens 8 solutions in cir 1
check_program: 
# Write a function to find the sum of geometric progression series.
import math
def sum_gp(a,n,r):

    result = 0
    for i in range(1,n+1):
        result += a*r**i
    return result

def check(sum_gp):
    assert sum_gp(1,5,2)==31
    assert sum_gp(1,5,4)==341
    assert sum_gp(2,6,3)==728

check(sum_gp)
solution 0 passed False
Task 491 gens 10 solutions in cir 2
check_program: 
# Write a function to find the sum of geometric progression series.
import math
def sum_gp(a,n,r):

    result = 0
    if r == 0:
        return result
    elif r > 0:
        result = a*(n+1)
    else:
        result = a*(n-1)
    return result

def check(sum_gp):
    assert sum_gp(1,5,2)==31
    assert sum_gp(1,5,4)==341
    assert sum_gp(2,6,3)==728

check(sum_gp)
solution 0 passed False
Task 491 gens 10 solutions in cir 3
check_program: 
# Write a function to find the sum of geometric progression series.
import math
def sum_gp(a,n,r):

    result = 0
    factor = 1
    for i in range(1,n+1):
        factor *= r
        result += a * factor ** i
    if (n == 1):
        return a * factor ** n
    else:
        return a * (n - 1) * factor ** n + (a * factor ** n - result) * factor

def check(sum_gp):
    assert sum_gp(1,5,2)==31
    assert sum_gp(1,5,4)==341
    assert sum_gp(2,6,3)==728

check(sum_gp)
solution 0 passed False
Task 34 gens 1 solutions in cir 0
check_program: 
# Write a python function to find the missing number in a sorted array.

def find_missing(ar,N):

    for i in range(N):
        if ar[i] != i + 1:
            return ar[i]
    return -1

def check(find_missing):
    assert find_missing([1,2,3,5],4) == 4
    assert find_missing([1,3,4,5],4) == 2
    assert find_missing([1,2,3,5,6,7],5) == 4

check(find_missing)
solution 0 passed False
Task 34 gens 8 solutions in cir 1
check_program: 
# Write a python function to find the missing number in a sorted array.

def find_missing(ar,N):

    for i in range(N):
        if ar[i] != i + 1:
            return ar[i]
    return -1

def check(find_missing):
    assert find_missing([1,2,3,5],4) == 4
    assert find_missing([1,3,4,5],4) == 2
    assert find_missing([1,2,3,5,6,7],5) == 4

check(find_missing)
solution 0 passed False
Task 34 gens 10 solutions in cir 2
check_program: 
# Write a python function to find the missing number in a sorted array.

def find_missing(ar,N):

    for i in range(len(ar)):
        if ar[i] != i + 1:
            return ar[i]
    return -1

def check(find_missing):
    assert find_missing([1,2,3,5],4) == 4
    assert find_missing([1,3,4,5],4) == 2
    assert find_missing([1,2,3,5,6,7],5) == 4

check(find_missing)
solution 0 passed False
Task 34 gens 10 solutions in cir 3
check_program: 
# Write a python function to find the missing number in a sorted array.

def find_missing(ar,N):

    if ar and N > 0:
        for i in range(len(ar)):
            if ar[i] != i + 1:
                return ar[i]
    return -1

def check(find_missing):
    assert find_missing([1,2,3,5],4) == 4
    assert find_missing([1,3,4,5],4) == 2
    assert find_missing([1,2,3,5,6,7],5) == 4

check(find_missing)
solution 0 passed False
Task 507 gens 1 solutions in cir 0
check_program: 
# Write a function to remove specific words from a given list.

def remove_words(list1, removewords):

    result = []
    for word in list1:
        if word not in removewords:
            result.append(word)
    return result

def check(remove_words):
    assert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['white', 'orange'])==['red', 'green', 'blue', 'black']
    assert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['black', 'orange'])==['red', 'green', 'blue', 'white']
    assert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['blue', 'white'])==['red', 'green', 'black', 'orange']

check(remove_words)
solution 0 passed True
Task 507 gens 10 solutions in cir 1
check_program: 
# Write a function to remove specific words from a given list.

def remove_words(list1, removewords):

    result = []
    for word in list1:
        if word not in removewords:
            result.append(word)
    return result

def check(remove_words):
    assert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['white', 'orange'])==['red', 'green', 'blue', 'black']
    assert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['black', 'orange'])==['red', 'green', 'blue', 'white']
    assert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['blue', 'white'])==['red', 'green', 'black', 'orange']

check(remove_words)
solution 0 passed True
Task 507 gens 10 solutions in cir 2
check_program: 
# Write a function to remove specific words from a given list.

def remove_words(list1, removewords):

    result = []
    for word in list1:
        if word not in removewords:
            result.append(word)
    return result

def check(remove_words):
    assert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['white', 'orange'])==['red', 'green', 'blue', 'black']
    assert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['black', 'orange'])==['red', 'green', 'blue', 'white']
    assert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['blue', 'white'])==['red', 'green', 'black', 'orange']

check(remove_words)
solution 0 passed True
Task 507 gens 10 solutions in cir 3
check_program: 
# Write a function to remove specific words from a given list.

def remove_words(list1, removewords):

    result = []
    for word in list1:
        if word not in removewords:
            result.append(word)
    return result

def check(remove_words):
    assert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['white', 'orange'])==['red', 'green', 'blue', 'black']
    assert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['black', 'orange'])==['red', 'green', 'blue', 'white']
    assert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['blue', 'white'])==['red', 'green', 'black', 'orange']

check(remove_words)
solution 0 passed True
Task 484 gens 1 solutions in cir 0
check_program: 
# Write a function to remove the matching tuples from the given two tuples.

def remove_matching_tuple(test_list1, test_list2):

    result = []
    for i in range(len(test_list1)):
        if test_list1[i] == test_list2[i]:
            result.append(test_list1[i])
        else:
            result.append(None)
    return result

def check(remove_matching_tuple):
    assert remove_matching_tuple([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('Hello', 'dude'), ('How', 'are')]) == [('you', '?')]
    assert remove_matching_tuple([('Part', 'of'), ('the', 'journey'), ('is ', 'end')], [('Journey', 'the'), ('is', 'end')]) == [('Part', 'of'), ('the', 'journey'), ('is ', 'end')]
    assert remove_matching_tuple([('Its', 'been'), ('a', 'long'), ('day', 'without')], [('a', 'long'), ('my', 'friend')]) == [('Its', 'been'), ('day', 'without')]

check(remove_matching_tuple)
solution 0 passed False
Task 484 gens 9 solutions in cir 1
check_program: 
# Write a function to remove the matching tuples from the given two tuples.

def remove_matching_tuple(test_list1, test_list2):

    result = []
    for i in range(len(test_list1)):
        if test_list1[i] != test_list2[i]:
            result.append(test_list1[i])
    return result

def check(remove_matching_tuple):
    assert remove_matching_tuple([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('Hello', 'dude'), ('How', 'are')]) == [('you', '?')]
    assert remove_matching_tuple([('Part', 'of'), ('the', 'journey'), ('is ', 'end')], [('Journey', 'the'), ('is', 'end')]) == [('Part', 'of'), ('the', 'journey'), ('is ', 'end')]
    assert remove_matching_tuple([('Its', 'been'), ('a', 'long'), ('day', 'without')], [('a', 'long'), ('my', 'friend')]) == [('Its', 'been'), ('day', 'without')]

check(remove_matching_tuple)
solution 0 passed False
Task 484 gens 10 solutions in cir 2
check_program: 
# Write a function to remove the matching tuples from the given two tuples.

def remove_matching_tuple(test_list1, test_list2):

    result = []
    for i in range(len(test_list1)):
        if test_list1[i] != test_list2[i]:
            result.append(test_list1[i])
    return result

def check(remove_matching_tuple):
    assert remove_matching_tuple([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('Hello', 'dude'), ('How', 'are')]) == [('you', '?')]
    assert remove_matching_tuple([('Part', 'of'), ('the', 'journey'), ('is ', 'end')], [('Journey', 'the'), ('is', 'end')]) == [('Part', 'of'), ('the', 'journey'), ('is ', 'end')]
    assert remove_matching_tuple([('Its', 'been'), ('a', 'long'), ('day', 'without')], [('a', 'long'), ('my', 'friend')]) == [('Its', 'been'), ('day', 'without')]

check(remove_matching_tuple)
solution 0 passed False
Task 484 gens 10 solutions in cir 3
check_program: 
# Write a function to remove the matching tuples from the given two tuples.

def remove_matching_tuple(test_list1, test_list2):

    return [elem for elem in test_list1 if elem not in test_list2]

def check(remove_matching_tuple):
    assert remove_matching_tuple([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('Hello', 'dude'), ('How', 'are')]) == [('you', '?')]
    assert remove_matching_tuple([('Part', 'of'), ('the', 'journey'), ('is ', 'end')], [('Journey', 'the'), ('is', 'end')]) == [('Part', 'of'), ('the', 'journey'), ('is ', 'end')]
    assert remove_matching_tuple([('Its', 'been'), ('a', 'long'), ('day', 'without')], [('a', 'long'), ('my', 'friend')]) == [('Its', 'been'), ('day', 'without')]

check(remove_matching_tuple)
solution 0 passed True
Task 484 gens 10 solutions in cir 4
check_program: 
# Write a function to remove the matching tuples from the given two tuples.

def remove_matching_tuple(test_list1, test_list2):

    result = []
    for elem in test_list1:
        if elem not in test_list2:
            result.append(elem)
    return result

def check(remove_matching_tuple):
    assert remove_matching_tuple([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('Hello', 'dude'), ('How', 'are')]) == [('you', '?')]
    assert remove_matching_tuple([('Part', 'of'), ('the', 'journey'), ('is ', 'end')], [('Journey', 'the'), ('is', 'end')]) == [('Part', 'of'), ('the', 'journey'), ('is ', 'end')]
    assert remove_matching_tuple([('Its', 'been'), ('a', 'long'), ('day', 'without')], [('a', 'long'), ('my', 'friend')]) == [('Its', 'been'), ('day', 'without')]

check(remove_matching_tuple)
solution 0 passed True
Task 484 gens 10 solutions in cir 5
check_program: 
# Write a function to remove the matching tuples from the given two tuples.

def remove_matching_tuple(test_list1, test_list2):

    result = []
    for x, y in zip(test_list1, test_list2):
        if x != y:
            result.append(x)
    return result

def check(remove_matching_tuple):
    assert remove_matching_tuple([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('Hello', 'dude'), ('How', 'are')]) == [('you', '?')]
    assert remove_matching_tuple([('Part', 'of'), ('the', 'journey'), ('is ', 'end')], [('Journey', 'the'), ('is', 'end')]) == [('Part', 'of'), ('the', 'journey'), ('is ', 'end')]
    assert remove_matching_tuple([('Its', 'been'), ('a', 'long'), ('day', 'without')], [('a', 'long'), ('my', 'friend')]) == [('Its', 'been'), ('day', 'without')]

check(remove_matching_tuple)
solution 0 passed False
Task 204 gens 1 solutions in cir 0
check_program: 
# Write a python function to count the occurrence of a given character in a string.

def count(s,c) :

    count = 0
    for i in range(len(s)):
        if s[i] == c:
            count += 1
    return count

def check(count):
    assert count("abcc","c") == 2
    assert count("ababca","a") == 3
    assert count("mnmm0pm","m") == 4

check(count)
solution 0 passed True
Task 204 gens 2 solutions in cir 1
check_program: 
# Write a python function to count the occurrence of a given character in a string.

def count(s,c) :

    count = 0
    for i in range(len(s)):
        if s[i] == c:
            count += 1
    return count

def check(count):
    assert count("abcc","c") == 2
    assert count("ababca","a") == 3
    assert count("mnmm0pm","m") == 4

check(count)
solution 0 passed True
Task 204 gens 3 solutions in cir 2
check_program: 
# Write a python function to count the occurrence of a given character in a string.

def count(s,c) :

    count = 0
    for i in s:
        if i == c:
            count += 1
    return count

def check(count):
    assert count("abcc","c") == 2
    assert count("ababca","a") == 3
    assert count("mnmm0pm","m") == 4

check(count)
solution 0 passed True
Task 204 gens 3 solutions in cir 3
check_program: 
# Write a python function to count the occurrence of a given character in a string.

def count(s,c) :

    count = 0
    for i in s:
        if i == c:
            count += 1
    return count

def check(count):
    assert count("abcc","c") == 2
    assert count("ababca","a") == 3
    assert count("mnmm0pm","m") == 4

check(count)
solution 0 passed True
Task 204 gens 7 solutions in cir 4
check_program: 
# Write a python function to count the occurrence of a given character in a string.

def count(s,c) :

    count = 0
    for i in s:
        if i == c:
            count += 1
    return count

def check(count):
    assert count("abcc","c") == 2
    assert count("ababca","a") == 3
    assert count("mnmm0pm","m") == 4

check(count)
solution 0 passed True
Task 204 gens 10 solutions in cir 5
check_program: 
# Write a python function to count the occurrence of a given character in a string.

def count(s,c) :

    count = 0
    for char in s:
        if char == c:
            count += 1
    return count

def check(count):
    assert count("abcc","c") == 2
    assert count("ababca","a") == 3
    assert count("mnmm0pm","m") == 4

check(count)
solution 0 passed True
Task 204 gens 10 solutions in cir 6
check_program: 
# Write a python function to count the occurrence of a given character in a string.

def count(s,c) :

    count = 0
    for char in s:
        if char == c:
            count += 1
    return count

def check(count):
    assert count("abcc","c") == 2
    assert count("ababca","a") == 3
    assert count("mnmm0pm","m") == 4

check(count)
solution 0 passed True
Task 204 gens 10 solutions in cir 7
check_program: 
# Write a python function to count the occurrence of a given character in a string.

def count(s,c) :

    count = 0
    for char in s:
        if char == c:
            count += 1
    return count

def check(count):
    assert count("abcc","c") == 2
    assert count("ababca","a") == 3
    assert count("mnmm0pm","m") == 4

check(count)
solution 0 passed True
Task 204 gens 10 solutions in cir 8
check_program: 
# Write a python function to count the occurrence of a given character in a string.

def count(s,c) :

    count = 0
    for i in s:
        if c == i:
            count += 1
    return count

def check(count):
    assert count("abcc","c") == 2
    assert count("ababca","a") == 3
    assert count("mnmm0pm","m") == 4

check(count)
solution 0 passed True
Task 204 gens 10 solutions in cir 9
check_program: 
# Write a python function to count the occurrence of a given character in a string.

def count(s,c) :

    count = 0
    for i in s:
        if c == i:
            count += 1
    return count

def check(count):
    assert count("abcc","c") == 2
    assert count("ababca","a") == 3
    assert count("mnmm0pm","m") == 4

check(count)
solution 0 passed True
Task 204 gens 10 solutions in cir 10
check_program: 
# Write a python function to count the occurrence of a given character in a string.

def count(s,c) :

    count = 0
    for i in s:
        if c == i:
            count += 1
    return count

def check(count):
    assert count("abcc","c") == 2
    assert count("ababca","a") == 3
    assert count("mnmm0pm","m") == 4

check(count)
solution 0 passed True
Task 335 gens 1 solutions in cir 0
check_program: 
# Write a function to find the sum of arithmetic progression.

def ap_sum(a,n,d):

    return a + (n-1) * d

def check(ap_sum):
    assert ap_sum(1,5,2)==25
    assert ap_sum(2,6,4)==72
    assert ap_sum(1,4,5)==34

check(ap_sum)
solution 0 passed False
Task 335 gens 7 solutions in cir 1
check_program: 
# Write a function to find the sum of arithmetic progression.

def ap_sum(a,n,d):

    return a + (n-1) * d

def check(ap_sum):
    assert ap_sum(1,5,2)==25
    assert ap_sum(2,6,4)==72
    assert ap_sum(1,4,5)==34

check(ap_sum)
solution 0 passed False
Task 335 gens 10 solutions in cir 2
check_program: 
# Write a function to find the sum of arithmetic progression.

def ap_sum(a,n,d):

    return (n-1)*d + a

def check(ap_sum):
    assert ap_sum(1,5,2)==25
    assert ap_sum(2,6,4)==72
    assert ap_sum(1,4,5)==34

check(ap_sum)
solution 0 passed False
Task 335 gens 10 solutions in cir 3
check_program: 
# Write a function to find the sum of arithmetic progression.

def ap_sum(a,n,d):

    return (n-1)*d + a

def check(ap_sum):
    assert ap_sum(1,5,2)==25
    assert ap_sum(2,6,4)==72
    assert ap_sum(1,4,5)==34

check(ap_sum)
solution 0 passed False
Task 335 gens 10 solutions in cir 4
check_program: 
# Write a function to find the sum of arithmetic progression.

def ap_sum(a,n,d):

    return (a + (n-1) * d)

def check(ap_sum):
    assert ap_sum(1,5,2)==25
    assert ap_sum(2,6,4)==72
    assert ap_sum(1,4,5)==34

check(ap_sum)
solution 0 passed False
Task 335 gens 10 solutions in cir 5
check_program: 
# Write a function to find the sum of arithmetic progression.

def ap_sum(a,n,d):

    if n == 0:
        return a
    else:
        return (n-1)*d + a

def check(ap_sum):
    assert ap_sum(1,5,2)==25
    assert ap_sum(2,6,4)==72
    assert ap_sum(1,4,5)==34

check(ap_sum)
solution 0 passed False
Task 335 gens 10 solutions in cir 6
check_program: 
# Write a function to find the sum of arithmetic progression.

def ap_sum(a,n,d):

    if n == 0:
        return a
    else:
        return (n-1)*d + a

def check(ap_sum):
    assert ap_sum(1,5,2)==25
    assert ap_sum(2,6,4)==72
    assert ap_sum(1,4,5)==34

check(ap_sum)
solution 0 passed False
Task 48 gens 1 solutions in cir 0
check_program: 
# Write a python function to set all odd bits of a given number.

def odd_bit_set_number(n):

    result = 0
    while n > 0:
        if n % 2 == 1:
            result += 1
        n = n >> 1
    return result

def check(odd_bit_set_number):
    assert odd_bit_set_number(10) == 15
    assert odd_bit_set_number(20) == 21
    assert odd_bit_set_number(30) == 31

check(odd_bit_set_number)
solution 0 passed False
Task 48 gens 4 solutions in cir 1
check_program: 
# Write a python function to set all odd bits of a given number.

def odd_bit_set_number(n):

    result = 0
    while n > 0:
        if n % 2 == 1:
            result += 1
        n = n >> 1
    return result

def check(odd_bit_set_number):
    assert odd_bit_set_number(10) == 15
    assert odd_bit_set_number(20) == 21
    assert odd_bit_set_number(30) == 31

check(odd_bit_set_number)
solution 0 passed False
Task 48 gens 10 solutions in cir 2
check_program: 
# Write a python function to set all odd bits of a given number.

def odd_bit_set_number(n):

    result = 0
    while n > 0:
        if n % 2 == 1:
            result += n
        n = n >> 1
    return result

def check(odd_bit_set_number):
    assert odd_bit_set_number(10) == 15
    assert odd_bit_set_number(20) == 21
    assert odd_bit_set_number(30) == 31

check(odd_bit_set_number)
solution 0 passed False
Task 48 gens 10 solutions in cir 3
check_program: 
# Write a python function to set all odd bits of a given number.

def odd_bit_set_number(n):

    result = 0
    for i in range(1,n):
        if n % i == 1:
            result += i
    return result

def check(odd_bit_set_number):
    assert odd_bit_set_number(10) == 15
    assert odd_bit_set_number(20) == 21
    assert odd_bit_set_number(30) == 31

check(odd_bit_set_number)
solution 0 passed False
Task 48 gens 10 solutions in cir 4
check_program: 
# Write a python function to set all odd bits of a given number.

def odd_bit_set_number(n):

    res = 0
    while n > 0:
        if n % 2 == 1:
            res += n
        n = n // 2
    return res

def check(odd_bit_set_number):
    assert odd_bit_set_number(10) == 15
    assert odd_bit_set_number(20) == 21
    assert odd_bit_set_number(30) == 31

check(odd_bit_set_number)
solution 0 passed False
Task 71 gens 1 solutions in cir 0
check_program: 
# Write a function to sort a list of elements using comb sort.

def comb_sort(nums):

    n = len(nums)
    for i in range(n):
        left, right = i, i+1
        while left < right:
            pivot = nums[left]
            j = left
            while j < right:
                if nums[j] < pivot:
                    nums[j], nums[left] = nums[left], nums[j]
                    left = left + 1
                else:
                    left = left + 1
            j = right
            while j < right:
                if nums[j] < pivot:
                    nums[j], nums[right] = nums[right], nums[j]
                    right = right - 1
                else:
                    right = right - 1
            j = right
        nums[left], nums[right] = nums[right], nums[left]

def check(comb_sort):
    assert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]
    assert comb_sort([41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41]
    assert comb_sort([99, 15, 13, 47]) == [13, 15, 47, 99]

check(comb_sort)
solution 0 passed False
Task 71 gens 9 solutions in cir 1
check_program: 
# Write a function to sort a list of elements using comb sort.

def comb_sort(nums):

    n = len(nums)
    for i in range(n):
        left, right = i, i+1
        while left < right:
            pivot = nums[left]
            j = left
            while j < right:
                if nums[j] < pivot:
                    nums[j], nums[left] = nums[left], nums[j]
                    left = left + 1
                else:
                    left = left + 1
            j = right
            while j < right:
                if nums[j] < pivot:
                    nums[j], nums[right] = nums[right], nums[j]
                    right = right - 1
                else:
                    right = right - 1
            j = right
        nums[left], nums[right] = nums[right], nums[left]

def check(comb_sort):
    assert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]
    assert comb_sort([41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41]
    assert comb_sort([99, 15, 13, 47]) == [13, 15, 47, 99]

check(comb_sort)
solution 0 passed False
Task 71 gens 10 solutions in cir 2
check_program: 
# Write a function to sort a list of elements using comb sort.

def comb_sort(nums):

    n = len(nums)
    while n > 1:
        j = 0
        while j < n - 1:
            i = j + 1
            while i < n and nums[i] < nums[j]:
                nums[i], nums[j] = nums[j], nums[i]
                i += 1
            j += 1
        n = j
    return nums

def check(comb_sort):
    assert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]
    assert comb_sort([41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41]
    assert comb_sort([99, 15, 13, 47]) == [13, 15, 47, 99]

check(comb_sort)
solution 0 passed True
Task 71 gens 10 solutions in cir 3
check_program: 
# Write a function to sort a list of elements using comb sort.

def comb_sort(nums):

    n = len(nums)
    while n > 1:
        j = 0
        while j < n - 1:
            i = j + 1
            while i < n and nums[i] < nums[j]:
                nums[i], nums[j] = nums[j], nums[i]
                i += 1
            j += 1
        n = j
    return nums

def check(comb_sort):
    assert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]
    assert comb_sort([41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41]
    assert comb_sort([99, 15, 13, 47]) == [13, 15, 47, 99]

check(comb_sort)
solution 0 passed True
Task 503 gens 1 solutions in cir 0
check_program: 
# Write a function to add consecutive numbers of a given list.

def add_consecutive_nums(nums):

    result = []
    for i in range(len(nums)):
        result.append(nums[i] + nums[i+1])
    return result

def check(add_consecutive_nums):
    assert add_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])==[2, 4, 7, 8, 9, 11, 13]
    assert add_consecutive_nums([4, 5, 8, 9, 6, 10])==[9, 13, 17, 15, 16]
    assert add_consecutive_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[3, 5, 7, 9, 11, 13, 15, 17, 19]

check(add_consecutive_nums)
solution 0 passed False
Task 503 gens 6 solutions in cir 1
check_program: 
# Write a function to add consecutive numbers of a given list.

def add_consecutive_nums(nums):

    result = []
    for i in range(len(nums)-1):
        result.append(nums[i] + nums[i+1])
    return result

def check(add_consecutive_nums):
    assert add_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])==[2, 4, 7, 8, 9, 11, 13]
    assert add_consecutive_nums([4, 5, 8, 9, 6, 10])==[9, 13, 17, 15, 16]
    assert add_consecutive_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[3, 5, 7, 9, 11, 13, 15, 17, 19]

check(add_consecutive_nums)
solution 0 passed True
Task 503 gens 10 solutions in cir 2
check_program: 
# Write a function to add consecutive numbers of a given list.

def add_consecutive_nums(nums):

    result = []
    i = 0
    while i < len(nums):
        if i == 0 or i == len(nums) - 1 or nums[i] != nums[i - 1] or nums[i] != nums[i + 1]:
            next_num = nums[i]
        else:
            next_num = nums[i] + nums[i + 1]
        result.append(next_num)
        i += 1
    return result

def check(add_consecutive_nums):
    assert add_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])==[2, 4, 7, 8, 9, 11, 13]
    assert add_consecutive_nums([4, 5, 8, 9, 6, 10])==[9, 13, 17, 15, 16]
    assert add_consecutive_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[3, 5, 7, 9, 11, 13, 15, 17, 19]

check(add_consecutive_nums)
solution 0 passed False
Task 503 gens 10 solutions in cir 3
check_program: 
# Write a function to add consecutive numbers of a given list.

def add_consecutive_nums(nums):

    result = []
    i = 0
    while i < len(nums):
        if i == 0 or i == len(nums) - 1:
            next_num = nums[i]
        else:
            next_num = nums[i] + nums[i + 1]
        result.append(next_num)
        i += 1
    return result

def check(add_consecutive_nums):
    assert add_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])==[2, 4, 7, 8, 9, 11, 13]
    assert add_consecutive_nums([4, 5, 8, 9, 6, 10])==[9, 13, 17, 15, 16]
    assert add_consecutive_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[3, 5, 7, 9, 11, 13, 15, 17, 19]

check(add_consecutive_nums)
solution 0 passed False
Task 503 gens 10 solutions in cir 4
check_program: 
# Write a function to add consecutive numbers of a given list.

def add_consecutive_nums(nums):

    result = []
    last = None
    for num in nums:
        if last is None or num != last + 1:
            result.append(num)
        last = num
    return result

def check(add_consecutive_nums):
    assert add_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])==[2, 4, 7, 8, 9, 11, 13]
    assert add_consecutive_nums([4, 5, 8, 9, 6, 10])==[9, 13, 17, 15, 16]
    assert add_consecutive_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[3, 5, 7, 9, 11, 13, 15, 17, 19]

check(add_consecutive_nums)
solution 0 passed False
Task 503 gens 10 solutions in cir 5
check_program: 
# Write a function to add consecutive numbers of a given list.

def add_consecutive_nums(nums):

    result = []
    last = None
    for num in nums:
        if last is None or num != last + 1:
            result.append(num)
        last = num
    return result

def check(add_consecutive_nums):
    assert add_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])==[2, 4, 7, 8, 9, 11, 13]
    assert add_consecutive_nums([4, 5, 8, 9, 6, 10])==[9, 13, 17, 15, 16]
    assert add_consecutive_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[3, 5, 7, 9, 11, 13, 15, 17, 19]

check(add_consecutive_nums)
solution 0 passed False
Task 503 gens 10 solutions in cir 6
check_program: 
# Write a function to add consecutive numbers of a given list.

def add_consecutive_nums(nums):

    result = []
    last = None
    for num in nums:
        if last is None or num != last + 1:
            result.append(num)
        last = num
    return result

def check(add_consecutive_nums):
    assert add_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])==[2, 4, 7, 8, 9, 11, 13]
    assert add_consecutive_nums([4, 5, 8, 9, 6, 10])==[9, 13, 17, 15, 16]
    assert add_consecutive_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[3, 5, 7, 9, 11, 13, 15, 17, 19]

check(add_consecutive_nums)
solution 0 passed False
Task 503 gens 10 solutions in cir 7
check_program: 
# Write a function to add consecutive numbers of a given list.

def add_consecutive_nums(nums):

    result = []
    last = None
    for num in nums:
        if last is None or num != last + 1:
            result.append(num)
        last = num
    return result

def check(add_consecutive_nums):
    assert add_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])==[2, 4, 7, 8, 9, 11, 13]
    assert add_consecutive_nums([4, 5, 8, 9, 6, 10])==[9, 13, 17, 15, 16]
    assert add_consecutive_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[3, 5, 7, 9, 11, 13, 15, 17, 19]

check(add_consecutive_nums)
solution 0 passed False
Task 503 gens 10 solutions in cir 8
check_program: 
# Write a function to add consecutive numbers of a given list.

def add_consecutive_nums(nums):

    result = []
    last = None
    for num in nums:
        if last is None or num != last + 1:
            result.append(num)
        last = num
    return result

def check(add_consecutive_nums):
    assert add_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])==[2, 4, 7, 8, 9, 11, 13]
    assert add_consecutive_nums([4, 5, 8, 9, 6, 10])==[9, 13, 17, 15, 16]
    assert add_consecutive_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[3, 5, 7, 9, 11, 13, 15, 17, 19]

check(add_consecutive_nums)
solution 0 passed False
Task 503 gens 10 solutions in cir 9
check_program: 
# Write a function to add consecutive numbers of a given list.

def add_consecutive_nums(nums):

    result = []
    last = 0
    for num in nums:
        if num - last != 1:
            result.append(num)
        last = num
    return result

def check(add_consecutive_nums):
    assert add_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])==[2, 4, 7, 8, 9, 11, 13]
    assert add_consecutive_nums([4, 5, 8, 9, 6, 10])==[9, 13, 17, 15, 16]
    assert add_consecutive_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[3, 5, 7, 9, 11, 13, 15, 17, 19]

check(add_consecutive_nums)
solution 0 passed False
Task 503 gens 10 solutions in cir 10
check_program: 
# Write a function to add consecutive numbers of a given list.

def add_consecutive_nums(nums):

    result = []
    last = None
    for num in nums:
        if last is not None:
            if num - last != 1:
                result.append(num)
        else:
            result.append(num)
        last = num
    return result

def check(add_consecutive_nums):
    assert add_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])==[2, 4, 7, 8, 9, 11, 13]
    assert add_consecutive_nums([4, 5, 8, 9, 6, 10])==[9, 13, 17, 15, 16]
    assert add_consecutive_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[3, 5, 7, 9, 11, 13, 15, 17, 19]

check(add_consecutive_nums)
solution 0 passed False
Task 39 gens 1 solutions in cir 0
check_program: 
# Write a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.
import heapq
from collections import Counter
def rearange_string(S):

    def rearrange_string(S):
        counter = Counter(S)
        for i in range(len(S)):
            for j in range(i+1, len(S)):
                if counter[i] == counter[j]:
                    for k in range(i, j-1):
                        S = S[:i] + S[k] + S[j-1] + S[k+1:]
                        if S.lower() != S:
                            return True
        return False

def check(rearange_string):
    assert rearange_string("aab")==('aba')
    assert rearange_string("aabb")==('abab')
    assert rearange_string("abccdd")==('cdabcd')

check(rearange_string)
solution 0 passed False
Task 39 gens 10 solutions in cir 1
check_program: 
# Write a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.
import heapq
from collections import Counter
def rearange_string(S):

    counter = Counter(S)
    for i in range(len(S)):
        for j in range(i+1, len(S)):
            if counter[i] == counter[j]:
                for k in range(i, j-1):
                    S = S[:i] + S[k] + S[j-1] + S[k+1:]
                    if S.lower() != S:
                        return True
    return False

def check(rearange_string):
    assert rearange_string("aab")==('aba')
    assert rearange_string("aabb")==('abab')
    assert rearange_string("abccdd")==('cdabcd')

check(rearange_string)
solution 0 passed False
Task 39 gens 10 solutions in cir 2
check_program: 
# Write a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.
import heapq
from collections import Counter
def rearange_string(S):

    S_counter = Counter(S)
    for i in range(len(S)):
        for j in range(i+1, len(S)):
            if S_counter[i] == S_counter[j]:
                for k in range(i, j-1):
                    S = S[:i] + S[k] + S[j-1] + S[k+1:]
                    if S.lower() != S:
                        return True
    return False

def check(rearange_string):
    assert rearange_string("aab")==('aba')
    assert rearange_string("aabb")==('abab')
    assert rearange_string("abccdd")==('cdabcd')

check(rearange_string)
solution 0 passed False
Task 39 gens 10 solutions in cir 3
check_program: 
# Write a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.
import heapq
from collections import Counter
def rearange_string(S):

    S_counter = Counter(S)
    for i in range(len(S)):
        for j in range(i+1, len(S)):
            if S_counter[i] == S_counter[j]:
                for k in range(i, j-1):
                    S = S[:i] + S[k] + S[j-1] + S[k+1:]
                    if S.lower() != S:
                        return True
    return False

def check(rearange_string):
    assert rearange_string("aab")==('aba')
    assert rearange_string("aabb")==('abab')
    assert rearange_string("abccdd")==('cdabcd')

check(rearange_string)
solution 0 passed False
Task 481 gens 1 solutions in cir 0
check_program: 
# Write a function to determine if there is a subset of the given set with sum equal to the given sum.

def is_subset_sum(set, n, sum):

    subset = set.copy()
    for i in range(n):
        if sum - subset.pop() < 0:
            return False
    return True

def check(is_subset_sum):
    assert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 9) == True
    assert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 30) == False
    assert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 15) == True

check(is_subset_sum)
solution 0 passed False
Task 481 gens 10 solutions in cir 1
check_program: 
# Write a function to determine if there is a subset of the given set with sum equal to the given sum.

def is_subset_sum(set, n, sum):

    subset = set.copy()
    subset_sum = 0
    for element in subset:
        subset_sum += element
        if subset_sum == sum:
            return True
        elif subset_sum < sum:
            return False
        elif subset_sum > sum:
            return False
    return True

def check(is_subset_sum):
    assert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 9) == True
    assert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 30) == False
    assert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 15) == True

check(is_subset_sum)
solution 0 passed False
Task 481 gens 10 solutions in cir 2
check_program: 
# Write a function to determine if there is a subset of the given set with sum equal to the given sum.

def is_subset_sum(set, n, sum):

    subset = set.copy()
    subset_sum = 0
    for element in subset:
        subset_sum += element
        if subset_sum == sum:
            return True
        elif subset_sum < sum:
            return False
        elif subset_sum > sum:
            return False
    return True

def check(is_subset_sum):
    assert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 9) == True
    assert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 30) == False
    assert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 15) == True

check(is_subset_sum)
solution 0 passed False
Task 481 gens 10 solutions in cir 3
check_program: 
# Write a function to determine if there is a subset of the given set with sum equal to the given sum.

def is_subset_sum(set, n, sum):

    if len(set) != n:
        return False
    subset = set.copy()
    subset_sum = sum
    for elem in subset:
        subset_sum -= elem
        if subset_sum == sum:
            return True
        elif subset_sum < sum:
            return False
    return True

def check(is_subset_sum):
    assert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 9) == True
    assert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 30) == False
    assert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 15) == True

check(is_subset_sum)
solution 0 passed False
Task 75 gens 1 solutions in cir 0
check_program: 
# Write a function to find tuples which have all elements divisible by k from the given list of tuples.

def find_tuples(test_list, K):

    return tuple(filter(lambda x: all(x % i == 0 for i in range(K+1)), test_list))

def check(find_tuples):
    assert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == '[(6, 24, 12)]'
    assert find_tuples([(5, 25, 30), (4, 2, 3), (7, 8, 9)], 5) == '[(5, 25, 30)]'
    assert find_tuples([(7, 9, 16), (8, 16, 4), (19, 17, 18)], 4) == '[(8, 16, 4)]'

check(find_tuples)
solution 0 passed False
Task 75 gens 3 solutions in cir 1
check_program: 
# Write a function to find tuples which have all elements divisible by k from the given list of tuples.

def find_tuples(test_list, K):

    return tuple(filter(lambda x: all(x % i == 0 for i in range(K+1)), test_list))

def check(find_tuples):
    assert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == '[(6, 24, 12)]'
    assert find_tuples([(5, 25, 30), (4, 2, 3), (7, 8, 9)], 5) == '[(5, 25, 30)]'
    assert find_tuples([(7, 9, 16), (8, 16, 4), (19, 17, 18)], 4) == '[(8, 16, 4)]'

check(find_tuples)
solution 0 passed False
Task 75 gens 10 solutions in cir 2
check_program: 
# Write a function to find tuples which have all elements divisible by k from the given list of tuples.

def find_tuples(test_list, K):

    result = []
    for elem in test_list:
        if all(map(lambda x: x % K == 0, elem)):
            result.append(elem)
    return result

def check(find_tuples):
    assert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == '[(6, 24, 12)]'
    assert find_tuples([(5, 25, 30), (4, 2, 3), (7, 8, 9)], 5) == '[(5, 25, 30)]'
    assert find_tuples([(7, 9, 16), (8, 16, 4), (19, 17, 18)], 4) == '[(8, 16, 4)]'

check(find_tuples)
solution 0 passed False
Task 75 gens 10 solutions in cir 3
check_program: 
# Write a function to find tuples which have all elements divisible by k from the given list of tuples.

def find_tuples(test_list, K):

    result = []
    for elem in test_list:
        if all(map(lambda x: x % K == 0, elem)):
            result.append(elem)
    return result

def check(find_tuples):
    assert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == '[(6, 24, 12)]'
    assert find_tuples([(5, 25, 30), (4, 2, 3), (7, 8, 9)], 5) == '[(5, 25, 30)]'
    assert find_tuples([(7, 9, 16), (8, 16, 4), (19, 17, 18)], 4) == '[(8, 16, 4)]'

check(find_tuples)
solution 0 passed False
Task 75 gens 10 solutions in cir 4
check_program: 
# Write a function to find tuples which have all elements divisible by k from the given list of tuples.

def find_tuples(test_list, K):

    def is_divisible(a_tuple):
        for i in range(1, K + 1):
            if any(a_tuple[j] % i != 0 for j in range(len(a_tuple))):
                return False
        return True
    return list(filter(is_divisible, test_list))

def check(find_tuples):
    assert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == '[(6, 24, 12)]'
    assert find_tuples([(5, 25, 30), (4, 2, 3), (7, 8, 9)], 5) == '[(5, 25, 30)]'
    assert find_tuples([(7, 9, 16), (8, 16, 4), (19, 17, 18)], 4) == '[(8, 16, 4)]'

check(find_tuples)
solution 0 passed False
Task 75 gens 10 solutions in cir 5
check_program: 
# Write a function to find tuples which have all elements divisible by k from the given list of tuples.

def find_tuples(test_list, K):

    def is_divisible(a_tuple):
        for i in range(1, K + 1):
            if any(a_tuple[j] % i != 0 for j in range(len(a_tuple))):
                return False
        return True
    return list(filter(is_divisible, test_list))

def check(find_tuples):
    assert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == '[(6, 24, 12)]'
    assert find_tuples([(5, 25, 30), (4, 2, 3), (7, 8, 9)], 5) == '[(5, 25, 30)]'
    assert find_tuples([(7, 9, 16), (8, 16, 4), (19, 17, 18)], 4) == '[(8, 16, 4)]'

check(find_tuples)
solution 0 passed False
Task 75 gens 10 solutions in cir 6
check_program: 
# Write a function to find tuples which have all elements divisible by k from the given list of tuples.

def find_tuples(test_list, K):

    def is_divisible(a_tuple):
        for i in range(1, K + 1):
            if any(a_tuple[j] % i != 0 for j in range(len(a_tuple))):
                return False
        return True
    return list(filter(is_divisible, test_list))

def check(find_tuples):
    assert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == '[(6, 24, 12)]'
    assert find_tuples([(5, 25, 30), (4, 2, 3), (7, 8, 9)], 5) == '[(5, 25, 30)]'
    assert find_tuples([(7, 9, 16), (8, 16, 4), (19, 17, 18)], 4) == '[(8, 16, 4)]'

check(find_tuples)
solution 0 passed False
Task 75 gens 10 solutions in cir 7
check_program: 
# Write a function to find tuples which have all elements divisible by k from the given list of tuples.

def find_tuples(test_list, K):

    def is_divisible(a_tuple):
        for i in range(1, K + 1):
            if any(a_tuple[j] % i != 0 for j in range(len(a_tuple))):
                return False
        return True
    return list(filter(is_divisible, test_list))

def check(find_tuples):
    assert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == '[(6, 24, 12)]'
    assert find_tuples([(5, 25, 30), (4, 2, 3), (7, 8, 9)], 5) == '[(5, 25, 30)]'
    assert find_tuples([(7, 9, 16), (8, 16, 4), (19, 17, 18)], 4) == '[(8, 16, 4)]'

check(find_tuples)
solution 0 passed False
Task 118 gens 1 solutions in cir 0
check_program: 
# [link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.

def string_to_list(string):

    return string.split(",")

def check(string_to_list):
    assert string_to_list("python programming")==['python','programming']
    assert string_to_list("lists tuples strings")==['lists','tuples','strings']
    assert string_to_list("write a program")==['write','a','program']

check(string_to_list)
solution 0 passed False
Task 118 gens 9 solutions in cir 1
check_program: 
# [link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.

def string_to_list(string):

    return [i for i in string if i.isalpha() or i.isspace()]

def check(string_to_list):
    assert string_to_list("python programming")==['python','programming']
    assert string_to_list("lists tuples strings")==['lists','tuples','strings']
    assert string_to_list("write a program")==['write','a','program']

check(string_to_list)
solution 0 passed False
Task 118 gens 10 solutions in cir 2
check_program: 
# [link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.

def string_to_list(string):

    if string.strip() == "":
        return []
    return [char for char in string.strip() if char.isalpha()]

def check(string_to_list):
    assert string_to_list("python programming")==['python','programming']
    assert string_to_list("lists tuples strings")==['lists','tuples','strings']
    assert string_to_list("write a program")==['write','a','program']

check(string_to_list)
solution 0 passed False
Task 118 gens 10 solutions in cir 3
check_program: 
# [link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.

def string_to_list(string):

    string = string.strip()
    return [c for c in string.strip() if c.isalnum()]

def check(string_to_list):
    assert string_to_list("python programming")==['python','programming']
    assert string_to_list("lists tuples strings")==['lists','tuples','strings']
    assert string_to_list("write a program")==['write','a','program']

check(string_to_list)
solution 0 passed False
Task 423 gens 1 solutions in cir 0
check_program: 
# Write a function to solve gold mine problem.

def get_maxgold(gold, m, n):

    if m == 0:
        return 0
    if n == 0:
        return 0
    if m < n:
        return get_maxgold(gold, m-1, n)
    if n < m:
        return get_maxgold(gold, m, n-1)
    return max(gold[m-1], gold[n-1]) + gold[m-1] * gold[n-1]

def check(get_maxgold):
    assert get_maxgold([[1, 3, 1, 5],[2, 2, 4, 1],[5, 0, 2, 3],[0, 6, 1, 2]],4,4)==16
    assert get_maxgold([[10,20],[30,40]],2,2)==70
    assert get_maxgold([[4,9],[3,7]],2,2)==13

check(get_maxgold)
solution 0 passed False
Task 423 gens 6 solutions in cir 1
check_program: 
# Write a function to solve gold mine problem.

def get_maxgold(gold, m, n):

    if m == 0:
        return 0
    if n == 0:
        return 0
    if m < n:
        return get_maxgold(gold, m-1, n)
    if n < m:
        return get_maxgold(gold, m, n-1)
    return max(gold[m-1], gold[n-1]) + gold[m-1] * gold[n-1]

def check(get_maxgold):
    assert get_maxgold([[1, 3, 1, 5],[2, 2, 4, 1],[5, 0, 2, 3],[0, 6, 1, 2]],4,4)==16
    assert get_maxgold([[10,20],[30,40]],2,2)==70
    assert get_maxgold([[4,9],[3,7]],2,2)==13

check(get_maxgold)
solution 0 passed False
Task 423 gens 10 solutions in cir 2
check_program: 
# Write a function to solve gold mine problem.

def get_maxgold(gold, m, n):

    if m == 0:
        return 0
    if n == 0:
        return 0
    if m < n:
        return get_maxgold(gold, m-1, n)
    if n < m:
        return get_maxgold(gold, m, n-1)
    return max(gold[m-1], gold[n-1]) + max(gold[m-2], gold[n-2]) * gold[m-1] * gold[n-1]

def check(get_maxgold):
    assert get_maxgold([[1, 3, 1, 5],[2, 2, 4, 1],[5, 0, 2, 3],[0, 6, 1, 2]],4,4)==16
    assert get_maxgold([[10,20],[30,40]],2,2)==70
    assert get_maxgold([[4,9],[3,7]],2,2)==13

check(get_maxgold)
solution 0 passed False
Task 423 gens 10 solutions in cir 3
check_program: 
# Write a function to solve gold mine problem.

def get_maxgold(gold, m, n):

    if m == 0 or n == 0:
        return 0
    if m < n:
        return get_maxgold(gold, m-1, n)
    if n < m:
        return get_maxgold(gold, m, n-1)
    return max(gold[m-1], gold[n-1]) + max(gold[m-2], gold[n-2])

def check(get_maxgold):
    assert get_maxgold([[1, 3, 1, 5],[2, 2, 4, 1],[5, 0, 2, 3],[0, 6, 1, 2]],4,4)==16
    assert get_maxgold([[10,20],[30,40]],2,2)==70
    assert get_maxgold([[4,9],[3,7]],2,2)==13

check(get_maxgold)
solution 0 passed False
Task 423 gens 10 solutions in cir 4
check_program: 
# Write a function to solve gold mine problem.

def get_maxgold(gold, m, n):

    if m == 0 or n == 0:
        return 0
    if m < n:
        return get_maxgold(gold, m-1, n)
    if n < m:
        return get_maxgold(gold, m, n-1)
    return max(gold[m-1], gold[n-1]) + max(gold[m-2], gold[n-2])

def check(get_maxgold):
    assert get_maxgold([[1, 3, 1, 5],[2, 2, 4, 1],[5, 0, 2, 3],[0, 6, 1, 2]],4,4)==16
    assert get_maxgold([[10,20],[30,40]],2,2)==70
    assert get_maxgold([[4,9],[3,7]],2,2)==13

check(get_maxgold)
solution 0 passed False
Task 423 gens 10 solutions in cir 5
check_program: 
# Write a function to solve gold mine problem.

def get_maxgold(gold, m, n):

    return (m if m < n else n)

def check(get_maxgold):
    assert get_maxgold([[1, 3, 1, 5],[2, 2, 4, 1],[5, 0, 2, 3],[0, 6, 1, 2]],4,4)==16
    assert get_maxgold([[10,20],[30,40]],2,2)==70
    assert get_maxgold([[4,9],[3,7]],2,2)==13

check(get_maxgold)
solution 0 passed False
Task 423 gens 10 solutions in cir 6
check_program: 
# Write a function to solve gold mine problem.

def get_maxgold(gold, m, n):

    return (m if m < n else n)

def check(get_maxgold):
    assert get_maxgold([[1, 3, 1, 5],[2, 2, 4, 1],[5, 0, 2, 3],[0, 6, 1, 2]],4,4)==16
    assert get_maxgold([[10,20],[30,40]],2,2)==70
    assert get_maxgold([[4,9],[3,7]],2,2)==13

check(get_maxgold)
solution 0 passed False
Task 423 gens 10 solutions in cir 7
check_program: 
# Write a function to solve gold mine problem.

def get_maxgold(gold, m, n):

    return (max(m, n) if m < n else m)

def check(get_maxgold):
    assert get_maxgold([[1, 3, 1, 5],[2, 2, 4, 1],[5, 0, 2, 3],[0, 6, 1, 2]],4,4)==16
    assert get_maxgold([[10,20],[30,40]],2,2)==70
    assert get_maxgold([[4,9],[3,7]],2,2)==13

check(get_maxgold)
solution 0 passed False
Task 55 gens 1 solutions in cir 0
check_program: 
# Write a function to find t-nth term of geometric series.
import math
def tn_gp(a,n,r):

    if n == 0:
        return a
    else:
        return a * r + tn_gp(a,n-1,r)

def check(tn_gp):
    assert tn_gp(1,5,2)==16
    assert tn_gp(1,5,4)==256
    assert tn_gp(2,6,3)==486

check(tn_gp)
solution 0 passed False
Task 55 gens 4 solutions in cir 1
check_program: 
# Write a function to find t-nth term of geometric series.
import math
def tn_gp(a,n,r):

    if n == 0:
        return a
    else:
        return a * r + tn_gp(a,n-1,r)

def check(tn_gp):
    assert tn_gp(1,5,2)==16
    assert tn_gp(1,5,4)==256
    assert tn_gp(2,6,3)==486

check(tn_gp)
solution 0 passed False
Task 55 gens 10 solutions in cir 2
check_program: 
# Write a function to find t-nth term of geometric series.
import math
def tn_gp(a,n,r):

    if n == 0:
        return a
    elif n % 2 == 0:
        return (a * r + tn_gp(a,n//2,r))/2
    else:
        return (a * r + tn_gp(a,(n-1)//2,r))/1

def check(tn_gp):
    assert tn_gp(1,5,2)==16
    assert tn_gp(1,5,4)==256
    assert tn_gp(2,6,3)==486

check(tn_gp)
solution 0 passed False
Task 55 gens 10 solutions in cir 3
check_program: 
# Write a function to find t-nth term of geometric series.
import math
def tn_gp(a,n,r):

    if n == 0:
        return a
    elif n == 1:
        return a * r
    else:
        return a * r + tn_gp(a,n-1,r)

def check(tn_gp):
    assert tn_gp(1,5,2)==16
    assert tn_gp(1,5,4)==256
    assert tn_gp(2,6,3)==486

check(tn_gp)
solution 0 passed False
Task 430 gens 1 solutions in cir 0
check_program: 
# Write a function to find the directrix of a parabola.

def parabola_directrix(a, b, c):

    if a == 0:
        return b
    elif b == 0:
        return a
    elif c == 0:
        return a
    elif a == 0 and b != 0:
        return b
    elif a != 0 and b == 0:
        return a
    elif a == 0 and c != 0:
        return c
    elif a != 0 and b != 0 and c != 0:
        return (b**2 - 4*a*c)**0.5

def check(parabola_directrix):
    assert parabola_directrix(5,3,2)==-198
    assert parabola_directrix(9,8,4)==-2336
    assert parabola_directrix(2,4,6)==-130

check(parabola_directrix)
solution 0 passed False
Task 430 gens 8 solutions in cir 1
check_program: 
# Write a function to find the directrix of a parabola.

def parabola_directrix(a, b, c):

    if a == 0 or b == 0 or c == 0:
        return None
    elif a == 0 and b != 0:
        return b
    elif a != 0 and b == 0:
        return a
    elif a == 0 and c != 0:
        return c
    elif a != 0 and b != 0 and c != 0:
        return (b**2 - 4*a*c)**0.5

def check(parabola_directrix):
    assert parabola_directrix(5,3,2)==-198
    assert parabola_directrix(9,8,4)==-2336
    assert parabola_directrix(2,4,6)==-130

check(parabola_directrix)
solution 0 passed False
Task 430 gens 10 solutions in cir 2
check_program: 
# Write a function to find the directrix of a parabola.

def parabola_directrix(a, b, c):

    if a == 0 or b == 0 or c == 0:
        return None
    elif a == 0 and b != 0:
        return b
    elif a != 0 and b == 0:
        return a
    elif a == 0 and c != 0:
        return c
    elif a != 0 and b != 0 and c != 0:
        return math.sqrt((-b + math.sqrt(b**2 - 4*a*c))/2)

def check(parabola_directrix):
    assert parabola_directrix(5,3,2)==-198
    assert parabola_directrix(9,8,4)==-2336
    assert parabola_directrix(2,4,6)==-130

check(parabola_directrix)
solution 0 passed False
Task 430 gens 10 solutions in cir 3
check_program: 
# Write a function to find the directrix of a parabola.

def parabola_directrix(a, b, c):

    if a == 0:
        return b
    elif b == 0:
        return a
    elif c == 0:
        return a
    elif a == 0 and b != 0:
        return b
    elif a != 0 and b == 0:
        return a
    elif a == 0 and c != 0:
        return c
    elif a != 0 and b != 0 and c != 0:
        return math.sqrt((-b + math.sqrt(b**2 - 4*a*c))/2)

def check(parabola_directrix):
    assert parabola_directrix(5,3,2)==-198
    assert parabola_directrix(9,8,4)==-2336
    assert parabola_directrix(2,4,6)==-130

check(parabola_directrix)
solution 0 passed False
Task 388 gens 1 solutions in cir 0
check_program: 
# Write a python function to find the highest power of 2 that is less than or equal to n.

def highest_Power_of_2(n):

    result = 0
    while n > 0:
        n = n >> 1
        result += 1
    return result

def check(highest_Power_of_2):
    assert highest_Power_of_2(10) == 8
    assert highest_Power_of_2(19) == 16
    assert highest_Power_of_2(32) == 32

check(highest_Power_of_2)
solution 0 passed False
Task 388 gens 6 solutions in cir 1
check_program: 
# Write a python function to find the highest power of 2 that is less than or equal to n.

def highest_Power_of_2(n):

    result = 0
    while n > 0:
        n = n >> 1
        result += 1
    return result

def check(highest_Power_of_2):
    assert highest_Power_of_2(10) == 8
    assert highest_Power_of_2(19) == 16
    assert highest_Power_of_2(32) == 32

check(highest_Power_of_2)
solution 0 passed False
Task 388 gens 10 solutions in cir 2
check_program: 
# Write a python function to find the highest power of 2 that is less than or equal to n.

def highest_Power_of_2(n):

    result = 1
    while n > 0:
        n = n >> 1
        result = result * 2
    return result

def check(highest_Power_of_2):
    assert highest_Power_of_2(10) == 8
    assert highest_Power_of_2(19) == 16
    assert highest_Power_of_2(32) == 32

check(highest_Power_of_2)
solution 0 passed False
Task 388 gens 10 solutions in cir 3
check_program: 
# Write a python function to find the highest power of 2 that is less than or equal to n.

def highest_Power_of_2(n):

    result = 1
    while n > 0:
        n = n >> 1
        result = result * 2
    return result

def check(highest_Power_of_2):
    assert highest_Power_of_2(10) == 8
    assert highest_Power_of_2(19) == 16
    assert highest_Power_of_2(32) == 32

check(highest_Power_of_2)
solution 0 passed False
Task 388 gens 10 solutions in cir 4
check_program: 
# Write a python function to find the highest power of 2 that is less than or equal to n.

def highest_Power_of_2(n):

    count = 0
    while n > 0:
        n >>= 1
        count += 1
    return count

def check(highest_Power_of_2):
    assert highest_Power_of_2(10) == 8
    assert highest_Power_of_2(19) == 16
    assert highest_Power_of_2(32) == 32

check(highest_Power_of_2)
solution 0 passed False
Task 388 gens 10 solutions in cir 5
check_program: 
# Write a python function to find the highest power of 2 that is less than or equal to n.

def highest_Power_of_2(n):

    highest_power = 0
    while n > 0:
        n = n >> 1
        highest_power = highest_power + 1
    return highest_power

def check(highest_Power_of_2):
    assert highest_Power_of_2(10) == 8
    assert highest_Power_of_2(19) == 16
    assert highest_Power_of_2(32) == 32

check(highest_Power_of_2)
solution 0 passed False
Task 388 gens 10 solutions in cir 6
check_program: 
# Write a python function to find the highest power of 2 that is less than or equal to n.

def highest_Power_of_2(n):

    count = 0
    while n > 0:
        n = n >> 1
        count += 1
    return count

def check(highest_Power_of_2):
    assert highest_Power_of_2(10) == 8
    assert highest_Power_of_2(19) == 16
    assert highest_Power_of_2(32) == 32

check(highest_Power_of_2)
solution 0 passed False
Task 388 gens 10 solutions in cir 7
check_program: 
# Write a python function to find the highest power of 2 that is less than or equal to n.

def highest_Power_of_2(n):

    count = 0
    while n > 0:
        count += 1
        n = n >> 1
    return count

def check(highest_Power_of_2):
    assert highest_Power_of_2(10) == 8
    assert highest_Power_of_2(19) == 16
    assert highest_Power_of_2(32) == 32

check(highest_Power_of_2)
solution 0 passed False
Task 388 gens 10 solutions in cir 8
check_program: 
# Write a python function to find the highest power of 2 that is less than or equal to n.

def highest_Power_of_2(n):

    highest_power = 0
    while n > 0:
        n = n // 2
        highest_power = highest_power + 1
    return highest_power

def check(highest_Power_of_2):
    assert highest_Power_of_2(10) == 8
    assert highest_Power_of_2(19) == 16
    assert highest_Power_of_2(32) == 32

check(highest_Power_of_2)
solution 0 passed False
Task 388 gens 10 solutions in cir 9
check_program: 
# Write a python function to find the highest power of 2 that is less than or equal to n.

def highest_Power_of_2(n):

    highest_power = 0
    while n > 0:
        n = n >> 1
        highest_power = highest_power + 1
    return highest_power

def check(highest_Power_of_2):
    assert highest_Power_of_2(10) == 8
    assert highest_Power_of_2(19) == 16
    assert highest_Power_of_2(32) == 32

check(highest_Power_of_2)
solution 0 passed False
Task 388 gens 10 solutions in cir 10
check_program: 
# Write a python function to find the highest power of 2 that is less than or equal to n.

def highest_Power_of_2(n):

    count = 0
    while n > 0:
        n = n >> 1
        count += 1
    return count

def check(highest_Power_of_2):
    assert highest_Power_of_2(10) == 8
    assert highest_Power_of_2(19) == 16
    assert highest_Power_of_2(32) == 32

check(highest_Power_of_2)
solution 0 passed False
Task 473 gens 1 solutions in cir 0
check_program: 
# Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.

def tuple_intersection(test_list1, test_list2):

    return tuple(set(test_list1) & set(test_list2))

def check(tuple_intersection):
    assert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}
    assert tuple_intersection([(4, 1), (7, 4), (11, 13), (17, 14)] , [(1, 4), (7, 4), (16, 12), (10, 13)]) == {(4, 7), (1, 4)}
    assert tuple_intersection([(2, 1), (3, 2), (1, 3), (1, 4)] , [(11, 2), (2, 3), (6, 2), (1, 3)]) == {(1, 3), (2, 3)}

check(tuple_intersection)
solution 0 passed False
Task 473 gens 5 solutions in cir 1
check_program: 
# Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.

def tuple_intersection(test_list1, test_list2):

    return list(set(test_list1) & set(test_list2))

def check(tuple_intersection):
    assert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}
    assert tuple_intersection([(4, 1), (7, 4), (11, 13), (17, 14)] , [(1, 4), (7, 4), (16, 12), (10, 13)]) == {(4, 7), (1, 4)}
    assert tuple_intersection([(2, 1), (3, 2), (1, 3), (1, 4)] , [(11, 2), (2, 3), (6, 2), (1, 3)]) == {(1, 3), (2, 3)}

check(tuple_intersection)
solution 0 passed False
Task 473 gens 10 solutions in cir 2
check_program: 
# Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.

def tuple_intersection(test_list1, test_list2):

    return list(set(test_list1) & set(test_list2))

def check(tuple_intersection):
    assert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}
    assert tuple_intersection([(4, 1), (7, 4), (11, 13), (17, 14)] , [(1, 4), (7, 4), (16, 12), (10, 13)]) == {(4, 7), (1, 4)}
    assert tuple_intersection([(2, 1), (3, 2), (1, 3), (1, 4)] , [(11, 2), (2, 3), (6, 2), (1, 3)]) == {(1, 3), (2, 3)}

check(tuple_intersection)
solution 0 passed False
Task 473 gens 10 solutions in cir 3
check_program: 
# Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.

def tuple_intersection(test_list1, test_list2):

    return tuple(list(set(test_list1) & set(test_list2)))

def check(tuple_intersection):
    assert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}
    assert tuple_intersection([(4, 1), (7, 4), (11, 13), (17, 14)] , [(1, 4), (7, 4), (16, 12), (10, 13)]) == {(4, 7), (1, 4)}
    assert tuple_intersection([(2, 1), (3, 2), (1, 3), (1, 4)] , [(11, 2), (2, 3), (6, 2), (1, 3)]) == {(1, 3), (2, 3)}

check(tuple_intersection)
solution 0 passed False
Task 473 gens 10 solutions in cir 4
check_program: 
# Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.

def tuple_intersection(test_list1, test_list2):

    return list(filter(lambda x: x in test_list2, test_list1))

def check(tuple_intersection):
    assert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}
    assert tuple_intersection([(4, 1), (7, 4), (11, 13), (17, 14)] , [(1, 4), (7, 4), (16, 12), (10, 13)]) == {(4, 7), (1, 4)}
    assert tuple_intersection([(2, 1), (3, 2), (1, 3), (1, 4)] , [(11, 2), (2, 3), (6, 2), (1, 3)]) == {(1, 3), (2, 3)}

check(tuple_intersection)
solution 0 passed False
Task 473 gens 10 solutions in cir 5
check_program: 
# Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.

def tuple_intersection(test_list1, test_list2):

    return list(filter(lambda x: x in test_list2, test_list1))

def check(tuple_intersection):
    assert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}
    assert tuple_intersection([(4, 1), (7, 4), (11, 13), (17, 14)] , [(1, 4), (7, 4), (16, 12), (10, 13)]) == {(4, 7), (1, 4)}
    assert tuple_intersection([(2, 1), (3, 2), (1, 3), (1, 4)] , [(11, 2), (2, 3), (6, 2), (1, 3)]) == {(1, 3), (2, 3)}

check(tuple_intersection)
solution 0 passed False
Task 473 gens 10 solutions in cir 6
check_program: 
# Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.

def tuple_intersection(test_list1, test_list2):

    return list(filter(lambda x: x in test_list2, test_list1))

def check(tuple_intersection):
    assert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}
    assert tuple_intersection([(4, 1), (7, 4), (11, 13), (17, 14)] , [(1, 4), (7, 4), (16, 12), (10, 13)]) == {(4, 7), (1, 4)}
    assert tuple_intersection([(2, 1), (3, 2), (1, 3), (1, 4)] , [(11, 2), (2, 3), (6, 2), (1, 3)]) == {(1, 3), (2, 3)}

check(tuple_intersection)
solution 0 passed False
Task 473 gens 10 solutions in cir 7
check_program: 
# Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.

def tuple_intersection(test_list1, test_list2):

    return list(filter(lambda x: x in test_list2, test_list1))

def check(tuple_intersection):
    assert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}
    assert tuple_intersection([(4, 1), (7, 4), (11, 13), (17, 14)] , [(1, 4), (7, 4), (16, 12), (10, 13)]) == {(4, 7), (1, 4)}
    assert tuple_intersection([(2, 1), (3, 2), (1, 3), (1, 4)] , [(11, 2), (2, 3), (6, 2), (1, 3)]) == {(1, 3), (2, 3)}

check(tuple_intersection)
solution 0 passed False
Task 473 gens 10 solutions in cir 8
check_program: 
# Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.

def tuple_intersection(test_list1, test_list2):

    return list(set(test_list1).intersection(test_list2))

def check(tuple_intersection):
    assert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}
    assert tuple_intersection([(4, 1), (7, 4), (11, 13), (17, 14)] , [(1, 4), (7, 4), (16, 12), (10, 13)]) == {(4, 7), (1, 4)}
    assert tuple_intersection([(2, 1), (3, 2), (1, 3), (1, 4)] , [(11, 2), (2, 3), (6, 2), (1, 3)]) == {(1, 3), (2, 3)}

check(tuple_intersection)
solution 0 passed False
Task 473 gens 10 solutions in cir 9
check_program: 
# Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.

def tuple_intersection(test_list1, test_list2):

    return list(filter(lambda x: x in test_list1, test_list2))

def check(tuple_intersection):
    assert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}
    assert tuple_intersection([(4, 1), (7, 4), (11, 13), (17, 14)] , [(1, 4), (7, 4), (16, 12), (10, 13)]) == {(4, 7), (1, 4)}
    assert tuple_intersection([(2, 1), (3, 2), (1, 3), (1, 4)] , [(11, 2), (2, 3), (6, 2), (1, 3)]) == {(1, 3), (2, 3)}

check(tuple_intersection)
solution 0 passed False
Task 473 gens 10 solutions in cir 10
check_program: 
# Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.

def tuple_intersection(test_list1, test_list2):

    return list(filter(lambda x: x in test_list1, test_list2))

def check(tuple_intersection):
    assert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}
    assert tuple_intersection([(4, 1), (7, 4), (11, 13), (17, 14)] , [(1, 4), (7, 4), (16, 12), (10, 13)]) == {(4, 7), (1, 4)}
    assert tuple_intersection([(2, 1), (3, 2), (1, 3), (1, 4)] , [(11, 2), (2, 3), (6, 2), (1, 3)]) == {(1, 3), (2, 3)}

check(tuple_intersection)
solution 0 passed False
Task 260 gens 1 solutions in cir 0
check_program: 
# Write a function to find the nth newman–shanks–williams prime number.

def newman_prime(n):

    if n < 2:
        return False
    for i in range(2, int(n**0.5) + 1):
        if all(x % i == 0 for x in range(n//i**2 + 1)):
            return False
    return True

def check(newman_prime):
    assert newman_prime(3) == 7 
    assert newman_prime(4) == 17
    assert newman_prime(5) == 41

check(newman_prime)
solution 0 passed False
Task 260 gens 6 solutions in cir 1
check_program: 
# Write a function to find the nth newman–shanks–williams prime number.

def newman_prime(n):

    if n < 2:
        return False
    for i in range(2, int(n**0.5) + 1):
        if all(x % i == 0 for x in range(n//i**2 + 1)):
            return False
    return True

def check(newman_prime):
    assert newman_prime(3) == 7 
    assert newman_prime(4) == 17
    assert newman_prime(5) == 41

check(newman_prime)
solution 0 passed False
Task 260 gens 10 solutions in cir 2
check_program: 
# Write a function to find the nth newman–shanks–williams prime number.

def newman_prime(n):

    if n < 2:
        return False
    for i in range(2, int(n**0.5) + 1):
        if all(x % i == 0 for x in range(n//i**2 + 1)):
            return False
    return True

def check(newman_prime):
    assert newman_prime(3) == 7 
    assert newman_prime(4) == 17
    assert newman_prime(5) == 41

check(newman_prime)
solution 0 passed False
Task 260 gens 10 solutions in cir 3
check_program: 
# Write a function to find the nth newman–shanks–williams prime number.

def newman_prime(n):

    if n < 2:
        return False
    i = 2
    while i ** 2 <= n:
        if n % i == 0:
            return False
        i += 1
    return True

def check(newman_prime):
    assert newman_prime(3) == 7 
    assert newman_prime(4) == 17
    assert newman_prime(5) == 41

check(newman_prime)
solution 0 passed False
Task 260 gens 10 solutions in cir 4
check_program: 
# Write a function to find the nth newman–shanks–williams prime number.

def newman_prime(n):

    def count_divisors(num):
        count = 1
        for i in range(1, num ** 0.5 + 1):
            if (num // i) % 1 == 0:
                count += 1
        return count
    def is_nth_newman_prime(num, n):
        for i in range(1, num // 2 + 1):
            if all(x % i == 0 for x in range(num // i ** 2 + 1)):
                return False
        return True
    if n < 2 or n == 2:
        return 2
    for i in range(3, int(n ** 0.5) + 1):
        if count_divisors(i) == n - 1:
            return is_nth_newman_prime(i, n)
    return None

def check(newman_prime):
    assert newman_prime(3) == 7 
    assert newman_prime(4) == 17
    assert newman_prime(5) == 41

check(newman_prime)
solution 0 passed False
Task 260 gens 10 solutions in cir 5
check_program: 
# Write a function to find the nth newman–shanks–williams prime number.

def newman_prime(n):

    def count_divisors(num):
        count = 1
        for i in range(1, num ** 0.5 + 1):
            if (num // i) % 1 == 0:
                count += 1
        return count
    def is_nth_newman_prime(num, n):
        for i in range(1, num // 2 + 1):
            if all(x % i == 0 for x in range(num // i ** 2 + 1)):
                return False
        return True
    if n < 2 or n == 2:
        return 2
    for i in range(3, int(n ** 0.5) + 1):
        if count_divisors(i) == n - 1:
            return is_nth_newman_prime(i, n)
    return None

def check(newman_prime):
    assert newman_prime(3) == 7 
    assert newman_prime(4) == 17
    assert newman_prime(5) == 41

check(newman_prime)
solution 0 passed False
Task 260 gens 10 solutions in cir 6
check_program: 
# Write a function to find the nth newman–shanks–williams prime number.

def newman_prime(n):

    if n < 2:
        return 2
    if n == 2:
        return 2
    if n < 3 or n == 3:
        return newman_prime(3)
    for i in range(3, int(n ** 0.5) + 1):
        if count_divisors(i) == n - 1:
            return is_nth_newman_prime(i, n)
    return None
def count_divisors(n):
    count = 0
    for i in range(1, int(n ** 0.5) + 1):
        if n % i == 0:
            count += 1
    return count
def is_nth_newman_prime(i, n):
    if i ** 2 <= n:
        return all(j % i == 0 for j in range(i ** 2, n + 1))
    return False

def check(newman_prime):
    assert newman_prime(3) == 7 
    assert newman_prime(4) == 17
    assert newman_prime(5) == 41

check(newman_prime)
solution 0 passed False
Task 260 gens 10 solutions in cir 7
check_program: 
# Write a function to find the nth newman–shanks–williams prime number.

def newman_prime(n):

    if n < 1:
        return None
    if n == 1:
        return 2
    if n == 2:
        return 2
    for i in range(3, int(n ** 0.5) + 1):
        if i * (i + 1) <= n:
            return None
    return newman_prime(int(n ** 0.5)) + 1

def check(newman_prime):
    assert newman_prime(3) == 7 
    assert newman_prime(4) == 17
    assert newman_prime(5) == 41

check(newman_prime)
solution 0 passed False
Task 260 gens 10 solutions in cir 8
check_program: 
# Write a function to find the nth newman–shanks–williams prime number.

def newman_prime(n):

    if n < 1:
        return None
    if n == 1:
        return 2
    if n == 2:
        return 2
    if n <= 3:
        return 2
    i = 3
    while i ** 2 <= n:
        if n % i == 0:
            return None
        i += 1
    for i in range(3, int(n ** 0.5) + 1):
        if i * (i + 1) <= n:
            return None
    return newman_prime(int(n ** 0.5)) + 1

def check(newman_prime):
    assert newman_prime(3) == 7 
    assert newman_prime(4) == 17
    assert newman_prime(5) == 41

check(newman_prime)
solution 0 passed False
Task 309 gens 1 solutions in cir 0
check_program: 
# Write a python function to find the maximum of two numbers.

def maximum(a,b):

    return max(a,b)

def check(maximum):
    assert maximum(5,10) == 10
    assert maximum(-1,-2) == -1
    assert maximum(9,7) == 9

check(maximum)
solution 0 passed True
Task 309 gens 3 solutions in cir 1
check_program: 
# Write a python function to find the maximum of two numbers.

def maximum(a,b):

    return max(a,b)

def check(maximum):
    assert maximum(5,10) == 10
    assert maximum(-1,-2) == -1
    assert maximum(9,7) == 9

check(maximum)
solution 0 passed True
Task 309 gens 7 solutions in cir 2
check_program: 
# Write a python function to find the maximum of two numbers.

def maximum(a,b):

    return max(a,b)

def check(maximum):
    assert maximum(5,10) == 10
    assert maximum(-1,-2) == -1
    assert maximum(9,7) == 9

check(maximum)
solution 0 passed True
Task 309 gens 10 solutions in cir 3
check_program: 
# Write a python function to find the maximum of two numbers.

def maximum(a,b):

    return a if a > b else b

def check(maximum):
    assert maximum(5,10) == 10
    assert maximum(-1,-2) == -1
    assert maximum(9,7) == 9

check(maximum)
solution 0 passed True
Task 309 gens 10 solutions in cir 4
check_program: 
# Write a python function to find the maximum of two numbers.

def maximum(a,b):

    return a if a > b else b

def check(maximum):
    assert maximum(5,10) == 10
    assert maximum(-1,-2) == -1
    assert maximum(9,7) == 9

check(maximum)
solution 0 passed True
Task 309 gens 10 solutions in cir 5
check_program: 
# Write a python function to find the maximum of two numbers.

def maximum(a,b):

    return a if a > b else b

def check(maximum):
    assert maximum(5,10) == 10
    assert maximum(-1,-2) == -1
    assert maximum(9,7) == 9

check(maximum)
solution 0 passed True
Task 309 gens 10 solutions in cir 6
check_program: 
# Write a python function to find the maximum of two numbers.

def maximum(a,b):

    return a if a >= b else b

def check(maximum):
    assert maximum(5,10) == 10
    assert maximum(-1,-2) == -1
    assert maximum(9,7) == 9

check(maximum)
solution 0 passed True
Task 309 gens 10 solutions in cir 7
check_program: 
# Write a python function to find the maximum of two numbers.

def maximum(a,b):

    return a if a >= b else b

def check(maximum):
    assert maximum(5,10) == 10
    assert maximum(-1,-2) == -1
    assert maximum(9,7) == 9

check(maximum)
solution 0 passed True
Task 309 gens 10 solutions in cir 8
check_program: 
# Write a python function to find the maximum of two numbers.

def maximum(a,b):

    return a if (a > b) else b

def check(maximum):
    assert maximum(5,10) == 10
    assert maximum(-1,-2) == -1
    assert maximum(9,7) == 9

check(maximum)
solution 0 passed True
Task 309 gens 10 solutions in cir 9
check_program: 
# Write a python function to find the maximum of two numbers.

def maximum(a,b):

    return max(a,b) or min(a,b)

def check(maximum):
    assert maximum(5,10) == 10
    assert maximum(-1,-2) == -1
    assert maximum(9,7) == 9

check(maximum)
solution 0 passed True
Task 309 gens 10 solutions in cir 10
check_program: 
# Write a python function to find the maximum of two numbers.

def maximum(a,b):

    return max(a, b)

def check(maximum):
    assert maximum(5,10) == 10
    assert maximum(-1,-2) == -1
    assert maximum(9,7) == 9

check(maximum)
solution 0 passed True
Task 95 gens 1 solutions in cir 0
check_program: 
# Write a python function to find the minimum length of sublist.

def Find_Min_Length(lst):

    min_length = 0
    for i in range(len(lst)):
        if len(lst) - i < min_length:
            min_length = len(lst) - i
    return min_length

def check(Find_Min_Length):
    assert Find_Min_Length([[1],[1,2]]) == 1
    assert Find_Min_Length([[1,2],[1,2,3],[1,2,3,4]]) == 2
    assert Find_Min_Length([[3,3,3],[4,4,4,4]]) == 3

check(Find_Min_Length)
solution 0 passed False
Task 95 gens 10 solutions in cir 1
check_program: 
# Write a python function to find the minimum length of sublist.

def Find_Min_Length(lst):

    return len(lst)

def check(Find_Min_Length):
    assert Find_Min_Length([[1],[1,2]]) == 1
    assert Find_Min_Length([[1,2],[1,2,3],[1,2,3,4]]) == 2
    assert Find_Min_Length([[3,3,3],[4,4,4,4]]) == 3

check(Find_Min_Length)
solution 0 passed False
Task 95 gens 10 solutions in cir 2
check_program: 
# Write a python function to find the minimum length of sublist.

def Find_Min_Length(lst):

    return min(len(lst), sum(1 for i in lst))

def check(Find_Min_Length):
    assert Find_Min_Length([[1],[1,2]]) == 1
    assert Find_Min_Length([[1,2],[1,2,3],[1,2,3,4]]) == 2
    assert Find_Min_Length([[3,3,3],[4,4,4,4]]) == 3

check(Find_Min_Length)
solution 0 passed False
Task 95 gens 10 solutions in cir 3
check_program: 
# Write a python function to find the minimum length of sublist.

def Find_Min_Length(lst):

    result = len(lst)
    min_len = result
    while len(lst) > 0:
        for i in range(len(lst)):
            if len(lst) - i < min_len:
                min_len = len(lst) - i
            elif len(lst) - i > min_len:
                min_len = len(lst) - i
        result = min_len
        if len(lst) > min_len:
            min_len = len(lst) - min_len
        lst = lst[min_len:]
    return result

def check(Find_Min_Length):
    assert Find_Min_Length([[1],[1,2]]) == 1
    assert Find_Min_Length([[1,2],[1,2,3],[1,2,3,4]]) == 2
    assert Find_Min_Length([[3,3,3],[4,4,4,4]]) == 3

check(Find_Min_Length)
solution 0 passed False
Task 93 gens 1 solutions in cir 0
check_program: 
# Write a function to calculate the value of 'a' to the power 'b'.

def power(a,b):

    if b == 0:
        return 1
    else:
        return a * power(a,b-1)

def check(power):
    assert power(3,4) == 81
    assert power(2,3) == 8
    assert power(5,5) == 3125

check(power)
solution 0 passed True
Task 93 gens 7 solutions in cir 1
check_program: 
# Write a function to calculate the value of 'a' to the power 'b'.

def power(a,b):

    result = 1
    while b > 0:
        if b % 2 == 1:
            result *= a
        a *= a
        b //= 2
    return result

def check(power):
    assert power(3,4) == 81
    assert power(2,3) == 8
    assert power(5,5) == 3125

check(power)
solution 0 passed True
Task 93 gens 10 solutions in cir 2
check_program: 
# Write a function to calculate the value of 'a' to the power 'b'.

def power(a,b):

    if b == 0:
        return 1
    elif b == 1:
        return a
    elif b < 0:
        return power(-a, -b)
    else:
        return a * power(a, b-1)

def check(power):
    assert power(3,4) == 81
    assert power(2,3) == 8
    assert power(5,5) == 3125

check(power)
solution 0 passed True
Task 93 gens 10 solutions in cir 3
check_program: 
# Write a function to calculate the value of 'a' to the power 'b'.

def power(a,b):

    if b == 0:
        return 1
    elif b == 1:
        return a
    elif b < 0:
        return power(-a, -b)
    else:
        result = 1
        for i in range(1, b+1):
            result = result * a
        return result

def check(power):
    assert power(3,4) == 81
    assert power(2,3) == 8
    assert power(5,5) == 3125

check(power)
solution 0 passed True
Task 334 gens 1 solutions in cir 0
check_program: 
# Write a python function to check whether the triangle is valid or not if sides are given.

def check_Validity(a,b,c):

    if a**2 + b**2 > c**2 or a**2 + c**2 > b**2 or b**2 + c**2 > a**2:
        return False
    return True

def check(check_Validity):
    assert check_Validity(1,2,3) == False
    assert check_Validity(2,3,5) == False
    assert check_Validity(7,10,5) == True

check(check_Validity)
solution 0 passed False
Task 334 gens 4 solutions in cir 1
check_program: 
# Write a python function to check whether the triangle is valid or not if sides are given.

def check_Validity(a,b,c):

    if a**2 + b**2 > c**2 or a**2 + c**2 > b**2 or b**2 + c**2 > a**2:
        return False
    return True

def check(check_Validity):
    assert check_Validity(1,2,3) == False
    assert check_Validity(2,3,5) == False
    assert check_Validity(7,10,5) == True

check(check_Validity)
solution 0 passed False
Task 334 gens 10 solutions in cir 2
check_program: 
# Write a python function to check whether the triangle is valid or not if sides are given.

def check_Validity(a,b,c):

    return (a**2 + b**2 > c**2 or a**2 + c**2 > b**2 or b**2 + c**2 > a**2) and a**2 + b**2 != c**2 and c != 0

def check(check_Validity):
    assert check_Validity(1,2,3) == False
    assert check_Validity(2,3,5) == False
    assert check_Validity(7,10,5) == True

check(check_Validity)
solution 0 passed False
Task 334 gens 10 solutions in cir 3
check_program: 
# Write a python function to check whether the triangle is valid or not if sides are given.

def check_Validity(a,b,c):

    import math
    if a == b and b == c:
        return False
    return (a**2 + b**2 > c**2 or a**2 + c**2 > b**2 or b**2 + c**2 > a**2) and c != 0 and math.isclose(a,b, rel_tol=1e-6) and math.isclose(b,c, rel_tol=1e-6) and math.isclose(c,a, rel_tol=1e-6) and c != 0 and math.isclose(a, c, rel_tol=1e-6) and math.isclose(b,c, rel_tol=1e-6) and math.isclose(c, b, rel_tol=1e-6) and math.isclose(c,a, rel_tol=1e-6)

def check(check_Validity):
    assert check_Validity(1,2,3) == False
    assert check_Validity(2,3,5) == False
    assert check_Validity(7,10,5) == True

check(check_Validity)
solution 0 passed False
Task 337 gens 1 solutions in cir 0
check_program: 
# Write a function that matches a word at the end of a string, with optional punctuation.
import re
def text_match_word(text):

    import re
    pattern = re.compile(r'[a-zA-Z]+')
    return pattern.fullmatch(text).group()

def check(text_match_word):
    assert text_match_word("python.")==('Found a match!')
    assert text_match_word("python.")==('Found a match!')
    assert text_match_word("  lang  .")==('Not matched!')

check(text_match_word)
solution 0 passed False
Task 337 gens 6 solutions in cir 1
check_program: 
# Write a function that matches a word at the end of a string, with optional punctuation.
import re
def text_match_word(text):

    pattern = re.compile(r'[a-zA-Z]+')
    return pattern.fullmatch(text).group()

def check(text_match_word):
    assert text_match_word("python.")==('Found a match!')
    assert text_match_word("python.")==('Found a match!')
    assert text_match_word("  lang  .")==('Not matched!')

check(text_match_word)
solution 0 passed False
Task 337 gens 10 solutions in cir 2
check_program: 
# Write a function that matches a word at the end of a string, with optional punctuation.
import re
def text_match_word(text):

    import re
    pattern = re.compile(r'[a-zA-Z]+(?:\.|$)')
    return pattern.fullmatch(text).group()

def check(text_match_word):
    assert text_match_word("python.")==('Found a match!')
    assert text_match_word("python.")==('Found a match!')
    assert text_match_word("  lang  .")==('Not matched!')

check(text_match_word)
solution 0 passed False
Task 337 gens 10 solutions in cir 3
check_program: 
# Write a function that matches a word at the end of a string, with optional punctuation.
import re
def text_match_word(text):

    pattern = re.compile(r'[a-zA-Z]+$')
    match = pattern.search(text)
    if match:
        return match.group()
    else:
        return None

def check(text_match_word):
    assert text_match_word("python.")==('Found a match!')
    assert text_match_word("python.")==('Found a match!')
    assert text_match_word("  lang  .")==('Not matched!')

check(text_match_word)
solution 0 passed False
Task 337 gens 10 solutions in cir 4
check_program: 
# Write a function that matches a word at the end of a string, with optional punctuation.
import re
def text_match_word(text):

    pattern = re.compile(r'[a-zA-Z]+$')
    match = pattern.search(text)
    if match:
        return match.group()
    else:
        return None

def check(text_match_word):
    assert text_match_word("python.")==('Found a match!')
    assert text_match_word("python.")==('Found a match!')
    assert text_match_word("  lang  .")==('Not matched!')

check(text_match_word)
solution 0 passed False
Task 64 gens 1 solutions in cir 0
check_program: 
# Write a function to sort a list of tuples using lambda.

def subject_marks(subjectmarks):

    subjectmarks = [(10, 85), (90, 80), (75, 95), (80, 70)]
    def sort_marks_by_subject(subjectmarks):
        return sorted(subjectmarks, key=lambda x: x[1])
    
    print(sort_marks_by_subject(subjectmarks))

def check(subject_marks):
    assert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]
    assert subject_marks([('Telugu',49),('Hindhi',54),('Social',33)])==([('Social',33),('Telugu',49),('Hindhi',54)])
    assert subject_marks([('Physics',96),('Chemistry',97),('Biology',45)])==([('Biology',45),('Physics',96),('Chemistry',97)])

check(subject_marks)
solution 0 passed False
Task 64 gens 8 solutions in cir 1
check_program: 
# Write a function to sort a list of tuples using lambda.

def subject_marks(subjectmarks):

    def sort_marks_by_subject(subjectmarks):
        return sorted(subjectmarks, key=lambda x: x[1])
    return sort_marks_by_subject(subjectmarks)

def check(subject_marks):
    assert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]
    assert subject_marks([('Telugu',49),('Hindhi',54),('Social',33)])==([('Social',33),('Telugu',49),('Hindhi',54)])
    assert subject_marks([('Physics',96),('Chemistry',97),('Biology',45)])==([('Biology',45),('Physics',96),('Chemistry',97)])

check(subject_marks)
solution 0 passed True
Task 64 gens 10 solutions in cir 2
check_program: 
# Write a function to sort a list of tuples using lambda.

def subject_marks(subjectmarks):

    return sorted(subjectmarks, key=lambda x: (x[0], x[1]))

def check(subject_marks):
    assert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]
    assert subject_marks([('Telugu',49),('Hindhi',54),('Social',33)])==([('Social',33),('Telugu',49),('Hindhi',54)])
    assert subject_marks([('Physics',96),('Chemistry',97),('Biology',45)])==([('Biology',45),('Physics',96),('Chemistry',97)])

check(subject_marks)
solution 0 passed False
Task 64 gens 10 solutions in cir 3
check_program: 
# Write a function to sort a list of tuples using lambda.

def subject_marks(subjectmarks):

    return sorted(subjectmarks, key=lambda x: (x[0], x[1]))

def check(subject_marks):
    assert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]
    assert subject_marks([('Telugu',49),('Hindhi',54),('Social',33)])==([('Social',33),('Telugu',49),('Hindhi',54)])
    assert subject_marks([('Physics',96),('Chemistry',97),('Biology',45)])==([('Biology',45),('Physics',96),('Chemistry',97)])

check(subject_marks)
solution 0 passed False
Task 409 gens 1 solutions in cir 0
check_program: 
# Write a function to find the minimum product from the pairs of tuples within a given list.

def min_product_tuple(list1):

    min_product = float('inf')
    for i in range(len(list1)):
        for j in range(i+1, len(list1)):
            product = list1[i] * list1[j]
            if product < min_product:
                min_product = product
    return min_product

def check(min_product_tuple):
    assert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8
    assert min_product_tuple([(10,20), (15,2), (5,10)] )==30
    assert min_product_tuple([(11,44), (10,15), (20,5), (12, 9)] )==100

check(min_product_tuple)
solution 0 passed False
Task 409 gens 5 solutions in cir 1
check_program: 
# Write a function to find the minimum product from the pairs of tuples within a given list.

def min_product_tuple(list1):

    result = float('inf')
    for a,b in list1:
        if a != b:
            product = a * b
            if product < result:
                result = product
    return result

def check(min_product_tuple):
    assert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8
    assert min_product_tuple([(10,20), (15,2), (5,10)] )==30
    assert min_product_tuple([(11,44), (10,15), (20,5), (12, 9)] )==100

check(min_product_tuple)
solution 0 passed True
Task 409 gens 10 solutions in cir 2
check_program: 
# Write a function to find the minimum product from the pairs of tuples within a given list.

def min_product_tuple(list1):

    result = float('inf')
    for a, b in list1:
        if a != b:
            product = a * b
            if product < result:
                result = product
    return result

def check(min_product_tuple):
    assert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8
    assert min_product_tuple([(10,20), (15,2), (5,10)] )==30
    assert min_product_tuple([(11,44), (10,15), (20,5), (12, 9)] )==100

check(min_product_tuple)
solution 0 passed True
Task 409 gens 10 solutions in cir 3
check_program: 
# Write a function to find the minimum product from the pairs of tuples within a given list.

def min_product_tuple(list1):

    result = float('inf')
    for a, b in list1:
        if a != b:
            product = a * b
            if product < result:
                result = product
    if result == float('inf'):
        return None
    else:
        return result

def check(min_product_tuple):
    assert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8
    assert min_product_tuple([(10,20), (15,2), (5,10)] )==30
    assert min_product_tuple([(11,44), (10,15), (20,5), (12, 9)] )==100

check(min_product_tuple)
solution 0 passed True
Task 409 gens 10 solutions in cir 4
check_program: 
# Write a function to find the minimum product from the pairs of tuples within a given list.

def min_product_tuple(list1):

    result = float('inf')
    for a, b in list1:
        if a != b:
            product = a * b
            if product < result:
                result = product
    if result == float('inf'):
        return None
    else:
        return result

def check(min_product_tuple):
    assert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8
    assert min_product_tuple([(10,20), (15,2), (5,10)] )==30
    assert min_product_tuple([(11,44), (10,15), (20,5), (12, 9)] )==100

check(min_product_tuple)
solution 0 passed True
Task 298 gens 1 solutions in cir 0
check_program: 
# Write a function to find the nested list elements which are present in another list.

def intersection_nested_lists(l1, l2):

    result = []
    for i in range(len(l1)):
        if l1[i] in l2:
            result.append(l1[i])
    return result

def check(intersection_nested_lists):
    assert intersection_nested_lists( [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==[[12], [7, 11], [1, 5, 8]]
    assert intersection_nested_lists([[2, 3, 1], [4, 5], [6, 8]], [[4, 5], [6, 8]])==[[], []]
    assert intersection_nested_lists(['john','amal','joel','george'],[['john'],['jack','john','mary'],['howard','john'],['jude']])==[['john'], ['john'], ['john'], []]

check(intersection_nested_lists)
solution 0 passed False
Task 298 gens 8 solutions in cir 1
check_program: 
# Write a function to find the nested list elements which are present in another list.

def intersection_nested_lists(l1, l2):

    result = []
    for i in range(len(l1)):
        if l1[i] in l2:
            result.append(l1[i])
    return result

def check(intersection_nested_lists):
    assert intersection_nested_lists( [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==[[12], [7, 11], [1, 5, 8]]
    assert intersection_nested_lists([[2, 3, 1], [4, 5], [6, 8]], [[4, 5], [6, 8]])==[[], []]
    assert intersection_nested_lists(['john','amal','joel','george'],[['john'],['jack','john','mary'],['howard','john'],['jude']])==[['john'], ['john'], ['john'], []]

check(intersection_nested_lists)
solution 0 passed False
Task 298 gens 10 solutions in cir 2
check_program: 
# Write a function to find the nested list elements which are present in another list.

def intersection_nested_lists(l1, l2):

    result = []
    for i in range(len(l1)):
        if l1[i] in l2 and l1[i] not in result:
            result.append(l1[i])
    return result

def check(intersection_nested_lists):
    assert intersection_nested_lists( [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==[[12], [7, 11], [1, 5, 8]]
    assert intersection_nested_lists([[2, 3, 1], [4, 5], [6, 8]], [[4, 5], [6, 8]])==[[], []]
    assert intersection_nested_lists(['john','amal','joel','george'],[['john'],['jack','john','mary'],['howard','john'],['jude']])==[['john'], ['john'], ['john'], []]

check(intersection_nested_lists)
solution 0 passed False
Task 298 gens 10 solutions in cir 3
check_program: 
# Write a function to find the nested list elements which are present in another list.

def intersection_nested_lists(l1, l2):

    result = []
    if l1 and l2:
        for item in l1:
            if item in l2 and item not in result:
                result.append(item)
    return result

def check(intersection_nested_lists):
    assert intersection_nested_lists( [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==[[12], [7, 11], [1, 5, 8]]
    assert intersection_nested_lists([[2, 3, 1], [4, 5], [6, 8]], [[4, 5], [6, 8]])==[[], []]
    assert intersection_nested_lists(['john','amal','joel','george'],[['john'],['jack','john','mary'],['howard','john'],['jude']])==[['john'], ['john'], ['john'], []]

check(intersection_nested_lists)
solution 0 passed False
Task 320 gens 1 solutions in cir 0
check_program: 
# Write a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.

def sum_difference(n):

    return (n*(n+1))/2 - (n*(n+1))/2

def check(sum_difference):
    assert sum_difference(12)==5434
    assert sum_difference(20)==41230
    assert sum_difference(54)==2151270

check(sum_difference)
solution 0 passed False
Task 320 gens 7 solutions in cir 1
check_program: 
# Write a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.

def sum_difference(n):

    return (n*(n+1))/2 - (n*(n+1))/2

def check(sum_difference):
    assert sum_difference(12)==5434
    assert sum_difference(20)==41230
    assert sum_difference(54)==2151270

check(sum_difference)
solution 0 passed False
Task 320 gens 10 solutions in cir 2
check_program: 
# Write a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.

def sum_difference(n):

    s1 = n ** 2
    s2 = sum([x ** 2 for x in range(n)])
    return s1 - s2

def check(sum_difference):
    assert sum_difference(12)==5434
    assert sum_difference(20)==41230
    assert sum_difference(54)==2151270

check(sum_difference)
solution 0 passed False
Task 320 gens 10 solutions in cir 3
check_program: 
# Write a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.

def sum_difference(n):

    return (n*(n+1)*(n+2))/6 - n*n

def check(sum_difference):
    assert sum_difference(12)==5434
    assert sum_difference(20)==41230
    assert sum_difference(54)==2151270

check(sum_difference)
solution 0 passed False
Task 320 gens 10 solutions in cir 4
check_program: 
# Write a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.

def sum_difference(n):

    if n <= 1:
        return 0
    return (n * n) - (n * (n + 1)) / 2

def check(sum_difference):
    assert sum_difference(12)==5434
    assert sum_difference(20)==41230
    assert sum_difference(54)==2151270

check(sum_difference)
solution 0 passed False
Task 320 gens 10 solutions in cir 5
check_program: 
# Write a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.

def sum_difference(n):

    if n <= 1:
        return 0
    return (n * n) - (n * (n + 1)) / 2

def check(sum_difference):
    assert sum_difference(12)==5434
    assert sum_difference(20)==41230
    assert sum_difference(54)==2151270

check(sum_difference)
solution 0 passed False
Task 320 gens 10 solutions in cir 6
check_program: 
# Write a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.

def sum_difference(n):

    return ((n*(n+1)*(n+2))/6 - n*n)

def check(sum_difference):
    assert sum_difference(12)==5434
    assert sum_difference(20)==41230
    assert sum_difference(54)==2151270

check(sum_difference)
solution 0 passed False
Task 320 gens 10 solutions in cir 7
check_program: 
# Write a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.

def sum_difference(n):

    return ((n*(n+1)*(n+2))/6 - n*n)

def check(sum_difference):
    assert sum_difference(12)==5434
    assert sum_difference(20)==41230
    assert sum_difference(54)==2151270

check(sum_difference)
solution 0 passed False
Task 320 gens 10 solutions in cir 8
check_program: 
# Write a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.

def sum_difference(n):

    return ((n*(n+1)*(n+2))/6 - n*n)

def check(sum_difference):
    assert sum_difference(12)==5434
    assert sum_difference(20)==41230
    assert sum_difference(54)==2151270

check(sum_difference)
solution 0 passed False
Task 320 gens 10 solutions in cir 9
check_program: 
# Write a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.

def sum_difference(n):

    if n <= 1:
        return 0
    s1 = (n * n)
    s2 = (n * (n + 1)) / 2
    return s1 - s2

def check(sum_difference):
    assert sum_difference(12)==5434
    assert sum_difference(20)==41230
    assert sum_difference(54)==2151270

check(sum_difference)
solution 0 passed False
Task 320 gens 10 solutions in cir 10
check_program: 
# Write a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.

def sum_difference(n):

    return ((n*(n+1)*(n+2))/6 - n*n)

def check(sum_difference):
    assert sum_difference(12)==5434
    assert sum_difference(20)==41230
    assert sum_difference(54)==2151270

check(sum_difference)
solution 0 passed False
Task 26 gens 1 solutions in cir 0
check_program: 
# Write a function to check if the given tuple list has all k elements.

def check_k_elements(test_list, K):

    if len(test_list) != K:
        return False
    return True

def check(check_k_elements):
    assert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True
    assert check_k_elements([(7, 7, 7), (7, 7)], 7) == True
    assert check_k_elements([(9, 9), (9, 9, 9, 9)], 7) == False

check(check_k_elements)
solution 0 passed False
Task 26 gens 3 solutions in cir 1
check_program: 
# Write a function to check if the given tuple list has all k elements.

def check_k_elements(test_list, K):

    if len(test_list) != K:
        return True
    return False

def check(check_k_elements):
    assert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True
    assert check_k_elements([(7, 7, 7), (7, 7)], 7) == True
    assert check_k_elements([(9, 9), (9, 9, 9, 9)], 7) == False

check(check_k_elements)
solution 0 passed False
Task 26 gens 8 solutions in cir 2
check_program: 
# Write a function to check if the given tuple list has all k elements.

def check_k_elements(test_list, K):

    if len(test_list) != K:
        return True
    return False

def check(check_k_elements):
    assert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True
    assert check_k_elements([(7, 7, 7), (7, 7)], 7) == True
    assert check_k_elements([(9, 9), (9, 9, 9, 9)], 7) == False

check(check_k_elements)
solution 0 passed False
Task 26 gens 10 solutions in cir 3
check_program: 
# Write a function to check if the given tuple list has all k elements.

def check_k_elements(test_list, K):

    return len(test_list) == K and all(x == K - 1 for x in test_list[1:])

def check(check_k_elements):
    assert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True
    assert check_k_elements([(7, 7, 7), (7, 7)], 7) == True
    assert check_k_elements([(9, 9), (9, 9, 9, 9)], 7) == False

check(check_k_elements)
solution 0 passed False
Task 26 gens 10 solutions in cir 4
check_program: 
# Write a function to check if the given tuple list has all k elements.

def check_k_elements(test_list, K):

    if len(test_list) != K:
        return False
    for i in range(1, len(test_list) - 1):
        if test_list[i] != K - 1:
            return False
    return True

def check(check_k_elements):
    assert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True
    assert check_k_elements([(7, 7, 7), (7, 7)], 7) == True
    assert check_k_elements([(9, 9), (9, 9, 9, 9)], 7) == False

check(check_k_elements)
solution 0 passed False
Task 323 gens 1 solutions in cir 0
check_program: 
# Write a function to re-arrange the given array in alternating positive and negative items.

def right_rotate(arr, n, out_of_place, cur):

    if n == len(arr):
        return arr
    else:
        return right_rotate(arr[1:], n-1, out_of_place, cur+1)

def check(right_rotate):
    assert re_arrange([-5, -2, 5, 2, 4,	7, 1, 8, 0, -8], 10) == [-5, 5, -2, 2, -8, 4, 7, 1, 8, 0]
    assert re_arrange([1, 2, 3, -4, -1, 4], 6) == [-4, 1, -1, 2, 3, 4]
    assert re_arrange([4, 7, 9, 77, -4, 5, -3, -9], 8) == [-4, 4, -3, 7, -9, 9, 77, 5]

check(right_rotate)
solution 0 passed False
Task 323 gens 10 solutions in cir 1
check_program: 
# Write a function to re-arrange the given array in alternating positive and negative items.

def right_rotate(arr, n, out_of_place, cur):

    if n == len(arr):
        return arr
    else:
        arr_copy = arr[:n] + [0]*(len(arr) - n)
        return right_rotate(arr_copy, n-1, out_of_place, cur+1)

def check(right_rotate):
    assert re_arrange([-5, -2, 5, 2, 4,	7, 1, 8, 0, -8], 10) == [-5, 5, -2, 2, -8, 4, 7, 1, 8, 0]
    assert re_arrange([1, 2, 3, -4, -1, 4], 6) == [-4, 1, -1, 2, 3, 4]
    assert re_arrange([4, 7, 9, 77, -4, 5, -3, -9], 8) == [-4, 4, -3, 7, -9, 9, 77, 5]

check(right_rotate)
solution 0 passed False
Task 323 gens 10 solutions in cir 2
check_program: 
# Write a function to re-arrange the given array in alternating positive and negative items.

def right_rotate(arr, n, out_of_place, cur):

    if n == len(arr):
        return arr
    if not out_of_place:
        return arr
    start = cur
    rev = 0
    while n > 0:
        if n % 2 == 1:
            arr[rev] = arr[start]
            start += 1
        else:
            n = n >> 1
            rev += 1
    return arr

def check(right_rotate):
    assert re_arrange([-5, -2, 5, 2, 4,	7, 1, 8, 0, -8], 10) == [-5, 5, -2, 2, -8, 4, 7, 1, 8, 0]
    assert re_arrange([1, 2, 3, -4, -1, 4], 6) == [-4, 1, -1, 2, 3, 4]
    assert re_arrange([4, 7, 9, 77, -4, 5, -3, -9], 8) == [-4, 4, -3, 7, -9, 9, 77, 5]

check(right_rotate)
solution 0 passed False
Task 323 gens 10 solutions in cir 3
check_program: 
# Write a function to re-arrange the given array in alternating positive and negative items.

def right_rotate(arr, n, out_of_place, cur):

    if n == len(arr):
        return arr
    else:
        arr_copy = arr[:n] + [0]*(len(arr) - n)
        if out_of_place:
            arr_copy = arr_copy[:cur] + arr_copy[cur:]
        else:
            arr_copy = arr_copy[:n] + arr_copy[n:]
        return right_rotate(arr_copy, n-1, out_of_place, cur+1)

def check(right_rotate):
    assert re_arrange([-5, -2, 5, 2, 4,	7, 1, 8, 0, -8], 10) == [-5, 5, -2, 2, -8, 4, 7, 1, 8, 0]
    assert re_arrange([1, 2, 3, -4, -1, 4], 6) == [-4, 1, -1, 2, 3, 4]
    assert re_arrange([4, 7, 9, 77, -4, 5, -3, -9], 8) == [-4, 4, -3, 7, -9, 9, 77, 5]

check(right_rotate)
solution 0 passed False
Task 66 gens 1 solutions in cir 0
check_program: 
# Write a python function to count positive numbers in a list.

def pos_count(list):

    count = 0
    for num in list:
        if num > 0:
            count += 1
    return count

def check(pos_count):
    assert pos_count([1,-2,3,-4]) == 2
    assert pos_count([3,4,5,-1]) == 3
    assert pos_count([1,2,3,4]) == 4

check(pos_count)
solution 0 passed True
Task 66 gens 3 solutions in cir 1
check_program: 
# Write a python function to count positive numbers in a list.

def pos_count(list):

    count = 0
    for num in list:
        if num > 0:
            count += 1
    return count

def check(pos_count):
    assert pos_count([1,-2,3,-4]) == 2
    assert pos_count([3,4,5,-1]) == 3
    assert pos_count([1,2,3,4]) == 4

check(pos_count)
solution 0 passed True
Task 66 gens 6 solutions in cir 2
check_program: 
# Write a python function to count positive numbers in a list.

def pos_count(list):

    count = 0
    for num in list:
        if num > 0:
            count += 1
    return count

def check(pos_count):
    assert pos_count([1,-2,3,-4]) == 2
    assert pos_count([3,4,5,-1]) == 3
    assert pos_count([1,2,3,4]) == 4

check(pos_count)
solution 0 passed True
Task 66 gens 8 solutions in cir 3
check_program: 
# Write a python function to count positive numbers in a list.

def pos_count(list):

    count = 0
    for num in list:
        if num > 0:
            count += 1
    return count

def check(pos_count):
    assert pos_count([1,-2,3,-4]) == 2
    assert pos_count([3,4,5,-1]) == 3
    assert pos_count([1,2,3,4]) == 4

check(pos_count)
solution 0 passed True
Task 66 gens 10 solutions in cir 4
check_program: 
# Write a python function to count positive numbers in a list.

def pos_count(list):

    count = 0
    for num in list:
        if num > 0:
            count += 1
    return count

def check(pos_count):
    assert pos_count([1,-2,3,-4]) == 2
    assert pos_count([3,4,5,-1]) == 3
    assert pos_count([1,2,3,4]) == 4

check(pos_count)
solution 0 passed True
Task 66 gens 10 solutions in cir 5
check_program: 
# Write a python function to count positive numbers in a list.

def pos_count(list):

    count = 0
    for num in list:
        if num > 0:
            count += 1
    return count

def check(pos_count):
    assert pos_count([1,-2,3,-4]) == 2
    assert pos_count([3,4,5,-1]) == 3
    assert pos_count([1,2,3,4]) == 4

check(pos_count)
solution 0 passed True
Task 66 gens 10 solutions in cir 6
check_program: 
# Write a python function to count positive numbers in a list.

def pos_count(list):

    count = 0
    for num in list:
        if num > 0:
            count += 1
    return count

def check(pos_count):
    assert pos_count([1,-2,3,-4]) == 2
    assert pos_count([3,4,5,-1]) == 3
    assert pos_count([1,2,3,4]) == 4

check(pos_count)
solution 0 passed True
Task 66 gens 10 solutions in cir 7
check_program: 
# Write a python function to count positive numbers in a list.

def pos_count(list):

    count = 0
    for num in list:
        if num > 0:
            count += 1
    return count

def check(pos_count):
    assert pos_count([1,-2,3,-4]) == 2
    assert pos_count([3,4,5,-1]) == 3
    assert pos_count([1,2,3,4]) == 4

check(pos_count)
solution 0 passed True
Task 66 gens 10 solutions in cir 8
check_program: 
# Write a python function to count positive numbers in a list.

def pos_count(list):

    return sum(1 for num in list if num > 0)

def check(pos_count):
    assert pos_count([1,-2,3,-4]) == 2
    assert pos_count([3,4,5,-1]) == 3
    assert pos_count([1,2,3,4]) == 4

check(pos_count)
solution 0 passed True
Task 66 gens 10 solutions in cir 9
check_program: 
# Write a python function to count positive numbers in a list.

def pos_count(list):

    count = 0
    for i in range(len(list)):
        if list[i] > 0:
            count += 1
    return count

def check(pos_count):
    assert pos_count([1,-2,3,-4]) == 2
    assert pos_count([3,4,5,-1]) == 3
    assert pos_count([1,2,3,4]) == 4

check(pos_count)
solution 0 passed True
Task 66 gens 10 solutions in cir 10
check_program: 
# Write a python function to count positive numbers in a list.

def pos_count(list):

    return sum(1 for num in list if num > 0)

def check(pos_count):
    assert pos_count([1,-2,3,-4]) == 2
    assert pos_count([3,4,5,-1]) == 3
    assert pos_count([1,2,3,4]) == 4

check(pos_count)
solution 0 passed True
Task 297 gens 1 solutions in cir 0
check_program: 
# Write a function to flatten a given nested list structure.

def flatten_list(list1):

    result = []
    for item in list1:
        if isinstance(item, list):
            result.extend(flatten_list(item))
        else:
            result.append(item)
    return result

def check(flatten_list):
    assert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]
    assert flatten_list([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]])==[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]
    assert flatten_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]

check(flatten_list)
solution 0 passed True
Task 297 gens 5 solutions in cir 1
check_program: 
# Write a function to flatten a given nested list structure.

def flatten_list(list1):

    result = []
    for item in list1:
        if isinstance(item, list):
            result.extend(flatten_list(item))
        else:
            result.append(item)
    return result

def check(flatten_list):
    assert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]
    assert flatten_list([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]])==[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]
    assert flatten_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]

check(flatten_list)
solution 0 passed True
Task 297 gens 10 solutions in cir 2
check_program: 
# Write a function to flatten a given nested list structure.

def flatten_list(list1):

    result = []
    for item in list1:
        if isinstance(item, list):
            result.extend(flatten_list(item))
        else:
            result.append(item)
    return result

def check(flatten_list):
    assert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]
    assert flatten_list([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]])==[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]
    assert flatten_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]

check(flatten_list)
solution 0 passed True
Task 297 gens 10 solutions in cir 3
check_program: 
# Write a function to flatten a given nested list structure.

def flatten_list(list1):

    result = []
    for item in list1:
        if isinstance(item, list):
            result.extend(flatten_list(item))
        else:
            result.append(item)
    return result

def check(flatten_list):
    assert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]
    assert flatten_list([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]])==[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]
    assert flatten_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]

check(flatten_list)
solution 0 passed True
Task 103 gens 1 solutions in cir 0
check_program: 
# Write a function to find eulerian number a(n, m).

def eulerian_num(n, m):

    if n == 0:
        return 1
    elif n == 1:
        return 0
    else:
        return (n-1) * eulerian_num(n-1, m) + eulerian_num(n-1, m-1)

def check(eulerian_num):
    assert eulerian_num(3, 1) == 4
    assert eulerian_num(4, 1) == 11
    assert eulerian_num(5, 3) == 26

check(eulerian_num)
solution 0 passed False
Task 103 gens 6 solutions in cir 1
check_program: 
# Write a function to find eulerian number a(n, m).

def eulerian_num(n, m):

    if n == 0:
        return 1
    elif n == 1:
        return 0
    else:
        return (n-1) * eulerian_num(n-1, m) + eulerian_num(n-1, m-1)

def check(eulerian_num):
    assert eulerian_num(3, 1) == 4
    assert eulerian_num(4, 1) == 11
    assert eulerian_num(5, 3) == 26

check(eulerian_num)
solution 0 passed False
Task 103 gens 10 solutions in cir 2
check_program: 
# Write a function to find eulerian number a(n, m).

def eulerian_num(n, m):

    if n == 0:
        return 1
    elif n == 1:
        return 0
    else:
        return n + eulerian_num(n-1, m) + eulerian_num(n-1, m-1)

def check(eulerian_num):
    assert eulerian_num(3, 1) == 4
    assert eulerian_num(4, 1) == 11
    assert eulerian_num(5, 3) == 26

check(eulerian_num)
solution 0 passed False
Task 103 gens 10 solutions in cir 3
check_program: 
# Write a function to find eulerian number a(n, m).

def eulerian_num(n, m):

    if n == 0:
        return 1
    elif n == 1:
        return 0
    else:
        if m > 1:
            return n + eulerian_num(n-1, m) + eulerian_num(n-1, m-1)
        else:
            return n + eulerian_num(n-1, m-1)

def check(eulerian_num):
    assert eulerian_num(3, 1) == 4
    assert eulerian_num(4, 1) == 11
    assert eulerian_num(5, 3) == 26

check(eulerian_num)
solution 0 passed False
Task 420 gens 1 solutions in cir 0
check_program: 
# Write a python function to find the cube sum of first n even natural numbers.

def cube_Sum(n):

    result = 0
    for i in range(1,n+1):
        result += i**3
    return result

def check(cube_Sum):
    assert cube_Sum(2) == 72
    assert cube_Sum(3) == 288
    assert cube_Sum(4) == 800

check(cube_Sum)
solution 0 passed False
Task 420 gens 3 solutions in cir 1
check_program: 
# Write a python function to find the cube sum of first n even natural numbers.

def cube_Sum(n):

    result = 0
    for i in range(1,n+1):
        result += i**3
    return result

def check(cube_Sum):
    assert cube_Sum(2) == 72
    assert cube_Sum(3) == 288
    assert cube_Sum(4) == 800

check(cube_Sum)
solution 0 passed False
Task 420 gens 8 solutions in cir 2
check_program: 
# Write a python function to find the cube sum of first n even natural numbers.

def cube_Sum(n):

    result = 0
    for i in range(1,n+1):
        result += i**3
    return result

def check(cube_Sum):
    assert cube_Sum(2) == 72
    assert cube_Sum(3) == 288
    assert cube_Sum(4) == 800

check(cube_Sum)
solution 0 passed False
Task 420 gens 10 solutions in cir 3
check_program: 
# Write a python function to find the cube sum of first n even natural numbers.

def cube_Sum(n):

    result = 0
    for i in range(1,n+1):
        result += pow(i,3)
    return result

def check(cube_Sum):
    assert cube_Sum(2) == 72
    assert cube_Sum(3) == 288
    assert cube_Sum(4) == 800

check(cube_Sum)
solution 0 passed False
Task 420 gens 10 solutions in cir 4
check_program: 
# Write a python function to find the cube sum of first n even natural numbers.

def cube_Sum(n):

    from math import isqrt
    result = 0
    for i in range(1,n+1):
        result += isqrt(i)**3
    return result

def check(cube_Sum):
    assert cube_Sum(2) == 72
    assert cube_Sum(3) == 288
    assert cube_Sum(4) == 800

check(cube_Sum)
solution 0 passed False
Task 420 gens 10 solutions in cir 5
check_program: 
# Write a python function to find the cube sum of first n even natural numbers.

def cube_Sum(n):

    from math import sqrt, isqrt
    result = 0
    for i in range(1,n+1):
        result += isqrt(i)**3
    return result

def check(cube_Sum):
    assert cube_Sum(2) == 72
    assert cube_Sum(3) == 288
    assert cube_Sum(4) == 800

check(cube_Sum)
solution 0 passed False
Task 420 gens 10 solutions in cir 6
check_program: 
# Write a python function to find the cube sum of first n even natural numbers.

def cube_Sum(n):

    from math import isqrt
    result = 0
    for i in range(1, n + 1):
        result += isqrt(i)**3
    return result

def check(cube_Sum):
    assert cube_Sum(2) == 72
    assert cube_Sum(3) == 288
    assert cube_Sum(4) == 800

check(cube_Sum)
solution 0 passed False
Task 420 gens 10 solutions in cir 7
check_program: 
# Write a python function to find the cube sum of first n even natural numbers.

def cube_Sum(n):

    result = 0
    if n == 0:
        return 0
    for i in range(1, int(n ** 0.5) + 1):
        result += i ** 3
    if n % 2 == 0:
        result += (n // 2) ** 3
    return result

def check(cube_Sum):
    assert cube_Sum(2) == 72
    assert cube_Sum(3) == 288
    assert cube_Sum(4) == 800

check(cube_Sum)
solution 0 passed False
Task 420 gens 10 solutions in cir 8
check_program: 
# Write a python function to find the cube sum of first n even natural numbers.

def cube_Sum(n):

    if n <= 0:
        return 0
    result = 1
    for i in range(1, int(n**1/2) + 1):
        result += (i ** 3)
    return result

def check(cube_Sum):
    assert cube_Sum(2) == 72
    assert cube_Sum(3) == 288
    assert cube_Sum(4) == 800

check(cube_Sum)
solution 0 passed False
Task 420 gens 10 solutions in cir 9
check_program: 
# Write a python function to find the cube sum of first n even natural numbers.

def cube_Sum(n):

    if n <= 0:
        return 0
    else:
        result = 1
        for i in range(1, int(n**1/2) + 1):
            result += (i ** 3)
        return result

def check(cube_Sum):
    assert cube_Sum(2) == 72
    assert cube_Sum(3) == 288
    assert cube_Sum(4) == 800

check(cube_Sum)
solution 0 passed False
Task 420 gens 10 solutions in cir 10
check_program: 
# Write a python function to find the cube sum of first n even natural numbers.

def cube_Sum(n):

    result = 0
    if n == 0:
        return result
    elif n % 2 == 0:
        result = 1
        for i in range(1, int(n**1/2) + 1):
            result += (i ** 3)
    else:
        for i in range(1, n + 1):
            result += (i ** 3)
    return result

def check(cube_Sum):
    assert cube_Sum(2) == 72
    assert cube_Sum(3) == 288
    assert cube_Sum(4) == 800

check(cube_Sum)
solution 0 passed False
Task 172 gens 1 solutions in cir 0
check_program: 
# Write a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item

def count_occurance(s):

    count = 0
    for i in range(len(s)):
        if s[i] == 's' and s[i-1] == 'd':
            count += 1
    return count

def check(count_occurance):
    assert count_occurance("letstdlenstdporstd") == 3
    assert count_occurance("truststdsolensporsd") == 1
    assert count_occurance("makestdsostdworthit") == 2

check(count_occurance)
solution 0 passed False
Task 172 gens 3 solutions in cir 1
check_program: 
# Write a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item

def count_occurance(s):

    count = 0
    for i in range(len(s)):
        if s[i] == 's' and s[i-1] == 'd':
            count += 1
    return count

def check(count_occurance):
    assert count_occurance("letstdlenstdporstd") == 3
    assert count_occurance("truststdsolensporsd") == 1
    assert count_occurance("makestdsostdworthit") == 2

check(count_occurance)
solution 0 passed False
Task 172 gens 10 solutions in cir 2
check_program: 
# Write a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item

def count_occurance(s):

    count = 0
    for i in range(len(s)):
        if s[i] == 's' and s[i-1] == 'd':
            count += 1
    if count == 1:
        return count
    return count + (count == 0)

def check(count_occurance):
    assert count_occurance("letstdlenstdporstd") == 3
    assert count_occurance("truststdsolensporsd") == 1
    assert count_occurance("makestdsostdworthit") == 2

check(count_occurance)
solution 0 passed False
Task 172 gens 10 solutions in cir 3
check_program: 
# Write a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item

def count_occurance(s):

    count = 0
    for i in range(len(s)):
        if s[i:i+3] == 'std':
            count += 1
    return count

def check(count_occurance):
    assert count_occurance("letstdlenstdporstd") == 3
    assert count_occurance("truststdsolensporsd") == 1
    assert count_occurance("makestdsostdworthit") == 2

check(count_occurance)
solution 0 passed True
Task 172 gens 10 solutions in cir 4
check_program: 
# Write a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item

def count_occurance(s):

    count = 0
    for i in range(len(s)):
        for j in range(3):
            if s[i+j:i+j+3] == 'std':
                count += 1
    return count

def check(count_occurance):
    assert count_occurance("letstdlenstdporstd") == 3
    assert count_occurance("truststdsolensporsd") == 1
    assert count_occurance("makestdsostdworthit") == 2

check(count_occurance)
solution 0 passed False
Task 11 gens 1 solutions in cir 0
check_program: 
# Write a python function to remove first and last occurrence of a given character from the string.

def remove_Occ(s,ch):

    def remove_occ(s, ch):
        start = s.find(ch)
        end = s.rfind(ch)
        if start != -1:
            s = s[:start] + s[start+1:]
        if end != -1:
            s = s[:end] + s[end+1:]
        return s

def check(remove_Occ):
    assert remove_Occ("hello","l") == "heo"
    assert remove_Occ("abcda","a") == "bcd"
    assert remove_Occ("PHP","P") == "H"

check(remove_Occ)
solution 0 passed False
Task 11 gens 10 solutions in cir 1
check_program: 
# Write a python function to remove first and last occurrence of a given character from the string.

def remove_Occ(s,ch):

    s = s.replace(ch, '')
    return s

def check(remove_Occ):
    assert remove_Occ("hello","l") == "heo"
    assert remove_Occ("abcda","a") == "bcd"
    assert remove_Occ("PHP","P") == "H"

check(remove_Occ)
solution 0 passed True
Task 11 gens 10 solutions in cir 2
check_program: 
# Write a python function to remove first and last occurrence of a given character from the string.

def remove_Occ(s,ch):

    import re
    return re.sub(r'{}|({}|{})'.format(ch,ch,ch), '', s)

def check(remove_Occ):
    assert remove_Occ("hello","l") == "heo"
    assert remove_Occ("abcda","a") == "bcd"
    assert remove_Occ("PHP","P") == "H"

check(remove_Occ)
solution 0 passed True
Task 11 gens 10 solutions in cir 3
check_program: 
# Write a python function to remove first and last occurrence of a given character from the string.

def remove_Occ(s,ch):

    import re
    return re.sub(r'{}|({}|{})'.format(ch,ch,ch), '', s)

def check(remove_Occ):
    assert remove_Occ("hello","l") == "heo"
    assert remove_Occ("abcda","a") == "bcd"
    assert remove_Occ("PHP","P") == "H"

check(remove_Occ)
solution 0 passed True
Task 73 gens 1 solutions in cir 0
check_program: 
# Write a function to split the given string with multiple delimiters by using regex.
import re
def multiple_split(text):

    return re.split(r'\s*,\s*', text)

def check(multiple_split):
    assert multiple_split('Forces of the \ndarkness*are coming into the play.') == ['Forces of the ', 'darkness', 'are coming into the play.']
    assert multiple_split('Mi Box runs on the \n Latest android*which has google assistance and chromecast.') == ['Mi Box runs on the ', ' Latest android', 'which has google assistance and chromecast.']
    assert multiple_split('Certain services\nare subjected to change*over the seperate subscriptions.') == ['Certain services', 'are subjected to change', 'over the seperate subscriptions.']

check(multiple_split)
solution 0 passed False
Task 73 gens 2 solutions in cir 1
check_program: 
# Write a function to split the given string with multiple delimiters by using regex.
import re
def multiple_split(text):

    return re.split(r'\s*,\s*', text)

def check(multiple_split):
    assert multiple_split('Forces of the \ndarkness*are coming into the play.') == ['Forces of the ', 'darkness', 'are coming into the play.']
    assert multiple_split('Mi Box runs on the \n Latest android*which has google assistance and chromecast.') == ['Mi Box runs on the ', ' Latest android', 'which has google assistance and chromecast.']
    assert multiple_split('Certain services\nare subjected to change*over the seperate subscriptions.') == ['Certain services', 'are subjected to change', 'over the seperate subscriptions.']

check(multiple_split)
solution 0 passed False
Task 73 gens 7 solutions in cir 2
check_program: 
# Write a function to split the given string with multiple delimiters by using regex.
import re
def multiple_split(text):

    return re.split(r'\s*,\s*', text)

def check(multiple_split):
    assert multiple_split('Forces of the \ndarkness*are coming into the play.') == ['Forces of the ', 'darkness', 'are coming into the play.']
    assert multiple_split('Mi Box runs on the \n Latest android*which has google assistance and chromecast.') == ['Mi Box runs on the ', ' Latest android', 'which has google assistance and chromecast.']
    assert multiple_split('Certain services\nare subjected to change*over the seperate subscriptions.') == ['Certain services', 'are subjected to change', 'over the seperate subscriptions.']

check(multiple_split)
solution 0 passed False
Task 73 gens 10 solutions in cir 3
check_program: 
# Write a function to split the given string with multiple delimiters by using regex.
import re
def multiple_split(text):

    return re.split(r'\s*,\s*', text)

def check(multiple_split):
    assert multiple_split('Forces of the \ndarkness*are coming into the play.') == ['Forces of the ', 'darkness', 'are coming into the play.']
    assert multiple_split('Mi Box runs on the \n Latest android*which has google assistance and chromecast.') == ['Mi Box runs on the ', ' Latest android', 'which has google assistance and chromecast.']
    assert multiple_split('Certain services\nare subjected to change*over the seperate subscriptions.') == ['Certain services', 'are subjected to change', 'over the seperate subscriptions.']

check(multiple_split)
solution 0 passed False
Task 73 gens 10 solutions in cir 4
check_program: 
# Write a function to split the given string with multiple delimiters by using regex.
import re
def multiple_split(text):

    return re.split(r'\s*,\s*,?', text)

def check(multiple_split):
    assert multiple_split('Forces of the \ndarkness*are coming into the play.') == ['Forces of the ', 'darkness', 'are coming into the play.']
    assert multiple_split('Mi Box runs on the \n Latest android*which has google assistance and chromecast.') == ['Mi Box runs on the ', ' Latest android', 'which has google assistance and chromecast.']
    assert multiple_split('Certain services\nare subjected to change*over the seperate subscriptions.') == ['Certain services', 'are subjected to change', 'over the seperate subscriptions.']

check(multiple_split)
solution 0 passed False
Task 73 gens 10 solutions in cir 5
check_program: 
# Write a function to split the given string with multiple delimiters by using regex.
import re
def multiple_split(text):

    return re.split(r'\s*,\s*,?', text)

def check(multiple_split):
    assert multiple_split('Forces of the \ndarkness*are coming into the play.') == ['Forces of the ', 'darkness', 'are coming into the play.']
    assert multiple_split('Mi Box runs on the \n Latest android*which has google assistance and chromecast.') == ['Mi Box runs on the ', ' Latest android', 'which has google assistance and chromecast.']
    assert multiple_split('Certain services\nare subjected to change*over the seperate subscriptions.') == ['Certain services', 'are subjected to change', 'over the seperate subscriptions.']

check(multiple_split)
solution 0 passed False
Task 154 gens 1 solutions in cir 0
check_program: 
# Write a function to extract every specified element from a given two dimensional list.

def specified_element(nums, N):

    result = []
    for i in range(N):
        result.append(nums[i])
    return result

def check(specified_element):
    assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]
    assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],2)==[3, 6, 9]
    assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],3)==[2,2,5]

check(specified_element)
solution 0 passed False
Task 154 gens 9 solutions in cir 1
check_program: 
# Write a function to extract every specified element from a given two dimensional list.

def specified_element(nums, N):

    result = [nums[i] for i in range(N)]
    return result

def check(specified_element):
    assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]
    assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],2)==[3, 6, 9]
    assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],3)==[2,2,5]

check(specified_element)
solution 0 passed False
Task 154 gens 10 solutions in cir 2
check_program: 
# Write a function to extract every specified element from a given two dimensional list.

def specified_element(nums, N):

    result = []
    for i in range(N):
        if i == N - 1:
            result = nums[:i + 1]
        else:
            result = nums[i:i + 1]
    return result

def check(specified_element):
    assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]
    assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],2)==[3, 6, 9]
    assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],3)==[2,2,5]

check(specified_element)
solution 0 passed False
Task 154 gens 10 solutions in cir 3
check_program: 
# Write a function to extract every specified element from a given two dimensional list.

def specified_element(nums, N):

    result = []
    for i in range(N):
        if i == N - 1:
            result = nums[:i + 1]
        else:
            result = nums[i:i + 1]
    return result

def check(specified_element):
    assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]
    assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],2)==[3, 6, 9]
    assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],3)==[2,2,5]

check(specified_element)
solution 0 passed False
Task 129 gens 1 solutions in cir 0
check_program: 
# Write a function to calculate magic square.

def magic_square_test(my_matrix):

    for i in range(3):
        for j in range(3):
            if my_matrix[i][j] != my_matrix[j][i]:
                return False
    return True

def check(magic_square_test):
    assert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True
    assert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 8]])==True
    assert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 7]])==False

check(magic_square_test)
solution 0 passed False
Task 129 gens 6 solutions in cir 1
check_program: 
# Write a function to calculate magic square.

def magic_square_test(my_matrix):

    for i in range(3):
        for j in range(3):
            if my_matrix[i][j] != my_matrix[j][i]:
                return False
    return True

def check(magic_square_test):
    assert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True
    assert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 8]])==True
    assert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 7]])==False

check(magic_square_test)
solution 0 passed False
Task 129 gens 10 solutions in cir 2
check_program: 
# Write a function to calculate magic square.

def magic_square_test(my_matrix):

    result = True
    for row in my_matrix:
        for cell in row:
            if cell != my_matrix[0][len(cell)-1]:
                result = False
                break
    return result

def check(magic_square_test):
    assert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True
    assert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 8]])==True
    assert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 7]])==False

check(magic_square_test)
solution 0 passed False
Task 129 gens 10 solutions in cir 3
check_program: 
# Write a function to calculate magic square.

def magic_square_test(my_matrix):

    def check_rows(my_matrix):
        for i in range(3):
            for j in range(3):
                if my_matrix[i][j] != my_matrix[j][i]:
                    return False
        return True
    def check_cols(my_matrix):
        for i in range(3):
            for j in range(3):
                if my_matrix[i][j] != my_matrix[j][i]:
                    return False
        return True
    def check_diags(my_matrix):
        for i in range(3):
            for j in range(3):
                if my_matrix[i][j] != my_matrix[j][i]:
                    return False
        return True
    return check_rows(my_matrix) or check_cols(my_matrix) or check_diags(my_matrix)

def check(magic_square_test):
    assert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True
    assert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 8]])==True
    assert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 7]])==False

check(magic_square_test)
solution 0 passed False
Task 129 gens 10 solutions in cir 4
check_program: 
# Write a function to calculate magic square.

def magic_square_test(my_matrix):

    for row in my_matrix:
        for col in row:
            if col != my_matrix[row.index(col)][col.index(my_matrix[row.index(col)][col.index(my_matrix[row.index(col)][col.index(my_matrix[row.index(col)][col.index(my_matrix[row.index(col)][col.index(my_matrix[row.index(col)][col.index(my_matrix[row.index(col)][col.index(my_matrix[row.index(col)][col.index(my_matrix[row.index(col)][col.index(my_matrix[row.index(col)][col.index(my_matrix[row.index(col)][col.index(my_matrix[row.index(col)][col.index(my_matrix[row.index(col)][col.index(my_matrix[row.index(col)][col.index(my_matrix[row.index(col)][col.index(my_matrix[row.index(col)][col.index(my_matrix[row.index(col)][col.index(my_matrix[row.index(col)][col.index(my_matrix[row.index(col)][col.index(my_matrix[row.index(col)][col.index(my_matrix[row.index(col)][col.index(my_matrix[row.index(col)][col.index(my_matrix[row.index(col)][col.index(my_matrix[row.index(col)][col.index(my_matrix[row.index(col)][col.index(my_matrix[row.index(col)][col.index(my_matrix[row.index(col)][col.index(my_matrix[row.index(col)][col.index(my_matrix[row.index(col)][col.index(my_matrix[row.index(col)][col.index(my_matrix[row.index(col)][col.index(my_matrix[row.index(col)][col

def check(magic_square_test):
    assert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True
    assert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 8]])==True
    assert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 7]])==False

check(magic_square_test)
solution 0 passed False
Task 129 gens 10 solutions in cir 5
check_program: 
# Write a function to calculate magic square.

def magic_square_test(my_matrix):

    for row in my_matrix:
        for col in row:
            if col != my_matrix[row.index(col)][col.index(my_matrix[row.index(col)][col.index(my_matrix[row.index(col)][col.index(my_matrix[row.index(col)][col.index(my_matrix[row.index(col)][col.index(my_matrix[row.index(col)][col.index(my_matrix[row.index(col)][col.index(my_matrix[row.index(col)][col.index(my_matrix[row.index(col)][col.index(my_matrix[row.index(col)][col.index(my_matrix[row.index(col)][col.index(my_matrix[row.index(col)][col.index(my_matrix[row.index(col)][col.index(my_matrix[row.index(col)][col.index(my_matrix[row.index(col)][col.index(my_matrix[row.index(col)][col.index(my_matrix[row.index(col)][col.index(my_matrix[row.index(col)][col.index(my_matrix[row.index(col)][col.index(my_matrix[row.index(col)][col.index(my_matrix[row.index(col)][col.index(my_matrix[row.index(col)][col.index(my_matrix[row.index(col)][col.index(my_matrix[row.index(col)][col.index(my_matrix[row.index(col)][col.index(my_matrix[row.index(col)][col.index(my_matrix[row.index(col)][col.index(my_matrix[row.index(col)][col.index(my_matrix[row.index(col)][col.index(my_matrix[row.index(col)][col.index(my_matrix[row.index(col)][col.index(my_matrix[row.index(col)][col

def check(magic_square_test):
    assert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True
    assert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 8]])==True
    assert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 7]])==False

check(magic_square_test)
solution 0 passed False
Task 129 gens 10 solutions in cir 6
check_program: 
# Write a function to calculate magic square.

def magic_square_test(my_matrix):

    for row in my_matrix:
        for col in row:
            if col != my_matrix[row.index(col)][col.index(my_matrix[row.index(col)][col.index(my_matrix[row.index(col)][col.index(my_matrix[row.index(col)][col.index(my_matrix[row.index(col)][col.index(my_matrix[row.index(col)][col.index(my_matrix[row.index(col)][col.index(my_matrix[row.index(col)][col.index(my_matrix[row.index(col)][col.index(my_matrix[row.index(col)][col.index(my_matrix[row.index(col)][col.index(my_matrix[row.index(col)][col.index(my_matrix[row.index(col)][col.index(my_matrix[row.index(col)][col.index(my_matrix[row.index(col)][col.index(my_matrix[row.index(col)][col.index(my_matrix[row.index(col)][col.index(my_matrix[row.index(col)][col.index(my_matrix[row.index(col)][col.index(my_matrix[row.index(col)][col.index(my_matrix[row.index(col)][col.index(my_matrix[row.index(col)][col.index(my_matrix[row.index(col)][col.index(my_matrix[row.index(col)][col.index(my_matrix[row.index(col)][col.index(my_matrix[row.index(col)][col.index(my_matrix[row.index(col)][col.index(my_matrix[row.index(col)][col.index(my_matrix[row.index(col)][col.index(my_matrix[row.index(col)][col.index(my_matrix[row.index(col)][col.index(my_matrix[row.index(col)][col

def check(magic_square_test):
    assert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True
    assert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 8]])==True
    assert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 7]])==False

check(magic_square_test)
solution 0 passed False
Task 129 gens 10 solutions in cir 7
check_program: 
# Write a function to calculate magic square.

def magic_square_test(my_matrix):

    for row in my_matrix:
        for col in row:
            if col != my_matrix[row.index(col)][col.index(my_matrix[row.index(col)][col.index(my_matrix[row.index(col)][col.index(my_matrix[row.index(col)][col.index(my_matrix[row.index(col)][col.index(my_matrix[row.index(col)][col.index(my_matrix[row.index(col)][col.index(my_matrix[row.index(col)][col.index(my_matrix[row.index(col)][col.index(my_matrix[row.index(col)][col.index(my_matrix[row.index(col)][col.index(my_matrix[row.index(col)][col.index(my_matrix[row.index(col)][col.index(my_matrix[row.index(col)][col.index(my_matrix[row.index(col)][col.index(my_matrix[row.index(col)][col.index(my_matrix[row.index(col)][col.index(my_matrix[row.index(col)][col.index(my_matrix[row.index(col)][col.index(my_matrix[row.index(col)][col.index(my_matrix[row.index(col)][col.index(my_matrix[row.index(col)][col.index(my_matrix[row.index(col)][col.index(my_matrix[row.index(col)][col.index(my_matrix[row.index(col)][col.index(my_matrix[row.index(col)][col.index(my_matrix[row.index(col)][col.index(my_matrix[row.index(col)][col.index(my_matrix[row.index(col)][col.index(my_matrix[row.index(col)][col.index(my_matrix[row.index(col)][col.index(my_matrix[row.index(col)][col

def check(magic_square_test):
    assert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True
    assert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 8]])==True
    assert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 7]])==False

check(magic_square_test)
solution 0 passed False
Task 129 gens 10 solutions in cir 8
check_program: 
# Write a function to calculate magic square.

def magic_square_test(my_matrix):

    for row in my_matrix:
        for col in row:
            if col != my_matrix[row.index(col)][col.index(my_matrix[row.index(col)][col.index(my_matrix[row.index(col)][col.index(my_matrix[row.index(col)][col.index(my_matrix[row.index(col)][col.index(my_matrix[row.index(col)][col.index(my_matrix[row.index(col)][col.index(my_matrix[row.index(col)][col.index(my_matrix[row.index(col)][col.index(my_matrix[row.index(col)][col.index(my_matrix[row.index(col)][col.index(my_matrix[row.index(col)][col.index(my_matrix[row.index(col)][col.index(my_matrix[row.index(col)][col.index(my_matrix[row.index(col)][col.index(my_matrix[row.index(col)][col.index(my_matrix[row.index(col)][col.index(my_matrix[row.index(col)][col.index(my_matrix[row.index(col)][col.index(my_matrix[row.index(col)][col.index(my_matrix[row.index(col)][col.index(my_matrix[row.index(col)][col.index(my_matrix[row.index(col)][col.index(my_matrix[row.index(col)][col.index(my_matrix[row.index(col)][col.index(my_matrix[row.index(col)][col.index(my_matrix[row.index(col)][col.index(my_matrix[row.index(col)][col.index(my_matrix[row.index(col)][col.index(my_matrix[row.index(col)][col.index(my_matrix[row.index(col)][col.index(my_matrix[row.index(col)][col

def check(magic_square_test):
    assert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True
    assert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 8]])==True
    assert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 7]])==False

check(magic_square_test)
solution 0 passed False
Task 129 gens 10 solutions in cir 9
check_program: 
# Write a function to calculate magic square.

def magic_square_test(my_matrix):

    for row in my_matrix:
        for col in row:
            if col != my_matrix[row.index(col)][col.index(my_matrix[row.index(col)][col.index(my_matrix[row.index(col)][col.index(my_matrix[row.index(col)][col.index(my_matrix[row.index(col)][col.index(my_matrix[row.index(col)][col.index(my_matrix[row.index(col)][col.index(my_matrix[row.index(col)][col.index(my_matrix[row.index(col)][col.index(my_matrix[row.index(col)][col.index(my_matrix[row.index(col)][col.index(my_matrix[row.index(col)][col.index(my_matrix[row.index(col)][col.index(my_matrix[row.index(col)][col.index(my_matrix[row.index(col)][col.index(my_matrix[row.index(col)][col.index(my_matrix[row.index(col)][col.index(my_matrix[row.index(col)][col.index(my_matrix[row.index(col)][col.index(my_matrix[row.index(col)][col.index(my_matrix[row.index(col)][col.index(my_matrix[row.index(col)][col.index(my_matrix[row.index(col)][col.index(my_matrix[row.index(col)][col.index(my_matrix[row.index(col)][col.index(my_matrix[row.index(col)][col.index(my_matrix[row.index(col)][col.index(my_matrix[row.index(col)][col.index(my_matrix[row.index(col)][col.index(my_matrix[row.index(col)][col.index(my_matrix[row.index(col)][col.index(my_matrix[row.index(col)][col

def check(magic_square_test):
    assert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True
    assert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 8]])==True
    assert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 7]])==False

check(magic_square_test)
solution 0 passed False
Task 129 gens 10 solutions in cir 10
check_program: 
# Write a function to calculate magic square.

def magic_square_test(my_matrix):

    for row in my_matrix:
        for col in row:
            if col != my_matrix[row.index(col)][col.index(my_matrix[row.index(col)][col.index(my_matrix[row.index(col)][col.index(my_matrix[row.index(col)][col.index(my_matrix[row.index(col)][col.index(my_matrix[row.index(col)][col.index(my_matrix[row.index(col)][col.index(my_matrix[row.index(col)][col.index(my_matrix[row.index(col)][col.index(my_matrix[row.index(col)][col.index(my_matrix[row.index(col)][col.index(my_matrix[row.index(col)][col.index(my_matrix[row.index(col)][col.index(my_matrix[row.index(col)][col.index(my_matrix[row.index(col)][col.index(my_matrix[row.index(col)][col.index(my_matrix[row.index(col)][col.index(my_matrix[row.index(col)][col.index(my_matrix[row.index(col)][col.index(my_matrix[row.index(col)][col.index(my_matrix[row.index(col)][col.index(my_matrix[row.index(col)][col.index(my_matrix[row.index(col)][col.index(my_matrix[row.index(col)][col.index(my_matrix[row.index(col)][col.index(my_matrix[row.index(col)][col.index(my_matrix[row.index(col)][col.index(my_matrix[row.index(col)][col.index(my_matrix[row.index(col)][col.index(my_matrix[row.index(col)][col.index(my_matrix[row.index(col)][col.index(my_matrix[row.index(col)][col

def check(magic_square_test):
    assert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True
    assert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 8]])==True
    assert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 7]])==False

check(magic_square_test)
solution 0 passed False
Task 131 gens 1 solutions in cir 0
check_program: 
# Write a python function to reverse only the vowels of a given string.

def reverse_vowels(str1):

    return ''.join(filter(str.isupper, str1[::-1]))

def check(reverse_vowels):
    assert reverse_vowels("Python") == "Python"
    assert reverse_vowels("USA") == "ASU"
    assert reverse_vowels("ab") == "ab"

check(reverse_vowels)
solution 0 passed False
Task 131 gens 7 solutions in cir 1
check_program: 
# Write a python function to reverse only the vowels of a given string.

def reverse_vowels(str1):

    return ''.join(filter(str.isupper, str1[::-1]))

def check(reverse_vowels):
    assert reverse_vowels("Python") == "Python"
    assert reverse_vowels("USA") == "ASU"
    assert reverse_vowels("ab") == "ab"

check(reverse_vowels)
solution 0 passed False
Task 131 gens 10 solutions in cir 2
check_program: 
# Write a python function to reverse only the vowels of a given string.

def reverse_vowels(str1):

    vowels = "aeiouAEIOU"
    return ''.join(vowels[::-1]) + "".join(filter(lambda x: x in vowels, str1))

def check(reverse_vowels):
    assert reverse_vowels("Python") == "Python"
    assert reverse_vowels("USA") == "ASU"
    assert reverse_vowels("ab") == "ab"

check(reverse_vowels)
solution 0 passed False
Task 131 gens 10 solutions in cir 3
check_program: 
# Write a python function to reverse only the vowels of a given string.

def reverse_vowels(str1):

    import re
    return re.sub(r'\b[aeiouy]\b', '', str1[::-1]).lower()

def check(reverse_vowels):
    assert reverse_vowels("Python") == "Python"
    assert reverse_vowels("USA") == "ASU"
    assert reverse_vowels("ab") == "ab"

check(reverse_vowels)
solution 0 passed False
Task 131 gens 10 solutions in cir 4
check_program: 
# Write a python function to reverse only the vowels of a given string.

def reverse_vowels(str1):

    return ''.join(filter(str.lower, str1[::-1]))

def check(reverse_vowels):
    assert reverse_vowels("Python") == "Python"
    assert reverse_vowels("USA") == "ASU"
    assert reverse_vowels("ab") == "ab"

check(reverse_vowels)
solution 0 passed False
Task 131 gens 10 solutions in cir 5
check_program: 
# Write a python function to reverse only the vowels of a given string.

def reverse_vowels(str1):

    return ''.join(reversed(list(filter(str.lower, str1))))

def check(reverse_vowels):
    assert reverse_vowels("Python") == "Python"
    assert reverse_vowels("USA") == "ASU"
    assert reverse_vowels("ab") == "ab"

check(reverse_vowels)
solution 0 passed False
Task 131 gens 10 solutions in cir 6
check_program: 
# Write a python function to reverse only the vowels of a given string.

def reverse_vowels(str1):

    return ''.join(filter(str.lower, str1[::-1]))

def check(reverse_vowels):
    assert reverse_vowels("Python") == "Python"
    assert reverse_vowels("USA") == "ASU"
    assert reverse_vowels("ab") == "ab"

check(reverse_vowels)
solution 0 passed False
Task 131 gens 10 solutions in cir 7
check_program: 
# Write a python function to reverse only the vowels of a given string.

def reverse_vowels(str1):

    return ''.join(filter(str.lower, str1[::-1]))

def check(reverse_vowels):
    assert reverse_vowels("Python") == "Python"
    assert reverse_vowels("USA") == "ASU"
    assert reverse_vowels("ab") == "ab"

check(reverse_vowels)
solution 0 passed False
Task 131 gens 10 solutions in cir 8
check_program: 
# Write a python function to reverse only the vowels of a given string.

def reverse_vowels(str1):

    return ''.join(filter(lambda x: 'aeiouy' not in x, str1[::-1]))

def check(reverse_vowels):
    assert reverse_vowels("Python") == "Python"
    assert reverse_vowels("USA") == "ASU"
    assert reverse_vowels("ab") == "ab"

check(reverse_vowels)
solution 0 passed False
Task 131 gens 10 solutions in cir 9
check_program: 
# Write a python function to reverse only the vowels of a given string.

def reverse_vowels(str1):

    return ''.join(filter(lambda x: 'aeiouy' not in x, str1[::-1]))

def check(reverse_vowels):
    assert reverse_vowels("Python") == "Python"
    assert reverse_vowels("USA") == "ASU"
    assert reverse_vowels("ab") == "ab"

check(reverse_vowels)
solution 0 passed False
Task 131 gens 10 solutions in cir 10
check_program: 
# Write a python function to reverse only the vowels of a given string.

def reverse_vowels(str1):

    return ''.join(reversed(list(filter(str.lower, str1.replace('\\', ' ')))))

def check(reverse_vowels):
    assert reverse_vowels("Python") == "Python"
    assert reverse_vowels("USA") == "ASU"
    assert reverse_vowels("ab") == "ab"

check(reverse_vowels)
solution 0 passed False
Task 248 gens 1 solutions in cir 0
check_program: 
# Write a function to calculate the harmonic sum of n-1.

def harmonic_sum(n):

    return n * (n + 1) / 2

def check(harmonic_sum):
    assert harmonic_sum(7) == 2.5928571428571425
    assert harmonic_sum(4) == 2.083333333333333
    assert harmonic_sum(19) == 3.547739657143682

check(harmonic_sum)
solution 0 passed False
Task 248 gens 3 solutions in cir 1
check_program: 
# Write a function to calculate the harmonic sum of n-1.

def harmonic_sum(n):

    return n * (n + 1) / 2

def check(harmonic_sum):
    assert harmonic_sum(7) == 2.5928571428571425
    assert harmonic_sum(4) == 2.083333333333333
    assert harmonic_sum(19) == 3.547739657143682

check(harmonic_sum)
solution 0 passed False
Task 248 gens 8 solutions in cir 2
check_program: 
# Write a function to calculate the harmonic sum of n-1.

def harmonic_sum(n):

    return sum(n * (n + 1) // 2 for n in range(1, n + 1))

def check(harmonic_sum):
    assert harmonic_sum(7) == 2.5928571428571425
    assert harmonic_sum(4) == 2.083333333333333
    assert harmonic_sum(19) == 3.547739657143682

check(harmonic_sum)
solution 0 passed False
Task 248 gens 10 solutions in cir 3
check_program: 
# Write a function to calculate the harmonic sum of n-1.

def harmonic_sum(n):

    harmonic = 0
    for i in range(1,n):
        harmonic += i
    return round(harmonic,2)

def check(harmonic_sum):
    assert harmonic_sum(7) == 2.5928571428571425
    assert harmonic_sum(4) == 2.083333333333333
    assert harmonic_sum(19) == 3.547739657143682

check(harmonic_sum)
solution 0 passed False
Task 248 gens 10 solutions in cir 4
check_program: 
# Write a function to calculate the harmonic sum of n-1.

def harmonic_sum(n):

    if n==1:
        return 1
    else:
        harmonic = 0
        for i in range(1,n):
            harmonic += i
        return harmonic

def check(harmonic_sum):
    assert harmonic_sum(7) == 2.5928571428571425
    assert harmonic_sum(4) == 2.083333333333333
    assert harmonic_sum(19) == 3.547739657143682

check(harmonic_sum)
solution 0 passed False
Task 248 gens 10 solutions in cir 5
check_program: 
# Write a function to calculate the harmonic sum of n-1.

def harmonic_sum(n):

    if n == 1:
        return 1
    else:
        harmonic = 0
        for i in range(1, n):
            harmonic += i
        return harmonic

def check(harmonic_sum):
    assert harmonic_sum(7) == 2.5928571428571425
    assert harmonic_sum(4) == 2.083333333333333
    assert harmonic_sum(19) == 3.547739657143682

check(harmonic_sum)
solution 0 passed False
Task 248 gens 10 solutions in cir 6
check_program: 
# Write a function to calculate the harmonic sum of n-1.

def harmonic_sum(n):

    if n == 1:
        return 1
    else:
        harmonic = 0
        for i in range(1, n):
            harmonic += i
        return harmonic

def check(harmonic_sum):
    assert harmonic_sum(7) == 2.5928571428571425
    assert harmonic_sum(4) == 2.083333333333333
    assert harmonic_sum(19) == 3.547739657143682

check(harmonic_sum)
solution 0 passed False
Task 248 gens 10 solutions in cir 7
check_program: 
# Write a function to calculate the harmonic sum of n-1.

def harmonic_sum(n):

    if n == 1:
        return 1
    harmonic = 1
    for i in range(2, n):
        harmonic += i
    return harmonic

def check(harmonic_sum):
    assert harmonic_sum(7) == 2.5928571428571425
    assert harmonic_sum(4) == 2.083333333333333
    assert harmonic_sum(19) == 3.547739657143682

check(harmonic_sum)
solution 0 passed False
Task 248 gens 10 solutions in cir 8
check_program: 
# Write a function to calculate the harmonic sum of n-1.

def harmonic_sum(n):

    return sum(1 for i in range(1,n+1))

def check(harmonic_sum):
    assert harmonic_sum(7) == 2.5928571428571425
    assert harmonic_sum(4) == 2.083333333333333
    assert harmonic_sum(19) == 3.547739657143682

check(harmonic_sum)
solution 0 passed False
Task 248 gens 10 solutions in cir 9
check_program: 
# Write a function to calculate the harmonic sum of n-1.

def harmonic_sum(n):

    return sum(1 for i in range(1,n+1))

def check(harmonic_sum):
    assert harmonic_sum(7) == 2.5928571428571425
    assert harmonic_sum(4) == 2.083333333333333
    assert harmonic_sum(19) == 3.547739657143682

check(harmonic_sum)
solution 0 passed False
Task 248 gens 10 solutions in cir 10
check_program: 
# Write a function to calculate the harmonic sum of n-1.

def harmonic_sum(n):

    return sum(1 for i in range(1,n+1))

def check(harmonic_sum):
    assert harmonic_sum(7) == 2.5928571428571425
    assert harmonic_sum(4) == 2.083333333333333
    assert harmonic_sum(19) == 3.547739657143682

check(harmonic_sum)
solution 0 passed False
Task 80 gens 1 solutions in cir 0
check_program: 
# Write a function to find the nth tetrahedral number.

def tetrahedral_number(n):

    if n == 0:
        return 1
    elif n == 1:
        return 1
    elif n % 2 == 0:
        return (n - 1) * (n - 2) / 2
    else:
        return (n - 1) * (n - 2) / 2 + (n - 1) * (n - 3) / 6 + (n - 1) * (n - 4) / 24

def check(tetrahedral_number):
    assert tetrahedral_number(5) == 35.0
    assert tetrahedral_number(6) == 56.0
    assert tetrahedral_number(7) == 84.0

check(tetrahedral_number)
solution 0 passed False
Task 80 gens 6 solutions in cir 1
check_program: 
# Write a function to find the nth tetrahedral number.

def tetrahedral_number(n):

    if n == 0:
        return 1
    elif n == 1:
        return 1
    elif n % 2 == 0:
        return (n - 1) * (n - 2) // 2
    else:
        return (n - 1) * (n - 2) // 2 + (n - 1) * (n - 3) // 6 + (n - 1) * (n - 4) // 24

def check(tetrahedral_number):
    assert tetrahedral_number(5) == 35.0
    assert tetrahedral_number(6) == 56.0
    assert tetrahedral_number(7) == 84.0

check(tetrahedral_number)
solution 0 passed False
Task 80 gens 10 solutions in cir 2
check_program: 
# Write a function to find the nth tetrahedral number.

def tetrahedral_number(n):

    if n == 0:
        return 1
    elif n == 1:
        return 1
    elif n % 2 == 0:
        return (n - 1) * (n - 2) // 2
    else:
        return (n - 1) * (n - 2) // 2 + (n - 1) * (n - 3) // 6 + (n - 1) * (n - 4) // 24

def check(tetrahedral_number):
    assert tetrahedral_number(5) == 35.0
    assert tetrahedral_number(6) == 56.0
    assert tetrahedral_number(7) == 84.0

check(tetrahedral_number)
solution 0 passed False
Task 80 gens 10 solutions in cir 3
check_program: 
# Write a function to find the nth tetrahedral number.

def tetrahedral_number(n):

    if n <= 4:
        return 1
    elif n <= 10:
        return (n - 1) * (n - 2) / 2
    elif n <= 20:
        return (n - 1) * (n - 2) / 2 + (n - 1) * (n - 3) / 6
    elif n <= 30:
        return (n - 1) * (n - 2) / 2 + (n - 1) * (n - 3) / 6 + (n - 1) * (n - 4) / 24
    elif n <= 40:
        return (n - 1) * (n - 2) / 2 + (n - 1) * (n - 3) / 6 + (n - 1) * (n - 4) / 24 + (n - 1) * (n - 5) / 120
    else:
        raise ValueError("Invalid input")

def check(tetrahedral_number):
    assert tetrahedral_number(5) == 35.0
    assert tetrahedral_number(6) == 56.0
    assert tetrahedral_number(7) == 84.0

check(tetrahedral_number)
solution 0 passed False
Task 80 gens 10 solutions in cir 4
check_program: 
# Write a function to find the nth tetrahedral number.

def tetrahedral_number(n):

    if n <= 4:
        return 1
    elif n <= 10:
        return (n - 1) * (n - 2) / 2
    elif n <= 20:
        return (n - 1) * (n - 2) / 2 + (n - 1) * (n - 3) / 6
    elif n <= 30:
        return (n - 1) * (n - 2) / 2 + (n - 1) * (n - 3) / 6 + (n - 1) * (n - 4) / 24
    elif n <= 40:
        return (n - 1) * (n - 2) / 2 + (n - 1) * (n - 3) / 6 + (n - 1) * (n - 4) / 24 + (n - 1) * (n - 5) / 120
    else:
        raise ValueError("Invalid input")

def check(tetrahedral_number):
    assert tetrahedral_number(5) == 35.0
    assert tetrahedral_number(6) == 56.0
    assert tetrahedral_number(7) == 84.0

check(tetrahedral_number)
solution 0 passed False
Task 80 gens 10 solutions in cir 5
check_program: 
# Write a function to find the nth tetrahedral number.

def tetrahedral_number(n):

    if n <= 4:
        return 1
    elif n <= 10:
        return (n - 1) * (n - 2) / 2
    elif n <= 20:
        return (n - 1) * (n - 2) / 2 + (n - 1) * (n - 3) / 6
    elif n <= 30:
        return (n - 1) * (n - 2) / 2 + (n - 1) * (n - 3) / 6 + (n - 1) * (n - 4) / 24
    elif n <= 40:
        return (n - 1) * (n - 2) / 2 + (n - 1) * (n - 3) / 6 + (n - 1) * (n - 4) / 24 + (n - 1) * (n - 5) / 120
    else:
        return (n - 1) * (n - 2) / 2 + (n - 1) * (n - 3) / 6 + (n - 1) * (n - 4) / 24 + (n - 1) * (n - 5) / 120

def check(tetrahedral_number):
    assert tetrahedral_number(5) == 35.0
    assert tetrahedral_number(6) == 56.0
    assert tetrahedral_number(7) == 84.0

check(tetrahedral_number)
solution 0 passed False
Task 80 gens 10 solutions in cir 6
check_program: 
# Write a function to find the nth tetrahedral number.

def tetrahedral_number(n):

    if n < 0:
        return 0
    if n == 0:
        return 1
    elif n == 1:
        return 1
    elif n == 2:
        return 1
    elif n == 3:
        return 2
    elif n == 4:
        return 4
    elif n == 5:
        return 24
    elif n == 6:
        return 50
    elif n == 7:
        return 84
    elif n == 8:
        return 100
    elif n == 9:
        return 1105
    elif n == 10:
        return 1377
    else:
        res = 0
        for i in range(1, n + 1):
            if i % 2 == 0:
                res += (i - 1) * (i - 2) / 2
            else:
                res += (i - 1) * (i - 2) / 6 + (i - 1) * (i - 3) / 6
        return res

def check(tetrahedral_number):
    assert tetrahedral_number(5) == 35.0
    assert tetrahedral_number(6) == 56.0
    assert tetrahedral_number(7) == 84.0

check(tetrahedral_number)
solution 0 passed False
Task 80 gens 10 solutions in cir 7
check_program: 
# Write a function to find the nth tetrahedral number.

def tetrahedral_number(n):

    if n < 0:
        return 0
    if n == 0:
        return 1
    elif n == 1:
        return 1
    elif n == 2:
        return 1
    elif n == 3:
        return 2
    elif n == 4:
        return 4
    elif n == 5:
        return 24
    elif n == 6:
        return 50
    elif n == 7:
        return 84
    elif n == 8:
        return 100
    elif n == 9:
        return 1105
    elif n == 10:
        return 1377
    else:
        res = 0
        for i in range(1, n + 1):
            if i % 2 == 0:
                res += (i - 1) * (i - 2) / 2
            else:
                res += (i - 1) * (i - 2) / 6 + (i - 1) * (i - 3) / 6
        return res

def check(tetrahedral_number):
    assert tetrahedral_number(5) == 35.0
    assert tetrahedral_number(6) == 56.0
    assert tetrahedral_number(7) == 84.0

check(tetrahedral_number)
solution 0 passed False
Task 80 gens 10 solutions in cir 8
check_program: 
# Write a function to find the nth tetrahedral number.

def tetrahedral_number(n):

    if n == 0:
        return 1
    elif n == 1:
        return 1
    elif n == 2:
        return 1
    elif n == 3:
        return 2
    elif n == 4:
        return 4
    elif n == 5:
        return 24
    elif n == 6:
        return 50
    elif n == 7:
        return 84
    elif n == 8:
        return 100
    elif n == 9:
        return 1105
    elif n == 10:
        return 1377
    else:
        res = 0
        for i in range(1, n + 1):
            if i % 2 == 0:
                res += (i - 1) * (i - 2) / 2
            else:
                res += (i - 1) * (i - 2) / 6 + (i - 1) * (i - 3) / 6
        return res

def check(tetrahedral_number):
    assert tetrahedral_number(5) == 35.0
    assert tetrahedral_number(6) == 56.0
    assert tetrahedral_number(7) == 84.0

check(tetrahedral_number)
solution 0 passed False
Task 80 gens 10 solutions in cir 9
check_program: 
# Write a function to find the nth tetrahedral number.

def tetrahedral_number(n):

    if n < 0:
        return 0
    if n == 0:
        return 1
    elif n == 1:
        return 1
    elif n == 2:
        return 1
    elif n == 3:
        return 2
    elif n == 4:
        return 4
    elif n == 5:
        return 24
    elif n == 6:
        return 50
    elif n == 7:
        return 84
    elif n == 8:
        return 100
    elif n == 9:
        return 110
    else:
        return 0

def check(tetrahedral_number):
    assert tetrahedral_number(5) == 35.0
    assert tetrahedral_number(6) == 56.0
    assert tetrahedral_number(7) == 84.0

check(tetrahedral_number)
solution 0 passed False
Task 80 gens 10 solutions in cir 10
check_program: 
# Write a function to find the nth tetrahedral number.

def tetrahedral_number(n):

    if n < 0:
        return 0
    if n == 0:
        return 1
    elif n == 1:
        return 1
    elif n == 2:
        return 1
    elif n == 3:
        return 2
    elif n == 4:
        return 4
    elif n == 5:
        return 24
    elif n == 6:
        return 60
    elif n == 7:
        return 84
    elif n == 8:
        return 100
    elif n == 9:
        return 91
    elif n == 10:
        return 1377
    else:
        res = 0
        for i in range(1, n + 1):
            if i % 2 == 0:
                res += (i - 1) * (i - 2) / 2
            else:
                res += (i - 1) * (i - 2) / 6 + (i - 1) * (i - 3) / 6
        return res

def check(tetrahedral_number):
    assert tetrahedral_number(5) == 35.0
    assert tetrahedral_number(6) == 56.0
    assert tetrahedral_number(7) == 84.0

check(tetrahedral_number)
solution 0 passed False
Task 114 gens 1 solutions in cir 0
check_program: 
# Write a function to assign frequency to each tuple in the given tuple list.
from collections import Counter 
def assign_freq(test_list):

    freq = Counter(test_list)
    return freq

def check(assign_freq):
    assert assign_freq([(6, 5, 8), (2, 7), (6, 5, 8), (6, 5, 8), (9, ), (2, 7)] ) == '[(6, 5, 8, 3), (2, 7, 2), (9, 1)]'
    assert assign_freq([(4, 2, 4), (7, 1), (4, 8), (4, 2, 4), (9, 2), (7, 1)] ) == '[(4, 2, 4, 2), (7, 1, 2), (4, 8, 1), (9, 2, 1)]'
    assert assign_freq([(11, 13, 10), (17, 21), (4, 2, 3), (17, 21), (9, 2), (4, 2, 3)] ) == '[(11, 13, 10, 1), (17, 21, 2), (4, 2, 3, 2), (9, 2, 1)]'

check(assign_freq)
solution 0 passed False
Task 114 gens 8 solutions in cir 1
check_program: 
# Write a function to assign frequency to each tuple in the given tuple list.
from collections import Counter 
def assign_freq(test_list):

    freq = Counter(test_list)
    return dict(freq)

def check(assign_freq):
    assert assign_freq([(6, 5, 8), (2, 7), (6, 5, 8), (6, 5, 8), (9, ), (2, 7)] ) == '[(6, 5, 8, 3), (2, 7, 2), (9, 1)]'
    assert assign_freq([(4, 2, 4), (7, 1), (4, 8), (4, 2, 4), (9, 2), (7, 1)] ) == '[(4, 2, 4, 2), (7, 1, 2), (4, 8, 1), (9, 2, 1)]'
    assert assign_freq([(11, 13, 10), (17, 21), (4, 2, 3), (17, 21), (9, 2), (4, 2, 3)] ) == '[(11, 13, 10, 1), (17, 21, 2), (4, 2, 3, 2), (9, 2, 1)]'

check(assign_freq)
solution 0 passed False
Task 114 gens 10 solutions in cir 2
check_program: 
# Write a function to assign frequency to each tuple in the given tuple list.
from collections import Counter 
def assign_freq(test_list):

    freq = Counter(test_list)
    return {num_pair: freq[num_pair] for num_pair in freq}

def check(assign_freq):
    assert assign_freq([(6, 5, 8), (2, 7), (6, 5, 8), (6, 5, 8), (9, ), (2, 7)] ) == '[(6, 5, 8, 3), (2, 7, 2), (9, 1)]'
    assert assign_freq([(4, 2, 4), (7, 1), (4, 8), (4, 2, 4), (9, 2), (7, 1)] ) == '[(4, 2, 4, 2), (7, 1, 2), (4, 8, 1), (9, 2, 1)]'
    assert assign_freq([(11, 13, 10), (17, 21), (4, 2, 3), (17, 21), (9, 2), (4, 2, 3)] ) == '[(11, 13, 10, 1), (17, 21, 2), (4, 2, 3, 2), (9, 2, 1)]'

check(assign_freq)
solution 0 passed False
Task 114 gens 10 solutions in cir 3
check_program: 
# Write a function to assign frequency to each tuple in the given tuple list.
from collections import Counter 
def assign_freq(test_list):

    freq = {}
    for item in test_list:
        if item[0] in freq:
            freq[item[0]] += item[1]
        else:
            freq[item[0]] = item[1]
    return freq

def check(assign_freq):
    assert assign_freq([(6, 5, 8), (2, 7), (6, 5, 8), (6, 5, 8), (9, ), (2, 7)] ) == '[(6, 5, 8, 3), (2, 7, 2), (9, 1)]'
    assert assign_freq([(4, 2, 4), (7, 1), (4, 8), (4, 2, 4), (9, 2), (7, 1)] ) == '[(4, 2, 4, 2), (7, 1, 2), (4, 8, 1), (9, 2, 1)]'
    assert assign_freq([(11, 13, 10), (17, 21), (4, 2, 3), (17, 21), (9, 2), (4, 2, 3)] ) == '[(11, 13, 10, 1), (17, 21, 2), (4, 2, 3, 2), (9, 2, 1)]'

check(assign_freq)
solution 0 passed False
Task 114 gens 10 solutions in cir 4
check_program: 
# Write a function to assign frequency to each tuple in the given tuple list.
from collections import Counter 
def assign_freq(test_list):

    freq = Counter(test_list)
    return {num_pair: freq[num_pair] for num_pair in freq}

def check(assign_freq):
    assert assign_freq([(6, 5, 8), (2, 7), (6, 5, 8), (6, 5, 8), (9, ), (2, 7)] ) == '[(6, 5, 8, 3), (2, 7, 2), (9, 1)]'
    assert assign_freq([(4, 2, 4), (7, 1), (4, 8), (4, 2, 4), (9, 2), (7, 1)] ) == '[(4, 2, 4, 2), (7, 1, 2), (4, 8, 1), (9, 2, 1)]'
    assert assign_freq([(11, 13, 10), (17, 21), (4, 2, 3), (17, 21), (9, 2), (4, 2, 3)] ) == '[(11, 13, 10, 1), (17, 21, 2), (4, 2, 3, 2), (9, 2, 1)]'

check(assign_freq)
solution 0 passed False
Task 114 gens 10 solutions in cir 5
check_program: 
# Write a function to assign frequency to each tuple in the given tuple list.
from collections import Counter 
def assign_freq(test_list):

    freq = Counter()
    for item in test_list:
        freq[item] += 1
    return freq

def check(assign_freq):
    assert assign_freq([(6, 5, 8), (2, 7), (6, 5, 8), (6, 5, 8), (9, ), (2, 7)] ) == '[(6, 5, 8, 3), (2, 7, 2), (9, 1)]'
    assert assign_freq([(4, 2, 4), (7, 1), (4, 8), (4, 2, 4), (9, 2), (7, 1)] ) == '[(4, 2, 4, 2), (7, 1, 2), (4, 8, 1), (9, 2, 1)]'
    assert assign_freq([(11, 13, 10), (17, 21), (4, 2, 3), (17, 21), (9, 2), (4, 2, 3)] ) == '[(11, 13, 10, 1), (17, 21, 2), (4, 2, 3, 2), (9, 2, 1)]'

check(assign_freq)
solution 0 passed False
Task 114 gens 10 solutions in cir 6
check_program: 
# Write a function to assign frequency to each tuple in the given tuple list.
from collections import Counter 
def assign_freq(test_list):

    freq = Counter()
    for item in test_list:
        freq[item] += 1
    return freq

def check(assign_freq):
    assert assign_freq([(6, 5, 8), (2, 7), (6, 5, 8), (6, 5, 8), (9, ), (2, 7)] ) == '[(6, 5, 8, 3), (2, 7, 2), (9, 1)]'
    assert assign_freq([(4, 2, 4), (7, 1), (4, 8), (4, 2, 4), (9, 2), (7, 1)] ) == '[(4, 2, 4, 2), (7, 1, 2), (4, 8, 1), (9, 2, 1)]'
    assert assign_freq([(11, 13, 10), (17, 21), (4, 2, 3), (17, 21), (9, 2), (4, 2, 3)] ) == '[(11, 13, 10, 1), (17, 21, 2), (4, 2, 3, 2), (9, 2, 1)]'

check(assign_freq)
solution 0 passed False
Task 114 gens 10 solutions in cir 7
check_program: 
# Write a function to assign frequency to each tuple in the given tuple list.
from collections import Counter 
def assign_freq(test_list):

    freq = Counter()
    for item in test_list:
        if item in freq:
            freq[item] += 1
        else:
            freq[item] = 1
    return freq

def check(assign_freq):
    assert assign_freq([(6, 5, 8), (2, 7), (6, 5, 8), (6, 5, 8), (9, ), (2, 7)] ) == '[(6, 5, 8, 3), (2, 7, 2), (9, 1)]'
    assert assign_freq([(4, 2, 4), (7, 1), (4, 8), (4, 2, 4), (9, 2), (7, 1)] ) == '[(4, 2, 4, 2), (7, 1, 2), (4, 8, 1), (9, 2, 1)]'
    assert assign_freq([(11, 13, 10), (17, 21), (4, 2, 3), (17, 21), (9, 2), (4, 2, 3)] ) == '[(11, 13, 10, 1), (17, 21, 2), (4, 2, 3, 2), (9, 2, 1)]'

check(assign_freq)
solution 0 passed False
Task 114 gens 10 solutions in cir 8
check_program: 
# Write a function to assign frequency to each tuple in the given tuple list.
from collections import Counter 
def assign_freq(test_list):

    freq = Counter()
    for item in test_list:
        if item in freq:
            freq[item] += 1
        else:
            freq[item] = 1
    return freq

def check(assign_freq):
    assert assign_freq([(6, 5, 8), (2, 7), (6, 5, 8), (6, 5, 8), (9, ), (2, 7)] ) == '[(6, 5, 8, 3), (2, 7, 2), (9, 1)]'
    assert assign_freq([(4, 2, 4), (7, 1), (4, 8), (4, 2, 4), (9, 2), (7, 1)] ) == '[(4, 2, 4, 2), (7, 1, 2), (4, 8, 1), (9, 2, 1)]'
    assert assign_freq([(11, 13, 10), (17, 21), (4, 2, 3), (17, 21), (9, 2), (4, 2, 3)] ) == '[(11, 13, 10, 1), (17, 21, 2), (4, 2, 3, 2), (9, 2, 1)]'

check(assign_freq)
solution 0 passed False
Task 114 gens 10 solutions in cir 9
check_program: 
# Write a function to assign frequency to each tuple in the given tuple list.
from collections import Counter 
def assign_freq(test_list):

    freq = Counter()
    for elem in test_list:
        if elem[0] in freq:
            freq[elem[0]] += 1
        else:
            freq[elem[0]] = 1
    return freq

def check(assign_freq):
    assert assign_freq([(6, 5, 8), (2, 7), (6, 5, 8), (6, 5, 8), (9, ), (2, 7)] ) == '[(6, 5, 8, 3), (2, 7, 2), (9, 1)]'
    assert assign_freq([(4, 2, 4), (7, 1), (4, 8), (4, 2, 4), (9, 2), (7, 1)] ) == '[(4, 2, 4, 2), (7, 1, 2), (4, 8, 1), (9, 2, 1)]'
    assert assign_freq([(11, 13, 10), (17, 21), (4, 2, 3), (17, 21), (9, 2), (4, 2, 3)] ) == '[(11, 13, 10, 1), (17, 21, 2), (4, 2, 3, 2), (9, 2, 1)]'

check(assign_freq)
solution 0 passed False
Task 114 gens 10 solutions in cir 10
check_program: 
# Write a function to assign frequency to each tuple in the given tuple list.
from collections import Counter 
def assign_freq(test_list):

    freq = Counter()
    for item in test_list:
        for value in item:
            freq[value] += 1
    return freq

def check(assign_freq):
    assert assign_freq([(6, 5, 8), (2, 7), (6, 5, 8), (6, 5, 8), (9, ), (2, 7)] ) == '[(6, 5, 8, 3), (2, 7, 2), (9, 1)]'
    assert assign_freq([(4, 2, 4), (7, 1), (4, 8), (4, 2, 4), (9, 2), (7, 1)] ) == '[(4, 2, 4, 2), (7, 1, 2), (4, 8, 1), (9, 2, 1)]'
    assert assign_freq([(11, 13, 10), (17, 21), (4, 2, 3), (17, 21), (9, 2), (4, 2, 3)] ) == '[(11, 13, 10, 1), (17, 21, 2), (4, 2, 3, 2), (9, 2, 1)]'

check(assign_freq)
solution 0 passed False
Task 199 gens 1 solutions in cir 0
check_program: 
# Write a python function to find highest power of 2 less than or equal to given number.

def highest_Power_of_2(n):

    result = 0
    while n > 0:
        n = n >> 1
        result += 1
    return result

def check(highest_Power_of_2):
    assert highest_Power_of_2(10) == 8
    assert highest_Power_of_2(19) == 16
    assert highest_Power_of_2(32) == 32

check(highest_Power_of_2)
solution 0 passed False
Task 199 gens 5 solutions in cir 1
check_program: 
# Write a python function to find highest power of 2 less than or equal to given number.

def highest_Power_of_2(n):

    result = 0
    while n > 0:
        n = n >> 1
        result += 1
    return result

def check(highest_Power_of_2):
    assert highest_Power_of_2(10) == 8
    assert highest_Power_of_2(19) == 16
    assert highest_Power_of_2(32) == 32

check(highest_Power_of_2)
solution 0 passed False
Task 199 gens 10 solutions in cir 2
check_program: 
# Write a python function to find highest power of 2 less than or equal to given number.

def highest_Power_of_2(n):

    result = 0
    while n > 0:
        n = n >> 1
        result += 1
    return result

def check(highest_Power_of_2):
    assert highest_Power_of_2(10) == 8
    assert highest_Power_of_2(19) == 16
    assert highest_Power_of_2(32) == 32

check(highest_Power_of_2)
solution 0 passed False
Task 199 gens 10 solutions in cir 3
check_program: 
# Write a python function to find highest power of 2 less than or equal to given number.

def highest_Power_of_2(n):

    result = 0
    while n > 0:
        n = n >> 1
        result += 1
    return result

def check(highest_Power_of_2):
    assert highest_Power_of_2(10) == 8
    assert highest_Power_of_2(19) == 16
    assert highest_Power_of_2(32) == 32

check(highest_Power_of_2)
solution 0 passed False
Task 199 gens 10 solutions in cir 4
check_program: 
# Write a python function to find highest power of 2 less than or equal to given number.

def highest_Power_of_2(n):

    result = 1
    while n >= 2 ** result:
        n >>= 1
        result += 1
    return result

def check(highest_Power_of_2):
    assert highest_Power_of_2(10) == 8
    assert highest_Power_of_2(19) == 16
    assert highest_Power_of_2(32) == 32

check(highest_Power_of_2)
solution 0 passed False
Task 199 gens 10 solutions in cir 5
check_program: 
# Write a python function to find highest power of 2 less than or equal to given number.

def highest_Power_of_2(n):

    result = 1
    while n >= 2 ** result:
        n >>= 1
        result += 1
    return result

def check(highest_Power_of_2):
    assert highest_Power_of_2(10) == 8
    assert highest_Power_of_2(19) == 16
    assert highest_Power_of_2(32) == 32

check(highest_Power_of_2)
solution 0 passed False
Task 199 gens 10 solutions in cir 6
check_program: 
# Write a python function to find highest power of 2 less than or equal to given number.

def highest_Power_of_2(n):

    result = 1
    while n >= 2 ** result:
        result += 1
        n = n >> result
    return result

def check(highest_Power_of_2):
    assert highest_Power_of_2(10) == 8
    assert highest_Power_of_2(19) == 16
    assert highest_Power_of_2(32) == 32

check(highest_Power_of_2)
solution 0 passed False
Task 199 gens 10 solutions in cir 7
check_program: 
# Write a python function to find highest power of 2 less than or equal to given number.

def highest_Power_of_2(n):

    result = 1
    while n >= 2 ** result:
        result += 1
        n = n >> result
    return result

def check(highest_Power_of_2):
    assert highest_Power_of_2(10) == 8
    assert highest_Power_of_2(19) == 16
    assert highest_Power_of_2(32) == 32

check(highest_Power_of_2)
solution 0 passed False
task_has_solution: dict_keys([11, 13, 20, 26, 31, 34, 39, 40, 44, 47, 48, 49, 52, 55, 61, 62, 64, 66, 68, 71, 73, 74, 75, 78, 80, 82, 83, 86, 88, 93, 95, 97, 99, 101, 103, 104, 111, 113, 114, 115, 116, 118, 119, 120, 122, 125, 126, 128, 129, 131, 133, 136, 139, 143, 145, 146, 153, 154, 156, 165, 166, 169, 172, 173, 174, 177, 178, 180, 182, 183, 187, 189, 190, 192, 199, 204, 209, 210, 219, 220, 221, 223, 224, 226, 229, 234, 235, 247, 248, 249, 250, 251, 257, 260, 263, 264, 266, 269, 274, 276, 279, 280, 283, 289, 297, 298, 300, 301, 302, 307, 308, 309, 315, 319, 320, 321, 323, 325, 326, 330, 332, 334, 335, 336, 337, 345, 349, 350, 361, 362, 363, 365, 366, 371, 372, 373, 374, 375, 377, 379, 381, 382, 383, 385, 387, 388, 391, 394, 396, 398, 399, 401, 405, 406, 407, 409, 410, 413, 416, 417, 420, 421, 422, 423, 427, 428, 429, 430, 436, 438, 443, 446, 449, 452, 454, 455, 457, 459, 461, 465, 468, 469, 473, 476, 481, 482, 483, 484, 486, 488, 489, 490, 491, 497, 503, 505, 507, 508])
cir 0,passed 38 tasks, pass rate is 0.1919191919191919
pass tasks are:
[20, 40, 52, 62, 66, 82, 88, 93, 99, 113, 145, 173, 174, 183, 204, 210, 221, 234, 249, 250, 257, 263, 269, 297, 309, 319, 332, 361, 373, 375, 394, 422, 443, 459, 465, 476, 489, 507]
cir 1,passed 50 tasks, pass rate is 0.25252525252525254
pass tasks are:
[11, 20, 40, 52, 62, 64, 66, 82, 88, 93, 99, 113, 115, 133, 145, 173, 174, 183, 192, 204, 210, 221, 224, 234, 249, 250, 257, 263, 269, 297, 309, 319, 330, 332, 361, 373, 375, 377, 394, 405, 409, 422, 428, 443, 459, 465, 476, 489, 503, 507]
cir 2,passed 54 tasks, pass rate is 0.2727272727272727
pass tasks are:
[11, 20, 40, 52, 62, 64, 66, 71, 82, 88, 93, 97, 99, 113, 115, 128, 133, 145, 173, 174, 183, 192, 204, 210, 221, 224, 234, 249, 250, 257, 263, 269, 297, 309, 319, 330, 332, 361, 372, 373, 375, 377, 394, 405, 409, 422, 428, 443, 459, 465, 476, 489, 503, 507]
cir 3,passed 59 tasks, pass rate is 0.29797979797979796
pass tasks are:
[11, 20, 40, 52, 62, 64, 66, 71, 82, 88, 93, 97, 99, 101, 113, 115, 128, 133, 145, 172, 173, 174, 183, 192, 204, 210, 221, 224, 234, 249, 250, 257, 263, 269, 297, 309, 319, 330, 332, 361, 362, 372, 373, 375, 377, 394, 405, 409, 422, 427, 428, 443, 459, 465, 476, 484, 489, 503, 507]
cir 4,passed 59 tasks, pass rate is 0.29797979797979796
pass tasks are:
[11, 20, 40, 52, 62, 64, 66, 71, 82, 88, 93, 97, 99, 101, 113, 115, 128, 133, 145, 172, 173, 174, 183, 192, 204, 210, 221, 224, 234, 249, 250, 257, 263, 269, 297, 309, 319, 330, 332, 361, 362, 372, 373, 375, 377, 394, 405, 409, 422, 427, 428, 443, 459, 465, 476, 484, 489, 503, 507]
cir 5,passed 59 tasks, pass rate is 0.29797979797979796
pass tasks are:
[11, 20, 40, 52, 62, 64, 66, 71, 82, 88, 93, 97, 99, 101, 113, 115, 128, 133, 145, 172, 173, 174, 183, 192, 204, 210, 221, 224, 234, 249, 250, 257, 263, 269, 297, 309, 319, 330, 332, 361, 362, 372, 373, 375, 377, 394, 405, 409, 422, 427, 428, 443, 459, 465, 476, 484, 489, 503, 507]
cir 6,passed 60 tasks, pass rate is 0.30303030303030304
pass tasks are:
[11, 20, 40, 52, 62, 64, 66, 71, 82, 88, 93, 97, 99, 101, 113, 115, 128, 133, 145, 172, 173, 174, 183, 192, 204, 210, 221, 224, 234, 249, 250, 257, 263, 269, 297, 309, 319, 330, 332, 361, 362, 372, 373, 375, 377, 394, 399, 405, 409, 422, 427, 428, 443, 459, 465, 476, 484, 489, 503, 507]
cir 7,passed 60 tasks, pass rate is 0.30303030303030304
pass tasks are:
[11, 20, 40, 52, 62, 64, 66, 71, 82, 88, 93, 97, 99, 101, 113, 115, 128, 133, 145, 172, 173, 174, 183, 192, 204, 210, 221, 224, 234, 249, 250, 257, 263, 269, 297, 309, 319, 330, 332, 361, 362, 372, 373, 375, 377, 394, 399, 405, 409, 422, 427, 428, 443, 459, 465, 476, 484, 489, 503, 507]
cir 8,passed 60 tasks, pass rate is 0.30303030303030304
pass tasks are:
[11, 20, 40, 52, 62, 64, 66, 71, 82, 88, 93, 97, 99, 101, 113, 115, 128, 133, 145, 172, 173, 174, 183, 192, 204, 210, 221, 224, 234, 249, 250, 257, 263, 269, 297, 309, 319, 330, 332, 361, 362, 372, 373, 375, 377, 394, 399, 405, 409, 422, 427, 428, 443, 459, 465, 476, 484, 489, 503, 507]
cir 9,passed 60 tasks, pass rate is 0.30303030303030304
pass tasks are:
[11, 20, 40, 52, 62, 64, 66, 71, 82, 88, 93, 97, 99, 101, 113, 115, 128, 133, 145, 172, 173, 174, 183, 192, 204, 210, 221, 224, 234, 249, 250, 257, 263, 269, 297, 309, 319, 330, 332, 361, 362, 372, 373, 375, 377, 394, 399, 405, 409, 422, 427, 428, 443, 459, 465, 476, 484, 489, 503, 507]
cir 10,passed 60 tasks, pass rate is 0.30303030303030304
pass tasks are:
[11, 20, 40, 52, 62, 64, 66, 71, 82, 88, 93, 97, 99, 101, 113, 115, 128, 133, 145, 172, 173, 174, 183, 192, 204, 210, 221, 224, 234, 249, 250, 257, 263, 269, 297, 309, 319, 330, 332, 361, 362, 372, 373, 375, 377, 394, 399, 405, 409, 422, 427, 428, 443, 459, 465, 476, 484, 489, 503, 507]
task 11 pass or not for each cir: [False, True, True, True]
task 13 pass or not for each cir: [False, False, False, False]
task 20 pass or not for each cir: [True, False, False, True]
task 26 pass or not for each cir: [False, False, False, False, False]
task 31 pass or not for each cir: [False, False, False, False]
task 34 pass or not for each cir: [False, False, False, False]
task 39 pass or not for each cir: [False, False, False, False]
task 40 pass or not for each cir: [True, True, True, True, True, False, False, False, False, False, False]
task 44 pass or not for each cir: [False, False, False, False, False]
task 47 pass or not for each cir: [False, False, False, False]
task 48 pass or not for each cir: [False, False, False, False, False]
task 49 pass or not for each cir: [False, False, False, False, False, False, False, False]
task 52 pass or not for each cir: [True, True, True, True, True, True, True]
task 55 pass or not for each cir: [False, False, False, False]
task 61 pass or not for each cir: [False, False, False, False, False]
task 62 pass or not for each cir: [True, True, True, True, True, True]
task 64 pass or not for each cir: [False, True, False, False]
task 66 pass or not for each cir: [True, True, True, True, True, True, True, True, True, True, True]
task 68 pass or not for each cir: [False, False, False, False]
task 71 pass or not for each cir: [False, False, True, True]
task 73 pass or not for each cir: [False, False, False, False, False, False]
task 74 pass or not for each cir: [False, False, False, False, False]
task 75 pass or not for each cir: [False, False, False, False, False, False, False, False]
task 78 pass or not for each cir: [False, False, False, False]
task 80 pass or not for each cir: [False, False, False, False, False, False, False, False, False, False, False]
task 82 pass or not for each cir: [True, True, False, False, False, False, False, False, False, False, True]
task 83 pass or not for each cir: [False, False, False, False, False]
task 86 pass or not for each cir: [False, False, False, False, False, False, False, False, False, False, False]
task 88 pass or not for each cir: [True, False, True, True, True]
task 93 pass or not for each cir: [True, True, True, True]
task 95 pass or not for each cir: [False, False, False, False]
task 97 pass or not for each cir: [False, False, True, True, True, True, True, True, True, True, True]
task 99 pass or not for each cir: [True, True, True, True, True, True, True]
task 101 pass or not for each cir: [False, False, False, True]
task 103 pass or not for each cir: [False, False, False, False]
task 104 pass or not for each cir: [False, False, False, False, False, False, False, False, False, False, False]
task 111 pass or not for each cir: [False, False, False, False]
task 113 pass or not for each cir: [True, True, True, True]
task 114 pass or not for each cir: [False, False, False, False, False, False, False, False, False, False, False]
task 115 pass or not for each cir: [False, True, True, True]
task 116 pass or not for each cir: [False, False, False, False, False, False, False, False, False, False, False]
task 118 pass or not for each cir: [False, False, False, False]
task 119 pass or not for each cir: [False, False, False, False]
task 120 pass or not for each cir: [False, False, False, False, False, False, False, False, False, False, False]
task 122 pass or not for each cir: [False, False, False, False]
task 125 pass or not for each cir: [False, False, False, False]
task 126 pass or not for each cir: [False, False, False, False]
task 128 pass or not for each cir: [False, False, True, True, True]
task 129 pass or not for each cir: [False, False, False, False, False, False, False, False, False, False, False]
task 131 pass or not for each cir: [False, False, False, False, False, False, False, False, False, False, False]
task 133 pass or not for each cir: [False, True, True, True]
task 136 pass or not for each cir: [False, False, False, False, False, False, False, False, False]
task 139 pass or not for each cir: [False, False, False, False, False]
task 143 pass or not for each cir: [False, False, False, False, False, False, False, False, False, False, False]
task 145 pass or not for each cir: [True, True, True, False, False]
task 146 pass or not for each cir: [False, False, False, False, False, False, False, False, False, False, False]
task 153 pass or not for each cir: [False, False, False, False, False, False, False, False, False, False, False]
task 154 pass or not for each cir: [False, False, False, False]
task 156 pass or not for each cir: [False, False, False, False, False, False]
task 165 pass or not for each cir: [False, False, False, False, False]
task 166 pass or not for each cir: [False, False, False, False]
task 169 pass or not for each cir: [False, False, False, False, False, False, False, False, False, False, False]
task 172 pass or not for each cir: [False, False, False, True, False]
task 173 pass or not for each cir: [True, True, True, True, True, True, True, True, True, True, True]
task 174 pass or not for each cir: [True, True, True, True, True, True, True, True, True, True, True]
task 177 pass or not for each cir: [False, False, False, False, False, False]
task 178 pass or not for each cir: [False, False, False, False, False, False]
task 180 pass or not for each cir: [False, False, False, False, False, False, False, False, False, False, False]
task 182 pass or not for each cir: [False, False, False, False]
task 183 pass or not for each cir: [True, True, False, False, False]
task 187 pass or not for each cir: [False, False, False, False]
task 189 pass or not for each cir: [False, False, False, False]
task 190 pass or not for each cir: [False, False, False, False]
task 192 pass or not for each cir: [False, True, True, False]
task 199 pass or not for each cir: [False, False, False, False, False, False, False, False]
task 204 pass or not for each cir: [True, True, True, True, True, True, True, True, True, True, True]
task 209 pass or not for each cir: [False, False, False, False]
task 210 pass or not for each cir: [True, True, True, True, True, True]
task 219 pass or not for each cir: [False, False, False, False, False, False, False, False, False]
task 220 pass or not for each cir: [False, False, False, False, False]
task 221 pass or not for each cir: [True, False, False, False]
task 223 pass or not for each cir: [False, False, False, False, False]
task 224 pass or not for each cir: [False, True, True, True]
task 226 pass or not for each cir: [False, False, False, False, False, False]
task 229 pass or not for each cir: [False, False, False, False]
task 234 pass or not for each cir: [True, True, True, True, True, False, True, True, True, True, True]
task 235 pass or not for each cir: [False, False, False, False, False]
task 247 pass or not for each cir: [False, False, False, False, False, False, False, False, False, False, False]
task 248 pass or not for each cir: [False, False, False, False, False, False, False, False, False, False, False]
task 249 pass or not for each cir: [True, True, True, True, True]
task 250 pass or not for each cir: [True, True, True, True, True, True, True, True, True, True, True]
task 251 pass or not for each cir: [False, False, False, False, False]
task 257 pass or not for each cir: [True, False, False, False, False, False, False, False, True, True, True]
task 260 pass or not for each cir: [False, False, False, False, False, False, False, False, False]
task 263 pass or not for each cir: [True, True, True, True]
task 264 pass or not for each cir: [False, False, False, False]
task 266 pass or not for each cir: [False, False, False, False, False, False, False, False, False, False]
task 269 pass or not for each cir: [True, True, True, True, True, True, True, True, True, True, True]
task 274 pass or not for each cir: [False, False, False, False]
task 276 pass or not for each cir: [False, False, False, False, False]
task 279 pass or not for each cir: [False, False, False, False]
task 280 pass or not for each cir: [False, False, False, False, False, False, False, False]
task 283 pass or not for each cir: [False, False, False, False, False]
task 289 pass or not for each cir: [False, False, False, False, False, False, False, False, False, False]
task 297 pass or not for each cir: [True, True, True, True]
task 298 pass or not for each cir: [False, False, False, False]
task 300 pass or not for each cir: [False, False, False, False]
task 301 pass or not for each cir: [False, False, False, False, False, False, False, False, False, False, False]
task 302 pass or not for each cir: [False, False, False, False, False, False, False, False, False, False, False]
task 307 pass or not for each cir: [False, False, False, False, False]
task 308 pass or not for each cir: [False, False, False, False]
task 309 pass or not for each cir: [True, True, True, True, True, True, True, True, True, True, True]
task 315 pass or not for each cir: [False, False, False, False]
task 319 pass or not for each cir: [True, True, True, True, True, True, True, True, False, False, False]
task 320 pass or not for each cir: [False, False, False, False, False, False, False, False, False, False, False]
task 321 pass or not for each cir: [False, False, False, False]
task 323 pass or not for each cir: [False, False, False, False]
task 325 pass or not for each cir: [False, False, False, False, False, False, False, False, False, False, False]
task 326 pass or not for each cir: [False, False, False, False]
task 330 pass or not for each cir: [False, True, True, True, True, True, True, True, True, True, True]
task 332 pass or not for each cir: [True, True, True, True, True, True, True, False, False, False]
task 334 pass or not for each cir: [False, False, False, False]
task 335 pass or not for each cir: [False, False, False, False, False, False, False]
task 336 pass or not for each cir: [False, False, False]
task 337 pass or not for each cir: [False, False, False, False, False]
task 345 pass or not for each cir: [False, False, False, False]
task 349 pass or not for each cir: [False, False, False, False, False, False, False, False, False, False, False]
task 350 pass or not for each cir: [False, False, False, False]
task 361 pass or not for each cir: [True, True, True, True]
task 362 pass or not for each cir: [False, False, False, True, False, True]
task 363 pass or not for each cir: [False, False, False, False, False, False, False, False, False, False, False]
task 365 pass or not for each cir: [False, False, False, False, False, False]
task 366 pass or not for each cir: [False, False, False, False, False, False, False, False, False]
task 371 pass or not for each cir: [False, False, False, False]
task 372 pass or not for each cir: [False, False, True, True, True, True]
task 373 pass or not for each cir: [True, True, True, True, True, True, True, True, True, True, True]
task 374 pass or not for each cir: [False, False, False, False, False, False, False]
task 375 pass or not for each cir: [True, False, False, False]
task 377 pass or not for each cir: [False, True, True, True]
task 379 pass or not for each cir: [False, False, False, False, False]
task 381 pass or not for each cir: [False, False, False, False]
task 382 pass or not for each cir: [False, False, False, False]
task 383 pass or not for each cir: [False, False, False, False, False, False, False, False, False, False, False]
task 385 pass or not for each cir: [False, False, False, False, False, False, False, False, False, False, False]
task 387 pass or not for each cir: [False, False, False, False, False, False, False, False, False, False, False]
task 388 pass or not for each cir: [False, False, False, False, False, False, False, False, False, False, False]
task 391 pass or not for each cir: [False, False, False, False, False, False, False, False, False, False, False]
task 394 pass or not for each cir: [True, True, False, False, False]
task 396 pass or not for each cir: [False, False, False, False]
task 398 pass or not for each cir: [False, False, False, False, False, False]
task 399 pass or not for each cir: [False, False, False, False, False, False, True, True, True, False, True]
task 401 pass or not for each cir: [False, False, False, False, False, False]
task 405 pass or not for each cir: [False, True, True, False, False]
task 406 pass or not for each cir: [False, False, False, False, False]
task 407 pass or not for each cir: [False, False, False, False]
task 409 pass or not for each cir: [False, True, True, True, True]
task 410 pass or not for each cir: [False, False, False, False, False]
task 413 pass or not for each cir: [False, False, False, False]
task 416 pass or not for each cir: [False, False, False, False, False]
task 417 pass or not for each cir: [False, False, False, False, False, False, False, False, False, False, False]
task 420 pass or not for each cir: [False, False, False, False, False, False, False, False, False, False, False]
task 421 pass or not for each cir: [False, False, False, False, False, False]
task 422 pass or not for each cir: [True, True, False, False, False, False, False, False, False, False, False]
task 423 pass or not for each cir: [False, False, False, False, False, False, False, False]
task 427 pass or not for each cir: [False, False, False, True, True]
task 428 pass or not for each cir: [False, True, True, False]
task 429 pass or not for each cir: [False, False, False, False, False, False, False, False, False, False, False]
task 430 pass or not for each cir: [False, False, False, False]
task 436 pass or not for each cir: [False, False, False, False, False, False]
task 438 pass or not for each cir: [False, False, False, False]
task 443 pass or not for each cir: [True, False, False, True]
task 446 pass or not for each cir: [False, False, False, False, False]
task 449 pass or not for each cir: [False, False, False, False]
task 452 pass or not for each cir: [False, False, False, False, False, False]
task 454 pass or not for each cir: [False, False, False, False, False, False, False]
task 455 pass or not for each cir: [False, False, False, False]
task 457 pass or not for each cir: [False, False, False, False, False, False, False, False, False, False, False]
task 459 pass or not for each cir: [True, True, True, True, True, True, True, True, True, True, True]
task 461 pass or not for each cir: [False, False, False, False, False, False, False, False, False, False, False]
task 465 pass or not for each cir: [True, True, True, True, True, True, True, True, True, True, True]
task 468 pass or not for each cir: [False, False, False, False, False]
task 469 pass or not for each cir: [False, False, False, False]
task 473 pass or not for each cir: [False, False, False, False, False, False, False, False, False, False, False]
task 476 pass or not for each cir: [True, True, False, False, False]
task 481 pass or not for each cir: [False, False, False, False]
task 482 pass or not for each cir: [False, False, False, False, False, False, False, False, False, False, False]
task 483 pass or not for each cir: [False, False, False, False]
task 484 pass or not for each cir: [False, False, False, True, True, False]
task 486 pass or not for each cir: [False, False, False, False]
task 488 pass or not for each cir: [False, False, False, False, False, False]
task 489 pass or not for each cir: [True, False, False, False, True]
task 490 pass or not for each cir: [False, False, False, False, False, False, False, False, False, False, False]
task 491 pass or not for each cir: [False, False, False, False]
task 497 pass or not for each cir: [False, False, False, False, False]
task 503 pass or not for each cir: [False, True, False, False, False, False, False, False, False, False, False]
task 505 pass or not for each cir: [False, False, False, False]
task 507 pass or not for each cir: [True, True, True, True]
task 508 pass or not for each cir: [False, False, False, False]
--------------------------------------------
lack task : [198, 367]
pass task num: [38, 50, 54, 59, 59, 59, 60, 60, 60, 60, 60]
pass task rate: [0.1919191919191919, 0.25252525252525254, 0.2727272727272727, 0.29797979797979796, 0.29797979797979796, 0.29797979797979796, 0.30303030303030304, 0.30303030303030304, 0.30303030303030304, 0.30303030303030304, 0.30303030303030304]
cir 0, pass at k 508 rate: 0.0191919191919192
cir 1, pass at k 508 rate: 0.02171717171717172
cir 2, pass at k 508 rate: 0.020707070707070716
cir 3, pass at k 508 rate: 0.022335025380710662
cir 4, pass at k 508 rate: 0.02276422764227643
cir 5, pass at k 508 rate: 0.02272727272727273
cir 6, pass at k 508 rate: 0.025352112676056342
cir 7, pass at k 508 rate: 0.022727272727272728
cir 8, pass at k 508 rate: 0.02459016393442623
cir 9, pass at k 508 rate: 0.02456140350877193
cir 10, pass at k 508 rate: 0.02962962962962963
38
{198, 367}
