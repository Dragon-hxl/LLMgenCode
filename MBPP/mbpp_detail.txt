============MBPP/11============
prompt:
# Write a python function to remove first and last occurrence of a given character from the string.

def remove_Occ(s,ch):
-------------------------------
entry_point:
remove_Occ
-------------------------------
canonical_solution:
def remove_Occ(s,ch): 
    for i in range(len(s)): 
        if (s[i] == ch): 
            s = s[0 : i] + s[i + 1:] 
            break
    for i in range(len(s) - 1,-1,-1):  
        if (s[i] == ch): 
            s = s[0 : i] + s[i + 1:] 
            break
    return s 
-------------------------------
test:
def check(remove_Occ):
    assert remove_Occ("hello","l") == "heo"
    assert remove_Occ("abcda","a") == "bcd"
    assert remove_Occ("PHP","P") == "H"

============MBPP/12============
prompt:
# Write a function to sort a given matrix in ascending order according to the sum of its rows.

def sort_matrix(M):
-------------------------------
entry_point:
sort_matrix
-------------------------------
canonical_solution:
def sort_matrix(M):
    result = sorted(M, key=sum)
    return result
-------------------------------
test:
def check(sort_matrix):
    assert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]
    assert sort_matrix([[1, 2, 3], [-2, 4, -5], [1, -1, 1]])==[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]
    assert sort_matrix([[5,8,9],[6,4,3],[2,1,4]])==[[2, 1, 4], [6, 4, 3], [5, 8, 9]]

============MBPP/13============
prompt:
# Write a function to count the most common words in a dictionary.
from collections import Counter
def count_common(words):
-------------------------------
entry_point:
count_common
-------------------------------
canonical_solution:
from collections import Counter
def count_common(words):
  word_counts = Counter(words)
  top_four = word_counts.most_common(4)
  return (top_four)

-------------------------------
test:
def check(count_common):
    assert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',"black",'pink','green','green','pink','green','pink','white','orange',"orange",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]
    assert count_common(['one', 'two', 'three', 'four', 'five', 'one', 'two', 'one', 'three', 'one']) == [('one', 4), ('two', 2), ('three', 2), ('four', 1)]
    assert count_common(['Facebook', 'Apple', 'Amazon', 'Netflix', 'Google', 'Apple', 'Netflix', 'Amazon']) == [('Apple', 2), ('Amazon', 2), ('Netflix', 2), ('Facebook', 1)]

============MBPP/14============
prompt:
# Write a python function to find the volume of a triangular prism.

def find_Volume(l,b,h) :
-------------------------------
entry_point:
find_Volume
-------------------------------
canonical_solution:
def find_Volume(l,b,h) : 
    return ((l * b * h) / 2) 
-------------------------------
test:
def check(find_Volume):
    assert find_Volume(10,8,6) == 240
    assert find_Volume(3,2,2) == 6
    assert find_Volume(1,2,1) == 1

============MBPP/15============
prompt:
# Write a function to split a string at lowercase letters.
import re
def split_lowerstring(text):
-------------------------------
entry_point:
split_lowerstring
-------------------------------
canonical_solution:
import re
def split_lowerstring(text):
 return (re.findall('[a-z][^a-z]*', text))
-------------------------------
test:
def check(split_lowerstring):
    assert split_lowerstring("AbCd")==['bC','d']
    assert split_lowerstring("Python")==['y', 't', 'h', 'o', 'n']
    assert split_lowerstring("Programming")==['r', 'o', 'g', 'r', 'a', 'm', 'm', 'i', 'n', 'g']

============MBPP/16============
prompt:
# Write a function to find sequences of lowercase letters joined with an underscore.
import re
def text_lowercase_underscore(text):
-------------------------------
entry_point:
text_lowercase_underscore
-------------------------------
canonical_solution:
import re
def text_lowercase_underscore(text):
        patterns = '^[a-z]+_[a-z]+$'
        if re.search(patterns,  text):
                return 'Found a match!'
        else:
                return('Not matched!')
-------------------------------
test:
def check(text_lowercase_underscore):
    assert text_lowercase_underscore("aab_cbbbc")==('Found a match!')
    assert text_lowercase_underscore("aab_Abbbc")==('Not matched!')
    assert text_lowercase_underscore("Aaab_abbbc")==('Not matched!')

============MBPP/17============
prompt:
# Write a function to find the perimeter of a square.

def square_perimeter(a):
-------------------------------
entry_point:
square_perimeter
-------------------------------
canonical_solution:
def square_perimeter(a):
  perimeter=4*a
  return perimeter
-------------------------------
test:
def check(square_perimeter):
    assert square_perimeter(10)==40
    assert square_perimeter(5)==20
    assert square_perimeter(4)==16

============MBPP/18============
prompt:
# Write a function to remove characters from the first string which are present in the second string.
NO_OF_CHARS = 256
def str_to_list(string):
-------------------------------
entry_point:
str_to_list
-------------------------------
canonical_solution:
NO_OF_CHARS = 256
def str_to_list(string): 
	temp = [] 
	for x in string: 
		temp.append(x) 
	return temp 
def lst_to_string(List): 
	return ''.join(List) 
def get_char_count_array(string): 
	count = [0] * NO_OF_CHARS 
	for i in string: 
		count[ord(i)] += 1
	return count 
def remove_dirty_chars(string, second_string): 
	count = get_char_count_array(second_string) 
	ip_ind = 0
	res_ind = 0
	temp = '' 
	str_list = str_to_list(string) 
	while ip_ind != len(str_list): 
		temp = str_list[ip_ind] 
		if count[ord(temp)] == 0: 
			str_list[res_ind] = str_list[ip_ind] 
			res_ind += 1
		ip_ind+=1
	return lst_to_string(str_list[0:res_ind]) 
-------------------------------
test:
def check(str_to_list):
    assert remove_dirty_chars("probasscurve", "pros") == 'bacuve'
    assert remove_dirty_chars("digitalindia", "talent") == 'digiidi'
    assert remove_dirty_chars("exoticmiles", "toxic") == 'emles' 

============MBPP/19============
prompt:
# Write a function to find whether a given array of integers contains any duplicate element.

def test_duplicate(arraynums):
-------------------------------
entry_point:
test_duplicate
-------------------------------
canonical_solution:
def test_duplicate(arraynums):
    nums_set = set(arraynums)    
    return len(arraynums) != len(nums_set)     
-------------------------------
test:
def check(test_duplicate):
    assert test_duplicate(([1,2,3,4,5]))==False
    assert test_duplicate(([1,2,3,4, 4]))==True
    assert test_duplicate([1,1,2,2,3,3,4,4,5])==True

============MBPP/20============
prompt:
# Write a function to check if the given number is woodball or not.

def is_woodall(x):
-------------------------------
entry_point:
is_woodall
-------------------------------
canonical_solution:
def is_woodall(x): 
	if (x % 2 == 0): 
		return False
	if (x == 1): 
		return True
	x = x + 1 
	p = 0
	while (x % 2 == 0): 
		x = x/2
		p = p + 1
		if (p == x): 
			return True
	return False
-------------------------------
test:
def check(is_woodall):
    assert is_woodall(383) == True
    assert is_woodall(254) == False
    assert is_woodall(200) == False

============MBPP/21============
prompt:
# Write a function to find m number of multiples of n.

def multiples_of_num(m,n):
-------------------------------
entry_point:
multiples_of_num
-------------------------------
canonical_solution:
def multiples_of_num(m,n): 
    multiples_of_num= list(range(n,(m+1)*n, n)) 
    return list(multiples_of_num)
-------------------------------
test:
def check(multiples_of_num):
    assert multiples_of_num(4,3)== [3,6,9,12]
    assert multiples_of_num(2,5)== [5,10]
    assert multiples_of_num(9,2)== [2,4,6,8,10,12,14,16,18]

============MBPP/22============
prompt:
# Write a function to find the first duplicate element in a given array of integers.

def find_first_duplicate(nums):
-------------------------------
entry_point:
find_first_duplicate
-------------------------------
canonical_solution:
def find_first_duplicate(nums):
    num_set = set()
    no_duplicate = -1

    for i in range(len(nums)):

        if nums[i] in num_set:
            return nums[i]
        else:
            num_set.add(nums[i])

    return no_duplicate
-------------------------------
test:
def check(find_first_duplicate):
    assert find_first_duplicate(([1, 2, 3, 4, 4, 5]))==4
    assert find_first_duplicate([1, 2, 3, 4])==-1
    assert find_first_duplicate([1, 1, 2, 3, 3, 2, 2])==1

============MBPP/23============
prompt:
# Write a python function to find the maximum sum of elements of list in a list of lists.

def maximum_Sum(list1):
-------------------------------
entry_point:
maximum_Sum
-------------------------------
canonical_solution:
def maximum_Sum(list1): 
    maxi = -100000
    for x in list1: 
        sum = 0 
        for y in x: 
            sum+= y      
        maxi = max(sum,maxi)     
    return maxi 
-------------------------------
test:
def check(maximum_Sum):
    assert maximum_Sum([[1,2,3],[4,5,6],[10,11,12],[7,8,9]]) == 33
    assert maximum_Sum([[0,1,1],[1,1,2],[3,2,1]]) == 6
    assert maximum_Sum([[0,1,3],[1,2,1],[9,8,2],[0,1,0],[6,4,8]]) == 19

============MBPP/24============
prompt:
# Write a function to convert the given binary number to its decimal equivalent.

def binary_to_decimal(binary):
-------------------------------
entry_point:
binary_to_decimal
-------------------------------
canonical_solution:
def binary_to_decimal(binary): 
    binary1 = binary 
    decimal, i, n = 0, 0, 0
    while(binary != 0): 
        dec = binary % 10
        decimal = decimal + dec * pow(2, i) 
        binary = binary//10
        i += 1
    return (decimal)
-------------------------------
test:
def check(binary_to_decimal):
    assert binary_to_decimal(100) == 4
    assert binary_to_decimal(1011) == 11
    assert binary_to_decimal(1101101) == 109

============MBPP/25============
prompt:
# Write a python function to find the product of non-repeated elements in a given array.

def find_Product(arr,n):
-------------------------------
entry_point:
find_Product
-------------------------------
canonical_solution:
def find_Product(arr,n): 
    arr.sort() 
    prod = 1
    for i in range(0,n,1): 
        if (arr[i - 1] != arr[i]): 
            prod = prod * arr[i] 
    return prod; 
-------------------------------
test:
def check(find_Product):
    assert find_Product([1,1,2,3],4) == 6
    assert find_Product([1,2,3,1,1],5) == 6
    assert find_Product([1,1,4,5,6],5) == 120

============MBPP/26============
prompt:
# Write a function to check if the given tuple list has all k elements.

def check_k_elements(test_list, K):
-------------------------------
entry_point:
check_k_elements
-------------------------------
canonical_solution:
def check_k_elements(test_list, K):
  res = True
  for tup in test_list:
    for ele in tup:
      if ele != K:
        res = False
  return (res) 
-------------------------------
test:
def check(check_k_elements):
    assert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True
    assert check_k_elements([(7, 7, 7), (7, 7)], 7) == True
    assert check_k_elements([(9, 9), (9, 9, 9, 9)], 7) == False

============MBPP/27============
prompt:
# Write a python function to remove all digits from a list of strings.
import re  
def remove(list):
-------------------------------
entry_point:
remove
-------------------------------
canonical_solution:
import re  
def remove(list): 
    pattern = '[0-9]'
    list = [re.sub(pattern, '', i) for i in list] 
    return list
-------------------------------
test:
def check(remove):
    assert remove(['4words', '3letters', '4digits']) == ['words', 'letters', 'digits']
    assert remove(['28Jan','12Jan','11Jan']) == ['Jan','Jan','Jan']
    assert remove(['wonder1','wonder2','wonder3']) == ['wonder','wonder','wonder']

============MBPP/28============
prompt:
# Write a python function to find binomial co-efficient.

def binomial_Coeff(n,k):
-------------------------------
entry_point:
binomial_Coeff
-------------------------------
canonical_solution:
def binomial_Coeff(n,k): 
    if k > n : 
       return 0
    if k==0 or k ==n : 
        return 1 
    return binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k) 
-------------------------------
test:
def check(binomial_Coeff):
    assert binomial_Coeff(5,2) == 10
    assert binomial_Coeff(4,3) == 4
    assert binomial_Coeff(3,2) == 3

============MBPP/29============
prompt:
# Write a python function to find the element occurring odd number of times.

def get_Odd_Occurrence(arr,arr_size):
-------------------------------
entry_point:
get_Odd_Occurrence
-------------------------------
canonical_solution:
def get_Odd_Occurrence(arr,arr_size):   
    for i in range(0,arr_size): 
        count = 0
        for j in range(0,arr_size): 
            if arr[i] == arr[j]: 
                count+=1     
        if (count % 2 != 0): 
            return arr[i]     
    return -1
-------------------------------
test:
def check(get_Odd_Occurrence):
    assert get_Odd_Occurrence([1,2,3,1,2,3,1],7) == 1
    assert get_Odd_Occurrence([1,2,3,2,3,1,3],7) == 3
    assert get_Odd_Occurrence([2,3,5,4,5,2,4,3,5,2,4,4,2],13) == 5

============MBPP/30============
prompt:
# Write a python function to count all the substrings starting and ending with same characters.

def check_Equality(s):
-------------------------------
entry_point:
check_Equality
-------------------------------
canonical_solution:
def check_Equality(s): 
    return (ord(s[0]) == ord(s[len(s) - 1])); 
def count_Substring_With_Equal_Ends(s): 
    result = 0; 
    n = len(s); 
    for i in range(n): 
        for j in range(1,n-i+1):  
            if (check_Equality(s[i:i+j])): 
                result+=1; 
    return result; 
-------------------------------
test:
def check(check_Equality):
    assert count_Substring_With_Equal_Ends("abc") == 3
    assert count_Substring_With_Equal_Ends("abcda") == 6
    assert count_Substring_With_Equal_Ends("ab") == 2

============MBPP/31============
prompt:
# Write a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.

def func(nums, k):
-------------------------------
entry_point:
func
-------------------------------
canonical_solution:
def func(nums, k):
    import collections
    d = collections.defaultdict(int)
    for row in nums:
        for i in row:
            d[i] += 1
    temp = []
    import heapq
    for key, v in d.items():
        if len(temp) < k:
            temp.append((v, key))
            if len(temp) == k:
                heapq.heapify(temp)
        else:
            if v > temp[0][0]:
                heapq.heappop(temp)
                heapq.heappush(temp, (v, key))
    result = []
    while temp:
        v, key = heapq.heappop(temp)
        result.append(key)
    return result
-------------------------------
test:
def check(func):
    assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]
    assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],1)==[1]
    assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],5)==[6, 5, 7, 8, 1]

============MBPP/32============
prompt:
# Write a python function to find the largest prime factor of a given number.
import math 
def max_Prime_Factors (n):
-------------------------------
entry_point:
max_Prime_Factors
-------------------------------
canonical_solution:
import math 
def max_Prime_Factors (n): 
    maxPrime = -1 
    while n%2 == 0: 
        maxPrime = 2
        n >>= 1    
    for i in range(3,int(math.sqrt(n))+1,2): 
        while n % i == 0: 
            maxPrime = i 
            n = n / i 
    if n > 2: 
        maxPrime = n  
    return int(maxPrime)
-------------------------------
test:
def check(max_Prime_Factors):
    assert max_Prime_Factors(15) == 5
    assert max_Prime_Factors(6) == 3
    assert max_Prime_Factors(2) == 2

============MBPP/33============
prompt:
# Write a python function to convert a decimal number to binary number.

def decimal_To_Binary(N):
-------------------------------
entry_point:
decimal_To_Binary
-------------------------------
canonical_solution:
def decimal_To_Binary(N): 
    B_Number = 0
    cnt = 0
    while (N != 0): 
        rem = N % 2
        c = pow(10,cnt)  
        B_Number += rem*c  
        N //= 2 
        cnt += 1
    return B_Number  
-------------------------------
test:
def check(decimal_To_Binary):
    assert decimal_To_Binary(10) == 1010
    assert decimal_To_Binary(1) == 1
    assert decimal_To_Binary(20) == 10100

============MBPP/34============
prompt:
# Write a python function to find the missing number in a sorted array.

def find_missing(ar,N):
-------------------------------
entry_point:
find_missing
-------------------------------
canonical_solution:
def find_missing(ar,N): 
    l = 0
    r = N - 1
    while (l <= r):  
        mid = (l + r) / 2
        mid= int (mid) 
        if (ar[mid] != mid + 1 and ar[mid - 1] == mid): 
            return (mid + 1)  
        elif (ar[mid] != mid + 1): 
            r = mid - 1 
        else: 
            l = mid + 1
    return (-1) 
-------------------------------
test:
def check(find_missing):
    assert find_missing([1,2,3,5],4) == 4
    assert find_missing([1,3,4,5],4) == 2
    assert find_missing([1,2,3,5,6,7],5) == 4

============MBPP/35============
prompt:
# Write a function to find the n-th rectangular number.

def find_rect_num(n):
-------------------------------
entry_point:
find_rect_num
-------------------------------
canonical_solution:
def find_rect_num(n):
  return n*(n + 1) 
-------------------------------
test:
def check(find_rect_num):
    assert find_rect_num(4) == 20
    assert find_rect_num(5) == 30
    assert find_rect_num(6) == 42

============MBPP/36============
prompt:
# Write a python function to find the nth digit in the proper fraction of two given numbers.

def find_Nth_Digit(p,q,N) :
-------------------------------
entry_point:
find_Nth_Digit
-------------------------------
canonical_solution:
def find_Nth_Digit(p,q,N) :  
    while (N > 0) : 
        N -= 1;  
        p *= 10;  
        res = p // q;  
        p %= q;  
    return res;  
-------------------------------
test:
def check(find_Nth_Digit):
    assert find_Nth_Digit(1,2,1) == 5
    assert find_Nth_Digit(3,5,1) == 6
    assert find_Nth_Digit(5,6,5) == 3

============MBPP/37============
prompt:
# Write a function to sort a given mixed list of integers and strings.

def sort_mixed_list(mixed_list):
-------------------------------
entry_point:
sort_mixed_list
-------------------------------
canonical_solution:
def sort_mixed_list(mixed_list):
    int_part = sorted([i for i in mixed_list if type(i) is int])
    str_part = sorted([i for i in mixed_list if type(i) is str])
    return int_part + str_part
-------------------------------
test:
def check(sort_mixed_list):
    assert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']
    assert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']
    assert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']

============MBPP/38============
prompt:
# Write a function to find the division of first even and odd number of a given list.

def div_even_odd(list1):
-------------------------------
entry_point:
div_even_odd
-------------------------------
canonical_solution:
def div_even_odd(list1):
    first_even = next((el for el in list1 if el%2==0),-1)
    first_odd = next((el for el in list1 if el%2!=0),-1)
    return (first_even/first_odd)
-------------------------------
test:
def check(div_even_odd):
    assert div_even_odd([1,3,5,7,4,1,6,8])==4
    assert div_even_odd([1,2,3,4,5,6,7,8,9,10])==2
    assert div_even_odd([1,5,7,9,10])==10

============MBPP/39============
prompt:
# Write a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.
import heapq
from collections import Counter
def rearange_string(S):
-------------------------------
entry_point:
rearange_string
-------------------------------
canonical_solution:
import heapq
from collections import Counter
def rearange_string(S):
    ctr = Counter(S)
    heap = [(-value, key) for key, value in ctr.items()]
    heapq.heapify(heap)
    if (-heap[0][0]) * 2 > len(S) + 1: 
        return ""
    ans = []
    while len(heap) >= 2:
        nct1, char1 = heapq.heappop(heap)
        nct2, char2 = heapq.heappop(heap)
        ans.extend([char1, char2])
        if nct1 + 1: heapq.heappush(heap, (nct1 + 1, char1))
        if nct2 + 1: heapq.heappush(heap, (nct2 + 1, char2))
    return "".join(ans) + (heap[0][1] if heap else "")
-------------------------------
test:
def check(rearange_string):
    assert rearange_string("aab")==('aba')
    assert rearange_string("aabb")==('abab')
    assert rearange_string("abccdd")==('cdabcd')

============MBPP/40============
prompt:
# Write a function to find frequency of the elements in a given list of lists using collections module.
from collections import Counter
from itertools import chain
def freq_element(nums):
-------------------------------
entry_point:
freq_element
-------------------------------
canonical_solution:
from collections import Counter
from itertools import chain
def freq_element(nums):
  result = Counter(chain.from_iterable(nums))
  return result
-------------------------------
test:
def check(freq_element):
    assert freq_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]])==({2: 3, 1: 2, 5: 2, 3: 1, 4: 1, 6: 1, 7: 1, 9: 1})
    assert freq_element([[1,2,3,4],[5,6,7,8],[9,10,11,12]])==({1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1})
    assert freq_element([[15,20,30,40],[80,90,100,110],[30,30,80,90]])==({30: 3, 80: 2, 90: 2, 15: 1, 20: 1, 40: 1, 100: 1, 110: 1})

============MBPP/41============
prompt:
# Write a function to filter even numbers using lambda function.

def filter_evennumbers(nums):
-------------------------------
entry_point:
filter_evennumbers
-------------------------------
canonical_solution:
def filter_evennumbers(nums):
 even_nums = list(filter(lambda x: x%2 == 0, nums))
 return even_nums
-------------------------------
test:
def check(filter_evennumbers):
    assert filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 4, 6, 8, 10]
    assert filter_evennumbers([10,20,45,67,84,93])==[10,20,84]
    assert filter_evennumbers([5,7,9,8,6,4,3])==[8,6,4]

============MBPP/42============
prompt:
# Write a python function to find the sum of repeated elements in a given array.

def find_Sum(arr,n):
-------------------------------
entry_point:
find_Sum
-------------------------------
canonical_solution:
def find_Sum(arr,n): 
    return sum([x for x in arr if arr.count(x) > 1])
-------------------------------
test:
def check(find_Sum):
    assert find_Sum([1,2,3,1,1,4,5,6],8) == 3
    assert find_Sum([1,2,3,1,1],5) == 3
    assert find_Sum([1,1,2],3) == 2

============MBPP/43============
prompt:
# Write a function to find sequences of lowercase letters joined with an underscore using regex.
import re
def text_match(text):
-------------------------------
entry_point:
text_match
-------------------------------
canonical_solution:
import re
def text_match(text):
  patterns = '^[a-z]+_[a-z]+$'
  if re.search(patterns,  text):
    return ('Found a match!')
  else:
    return ('Not matched!')
-------------------------------
test:
def check(text_match):
    assert text_match("aab_cbbbc") == 'Found a match!'
    assert text_match("aab_Abbbc") == 'Not matched!'
    assert text_match("Aaab_abbbc") == 'Not matched!'

============MBPP/44============
prompt:
# Write a function that matches a word at the beginning of a string.
import re
def text_match_string(text):
-------------------------------
entry_point:
text_match_string
-------------------------------
canonical_solution:
import re
def text_match_string(text):
        patterns = '^\w+'
        if re.search(patterns,  text):
                return 'Found a match!'
        else:
                return 'Not matched!'
-------------------------------
test:
def check(text_match_string):
    assert text_match_string(" python")==('Not matched!')
    assert text_match_string("python")==('Found a match!')
    assert text_match_string("  lang")==('Not matched!')

============MBPP/45============
prompt:
# Write a function to find the gcd of the given array elements.

def find_gcd(x, y):
-------------------------------
entry_point:
find_gcd
-------------------------------
canonical_solution:
def find_gcd(x, y): 
	while(y): 
		x, y = y, x % y 
	return x 
def get_gcd(l):
  num1 = l[0]
  num2 = l[1]
  gcd = find_gcd(num1, num2)
  for i in range(2, len(l)):
    gcd = find_gcd(gcd, l[i])
  return gcd
-------------------------------
test:
def check(find_gcd):
    assert get_gcd([2, 4, 6, 8, 16]) == 2
    assert get_gcd([1, 2, 3]) == 1
    assert get_gcd([2, 4, 6, 8]) == 2 

============MBPP/46============
prompt:
# Write a python function to determine whether all the numbers are different from each other are not.

def test_distinct(data):
-------------------------------
entry_point:
test_distinct
-------------------------------
canonical_solution:
def test_distinct(data):
  if len(data) == len(set(data)):
    return True
  else:
    return False;
-------------------------------
test:
def check(test_distinct):
    assert test_distinct([1,5,7,9]) == True
    assert test_distinct([2,4,5,5,7,9]) == False
    assert test_distinct([1,2,3]) == True

============MBPP/47============
prompt:
# Write a python function to find the last digit when factorial of a divides factorial of b.

def compute_Last_Digit(A,B):
-------------------------------
entry_point:
compute_Last_Digit
-------------------------------
canonical_solution:
def compute_Last_Digit(A,B): 
    variable = 1
    if (A == B): 
        return 1
    elif ((B - A) >= 5):  
        return 0
    else:   
        for i in range(A + 1,B + 1): 
            variable = (variable * (i % 10)) % 10
        return variable % 10
-------------------------------
test:
def check(compute_Last_Digit):
    assert compute_Last_Digit(2,4) == 2
    assert compute_Last_Digit(6,8) == 6
    assert compute_Last_Digit(1,2) == 2

============MBPP/48============
prompt:
# Write a python function to set all odd bits of a given number.

def odd_bit_set_number(n):
-------------------------------
entry_point:
odd_bit_set_number
-------------------------------
canonical_solution:
def odd_bit_set_number(n):
    count = 0;res = 0;temp = n
    while temp > 0:
        if count % 2 == 0:
            res |= (1 << count)
        count += 1
        temp >>= 1
    return (n | res)
-------------------------------
test:
def check(odd_bit_set_number):
    assert odd_bit_set_number(10) == 15
    assert odd_bit_set_number(20) == 21
    assert odd_bit_set_number(30) == 31

============MBPP/49============
prompt:
# Write a function to extract every first or specified element from a given two-dimensional list.

def specified_element(nums, N):
-------------------------------
entry_point:
specified_element
-------------------------------
canonical_solution:
def specified_element(nums, N):
    result = [i[N] for i in nums]
    return result
    
-------------------------------
test:
def check(specified_element):
    assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]
    assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],2)==[3, 6, 9]
    assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],1)==[2,5,1]

============MBPP/50============
prompt:
# Write a function to find the list with minimum length using lambda function.

def min_length_list(input_list):
-------------------------------
entry_point:
min_length_list
-------------------------------
canonical_solution:
def min_length_list(input_list):
    min_length = min(len(x) for x in input_list )  
    min_list = min(input_list, key = lambda i: len(i))
    return(min_length, min_list)
-------------------------------
test:
def check(min_length_list):
    assert min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])
    assert min_length_list([[1,2,3,4,5],[1,2,3,4],[1,2,3],[1,2],[1]])==(1,[1])
    assert min_length_list([[3,4,5],[6,7,8,9],[10,11,12],[1,2]])==(2,[1,2])

============MBPP/51============
prompt:
# Write a function to print check if the triangle is equilateral or not.

def check_equilateral(x,y,z):
-------------------------------
entry_point:
check_equilateral
-------------------------------
canonical_solution:
def check_equilateral(x,y,z):
  if x == y == z:
	   return True
  else:
     return False
-------------------------------
test:
def check(check_equilateral):
    assert check_equilateral(6,8,12)==False 
    assert check_equilateral(6,6,12)==False
    assert check_equilateral(6,6,6)==True

============MBPP/52============
prompt:
# Write a function to caluclate area of a parallelogram.

def parallelogram_area(b,h):
-------------------------------
entry_point:
parallelogram_area
-------------------------------
canonical_solution:
def parallelogram_area(b,h):
  area=b*h
  return area
-------------------------------
test:
def check(parallelogram_area):
    assert parallelogram_area(10,20)==200
    assert parallelogram_area(15,20)==300
    assert parallelogram_area(8,9)==72

============MBPP/53============
prompt:
# Write a python function to check whether the first and last characters of a given string are equal or not.

def check_Equality(str):
-------------------------------
entry_point:
check_Equality
-------------------------------
canonical_solution:
def check_Equality(str):
  if (str[0] == str[-1]):  
    return ("Equal") 
  else:  
    return ("Not Equal") 
-------------------------------
test:
def check(check_Equality):
    assert check_Equality("abcda") == "Equal"
    assert check_Equality("ab") == "Not Equal"
    assert check_Equality("mad") == "Not Equal"

============MBPP/54============
prompt:
# Write a function to sort the given array by using counting sort.

def counting_sort(my_list):
-------------------------------
entry_point:
counting_sort
-------------------------------
canonical_solution:
def counting_sort(my_list):
    max_value = 0
    for i in range(len(my_list)):
        if my_list[i] > max_value:
            max_value = my_list[i]
    buckets = [0] * (max_value + 1)
    for i in my_list:
        buckets[i] += 1
    i = 0
    for j in range(max_value + 1):
         for a in range(buckets[j]):
             my_list[i] = j
             i += 1
    return my_list
-------------------------------
test:
def check(counting_sort):
    assert counting_sort([1,23,4,5,6,7,8]) == [1, 4, 5, 6, 7, 8, 23]
    assert counting_sort([12, 9, 28, 33, 69, 45]) == [9, 12, 28, 33, 45, 69]
    assert counting_sort([8, 4, 14, 3, 2, 1]) == [1, 2, 3, 4, 8, 14]

============MBPP/55============
prompt:
# Write a function to find t-nth term of geometric series.
import math
def tn_gp(a,n,r):
-------------------------------
entry_point:
tn_gp
-------------------------------
canonical_solution:
import math
def tn_gp(a,n,r):
  tn = a * (math.pow(r, n - 1))
  return tn
-------------------------------
test:
def check(tn_gp):
    assert tn_gp(1,5,2)==16
    assert tn_gp(1,5,4)==256
    assert tn_gp(2,6,3)==486

============MBPP/56============
prompt:
# Write a python function to check if a given number is one less than twice its reverse.

def rev(num):
-------------------------------
entry_point:
rev
-------------------------------
canonical_solution:
def rev(num):    
    rev_num = 0
    while (num > 0):  
        rev_num = (rev_num * 10 + num % 10) 
        num = num // 10  
    return rev_num  
def check(n):    
    return (2 * rev(n) == n + 1)  
-------------------------------
test:
def check(rev):
    assert check(70) == False
    assert check(23) == False
    assert check(73) == True

============MBPP/57============
prompt:
# Write a python function to find the largest number that can be formed with the given digits.

def find_Max_Num(arr,n) :
-------------------------------
entry_point:
find_Max_Num
-------------------------------
canonical_solution:
def find_Max_Num(arr,n) : 
    arr.sort(reverse = True) 
    num = arr[0] 
    for i in range(1,n) : 
        num = num * 10 + arr[i] 
    return num 
-------------------------------
test:
def check(find_Max_Num):
    assert find_Max_Num([1,2,3],3) == 321
    assert find_Max_Num([4,5,6,1],4) == 6541
    assert find_Max_Num([1,2,3,9],4) == 9321

============MBPP/58============
prompt:
# Write a python function to check whether the given two integers have opposite sign or not.

def opposite_Signs(x,y):
-------------------------------
entry_point:
opposite_Signs
-------------------------------
canonical_solution:
def opposite_Signs(x,y): 
    return ((x ^ y) < 0); 
-------------------------------
test:
def check(opposite_Signs):
    assert opposite_Signs(1,-2) == True
    assert opposite_Signs(3,2) == False
    assert opposite_Signs(-10,-10) == False

============MBPP/59============
prompt:
# Write a function to find the nth octagonal number.

def is_octagonal(n):
-------------------------------
entry_point:
is_octagonal
-------------------------------
canonical_solution:
def is_octagonal(n): 
	return 3 * n * n - 2 * n 
-------------------------------
test:
def check(is_octagonal):
    assert is_octagonal(5) == 65
    assert is_octagonal(10) == 280
    assert is_octagonal(15) == 645

============MBPP/60============
prompt:
# Write a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.

def max_len_sub( arr, n):
-------------------------------
entry_point:
max_len_sub
-------------------------------
canonical_solution:
def max_len_sub( arr, n): 
	mls=[] 
	max = 0
	for i in range(n): 
		mls.append(1) 
	for i in range(n): 
		for j in range(i): 
			if (abs(arr[i] - arr[j]) <= 1 and mls[i] < mls[j] + 1): 
				mls[i] = mls[j] + 1
	for i in range(n): 
		if (max < mls[i]): 
			max = mls[i] 
	return max
-------------------------------
test:
def check(max_len_sub):
    assert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5
    assert max_len_sub([-2, -1, 5, -1, 4, 0, 3], 7) == 4
    assert max_len_sub([9, 11, 13, 15, 18], 5) == 1

============MBPP/61============
prompt:
# Write a python function to count number of substrings with the sum of digits equal to their length.
from collections import defaultdict
def count_Substrings(s,n):
-------------------------------
entry_point:
count_Substrings
-------------------------------
canonical_solution:
from collections import defaultdict
def count_Substrings(s,n):
    count,sum = 0,0
    mp = defaultdict(lambda : 0)
    mp[0] += 1
    for i in range(n):
        sum += ord(s[i]) - ord('0')
        count += mp[sum - (i + 1)]
        mp[sum - (i + 1)] += 1
    return count
-------------------------------
test:
def check(count_Substrings):
    assert count_Substrings('112112',6) == 6
    assert count_Substrings('111',3) == 6
    assert count_Substrings('1101112',7) == 12

============MBPP/62============
prompt:
# Write a python function to find smallest number in a list.

def smallest_num(xs):
-------------------------------
entry_point:
smallest_num
-------------------------------
canonical_solution:
def smallest_num(xs):
  return min(xs)

-------------------------------
test:
def check(smallest_num):
    assert smallest_num([10, 20, 1, 45, 99]) == 1
    assert smallest_num([1, 2, 3]) == 1
    assert smallest_num([45, 46, 50, 60]) == 45

============MBPP/63============
prompt:
# Write a function to find the maximum difference between available pairs in the given tuple list.

def max_difference(test_list):
-------------------------------
entry_point:
max_difference
-------------------------------
canonical_solution:
def max_difference(test_list):
  temp = [abs(b - a) for a, b in test_list]
  res = max(temp)
  return (res) 
-------------------------------
test:
def check(max_difference):
    assert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7
    assert max_difference([(4, 6), (2, 17), (9, 13), (11, 12)]) == 15
    assert max_difference([(12, 35), (21, 27), (13, 23), (41, 22)]) == 23

============MBPP/64============
prompt:
# Write a function to sort a list of tuples using lambda.

def subject_marks(subjectmarks):
-------------------------------
entry_point:
subject_marks
-------------------------------
canonical_solution:
def subject_marks(subjectmarks):
#subject_marks = [('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])
 subjectmarks.sort(key = lambda x: x[1])
 return subjectmarks
-------------------------------
test:
def check(subject_marks):
    assert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]
    assert subject_marks([('Telugu',49),('Hindhi',54),('Social',33)])==([('Social',33),('Telugu',49),('Hindhi',54)])
    assert subject_marks([('Physics',96),('Chemistry',97),('Biology',45)])==([('Biology',45),('Physics',96),('Chemistry',97)])

============MBPP/65============
prompt:
# Write a function of recursion list sum.

def recursive_list_sum(data_list):
-------------------------------
entry_point:
recursive_list_sum
-------------------------------
canonical_solution:
def recursive_list_sum(data_list):
	total = 0
	for element in data_list:
		if type(element) == type([]):
			total = total + recursive_list_sum(element)
		else:
			total = total + element
	return total
-------------------------------
test:
def check(recursive_list_sum):
    assert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21
    assert recursive_list_sum(([7, 10, [15,14],[19,41]]))==106
    assert recursive_list_sum(([10, 20, [30,40],[50,60]]))==210

============MBPP/66============
prompt:
# Write a python function to count positive numbers in a list.

def pos_count(list):
-------------------------------
entry_point:
pos_count
-------------------------------
canonical_solution:
def pos_count(list):
  pos_count= 0
  for num in list: 
    if num >= 0: 
      pos_count += 1
  return pos_count 
-------------------------------
test:
def check(pos_count):
    assert pos_count([1,-2,3,-4]) == 2
    assert pos_count([3,4,5,-1]) == 3
    assert pos_count([1,2,3,4]) == 4

============MBPP/67============
prompt:
# Write a function to find the number of ways to partition a set of bell numbers.

def bell_number(n):
-------------------------------
entry_point:
bell_number
-------------------------------
canonical_solution:
def bell_number(n):   
    bell = [[0 for i in range(n+1)] for j in range(n+1)] 
    bell[0][0] = 1
    for i in range(1, n+1): 
        bell[i][0] = bell[i-1][i-1]  
        for j in range(1, i+1): 
            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]   
    return bell[n][0] 
-------------------------------
test:
def check(bell_number):
    assert bell_number(2)==2
    assert bell_number(10)==115975
    assert bell_number(56)==6775685320645824322581483068371419745979053216268760300

============MBPP/68============
prompt:
# Write a python function to check whether the given array is monotonic or not.

def is_Monotonic(A):
-------------------------------
entry_point:
is_Monotonic
-------------------------------
canonical_solution:
def is_Monotonic(A): 
    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or
            all(A[i] >= A[i + 1] for i in range(len(A) - 1))) 
-------------------------------
test:
def check(is_Monotonic):
    assert is_Monotonic([6, 5, 4, 4]) == True
    assert is_Monotonic([1, 2, 2, 3]) == True
    assert is_Monotonic([1, 3, 2]) == False

============MBPP/69============
prompt:
# Write a function to check whether a list contains the given sublist or not.

def is_sublist(l, s):
-------------------------------
entry_point:
is_sublist
-------------------------------
canonical_solution:
def is_sublist(l, s):
	sub_set = False
	if s == []:
		sub_set = True
	elif s == l:
		sub_set = True
	elif len(s) > len(l):
		sub_set = False
	else:
		for i in range(len(l)):
			if l[i] == s[0]:
				n = 1
				while (n < len(s)) and (l[i+n] == s[n]):
					n += 1				
				if n == len(s):
					sub_set = True
	return sub_set
-------------------------------
test:
def check(is_sublist):
    assert is_sublist([2,4,3,5,7],[3,7])==False
    assert is_sublist([2,4,3,5,7],[4,3])==True
    assert is_sublist([2,4,3,5,7],[1,6])==False

============MBPP/70============
prompt:
# Write a function to find whether all the given tuples have equal length or not.

def find_equal_tuple(Input, k):
-------------------------------
entry_point:
find_equal_tuple
-------------------------------
canonical_solution:
def find_equal_tuple(Input, k):
  flag = 1
  for tuple in Input:
    if len(tuple) != k:
      flag = 0
      break
  return flag
def get_equal(Input, k):
  if find_equal_tuple(Input, k) == 1:
    return ("All tuples have same length")
  else:
    return ("All tuples do not have same length")
-------------------------------
test:
def check(find_equal_tuple):
    assert get_equal([(11, 22, 33), (44, 55, 66)], 3) == 'All tuples have same length'
    assert get_equal([(1, 2, 3), (4, 5, 6, 7)], 3) == 'All tuples do not have same length'
    assert get_equal([(1, 2), (3, 4)], 2) == 'All tuples have same length'

============MBPP/71============
prompt:
# Write a function to sort a list of elements using comb sort.

def comb_sort(nums):
-------------------------------
entry_point:
comb_sort
-------------------------------
canonical_solution:
def comb_sort(nums):
    shrink_fact = 1.3
    gaps = len(nums)
    swapped = True
    i = 0
    while gaps > 1 or swapped:
        gaps = int(float(gaps) / shrink_fact)
        swapped = False
        i = 0
        while gaps + i < len(nums):
            if nums[i] > nums[i+gaps]:
                nums[i], nums[i+gaps] = nums[i+gaps], nums[i]
                swapped = True
            i += 1
    return nums
-------------------------------
test:
def check(comb_sort):
    assert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]
    assert comb_sort([41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41]
    assert comb_sort([99, 15, 13, 47]) == [13, 15, 47, 99]

============MBPP/72============
prompt:
# Write a python function to check whether the given number can be represented as difference of two squares or not.

def dif_Square(n):
-------------------------------
entry_point:
dif_Square
-------------------------------
canonical_solution:
def dif_Square(n): 
    if (n % 4 != 2): 
        return True
    return False
-------------------------------
test:
def check(dif_Square):
    assert dif_Square(5) == True
    assert dif_Square(10) == False
    assert dif_Square(15) == True

============MBPP/73============
prompt:
# Write a function to split the given string with multiple delimiters by using regex.
import re
def multiple_split(text):
-------------------------------
entry_point:
multiple_split
-------------------------------
canonical_solution:
import re
def multiple_split(text):
  return (re.split('; |, |\*|\n',text))
-------------------------------
test:
def check(multiple_split):
    assert multiple_split('Forces of the \ndarkness*are coming into the play.') == ['Forces of the ', 'darkness', 'are coming into the play.']
    assert multiple_split('Mi Box runs on the \n Latest android*which has google assistance and chromecast.') == ['Mi Box runs on the ', ' Latest android', 'which has google assistance and chromecast.']
    assert multiple_split('Certain services\nare subjected to change*over the seperate subscriptions.') == ['Certain services', 'are subjected to change', 'over the seperate subscriptions.']

============MBPP/74============
prompt:
# Write a function to check whether it follows the sequence given in the patterns array.

def is_samepatterns(colors, patterns):
-------------------------------
entry_point:
is_samepatterns
-------------------------------
canonical_solution:
def is_samepatterns(colors, patterns):    
    if len(colors) != len(patterns):
        return False    
    sdict = {}
    pset = set()
    sset = set()    
    for i in range(len(patterns)):
        pset.add(patterns[i])
        sset.add(colors[i])
        if patterns[i] not in sdict.keys():
            sdict[patterns[i]] = []

        keys = sdict[patterns[i]]
        keys.append(colors[i])
        sdict[patterns[i]] = keys

    if len(pset) != len(sset):
        return False   

    for values in sdict.values():

        for i in range(len(values) - 1):
            if values[i] != values[i+1]:
                return False

    return True
-------------------------------
test:
def check(is_samepatterns):
    assert is_samepatterns(["red","green","green"], ["a", "b", "b"])==True 
    assert is_samepatterns(["red","green","greenn"], ["a","b","b"])==False 
    assert is_samepatterns(["red","green","greenn"], ["a","b"])==False 

============MBPP/75============
prompt:
# Write a function to find tuples which have all elements divisible by k from the given list of tuples.

def find_tuples(test_list, K):
-------------------------------
entry_point:
find_tuples
-------------------------------
canonical_solution:
def find_tuples(test_list, K):
  res = [sub for sub in test_list if all(ele % K == 0 for ele in sub)]
  return (str(res)) 
-------------------------------
test:
def check(find_tuples):
    assert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == '[(6, 24, 12)]'
    assert find_tuples([(5, 25, 30), (4, 2, 3), (7, 8, 9)], 5) == '[(5, 25, 30)]'
    assert find_tuples([(7, 9, 16), (8, 16, 4), (19, 17, 18)], 4) == '[(8, 16, 4)]'

============MBPP/76============
prompt:
# Write a python function to count the number of squares in a rectangle.

def count_Squares(m,n):
-------------------------------
entry_point:
count_Squares
-------------------------------
canonical_solution:
def count_Squares(m,n):
    if(n < m):
        temp = m
        m = n
        n = temp
    return ((m * (m + 1) * (2 * m + 1) / 6 + (n - m) * m * (m + 1) / 2))
-------------------------------
test:
def check(count_Squares):
    assert count_Squares(4,3) == 20
    assert count_Squares(2,2) == 5
    assert count_Squares(1,1) == 1

============MBPP/77============
prompt:
# Write a python function to find the difference between sum of even and odd digits.

def is_Diff(n):
-------------------------------
entry_point:
is_Diff
-------------------------------
canonical_solution:
def is_Diff(n): 
    return (n % 11 == 0) 
-------------------------------
test:
def check(is_Diff):
    assert is_Diff (12345) == False
    assert is_Diff(1212112) == True
    assert is_Diff(1212) == False

============MBPP/78============
prompt:
# Write a python function to find number of integers with odd number of set bits.

def count_With_Odd_SetBits(n):
-------------------------------
entry_point:
count_With_Odd_SetBits
-------------------------------
canonical_solution:
def count_With_Odd_SetBits(n): 
    if (n % 2 != 0): 
        return (n + 1) / 2
    count = bin(n).count('1') 
    ans = n / 2
    if (count % 2 != 0): 
        ans += 1
    return ans 
-------------------------------
test:
def check(count_With_Odd_SetBits):
    assert count_With_Odd_SetBits(5) == 3
    assert count_With_Odd_SetBits(10) == 5
    assert count_With_Odd_SetBits(15) == 8

============MBPP/79============
prompt:
# Write a python function to check whether the length of the word is odd or not.

def word_len(s):
-------------------------------
entry_point:
word_len
-------------------------------
canonical_solution:
def word_len(s): 
    s = s.split(' ')   
    for word in s:    
        if len(word)%2!=0: 
            return True  
        else:
          return False
-------------------------------
test:
def check(word_len):
    assert word_len("Hadoop") == False
    assert word_len("great") == True
    assert word_len("structure") == True

============MBPP/80============
prompt:
# Write a function to find the nth tetrahedral number.

def tetrahedral_number(n):
-------------------------------
entry_point:
tetrahedral_number
-------------------------------
canonical_solution:
def tetrahedral_number(n): 
	return (n * (n + 1) * (n + 2)) / 6
-------------------------------
test:
def check(tetrahedral_number):
    assert tetrahedral_number(5) == 35.0
    assert tetrahedral_number(6) == 56.0
    assert tetrahedral_number(7) == 84.0

============MBPP/81============
prompt:
# Write a function to zip the two given tuples.

def zip_tuples(test_tup1, test_tup2):
-------------------------------
entry_point:
zip_tuples
-------------------------------
canonical_solution:
def zip_tuples(test_tup1, test_tup2):
  res = []
  for i, j in enumerate(test_tup1):
    res.append((j, test_tup2[i % len(test_tup2)])) 
  return (res) 
-------------------------------
test:
def check(zip_tuples):
    assert zip_tuples((7, 8, 4, 5, 9, 10),(1, 5, 6) ) == [(7, 1), (8, 5), (4, 6), (5, 1), (9, 5), (10, 6)]
    assert zip_tuples((8, 9, 5, 6, 10, 11),(2, 6, 7) ) == [(8, 2), (9, 6), (5, 7), (6, 2), (10, 6), (11, 7)]
    assert zip_tuples((9, 10, 6, 7, 11, 12),(3, 7, 8) ) == [(9, 3), (10, 7), (6, 8), (7, 3), (11, 7), (12, 8)]

============MBPP/82============
prompt:
# Write a function to find the volume of a sphere.
import math
def volume_sphere(r):
-------------------------------
entry_point:
volume_sphere
-------------------------------
canonical_solution:
import math
def volume_sphere(r):
  volume=(4/3)*math.pi*r*r*r
  return volume
-------------------------------
test:
def check(volume_sphere):
    assert volume_sphere(10)==4188.790204786391
    assert volume_sphere(25)==65449.84694978735
    assert volume_sphere(20)==33510.32163829113

============MBPP/83============
prompt:
# Write a python function to find the character made by adding all the characters of the given string.

def get_Char(strr):
-------------------------------
entry_point:
get_Char
-------------------------------
canonical_solution:
def get_Char(strr):  
    summ = 0
    for i in range(len(strr)): 
        summ += (ord(strr[i]) - ord('a') + 1)  
    if (summ % 26 == 0): 
        return ord('z') 
    else: 
        summ = summ % 26
        return chr(ord('a') + summ - 1)
-------------------------------
test:
def check(get_Char):
    assert get_Char("abc") == "f"
    assert get_Char("gfg") == "t"
    assert get_Char("ab") == "c"

============MBPP/84============
prompt:
# Write a function to find the n-th number in newman conway sequence.

def sequence(n):
-------------------------------
entry_point:
sequence
-------------------------------
canonical_solution:
def sequence(n): 
	if n == 1 or n == 2: 
		return 1
	else: 
		return sequence(sequence(n-1)) + sequence(n-sequence(n-1))
-------------------------------
test:
def check(sequence):
    assert sequence(10) == 6
    assert sequence(2) == 1
    assert sequence(3) == 2

============MBPP/85============
prompt:
# Write a function to find the surface area of a sphere.
import math
def surfacearea_sphere(r):
-------------------------------
entry_point:
surfacearea_sphere
-------------------------------
canonical_solution:
import math
def surfacearea_sphere(r):
  surfacearea=4*math.pi*r*r
  return surfacearea
-------------------------------
test:
def check(surfacearea_sphere):
    assert surfacearea_sphere(10)==1256.6370614359173
    assert surfacearea_sphere(15)==2827.4333882308138
    assert surfacearea_sphere(20)==5026.548245743669

============MBPP/86============
prompt:
# Write a function to find nth centered hexagonal number.

def centered_hexagonal_number(n):
-------------------------------
entry_point:
centered_hexagonal_number
-------------------------------
canonical_solution:
def centered_hexagonal_number(n):
  return 3 * n * (n - 1) + 1
-------------------------------
test:
def check(centered_hexagonal_number):
    assert centered_hexagonal_number(10) == 271
    assert centered_hexagonal_number(2) == 7
    assert centered_hexagonal_number(9) == 217

============MBPP/87============
prompt:
# Write a function to merge three dictionaries into a single expression.
import collections as ct
def merge_dictionaries_three(dict1,dict2, dict3):
-------------------------------
entry_point:
merge_dictionaries_three
-------------------------------
canonical_solution:
import collections as ct
def merge_dictionaries_three(dict1,dict2, dict3):
    merged_dict = dict(ct.ChainMap({},dict1,dict2,dict3))
    return merged_dict
-------------------------------
test:
def check(merge_dictionaries_three):
    assert merge_dictionaries_three({ "R": "Red", "B": "Black", "P": "Pink" }, { "G": "Green", "W": "White" },{ "O": "Orange", "W": "White", "B": "Black" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}
    assert merge_dictionaries_three({ "R": "Red", "B": "Black", "P": "Pink" }, { "G": "Green", "W": "White" },{"L":"lavender","B":"Blue"})=={'W': 'White', 'P': 'Pink', 'B': 'Black', 'R': 'Red', 'G': 'Green', 'L': 'lavender'}
    assert merge_dictionaries_three({ "R": "Red", "B": "Black", "P": "Pink" },{"L":"lavender","B":"Blue"},{ "G": "Green", "W": "White" })=={'B': 'Black', 'P': 'Pink', 'R': 'Red', 'G': 'Green', 'L': 'lavender', 'W': 'White'}

============MBPP/88============
prompt:
# Write a function to get the frequency of the elements in a list.
import collections
def freq_count(list1):
-------------------------------
entry_point:
freq_count
-------------------------------
canonical_solution:
import collections
def freq_count(list1):
  freq_count= collections.Counter(list1)
  return freq_count
-------------------------------
test:
def check(freq_count):
    assert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1}) 
    assert freq_count([1,2,3,4,3,2,4,1,3,1,4])==({1:3, 2:2,3:3,4:3}) 
    assert freq_count([5,6,7,4,9,10,4,5,6,7,9,5])==({10:1,5:3,6:2,7:2,4:2,9:2}) 

============MBPP/89============
prompt:
# Write a function to find the closest smaller number than n.

def closest_num(N):
-------------------------------
entry_point:
closest_num
-------------------------------
canonical_solution:
def closest_num(N):
  return (N - 1)
-------------------------------
test:
def check(closest_num):
    assert closest_num(11) == 10
    assert closest_num(7) == 6
    assert closest_num(12) == 11

============MBPP/90============
prompt:
# Write a python function to find the length of the longest word.

def len_log(list1):
-------------------------------
entry_point:
len_log
-------------------------------
canonical_solution:
def len_log(list1):
    max=len(list1[0])
    for i in list1:
        if len(i)>max:
            max=len(i)
    return max
-------------------------------
test:
def check(len_log):
    assert len_log(["python","PHP","bigdata"]) == 7
    assert len_log(["a","ab","abc"]) == 3
    assert len_log(["small","big","tall"]) == 5

============MBPP/91============
prompt:
# Write a function to check if a substring is present in a given list of string values.

def find_substring(str1, sub_str):
-------------------------------
entry_point:
find_substring
-------------------------------
canonical_solution:
def find_substring(str1, sub_str):
   if any(sub_str in s for s in str1):
       return True
   return False
-------------------------------
test:
def check(find_substring):
    assert find_substring(["red", "black", "white", "green", "orange"],"ack")==True
    assert find_substring(["red", "black", "white", "green", "orange"],"abc")==False
    assert find_substring(["red", "black", "white", "green", "orange"],"ange")==True

============MBPP/92============
prompt:
# Write a function to check whether the given number is undulating or not.

def is_undulating(n):
-------------------------------
entry_point:
is_undulating
-------------------------------
canonical_solution:
def is_undulating(n): 
	if (len(n) <= 2): 
		return False
	for i in range(2, len(n)): 
		if (n[i - 2] != n[i]): 
			return False
	return True
-------------------------------
test:
def check(is_undulating):
    assert is_undulating("1212121") == True
    assert is_undulating("1991") == False
    assert is_undulating("121") == True

============MBPP/93============
prompt:
# Write a function to calculate the value of 'a' to the power 'b'.

def power(a,b):
-------------------------------
entry_point:
power
-------------------------------
canonical_solution:
def power(a,b):
	if b==0:
		return 1
	elif a==0:
		return 0
	elif b==1:
		return a
	else:
		return a*power(a,b-1)
-------------------------------
test:
def check(power):
    assert power(3,4) == 81
    assert power(2,3) == 8
    assert power(5,5) == 3125

============MBPP/94============
prompt:
# Write a function to extract the index minimum value record from the given tuples.
from operator import itemgetter 
def index_minimum(test_list):
-------------------------------
entry_point:
index_minimum
-------------------------------
canonical_solution:
from operator import itemgetter 
def index_minimum(test_list):
  res = min(test_list, key = itemgetter(1))[0]
  return (res) 
-------------------------------
test:
def check(index_minimum):
    assert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'
    assert index_minimum([('Yash', 185), ('Dawood', 125), ('Sanya', 175)]) == 'Dawood'
    assert index_minimum([('Sai', 345), ('Salman', 145), ('Ayesha', 96)]) == 'Ayesha'

============MBPP/95============
prompt:
# Write a python function to find the minimum length of sublist.

def Find_Min_Length(lst):
-------------------------------
entry_point:
Find_Min_Length
-------------------------------
canonical_solution:
def Find_Min_Length(lst):  
    minLength = min(len(x) for x in lst )
    return minLength 
-------------------------------
test:
def check(Find_Min_Length):
    assert Find_Min_Length([[1],[1,2]]) == 1
    assert Find_Min_Length([[1,2],[1,2,3],[1,2,3,4]]) == 2
    assert Find_Min_Length([[3,3,3],[4,4,4,4]]) == 3

============MBPP/96============
prompt:
# Write a python function to find the number of divisors of a given integer.

def divisor(n):
-------------------------------
entry_point:
divisor
-------------------------------
canonical_solution:
def divisor(n):
  for i in range(n):
    x = len([i for i in range(1,n+1) if not n % i])
  return x
-------------------------------
test:
def check(divisor):
    assert divisor(15) == 4 
    assert divisor(12) == 6
    assert divisor(9) == 3

============MBPP/97============
prompt:
# Write a function to find frequency count of list of lists.

def frequency_lists(list1):
-------------------------------
entry_point:
frequency_lists
-------------------------------
canonical_solution:
def frequency_lists(list1):
    list1 = [item for sublist in list1 for item in sublist]
    dic_data = {}
    for num in list1:
        if num in dic_data.keys():
            dic_data[num] += 1
        else:
            key = num
            value = 1
            dic_data[key] = value
    return dic_data

-------------------------------
test:
def check(frequency_lists):
    assert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}
    assert frequency_lists([[1,2,3,4],[5,6,7,8],[9,10,11,12]])=={1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1,10:1,11:1,12:1}
    assert frequency_lists([[20,30,40,17],[18,16,14,13],[10,20,30,40]])=={20:2,30:2,40:2,17: 1,18:1, 16: 1,14: 1,13: 1, 10: 1}

============MBPP/98============
prompt:
# Write a function to multiply all the numbers in a list and divide with the length of the list.

def multiply_num(numbers):
-------------------------------
entry_point:
multiply_num
-------------------------------
canonical_solution:
def multiply_num(numbers):  
    total = 1
    for x in numbers:
        total *= x  
    return total/len(numbers) 
-------------------------------
test:
def check(multiply_num):
    assert multiply_num((8, 2, 3, -1, 7))==-67.2
    assert multiply_num((-10,-20,-30))==-2000.0
    assert multiply_num((19,15,18))==1710.0

============MBPP/99============
prompt:
# Write a function to convert the given decimal number to its binary equivalent.

def decimal_to_binary(n):
-------------------------------
entry_point:
decimal_to_binary
-------------------------------
canonical_solution:
def decimal_to_binary(n): 
    return bin(n).replace("0b","") 
-------------------------------
test:
def check(decimal_to_binary):
    assert decimal_to_binary(8) == '1000'
    assert decimal_to_binary(18) == '10010'
    assert decimal_to_binary(7) == '111' 

============MBPP/100============
prompt:
# Write a function to find the next smallest palindrome of a specified number.
import sys
def next_smallest_palindrome(num):
-------------------------------
entry_point:
next_smallest_palindrome
-------------------------------
canonical_solution:
import sys
def next_smallest_palindrome(num):
    numstr = str(num)
    for i in range(num+1,sys.maxsize):
        if str(i) == str(i)[::-1]:
            return i
-------------------------------
test:
def check(next_smallest_palindrome):
    assert next_smallest_palindrome(99)==101
    assert next_smallest_palindrome(1221)==1331
    assert next_smallest_palindrome(120)==121

============MBPP/101============
prompt:
# Write a function to find the kth element in the given array.

def kth_element(arr, n, k):
-------------------------------
entry_point:
kth_element
-------------------------------
canonical_solution:
def kth_element(arr, n, k):
  for i in range(n):
    for j in range(0, n-i-1):
      if arr[j] > arr[j+1]:
        arr[j], arr[j+1] == arr[j+1], arr[j]
  return arr[k-1]
-------------------------------
test:
def check(kth_element):
    assert kth_element([12,3,5,7,19], 5, 2) == 3
    assert kth_element([17,24,8,23], 4, 3) == 8
    assert kth_element([16,21,25,36,4], 5, 4) == 36

============MBPP/102============
prompt:
# Write a function to convert snake case string to camel case string.

def snake_to_camel(word):
-------------------------------
entry_point:
snake_to_camel
-------------------------------
canonical_solution:
def snake_to_camel(word):
        import re
        return ''.join(x.capitalize() or '_' for x in word.split('_'))
-------------------------------
test:
def check(snake_to_camel):
    assert snake_to_camel('python_program')=='PythonProgram'
    assert snake_to_camel('python_language')==('PythonLanguage')
    assert snake_to_camel('programming_language')==('ProgrammingLanguage')

============MBPP/103============
prompt:
# Write a function to find eulerian number a(n, m).

def eulerian_num(n, m):
-------------------------------
entry_point:
eulerian_num
-------------------------------
canonical_solution:
def eulerian_num(n, m): 
	if (m >= n or n == 0): 
		return 0 
	if (m == 0): 
		return 1 
	return ((n - m) * eulerian_num(n - 1, m - 1) +(m + 1) * eulerian_num(n - 1, m))
-------------------------------
test:
def check(eulerian_num):
    assert eulerian_num(3, 1) == 4
    assert eulerian_num(4, 1) == 11
    assert eulerian_num(5, 3) == 26

============MBPP/104============
prompt:
# Write a function to sort each sublist of strings in a given list of lists using lambda function.

def sort_sublists(input_list):
-------------------------------
entry_point:
sort_sublists
-------------------------------
canonical_solution:
def sort_sublists(input_list):
    result = [sorted(x, key = lambda x:x[0]) for x in input_list] 
    return result
-------------------------------
test:
def check(sort_sublists):
    assert sort_sublists((["green", "orange"], ["black", "white"], ["white", "black", "orange"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]
    assert sort_sublists(([" red ","green" ],["blue "," black"],[" orange","brown"]))==[[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]
    assert sort_sublists((["zilver","gold"], ["magnesium","aluminium"], ["steel", "bronze"]))==[['gold', 'zilver'],['aluminium', 'magnesium'], ['bronze', 'steel']]

============MBPP/105============
prompt:
# Write a python function to count true booleans in the given list.

def count(lst):
-------------------------------
entry_point:
count
-------------------------------
canonical_solution:
def count(lst):   
    return sum(lst) 
-------------------------------
test:
def check(count):
    assert count([True,False,True]) == 2
    assert count([False,False]) == 0
    assert count([True,True,True]) == 3

============MBPP/106============
prompt:
# Write a function to add the given list to the given tuples.

def add_lists(test_list, test_tup):
-------------------------------
entry_point:
add_lists
-------------------------------
canonical_solution:
def add_lists(test_list, test_tup):
  res = tuple(list(test_tup) + test_list)
  return (res) 
-------------------------------
test:
def check(add_lists):
    assert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)
    assert add_lists([6, 7, 8], (10, 11)) == (10, 11, 6, 7, 8)
    assert add_lists([7, 8, 9], (11, 12)) == (11, 12, 7, 8, 9)

============MBPP/107============
prompt:
# Write a python function to count hexadecimal numbers for a given range.

def count_Hexadecimal(L,R) :
-------------------------------
entry_point:
count_Hexadecimal
-------------------------------
canonical_solution:
def count_Hexadecimal(L,R) :  
    count = 0;  
    for i in range(L,R + 1) : 
        if (i >= 10 and i <= 15) : 
            count += 1;  
        elif (i > 15) : 
            k = i;  
            while (k != 0) :  
                if (k % 16 >= 10) : 
                    count += 1;  
                k = k // 16;  
    return count;  
-------------------------------
test:
def check(count_Hexadecimal):
    assert count_Hexadecimal(10,15) == 6
    assert count_Hexadecimal(2,4) == 0
    assert count_Hexadecimal(15,16) == 1

============MBPP/108============
prompt:
# Write a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.
import heapq
def merge_sorted_list(num1,num2,num3):
-------------------------------
entry_point:
merge_sorted_list
-------------------------------
canonical_solution:
import heapq
def merge_sorted_list(num1,num2,num3):
  num1=sorted(num1)
  num2=sorted(num2)
  num3=sorted(num3)
  result = heapq.merge(num1,num2,num3)
  return list(result)
-------------------------------
test:
def check(merge_sorted_list):
    assert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]
    assert merge_sorted_list([1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12])==[1, 1, 2, 3, 4, 5, 5, 6, 7, 7, 8, 8, 9, 11, 12]
    assert merge_sorted_list([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1],[25, 35, 22, 85, 14, 65, 75, 25, 58],[12, 74, 9, 50, 61, 41])==[1, 2, 3, 4, 7, 8, 9, 9, 9, 10, 12, 14, 14, 18, 22, 25, 25, 35, 41, 50, 58, 61, 65, 74, 75, 85]

============MBPP/109============
prompt:
# Write a python function to find the count of rotations of a binary string with odd value.

def odd_Equivalent(s,n):
-------------------------------
entry_point:
odd_Equivalent
-------------------------------
canonical_solution:
def odd_Equivalent(s,n): 
    count=0
    for i in range(0,n): 
        if (s[i] == '1'): 
            count = count + 1
    return count 
-------------------------------
test:
def check(odd_Equivalent):
    assert odd_Equivalent("011001",6) == 3
    assert odd_Equivalent("11011",5) == 4
    assert odd_Equivalent("1010",4) == 2

============MBPP/110============
prompt:
# Write a function to extract the ranges that are missing from the given list with the given start range and end range values.

def extract_missing(test_list, strt_val, stop_val):
-------------------------------
entry_point:
extract_missing
-------------------------------
canonical_solution:
def extract_missing(test_list, strt_val, stop_val):
  res = []
  for sub in test_list:
    if sub[0] > strt_val:
      res.append((strt_val, sub[0]))
      strt_val = sub[1]
    if strt_val < stop_val:
      res.append((strt_val, stop_val))
  return (res) 
-------------------------------
test:
def check(extract_missing):
    assert extract_missing([(6, 9), (15, 34), (48, 70)], 2, 100) == [(2, 6), (9, 100), (9, 15), (34, 100), (34, 48), (70, 100)]
    assert extract_missing([(7, 2), (15, 19), (38, 50)], 5, 60) == [(5, 7), (2, 60), (2, 15), (19, 60), (19, 38), (50, 60)]
    assert extract_missing([(7, 2), (15, 19), (38, 50)], 1, 52) == [(1, 7), (2, 52), (2, 15), (19, 52), (19, 38), (50, 52)]

============MBPP/111============
prompt:
# Write a function to find common elements in given nested lists. * list item * list item * list item * list item

def common_in_nested_lists(nestedlist):
-------------------------------
entry_point:
common_in_nested_lists
-------------------------------
canonical_solution:
def common_in_nested_lists(nestedlist):
    result = list(set.intersection(*map(set, nestedlist)))
    return result
-------------------------------
test:
def check(common_in_nested_lists):
    assert common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])==[18, 12]
    assert common_in_nested_lists([[12, 5, 23, 25, 45], [7, 11, 5, 23, 28], [1, 5, 8, 18, 23, 16]])==[5,23]
    assert common_in_nested_lists([[2, 3,4, 1], [4, 5], [6,4, 8],[4, 5], [6, 8,4]])==[4]

============MBPP/112============
prompt:
# Write a python function to find the perimeter of a cylinder.

def perimeter(diameter,height) :
-------------------------------
entry_point:
perimeter
-------------------------------
canonical_solution:
def perimeter(diameter,height) : 
    return 2*(diameter+height)  
-------------------------------
test:
def check(perimeter):
    assert perimeter(2,4) == 12
    assert perimeter(1,2) == 6
    assert perimeter(3,1) == 8

============MBPP/113============
prompt:
# Write a function to check if a string represents an integer or not.

def check_integer(text):
-------------------------------
entry_point:
check_integer
-------------------------------
canonical_solution:
def check_integer(text):
 text = text.strip()
 if len(text) < 1:
    return None
 else:
     if all(text[i] in "0123456789" for i in range(len(text))):
          return True
     elif (text[0] in "+-") and \
         all(text[i] in "0123456789" for i in range(1,len(text))):
         return True
     else:
        return False
-------------------------------
test:
def check(check_integer):
    assert check_integer("python")==False
    assert check_integer("1")==True
    assert check_integer("12345")==True

============MBPP/114============
prompt:
# Write a function to assign frequency to each tuple in the given tuple list.
from collections import Counter 
def assign_freq(test_list):
-------------------------------
entry_point:
assign_freq
-------------------------------
canonical_solution:
from collections import Counter 
def assign_freq(test_list):
  res = [(*key, val) for key, val in Counter(test_list).items()]
  return (str(res)) 
-------------------------------
test:
def check(assign_freq):
    assert assign_freq([(6, 5, 8), (2, 7), (6, 5, 8), (6, 5, 8), (9, ), (2, 7)] ) == '[(6, 5, 8, 3), (2, 7, 2), (9, 1)]'
    assert assign_freq([(4, 2, 4), (7, 1), (4, 8), (4, 2, 4), (9, 2), (7, 1)] ) == '[(4, 2, 4, 2), (7, 1, 2), (4, 8, 1), (9, 2, 1)]'
    assert assign_freq([(11, 13, 10), (17, 21), (4, 2, 3), (17, 21), (9, 2), (4, 2, 3)] ) == '[(11, 13, 10, 1), (17, 21, 2), (4, 2, 3, 2), (9, 2, 1)]'

============MBPP/115============
prompt:
# Write a function to check whether all dictionaries in a list are empty or not.

def empty_dit(list1):
-------------------------------
entry_point:
empty_dit
-------------------------------
canonical_solution:
def empty_dit(list1):
 empty_dit=all(not d for d in list1)
 return empty_dit
-------------------------------
test:
def check(empty_dit):
    assert empty_dit([{},{},{}])==True
    assert empty_dit([{1,2},{},{}])==False
    assert empty_dit({})==True

============MBPP/116============
prompt:
# Write a function to convert a given tuple of positive integers into an integer.

def tuple_to_int(nums):
-------------------------------
entry_point:
tuple_to_int
-------------------------------
canonical_solution:
def tuple_to_int(nums):
    result = int(''.join(map(str,nums)))
    return result
-------------------------------
test:
def check(tuple_to_int):
    assert tuple_to_int((1,2,3))==123
    assert tuple_to_int((4,5,6))==456
    assert tuple_to_int((5,6,7))==567

============MBPP/117============
prompt:
# Write a function to convert all possible convertible elements in the list to float.

def list_to_float(test_list):
-------------------------------
entry_point:
list_to_float
-------------------------------
canonical_solution:
def list_to_float(test_list):
  res = []
  for tup in test_list:
    temp = []
    for ele in tup:
      if ele.isalpha():
        temp.append(ele)
      else:
        temp.append(float(ele))
    res.append((temp[0],temp[1])) 
  return (str(res)) 
-------------------------------
test:
def check(list_to_float):
    assert list_to_float( [("3", "4"), ("1", "26.45"), ("7.32", "8"), ("4", "8")] ) == '[(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]'
    assert list_to_float( [("4", "4"), ("2", "27"), ("4.12", "9"), ("7", "11")] ) == '[(4.0, 4.0), (2.0, 27.0), (4.12, 9.0), (7.0, 11.0)]'
    assert list_to_float( [("6", "78"), ("5", "26.45"), ("1.33", "4"), ("82", "13")] ) == '[(6.0, 78.0), (5.0, 26.45), (1.33, 4.0), (82.0, 13.0)]'

============MBPP/118============
prompt:
# [link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.

def string_to_list(string):
-------------------------------
entry_point:
string_to_list
-------------------------------
canonical_solution:
def string_to_list(string): 
    lst = list(string.split(" ")) 
    return lst
-------------------------------
test:
def check(string_to_list):
    assert string_to_list("python programming")==['python','programming']
    assert string_to_list("lists tuples strings")==['lists','tuples','strings']
    assert string_to_list("write a program")==['write','a','program']

============MBPP/119============
prompt:
# Write a python function to find the element that appears only once in a sorted array.

def search(arr,n) :
-------------------------------
entry_point:
search
-------------------------------
canonical_solution:
def search(arr,n) :
    XOR = 0
    for i in range(n) :
        XOR = XOR ^ arr[i]
    return (XOR)
-------------------------------
test:
def check(search):
    assert search([1,1,2,2,3],5) == 3
    assert search([1,1,3,3,4,4,5,5,7,7,8],11) == 8
    assert search([1,2,2,3,3,4,4],7) == 1

============MBPP/120============
prompt:
# Write a function to find the maximum product from the pairs of tuples within a given list.

def max_product_tuple(list1):
-------------------------------
entry_point:
max_product_tuple
-------------------------------
canonical_solution:
def max_product_tuple(list1):
    result_max = max([abs(x * y) for x, y in list1] )
    return result_max
-------------------------------
test:
def check(max_product_tuple):
    assert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36
    assert max_product_tuple([(10,20), (15,2), (5,10)] )==200
    assert max_product_tuple([(11,44), (10,15), (20,5), (12, 9)] )==484

============MBPP/121============
prompt:
# Write a function to find the triplet with sum of the given array

def check_triplet(A, n, sum, count):
-------------------------------
entry_point:
check_triplet
-------------------------------
canonical_solution:
def check_triplet(A, n, sum, count):
    if count == 3 and sum == 0:
        return True
    if count == 3 or n == 0 or sum < 0:
        return False
    return check_triplet(A, n - 1, sum - A[n - 1], count + 1) or\
           check_triplet(A, n - 1, sum, count)
-------------------------------
test:
def check(check_triplet):
    assert check_triplet([2, 7, 4, 0, 9, 5, 1, 3], 8, 6, 0) == True
    assert check_triplet([1, 4, 5, 6, 7, 8, 5, 9], 8, 6, 0) == False
    assert check_triplet([10, 4, 2, 3, 5], 5, 15, 0) == True

============MBPP/122============
prompt:
# Write a function to find n’th smart number.
MAX = 3000 
def smartNumber(n):
-------------------------------
entry_point:
smartNumber
-------------------------------
canonical_solution:
MAX = 3000 
def smartNumber(n): 
	primes = [0] * MAX 
	result = [] 
	for i in range(2, MAX): 
		if (primes[i] == 0): 
			primes[i] = 1 
			j = i * 2 
			while (j < MAX): 
				primes[j] -= 1 
				if ( (primes[j] + 3) == 0): 
					result.append(j) 
				j = j + i 
	result.sort() 
	return result[n - 1] 
-------------------------------
test:
def check(smartNumber):
    assert smartNumber(1) == 30
    assert smartNumber(50) == 273
    assert smartNumber(1000) == 2664

============MBPP/123============
prompt:
# Write a function to sum all amicable numbers from 1 to a specified number.

def amicable_numbers_sum(limit):
-------------------------------
entry_point:
amicable_numbers_sum
-------------------------------
canonical_solution:
def amicable_numbers_sum(limit):
    if not isinstance(limit, int):
        return "Input is not an integer!"
    if limit < 1:
        return "Input must be bigger than 0!"
    amicables = set()
    for num in range(2, limit+1):
        if num in amicables:
            continue
        sum_fact = sum([fact for fact in range(1, num) if num % fact == 0])
        sum_fact2 = sum([fact for fact in range(1, sum_fact) if sum_fact % fact == 0])
        if num == sum_fact2 and num != sum_fact:
            amicables.add(num)
            amicables.add(sum_fact2)
    return sum(amicables)
-------------------------------
test:
def check(amicable_numbers_sum):
    assert amicable_numbers_sum(999)==504
    assert amicable_numbers_sum(9999)==31626
    assert amicable_numbers_sum(99)==0

============MBPP/124============
prompt:
# Write a function to get the angle of a complex number.
import cmath
def angle_complex(a,b):
-------------------------------
entry_point:
angle_complex
-------------------------------
canonical_solution:
import cmath
def angle_complex(a,b):
  cn=complex(a,b)
  angle=cmath.phase(a+b)
  return angle
-------------------------------
test:
def check(angle_complex):
    assert angle_complex(0,1j)==1.5707963267948966 
    assert angle_complex(2,1j)==0.4636476090008061
    assert angle_complex(0,2j)==1.5707963267948966

============MBPP/125============
prompt:
# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.

def find_length(string, n):
-------------------------------
entry_point:
find_length
-------------------------------
canonical_solution:
def find_length(string, n): 
	current_sum = 0
	max_sum = 0
	for i in range(n): 
		current_sum += (1 if string[i] == '0' else -1) 
		if current_sum < 0: 
			current_sum = 0
		max_sum = max(current_sum, max_sum) 
	return max_sum if max_sum else 0
-------------------------------
test:
def check(find_length):
    assert find_length("11000010001", 11) == 6
    assert find_length("10111", 5) == 1
    assert find_length("11011101100101", 14) == 2 

============MBPP/126============
prompt:
# Write a python function to find the sum of common divisors of two given numbers.

def sum(a,b):
-------------------------------
entry_point:
sum
-------------------------------
canonical_solution:
def sum(a,b): 
    sum = 0
    for i in range (1,min(a,b)): 
        if (a % i == 0 and b % i == 0): 
            sum += i 
    return sum
-------------------------------
test:
def check(sum):
    assert sum(10,15) == 6
    assert sum(100,150) == 93
    assert sum(4,6) == 3

============MBPP/127============
prompt:
# Write a function to multiply two integers without using the * operator in python.

def multiply_int(x, y):
-------------------------------
entry_point:
multiply_int
-------------------------------
canonical_solution:
def multiply_int(x, y):
    if y < 0:
        return -multiply_int(x, -y)
    elif y == 0:
        return 0
    elif y == 1:
        return x
    else:
        return x + multiply_int(x, y - 1)
-------------------------------
test:
def check(multiply_int):
    assert multiply_int(10,20)==200
    assert multiply_int(5,10)==50
    assert multiply_int(4,8)==32

============MBPP/128============
prompt:
# Write a function to shortlist words that are longer than n from a given list of words.

def long_words(n, str):
-------------------------------
entry_point:
long_words
-------------------------------
canonical_solution:
def long_words(n, str):
    word_len = []
    txt = str.split(" ")
    for x in txt:
        if len(x) > n:
            word_len.append(x)
    return word_len	
-------------------------------
test:
def check(long_words):
    assert long_words(3,"python is a programming language")==['python','programming','language']
    assert long_words(2,"writing a program")==['writing','program']
    assert long_words(5,"sorting list")==['sorting']

============MBPP/129============
prompt:
# Write a function to calculate magic square.

def magic_square_test(my_matrix):
-------------------------------
entry_point:
magic_square_test
-------------------------------
canonical_solution:
def magic_square_test(my_matrix):
    iSize = len(my_matrix[0])
    sum_list = []
    sum_list.extend([sum (lines) for lines in my_matrix])   
    for col in range(iSize):
        sum_list.append(sum(row[col] for row in my_matrix))
    result1 = 0
    for i in range(0,iSize):
        result1 +=my_matrix[i][i]
    sum_list.append(result1)      
    result2 = 0
    for i in range(iSize-1,-1,-1):
        result2 +=my_matrix[i][i]
    sum_list.append(result2)
    if len(set(sum_list))>1:
        return False
    return True
-------------------------------
test:
def check(magic_square_test):
    assert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True
    assert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 8]])==True
    assert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 7]])==False

============MBPP/130============
prompt:
# Write a function to find the item with maximum frequency in a given list.
from collections import defaultdict
def max_occurrences(nums):
-------------------------------
entry_point:
max_occurrences
-------------------------------
canonical_solution:
from collections import defaultdict
def max_occurrences(nums):
    dict = defaultdict(int)
    for i in nums:
        dict[i] += 1
    result = max(dict.items(), key=lambda x: x[1]) 
    return result
-------------------------------
test:
def check(max_occurrences):
    assert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==(2, 5)
    assert max_occurrences([2,3,8,4,7,9,8,7,9,15,14,10,12,13,16,16,18])==(8, 2)
    assert max_occurrences([10,20,20,30,40,90,80,50,30,20,50,10])==(20, 3)

============MBPP/131============
prompt:
# Write a python function to reverse only the vowels of a given string.

def reverse_vowels(str1):
-------------------------------
entry_point:
reverse_vowels
-------------------------------
canonical_solution:
def reverse_vowels(str1):
	vowels = ""
	for char in str1:
		if char in "aeiouAEIOU":
			vowels += char
	result_string = ""
	for char in str1:
		if char in "aeiouAEIOU":
			result_string += vowels[-1]
			vowels = vowels[:-1]
		else:
			result_string += char
	return result_string
-------------------------------
test:
def check(reverse_vowels):
    assert reverse_vowels("Python") == "Python"
    assert reverse_vowels("USA") == "ASU"
    assert reverse_vowels("ab") == "ab"

============MBPP/132============
prompt:
# Write a function to convert tuple to a string.

def tup_string(tup1):
-------------------------------
entry_point:
tup_string
-------------------------------
canonical_solution:
def tup_string(tup1):
  str =  ''.join(tup1)
  return str
-------------------------------
test:
def check(tup_string):
    assert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==("exercises")
    assert tup_string(('p','y','t','h','o','n'))==("python")
    assert tup_string(('p','r','o','g','r','a','m'))==("program")

============MBPP/133============
prompt:
# Write a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.

def sum_negativenum(nums):
-------------------------------
entry_point:
sum_negativenum
-------------------------------
canonical_solution:
def sum_negativenum(nums):
  sum_negativenum = list(filter(lambda nums:nums<0,nums))
  return sum(sum_negativenum)
-------------------------------
test:
def check(sum_negativenum):
    assert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32
    assert sum_negativenum([10,15,-14,13,-18,12,-20])==-52
    assert sum_negativenum([19, -65, 57, 39, 152,-639, 121, 44, 90, -190])==-894

============MBPP/134============
prompt:
# Write a python function to check whether the last element of given array is even or odd after performing an operation p times.

def check_last (arr,n,p):
-------------------------------
entry_point:
check_last
-------------------------------
canonical_solution:
def check_last (arr,n,p): 
    _sum = 0
    for i in range(n): 
        _sum = _sum + arr[i] 
    if p == 1: 
        if _sum % 2 == 0: 
            return "ODD"
        else: 
            return "EVEN"
    return "EVEN"
      
-------------------------------
test:
def check(check_last):
    assert check_last([5,7,10],3,1) == "ODD"
    assert check_last([2,3],2,3) == "EVEN"
    assert check_last([1,2,3],3,1) == "ODD"

============MBPP/135============
prompt:
# Write a function to find the nth hexagonal number.

def hexagonal_num(n):
-------------------------------
entry_point:
hexagonal_num
-------------------------------
canonical_solution:
def hexagonal_num(n): 
	return n*(2*n - 1) 
-------------------------------
test:
def check(hexagonal_num):
    assert hexagonal_num(10) == 190
    assert hexagonal_num(5) == 45
    assert hexagonal_num(7) == 91

============MBPP/136============
prompt:
# Write a function to calculate electricity bill.

def cal_electbill(units):
-------------------------------
entry_point:
cal_electbill
-------------------------------
canonical_solution:
def cal_electbill(units):
 if(units < 50):
    amount = units * 2.60
    surcharge = 25
 elif(units <= 100):
    amount = 130 + ((units - 50) * 3.25)
    surcharge = 35
 elif(units <= 200):
    amount = 130 + 162.50 + ((units - 100) * 5.26)
    surcharge = 45
 else:
    amount = 130 + 162.50 + 526 + ((units - 200) * 8.45)
    surcharge = 75
 total = amount + surcharge
 return total
-------------------------------
test:
def check(cal_electbill):
    assert cal_electbill(75)==246.25
    assert cal_electbill(265)==1442.75
    assert cal_electbill(100)==327.5

============MBPP/137============
prompt:
# Write a function to find the ration of zeroes in an array of integers.
from array import array
def zero_count(nums):
-------------------------------
entry_point:
zero_count
-------------------------------
canonical_solution:
from array import array
def zero_count(nums):
    n = len(nums)
    n1 = 0
    for x in nums:
        if x == 0:
            n1 += 1
        else:
          None
    return round(n1/n,2)
-------------------------------
test:
def check(zero_count):
    assert zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.15
    assert zero_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==0.00
    assert zero_count([2, 4, -6, -9, 11, -12, 14, -5, 17])==0.00

============MBPP/138============
prompt:
# Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.

def is_Sum_Of_Powers_Of_Two(n):
-------------------------------
entry_point:
is_Sum_Of_Powers_Of_Two
-------------------------------
canonical_solution:
def is_Sum_Of_Powers_Of_Two(n): 
    if (n % 2 == 1): 
        return False
    else: 
        return True
-------------------------------
test:
def check(is_Sum_Of_Powers_Of_Two):
    assert is_Sum_Of_Powers_Of_Two(10) == True
    assert is_Sum_Of_Powers_Of_Two(7) == False
    assert is_Sum_Of_Powers_Of_Two(14) == True

============MBPP/139============
prompt:
# Write a function to find the circumference of a circle.

def circle_circumference(r):
-------------------------------
entry_point:
circle_circumference
-------------------------------
canonical_solution:
def circle_circumference(r):
  perimeter=2*3.1415*r
  return perimeter
-------------------------------
test:
def check(circle_circumference):
    assert circle_circumference(10)==62.830000000000005
    assert circle_circumference(5)==31.415000000000003
    assert circle_circumference(4)==25.132

============MBPP/140============
prompt:
# Write a function to extract elements that occur singly in the given tuple list.

def extract_singly(test_list):
-------------------------------
entry_point:
extract_singly
-------------------------------
canonical_solution:
def extract_singly(test_list):
  res = []
  temp = set()
  for inner in test_list:
    for ele in inner:
      if not ele in temp:
        temp.add(ele)
        res.append(ele)
  return (res) 
-------------------------------
test:
def check(extract_singly):
    assert extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]) == [3, 4, 5, 7, 1]
    assert extract_singly([(1, 2, 3), (4, 2, 3), (7, 8)]) == [1, 2, 3, 4, 7, 8]
    assert extract_singly([(7, 8, 9), (10, 11, 12), (10, 11)]) == [7, 8, 9, 10, 11, 12]

============MBPP/141============
prompt:
# Write a function to sort a list of elements using pancake sort.

def pancake_sort(nums):
-------------------------------
entry_point:
pancake_sort
-------------------------------
canonical_solution:
def pancake_sort(nums):
    arr_len = len(nums)
    while arr_len > 1:
        mi = nums.index(max(nums[0:arr_len]))
        nums = nums[mi::-1] + nums[mi+1:len(nums)]
        nums = nums[arr_len-1::-1] + nums[arr_len:len(nums)]
        arr_len -= 1
    return nums
-------------------------------
test:
def check(pancake_sort):
    assert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]
    assert pancake_sort([98, 12, 54, 36, 85]) == [12, 36, 54, 85, 98]
    assert pancake_sort([41, 42, 32, 12, 23]) == [12, 23, 32, 41, 42]

============MBPP/142============
prompt:
# Write a function to count the same pair in three given lists.

def count_samepair(list1,list2,list3):
-------------------------------
entry_point:
count_samepair
-------------------------------
canonical_solution:
def count_samepair(list1,list2,list3):
    result = sum(m == n == o for m, n, o in zip(list1,list2,list3))
    return result
-------------------------------
test:
def check(count_samepair):
    assert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3
    assert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8])==4
    assert count_samepair([1,2,3,4,2,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8])==5

============MBPP/143============
prompt:
# Write a function to find number of lists present in the given tuple.

def find_lists(Input):
-------------------------------
entry_point:
find_lists
-------------------------------
canonical_solution:
def find_lists(Input): 
	if isinstance(Input, list): 
		return 1
	else: 
		return len(Input) 
-------------------------------
test:
def check(find_lists):
    assert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2
    assert find_lists(([1, 2], [3, 4], [5, 6]))  == 3
    assert find_lists(([9, 8, 7, 6, 5, 4, 3, 2, 1])) == 1

============MBPP/144============
prompt:
# Write a python function to find the sum of absolute differences in all pairs of the given array.

def sum_Pairs(arr,n):
-------------------------------
entry_point:
sum_Pairs
-------------------------------
canonical_solution:
def sum_Pairs(arr,n): 
    sum = 0
    for i in range(n - 1,-1,-1): 
        sum += i*arr[i] - (n-1-i) * arr[i] 
    return sum
-------------------------------
test:
def check(sum_Pairs):
    assert sum_Pairs([1,8,9,15,16],5) == 74
    assert sum_Pairs([1,2,3,4],4) == 10
    assert sum_Pairs([1,2,3,4,5,7,9,11,14],9) == 188

============MBPP/145============
prompt:
# Write a python function to find the maximum difference between any two elements in a given array.

def max_Abs_Diff(arr,n):
-------------------------------
entry_point:
max_Abs_Diff
-------------------------------
canonical_solution:
def max_Abs_Diff(arr,n): 
    minEle = arr[0] 
    maxEle = arr[0] 
    for i in range(1, n): 
        minEle = min(minEle,arr[i]) 
        maxEle = max(maxEle,arr[i]) 
    return (maxEle - minEle) 
-------------------------------
test:
def check(max_Abs_Diff):
    assert max_Abs_Diff((2,1,5,3),4) == 4
    assert max_Abs_Diff((9,3,2,5,1),5) == 8
    assert max_Abs_Diff((3,2,1),3) == 2

============MBPP/146============
prompt:
# Write a function to find the ascii value of total characters in a string.

def ascii_value_string(str1):
-------------------------------
entry_point:
ascii_value_string
-------------------------------
canonical_solution:
def ascii_value_string(str1):
  for i in range(len(str1)):
   return ord(str1[i])
-------------------------------
test:
def check(ascii_value_string):
    assert ascii_value_string("python")==112
    assert ascii_value_string("Program")==80
    assert ascii_value_string("Language")==76

============MBPP/147============
prompt:
# Write a function to find the maximum total path sum in the given triangle.

def max_path_sum(tri, m, n):
-------------------------------
entry_point:
max_path_sum
-------------------------------
canonical_solution:
def max_path_sum(tri, m, n): 
	for i in range(m-1, -1, -1): 
		for j in range(i+1): 
			if (tri[i+1][j] > tri[i+1][j+1]): 
				tri[i][j] += tri[i+1][j] 
			else: 
				tri[i][j] += tri[i+1][j+1] 
	return tri[0][0]
-------------------------------
test:
def check(max_path_sum):
    assert max_path_sum([[1, 0, 0], [4, 8, 0], [1, 5, 3]], 2, 2) == 14
    assert max_path_sum([[13, 0, 0], [7, 4, 0], [2, 4, 6]], 2, 2) == 24 
    assert max_path_sum([[2, 0, 0], [11, 18, 0], [21, 25, 33]], 2, 2) == 53

============MBPP/148============
prompt:
# Write a function to divide a number into two parts such that the sum of digits is maximum.

def sum_digits_single(x) :
-------------------------------
entry_point:
sum_digits_single
-------------------------------
canonical_solution:
def sum_digits_single(x) : 
    ans = 0
    while x : 
        ans += x % 10
        x //= 10  
    return ans 
def closest(x) : 
    ans = 0
    while (ans * 10 + 9 <= x) : 
        ans = ans * 10 + 9  
    return ans   
def sum_digits_twoparts(N) : 
    A = closest(N)  
    return sum_digits_single(A) + sum_digits_single(N - A) 
-------------------------------
test:
def check(sum_digits_single):
    assert sum_digits_twoparts(35)==17
    assert sum_digits_twoparts(7)==7
    assert sum_digits_twoparts(100)==19

============MBPP/149============
prompt:
# Write a function to find the longest subsequence such that the difference between adjacents is one for the given array.

def longest_subseq_with_diff_one(arr, n):
-------------------------------
entry_point:
longest_subseq_with_diff_one
-------------------------------
canonical_solution:
def longest_subseq_with_diff_one(arr, n): 
	dp = [1 for i in range(n)] 
	for i in range(n): 
		for j in range(i): 
			if ((arr[i] == arr[j]+1) or (arr[i] == arr[j]-1)): 
				dp[i] = max(dp[i], dp[j]+1) 
	result = 1
	for i in range(n): 
		if (result < dp[i]): 
			result = dp[i] 
	return result
-------------------------------
test:
def check(longest_subseq_with_diff_one):
    assert longest_subseq_with_diff_one([1, 2, 3, 4, 5, 3, 2], 7) == 6
    assert longest_subseq_with_diff_one([10, 9, 4, 5, 4, 8, 6], 7) == 3
    assert longest_subseq_with_diff_one([1, 2, 3, 2, 3, 7, 2, 1], 8) == 7

============MBPP/150============
prompt:
# Write a python function to find whether the given number is present in the infinite sequence or not.

def does_Contain_B(a,b,c):
-------------------------------
entry_point:
does_Contain_B
-------------------------------
canonical_solution:
def does_Contain_B(a,b,c): 
    if (a == b): 
        return True
    if ((b - a) * c > 0 and (b - a) % c == 0): 
        return True
    return False
-------------------------------
test:
def check(does_Contain_B):
    assert does_Contain_B(1,7,3) == True
    assert does_Contain_B(1,-3,5) == False
    assert does_Contain_B(3,2,5) == False

============MBPP/151============
prompt:
# Write a python function to check whether the given number is co-prime or not.

def gcd(p,q):
-------------------------------
entry_point:
gcd
-------------------------------
canonical_solution:
def gcd(p,q):
    while q != 0:
        p, q = q,p%q
    return p
def is_coprime(x,y):
    return gcd(x,y) == 1
-------------------------------
test:
def check(gcd):
    assert is_coprime(17,13) == True
    assert is_coprime(15,21) == False
    assert is_coprime(25,45) == False

============MBPP/152============
prompt:
# Write a function to sort the given array by using merge sort.

def merge(a,b):
-------------------------------
entry_point:
merge
-------------------------------
canonical_solution:
def merge(a,b):
    c = []
    while len(a) != 0 and len(b) != 0:
        if a[0] < b[0]:
            c.append(a[0])
            a.remove(a[0])
        else:
            c.append(b[0])
            b.remove(b[0])
    if len(a) == 0:
        c += b
    else:
        c += a
    return c
def merge_sort(x):
    if len(x) == 0 or len(x) == 1:
        return x
    else:
        middle = len(x)//2
        a = merge_sort(x[:middle])
        b = merge_sort(x[middle:])
        return merge(a,b)

-------------------------------
test:
def check(merge):
    assert merge_sort([3, 4, 2, 6, 5, 7, 1, 9]) == [1, 2, 3, 4, 5, 6, 7, 9]
    assert merge_sort([7, 25, 45, 78, 11, 33, 19]) == [7, 11, 19, 25, 33, 45, 78]
    assert merge_sort([3, 1, 4, 9, 8]) == [1, 3, 4, 8, 9]

============MBPP/153============
prompt:
# Write a function to find the vertex of a parabola.

def parabola_vertex(a, b, c):
-------------------------------
entry_point:
parabola_vertex
-------------------------------
canonical_solution:
def parabola_vertex(a, b, c): 
  vertex=(((-b / (2 * a)),(((4 * a * c) - (b * b)) / (4 * a))))
  return vertex
-------------------------------
test:
def check(parabola_vertex):
    assert parabola_vertex(5,3,2)==(-0.3, 1.55)
    assert parabola_vertex(9,8,4)==(-0.4444444444444444, 2.2222222222222223)
    assert parabola_vertex(2,4,6)==(-1.0, 4.0)

============MBPP/154============
prompt:
# Write a function to extract every specified element from a given two dimensional list.

def specified_element(nums, N):
-------------------------------
entry_point:
specified_element
-------------------------------
canonical_solution:
def specified_element(nums, N):
    result = [i[N] for i in nums]
    return result
-------------------------------
test:
def check(specified_element):
    assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]
    assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],2)==[3, 6, 9]
    assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],3)==[2,2,5]

============MBPP/155============
prompt:
# Write a python function to toggle all even bits of a given number.

def even_bit_toggle_number(n) :
-------------------------------
entry_point:
even_bit_toggle_number
-------------------------------
canonical_solution:
def even_bit_toggle_number(n) : 
    res = 0; count = 0; temp = n 
    while (temp > 0) :     
        if (count % 2 == 1) : 
            res = res | (1 << count)      
        count = count + 1
        temp >>= 1 
    return n ^ res 
-------------------------------
test:
def check(even_bit_toggle_number):
    assert even_bit_toggle_number(10) == 0
    assert even_bit_toggle_number(20) == 30
    assert even_bit_toggle_number(30) == 20

============MBPP/156============
prompt:
# Write a function to convert a tuple of string values to a tuple of integer values.

def tuple_int_str(tuple_str):
-------------------------------
entry_point:
tuple_int_str
-------------------------------
canonical_solution:
def tuple_int_str(tuple_str):
    result = tuple((int(x[0]), int(x[1])) for x in tuple_str)
    return result
-------------------------------
test:
def check(tuple_int_str):
    assert tuple_int_str((('333', '33'), ('1416', '55')))==((333, 33), (1416, 55))
    assert tuple_int_str((('999', '99'), ('1000', '500')))==((999, 99), (1000, 500))
    assert tuple_int_str((('666', '66'), ('1500', '555')))==((666, 66), (1500, 555))

============MBPP/157============
prompt:
# Write a function to reflect the run-length encoding from a list.
from itertools import groupby
def encode_list(list1):
-------------------------------
entry_point:
encode_list
-------------------------------
canonical_solution:
from itertools import groupby
def encode_list(list1):
    return [[len(list(group)), key] for key, group in groupby(list1)]
-------------------------------
test:
def check(encode_list):
    assert encode_list([1,1,2,3,4,4.3,5,1])==[[2, 1], [1, 2], [1, 3], [1, 4], [1, 4.3], [1, 5], [1, 1]]
    assert encode_list('automatically')==[[1, 'a'], [1, 'u'], [1, 't'], [1, 'o'], [1, 'm'], [1, 'a'], [1, 't'], [1, 'i'], [1, 'c'], [1, 'a'], [2, 'l'], [1, 'y']]
    assert encode_list('python')==[[1, 'p'], [1, 'y'], [1, 't'], [1, 'h'], [1, 'o'], [1, 'n']]

============MBPP/158============
prompt:
# Write a python function to find k number of operations required to make all elements equal.

def min_Ops(arr,n,k):
-------------------------------
entry_point:
min_Ops
-------------------------------
canonical_solution:
def min_Ops(arr,n,k): 
    max1 = max(arr) 
    res = 0
    for i in range(0,n):  
        if ((max1 - arr[i]) % k != 0): 
            return -1 
        else: 
            res += (max1 - arr[i]) / k 
    return int(res) 
-------------------------------
test:
def check(min_Ops):
    assert min_Ops([2,2,2,2],4,3) == 0
    assert min_Ops([4,2,6,8],4,3) == -1
    assert min_Ops([21,33,9,45,63],5,6) == 24

============MBPP/159============
prompt:
# Write a function to print the season for the given month and day.

def month_season(month,days):
-------------------------------
entry_point:
month_season
-------------------------------
canonical_solution:
def month_season(month,days):
 if month in ('January', 'February', 'March'):
	 season = 'winter'
 elif month in ('April', 'May', 'June'):
	 season = 'spring'
 elif month in ('July', 'August', 'September'):
	 season = 'summer'
 else:
	 season = 'autumn'
 if (month == 'March') and (days > 19):
	 season = 'spring'
 elif (month == 'June') and (days > 20):
	 season = 'summer'
 elif (month == 'September') and (days > 21):
	 season = 'autumn'
 elif (month == 'October') and (days > 21):
	 season = 'autumn'
 elif (month == 'November') and (days > 21):
	 season = 'autumn'
 elif (month == 'December') and (days > 20):
	 season = 'winter'
 return season
-------------------------------
test:
def check(month_season):
    assert month_season('January',4)==('winter')
    assert month_season('October',28)==('autumn')
    assert month_season('June',6)==('spring')

============MBPP/160============
prompt:
# Write a function to find x and y that satisfies ax + by = n.

def solution (a, b, n):
-------------------------------
entry_point:
solution
-------------------------------
canonical_solution:
def solution (a, b, n): 
	i = 0
	while i * a <= n: 
		if (n - (i * a)) % b == 0: 
			return ("x = ",i ,", y = ", 
			int((n - (i * a)) / b)) 
			return 0
		i = i + 1
	return ("No solution") 
-------------------------------
test:
def check(solution):
    assert solution(2, 3, 7) == ('x = ', 2, ', y = ', 1)
    assert solution(4, 2, 7) == 'No solution'
    assert solution(1, 13, 17) == ('x = ', 4, ', y = ', 1)

============MBPP/161============
prompt:
# Write a function to remove all elements from a given list present in another list.

def remove_elements(list1, list2):
-------------------------------
entry_point:
remove_elements
-------------------------------
canonical_solution:
def remove_elements(list1, list2):
    result = [x for x in list1 if x not in list2]
    return result
-------------------------------
test:
def check(remove_elements):
    assert remove_elements([1,2,3,4,5,6,7,8,9,10],[2,4,6,8])==[1, 3, 5, 7, 9, 10]
    assert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],[1, 3, 5, 7])==[2, 4, 6, 8, 9, 10]
    assert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],[5,7])==[1, 2, 3, 4, 6, 8, 9, 10]

============MBPP/162============
prompt:
# Write a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).

def sum_series(n):
-------------------------------
entry_point:
sum_series
-------------------------------
canonical_solution:
def sum_series(n):
  if n < 1:
    return 0
  else:
    return n + sum_series(n - 2)
-------------------------------
test:
def check(sum_series):
    assert sum_series(6)==12
    assert sum_series(10)==30
    assert sum_series(9)==25

============MBPP/163============
prompt:
# Write a function to calculate the area of a regular polygon.
from math import tan, pi
def area_polygon(s,l):
-------------------------------
entry_point:
area_polygon
-------------------------------
canonical_solution:
from math import tan, pi
def area_polygon(s,l):
  area = s * (l ** 2) / (4 * tan(pi / s))
  return area
-------------------------------
test:
def check(area_polygon):
    assert area_polygon(4,20)==400.00000000000006
    assert area_polygon(10,15)==1731.1969896610804
    assert area_polygon(9,7)==302.90938549487214

============MBPP/164============
prompt:
# Write a python function to check whether the sum of divisors are same or not.
import math 
def divSum(n):
-------------------------------
entry_point:
divSum
-------------------------------
canonical_solution:
import math 
def divSum(n): 
    sum = 1; 
    i = 2; 
    while(i * i <= n): 
        if (n % i == 0): 
            sum = (sum + i +math.floor(n / i)); 
        i += 1; 
    return sum; 
def areEquivalent(num1,num2): 
    return divSum(num1) == divSum(num2); 
-------------------------------
test:
def check(divSum):
    assert areEquivalent(36,57) == False
    assert areEquivalent(2,4) == False
    assert areEquivalent(23,47) == True

============MBPP/165============
prompt:
# Write a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.

def count_char_position(str1):
-------------------------------
entry_point:
count_char_position
-------------------------------
canonical_solution:
def count_char_position(str1): 
    count_chars = 0
    for i in range(len(str1)):
        if ((i == ord(str1[i]) - ord('A')) or 
            (i == ord(str1[i]) - ord('a'))): 
            count_chars += 1
    return count_chars 
-------------------------------
test:
def check(count_char_position):
    assert count_char_position("xbcefg") == 2
    assert count_char_position("ABcED") == 3
    assert count_char_position("AbgdeF") == 5

============MBPP/166============
prompt:
# Write a python function to count the pairs with xor as an even number.

def find_even_Pair(A,N):
-------------------------------
entry_point:
find_even_Pair
-------------------------------
canonical_solution:
def find_even_Pair(A,N): 
    evenPair = 0
    for i in range(0,N): 
        for j in range(i+1,N): 
            if ((A[i] ^ A[j]) % 2 == 0): 
                evenPair+=1
    return evenPair; 
-------------------------------
test:
def check(find_even_Pair):
    assert find_even_Pair([5,4,7,2,1],5) == 4
    assert find_even_Pair([7,2,8,1,0,5,11],7) == 9
    assert find_even_Pair([1,2,3],3) == 1

============MBPP/167============
prompt:
# Write a python function to find smallest power of 2 greater than or equal to n.

def next_Power_Of_2(n):
-------------------------------
entry_point:
next_Power_Of_2
-------------------------------
canonical_solution:
def next_Power_Of_2(n): 
    count = 0; 
    if (n and not(n & (n - 1))): 
        return n   
    while( n != 0): 
        n >>= 1
        count += 1
    return 1 << count; 
-------------------------------
test:
def check(next_Power_Of_2):
    assert next_Power_Of_2(0) == 1
    assert next_Power_Of_2(5) == 8
    assert next_Power_Of_2(17) == 32

============MBPP/168============
prompt:
# Write a python function to find the frequency of a number in a given array.

def frequency(a,x):
-------------------------------
entry_point:
frequency
-------------------------------
canonical_solution:
def frequency(a,x): 
    count = 0  
    for i in a: 
        if i == x: count += 1
    return count 
-------------------------------
test:
def check(frequency):
    assert frequency([1,2,3],4) == 0
    assert frequency([1,2,2,3,3,3,4],3) == 3
    assert frequency([0,1,2,3,1,2],1) == 2

============MBPP/169============
prompt:
# Write a function to calculate the nth pell number.

def get_pell(n):
-------------------------------
entry_point:
get_pell
-------------------------------
canonical_solution:
def get_pell(n): 
	if (n <= 2): 
		return n 
	a = 1
	b = 2
	for i in range(3, n+1): 
		c = 2 * b + a 
		a = b 
		b = c 
	return b 
-------------------------------
test:
def check(get_pell):
    assert get_pell(4) == 12
    assert get_pell(7) == 169
    assert get_pell(8) == 408

============MBPP/170============
prompt:
# Write a function to find sum of the numbers in a list between the indices of a specified range.

def sum_range_list(list1, m, n):
-------------------------------
entry_point:
sum_range_list
-------------------------------
canonical_solution:
def sum_range_list(list1, m, n):                                                                                                                                                                                                
    sum_range = 0                                                                                                                                                                                                         
    for i in range(m, n+1, 1):                                                                                                                                                                                        
        sum_range += list1[i]                                                                                                                                                                                                  
    return sum_range   
-------------------------------
test:
def check(sum_range_list):
    assert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],8,10)==29
    assert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],5,7)==16
    assert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],7,10)==38

============MBPP/171============
prompt:
# Write a function to find the perimeter of a pentagon.
import math
def perimeter_pentagon(a):
-------------------------------
entry_point:
perimeter_pentagon
-------------------------------
canonical_solution:
import math
def perimeter_pentagon(a):
  perimeter=(5*a)
  return perimeter
-------------------------------
test:
def check(perimeter_pentagon):
    assert perimeter_pentagon(5)==25
    assert perimeter_pentagon(10)==50
    assert perimeter_pentagon(15)==75

============MBPP/172============
prompt:
# Write a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item

def count_occurance(s):
-------------------------------
entry_point:
count_occurance
-------------------------------
canonical_solution:
def count_occurance(s):
  count=0
  for i in range(len(s)):
    if (s[i]== 's' and s[i+1]=='t' and s[i+2]== 'd'):
      count = count + 1
  return count
-------------------------------
test:
def check(count_occurance):
    assert count_occurance("letstdlenstdporstd") == 3
    assert count_occurance("truststdsolensporsd") == 1
    assert count_occurance("makestdsostdworthit") == 2

============MBPP/173============
prompt:
# Write a function to remove everything except alphanumeric characters from a string.
import re
def remove_splchar(text):
-------------------------------
entry_point:
remove_splchar
-------------------------------
canonical_solution:
import re
def remove_splchar(text): 
 pattern = re.compile('[\W_]+')
 return (pattern.sub('', text))
-------------------------------
test:
def check(remove_splchar):
    assert remove_splchar('python  @#&^%$*program123')==('pythonprogram123')
    assert remove_splchar('python %^$@!^&*()  programming24%$^^()    language')==('pythonprogramming24language')
    assert remove_splchar('python   ^%&^()(+_)(_^&67)                  program')==('python67program')

============MBPP/174============
prompt:
# Write a function to group a sequence of key-value pairs into a dictionary of lists.

def group_keyvalue(l):
-------------------------------
entry_point:
group_keyvalue
-------------------------------
canonical_solution:
def group_keyvalue(l):
    result = {}
    for k, v in l:
         result.setdefault(k, []).append(v)
    return result
-------------------------------
test:
def check(group_keyvalue):
    assert group_keyvalue([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])=={'yellow': [1, 3], 'blue': [2, 4], 'red': [1]}
    assert group_keyvalue([('python', 1), ('python', 2), ('python', 3), ('python', 4), ('python', 5)])=={'python': [1,2,3,4,5]}
    assert group_keyvalue([('yellow',100), ('blue', 200), ('yellow', 300), ('blue', 400), ('red', 100)])=={'yellow': [100, 300], 'blue': [200, 400], 'red': [100]}

============MBPP/175============
prompt:
# Write a function to verify validity of a string of parentheses.

def is_valid_parenthese( str1):
-------------------------------
entry_point:
is_valid_parenthese
-------------------------------
canonical_solution:
def is_valid_parenthese( str1):
        stack, pchar = [], {"(": ")", "{": "}", "[": "]"}
        for parenthese in str1:
            if parenthese in pchar:
                stack.append(parenthese)
            elif len(stack) == 0 or pchar[stack.pop()] != parenthese:
                return False
        return len(stack) == 0
-------------------------------
test:
def check(is_valid_parenthese):
    assert is_valid_parenthese("(){}[]")==True
    assert is_valid_parenthese("()[{)}")==False
    assert is_valid_parenthese("()")==True

============MBPP/176============
prompt:
# Write a function to find the perimeter of a triangle.

def perimeter_triangle(a,b,c):
-------------------------------
entry_point:
perimeter_triangle
-------------------------------
canonical_solution:
def perimeter_triangle(a,b,c):
  perimeter=a+b+c
  return perimeter
-------------------------------
test:
def check(perimeter_triangle):
    assert perimeter_triangle(10,20,30)==60
    assert perimeter_triangle(3,4,5)==12
    assert perimeter_triangle(25,35,45)==105

============MBPP/177============
prompt:
# Write a python function to find two distinct numbers such that their lcm lies within the given range.

def answer(L,R):
-------------------------------
entry_point:
answer
-------------------------------
canonical_solution:
def answer(L,R): 
    if (2 * L <= R): 
        return (L ,2*L)
    else: 
        return (-1) 
-------------------------------
test:
def check(answer):
    assert answer(3,8) == (3,6)
    assert answer(2,6) == (2,4)
    assert answer(1,3) == (1,2)

============MBPP/178============
prompt:
# Write a function to search some literals strings in a string.
import re
def string_literals(patterns,text):
-------------------------------
entry_point:
string_literals
-------------------------------
canonical_solution:
import re
def string_literals(patterns,text):
  for pattern in patterns:
     if re.search(pattern,  text):
       return ('Matched!')
     else:
       return ('Not Matched!')
-------------------------------
test:
def check(string_literals):
    assert string_literals(['language'],'python language')==('Matched!')
    assert string_literals(['program'],'python language')==('Not Matched!')
    assert string_literals(['python'],'programming language')==('Not Matched!')

============MBPP/179============
prompt:
# Write a function to find if the given number is a keith number or not.

def is_num_keith(x):
-------------------------------
entry_point:
is_num_keith
-------------------------------
canonical_solution:
def is_num_keith(x): 
	terms = [] 
	temp = x 
	n = 0 
	while (temp > 0): 
		terms.append(temp % 10) 
		temp = int(temp / 10) 
		n+=1 
	terms.reverse() 
	next_term = 0 
	i = n 
	while (next_term < x): 
		next_term = 0 
		for j in range(1,n+1): 
			next_term += terms[i - j] 
		terms.append(next_term) 
		i+=1 
	return (next_term == x) 
-------------------------------
test:
def check(is_num_keith):
    assert is_num_keith(14) == True
    assert is_num_keith(12) == False
    assert is_num_keith(197) == True

============MBPP/180============
prompt:
# Write a function to calculate distance between two points using latitude and longitude.
from math import radians, sin, cos, acos
def distance_lat_long(slat,slon,elat,elon):
-------------------------------
entry_point:
distance_lat_long
-------------------------------
canonical_solution:
from math import radians, sin, cos, acos
def distance_lat_long(slat,slon,elat,elon):
 dist = 6371.01 * acos(sin(slat)*sin(elat) + cos(slat)*cos(elat)*cos(slon - elon))
 return dist
-------------------------------
test:
def check(distance_lat_long):
    assert distance_lat_long(23.5,67.5,25.5,69.5)==12179.372041317429
    assert distance_lat_long(10.5,20.5,30.5,40.5)==6069.397933300514
    assert distance_lat_long(10,20,30,40)==6783.751974994595

============MBPP/181============
prompt:
# Write a function to find the longest common prefix in the given set of strings.

def common_prefix_util(str1, str2):
-------------------------------
entry_point:
common_prefix_util
-------------------------------
canonical_solution:
def common_prefix_util(str1, str2): 
	result = ""; 
	n1 = len(str1) 
	n2 = len(str2) 
	i = 0
	j = 0
	while i <= n1 - 1 and j <= n2 - 1: 
		if (str1[i] != str2[j]): 
			break
		result += str1[i] 
		i += 1
		j += 1
	return (result) 
def common_prefix (arr, n): 
	prefix = arr[0] 
	for i in range (1, n): 
		prefix = common_prefix_util(prefix, arr[i]) 
	return (prefix) 
-------------------------------
test:
def check(common_prefix_util):
    assert common_prefix(["tablets", "tables", "taxi", "tamarind"], 4) == 'ta'
    assert common_prefix(["apples", "ape", "april"], 3) == 'ap'
    assert common_prefix(["teens", "teenager", "teenmar"], 3) == 'teen'

============MBPP/182============
prompt:
# Write a function to find uppercase, lowercase, special character and numeric values using regex.
import re
def find_character(string):
-------------------------------
entry_point:
find_character
-------------------------------
canonical_solution:
import re
def find_character(string):
  uppercase_characters = re.findall(r"[A-Z]", string) 
  lowercase_characters = re.findall(r"[a-z]", string) 
  numerical_characters = re.findall(r"[0-9]", string) 
  special_characters = re.findall(r"[, .!?]", string) 
  return uppercase_characters, lowercase_characters, numerical_characters, special_characters
-------------------------------
test:
def check(find_character):
    assert find_character("ThisIsGeeksforGeeks") == (['T', 'I', 'G', 'G'], ['h', 'i', 's', 's', 'e', 'e', 'k', 's', 'f', 'o', 'r', 'e', 'e', 'k', 's'], [], [])
    assert find_character("Hithere2") == (['H'], ['i', 't', 'h', 'e', 'r', 'e'], ['2'], [])
    assert find_character("HeyFolks32") == (['H', 'F'], ['e', 'y', 'o', 'l', 'k', 's'], ['3', '2'], [])

============MBPP/183============
prompt:
# Write a function to count all the distinct pairs having a difference of k in any array.

def count_pairs(arr, n, k):
-------------------------------
entry_point:
count_pairs
-------------------------------
canonical_solution:
def count_pairs(arr, n, k):
  count=0;
  for i in range(0,n):
    for j in range(i+1, n):
      if arr[i] - arr[j] == k or arr[j] - arr[i] == k:
        count += 1
  return count
-------------------------------
test:
def check(count_pairs):
    assert count_pairs([1, 5, 3, 4, 2], 5, 3) == 2
    assert count_pairs([8, 12, 16, 4, 0, 20], 6, 4) == 5
    assert count_pairs([2, 4, 1, 3, 4], 5, 2) == 3

============MBPP/184============
prompt:
# Write a function to find all the values in a list that are greater than a specified number.

def greater_specificnum(list,num):
-------------------------------
entry_point:
greater_specificnum
-------------------------------
canonical_solution:
def greater_specificnum(list,num):
 greater_specificnum=all(x >= num for x in list)
 return greater_specificnum
-------------------------------
test:
def check(greater_specificnum):
    assert greater_specificnum([220, 330, 500],200)==True
    assert greater_specificnum([12, 17, 21],20)==False
    assert greater_specificnum([1,2,3,4],10)==False

============MBPP/185============
prompt:
# Write a function to find the focus of a parabola.

def parabola_focus(a, b, c):
-------------------------------
entry_point:
parabola_focus
-------------------------------
canonical_solution:
def parabola_focus(a, b, c): 
  focus= (((-b / (2 * a)),(((4 * a * c) - (b * b) + 1) / (4 * a))))
  return focus
-------------------------------
test:
def check(parabola_focus):
    assert parabola_focus(5,3,2)==(-0.3, 1.6)
    assert parabola_focus(9,8,4)==(-0.4444444444444444, 2.25)
    assert parabola_focus(2,4,6)==(-1.0, 4.125)

============MBPP/186============
prompt:
# Write a function to search some literals strings in a string by using regex.
import re
def check_literals(text, patterns):
-------------------------------
entry_point:
check_literals
-------------------------------
canonical_solution:
import re
def check_literals(text, patterns):
  for pattern in patterns:
    if re.search(pattern,  text):
        return ('Matched!')
    else:
        return ('Not Matched!')
-------------------------------
test:
def check(check_literals):
    assert check_literals('The quick brown fox jumps over the lazy dog.',['fox']) == 'Matched!'
    assert check_literals('The quick brown fox jumps over the lazy dog.',['horse']) == 'Not Matched!'
    assert check_literals('The quick brown fox jumps over the lazy dog.',['lazy']) == 'Matched!'

============MBPP/187============
prompt:
# Write a function to find the longest common subsequence for the given two sequences.

def longest_common_subsequence(X, Y, m, n):
-------------------------------
entry_point:
longest_common_subsequence
-------------------------------
canonical_solution:
def longest_common_subsequence(X, Y, m, n): 
    if m == 0 or n == 0: 
       return 0 
    elif X[m-1] == Y[n-1]: 
       return 1 + longest_common_subsequence(X, Y, m-1, n-1) 
    else: 
       return max(longest_common_subsequence(X, Y, m, n-1), longest_common_subsequence(X, Y, m-1, n))
-------------------------------
test:
def check(longest_common_subsequence):
    assert longest_common_subsequence("AGGTAB" , "GXTXAYB", 6, 7) == 4
    assert longest_common_subsequence("ABCDGH" , "AEDFHR", 6, 6) == 3
    assert longest_common_subsequence("AXYT" , "AYZX", 4, 4) == 2

============MBPP/188============
prompt:
# Write a python function to check whether the given number can be represented by product of two squares or not.

def prod_Square(n):
-------------------------------
entry_point:
prod_Square
-------------------------------
canonical_solution:
def prod_Square(n):
    for i in range(2,(n) + 1):
        if (i*i < (n+1)):
            for j in range(2,n + 1):
                if ((i*i*j*j) == n):
                    return True;
    return False;
-------------------------------
test:
def check(prod_Square):
    assert prod_Square(25) == False
    assert prod_Square(30) == False
    assert prod_Square(16) == True

============MBPP/189============
prompt:
# Write a python function to find the first missing positive number.

def first_Missing_Positive(arr,n):
-------------------------------
entry_point:
first_Missing_Positive
-------------------------------
canonical_solution:
def first_Missing_Positive(arr,n): 
    ptr = 0
    for i in range(n):
        if arr[i] == 1:
            ptr = 1
            break
    if ptr == 0:
        return(1)
    for i in range(n):
        if arr[i] <= 0 or arr[i] > n:
            arr[i] = 1
    for i in range(n):
        arr[(arr[i] - 1) % n] += n
    for i in range(n):
        if arr[i] <= n:
            return(i + 1)
    return(n + 1)
-------------------------------
test:
def check(first_Missing_Positive):
    assert first_Missing_Positive([1,2,3,-1,5],5) == 4
    assert first_Missing_Positive([0,-1,-2,1,5,8],6) == 2
    assert first_Missing_Positive([0,1,2,5,-8],5) == 3

============MBPP/190============
prompt:
# Write a python function to count the number of integral co-ordinates that lie inside a square.

def count_Intgral_Points(x1,y1,x2,y2):
-------------------------------
entry_point:
count_Intgral_Points
-------------------------------
canonical_solution:
def count_Intgral_Points(x1,y1,x2,y2): 
    return ((y2 - y1 - 1) * (x2 - x1 - 1)) 
-------------------------------
test:
def check(count_Intgral_Points):
    assert count_Intgral_Points(1,1,4,4) == 4
    assert count_Intgral_Points(1,2,1,2) == 1
    assert count_Intgral_Points(4,2,6,4) == 1

============MBPP/191============
prompt:
# Write a function to check whether the given month name contains 30 days or not.

def check_monthnumber(monthname3):
-------------------------------
entry_point:
check_monthnumber
-------------------------------
canonical_solution:
def check_monthnumber(monthname3):
  if monthname3 =="April" or monthname3== "June" or monthname3== "September" or monthname3== "November":
    return True
  else:
    return False
-------------------------------
test:
def check(check_monthnumber):
    assert check_monthnumber("February")==False
    assert check_monthnumber("June")==True
    assert check_monthnumber("April")==True

============MBPP/192============
prompt:
# Write a python function to check whether a string has atleast one letter and one number.

def check_String(str):
-------------------------------
entry_point:
check_String
-------------------------------
canonical_solution:
def check_String(str): 
    flag_l = False
    flag_n = False
    for i in str: 
        if i.isalpha(): 
            flag_l = True  
        if i.isdigit(): 
            flag_n = True
    return flag_l and flag_n 
-------------------------------
test:
def check(check_String):
    assert check_String('thishasboth29') == True
    assert check_String('python') == False
    assert check_String ('string') == False

============MBPP/193============
prompt:
# Write a function to remove the duplicates from the given tuple.

def remove_tuple(test_tup):
-------------------------------
entry_point:
remove_tuple
-------------------------------
canonical_solution:
def remove_tuple(test_tup):
  res = tuple(set(test_tup))
  return (res) 
-------------------------------
test:
def check(remove_tuple):
    assert remove_tuple((1, 3, 5, 2, 3, 5, 1, 1, 3)) == (1, 2, 3, 5)
    assert remove_tuple((2, 3, 4, 4, 5, 6, 6, 7, 8, 8)) == (2, 3, 4, 5, 6, 7, 8)
    assert remove_tuple((11, 12, 13, 11, 11, 12, 14, 13)) == (11, 12, 13, 14)

============MBPP/194============
prompt:
# Write a python function to convert octal number to decimal number.

def octal_To_Decimal(n):
-------------------------------
entry_point:
octal_To_Decimal
-------------------------------
canonical_solution:
def octal_To_Decimal(n):  
    num = n; 
    dec_value = 0; 
    base = 1; 
    temp = num; 
    while (temp): 
        last_digit = temp % 10; 
        temp = int(temp / 10); 
        dec_value += last_digit*base; 
        base = base * 8; 
    return dec_value; 
-------------------------------
test:
def check(octal_To_Decimal):
    assert octal_To_Decimal(25) == 21
    assert octal_To_Decimal(30) == 24
    assert octal_To_Decimal(40) == 32

============MBPP/195============
prompt:
# Write a python function to find the first position of an element in a sorted array.

def first(arr,x,n):
-------------------------------
entry_point:
first
-------------------------------
canonical_solution:
def first(arr,x,n): 
    low = 0
    high = n - 1
    res = -1  
    while (low <= high):
        mid = (low + high) // 2 
        if arr[mid] > x:
            high = mid - 1
        elif arr[mid] < x:
            low = mid + 1
        else:
            res = mid
            high = mid - 1
    return res
-------------------------------
test:
def check(first):
    assert first([1,2,3,4,5,6,6],6,6) == 5
    assert first([1,2,2,2,3,2,2,4,2],2,9) == 1
    assert first([1,2,3],1,3) == 0

============MBPP/196============
prompt:
# Write a function to remove all the tuples with length k.

def remove_tuples(test_list, K):
-------------------------------
entry_point:
remove_tuples
-------------------------------
canonical_solution:
def remove_tuples(test_list, K):
  res = [ele for ele in test_list if len(ele) != K]
  return (res) 
-------------------------------
test:
def check(remove_tuples):
    assert remove_tuples([(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)] , 1) == [(4, 5), (8, 6, 7), (3, 4, 6, 7)]
    assert remove_tuples([(4, 5), (4,5), (6, 7), (1, 2, 3), (3, 4, 6, 7)] ,2) == [(1, 2, 3), (3, 4, 6, 7)]
    assert remove_tuples([(1, 4, 4), (4, 3), (8, 6, 7), (1, ), (3, 6, 7)] , 3) == [(4, 3), (1,)]

============MBPP/197============
prompt:
# Write a function to perform the exponentiation of the given two tuples.

def find_exponentio(test_tup1, test_tup2):
-------------------------------
entry_point:
find_exponentio
-------------------------------
canonical_solution:
def find_exponentio(test_tup1, test_tup2):
  res = tuple(ele1 ** ele2 for ele1, ele2 in zip(test_tup1, test_tup2))
  return (res)

-------------------------------
test:
def check(find_exponentio):
    assert find_exponentio((10, 4, 5, 6), (5, 6, 7, 5)) == (100000, 4096, 78125, 7776)
    assert find_exponentio((11, 5, 6, 7), (6, 7, 8, 6)) == (1771561, 78125, 1679616, 117649)
    assert find_exponentio((12, 6, 7, 8), (7, 8, 9, 7)) == (35831808, 1679616, 40353607, 2097152)

============MBPP/198============
prompt:
# Write a function to find the largest triangle that can be inscribed in an ellipse.
import math
def largest_triangle(a,b):
-------------------------------
entry_point:
largest_triangle
-------------------------------
canonical_solution:
import math
def largest_triangle(a,b): 
    if (a < 0 or b < 0): 
        return -1 
    area = (3 * math.sqrt(3) * pow(a, 2)) / (4 * b);  
    return area 
-------------------------------
test:
def check(largest_triangle):
    assert largest_triangle(4,2)==10.392304845413264
    assert largest_triangle(5,7)==4.639421805988064
    assert largest_triangle(9,1)==105.2220865598093

============MBPP/199============
prompt:
# Write a python function to find highest power of 2 less than or equal to given number.

def highest_Power_of_2(n):
-------------------------------
entry_point:
highest_Power_of_2
-------------------------------
canonical_solution:
def highest_Power_of_2(n): 
    res = 0; 
    for i in range(n, 0, -1):  
        if ((i & (i - 1)) == 0): 
            res = i; 
            break;      
    return res; 
-------------------------------
test:
def check(highest_Power_of_2):
    assert highest_Power_of_2(10) == 8
    assert highest_Power_of_2(19) == 16
    assert highest_Power_of_2(32) == 32

============MBPP/200============
prompt:
# Write a function to find all index positions of the maximum values in a given list.

def position_max(list1):
-------------------------------
entry_point:
position_max
-------------------------------
canonical_solution:
def position_max(list1):
    max_val = max(list1)
    max_result = [i for i, j in enumerate(list1) if j == max_val]
    return max_result
-------------------------------
test:
def check(position_max):
    assert position_max([12,33,23,10,67,89,45,667,23,12,11,10,54])==[7]
    assert position_max([1,2,2,2,4,4,4,5,5,5,5])==[7,8,9,10]
    assert position_max([2,1,5,6,8,3,4,9,10,11,8,12])==[11]

============MBPP/201============
prompt:
# Write a python function to check whether the elements in a list are same or not.

def chkList(lst):
-------------------------------
entry_point:
chkList
-------------------------------
canonical_solution:
def chkList(lst): 
    return len(set(lst)) == 1
-------------------------------
test:
def check(chkList):
    assert chkList(['one','one','one']) == True
    assert chkList(['one','Two','Three']) == False
    assert chkList(['bigdata','python','Django']) == False

============MBPP/202============
prompt:
# Write a function to remove even characters in a string.

def remove_even(str1):
-------------------------------
entry_point:
remove_even
-------------------------------
canonical_solution:
def remove_even(str1):
 str2 = ''
 for i in range(1, len(str1) + 1):
    if(i % 2 != 0):
        str2 = str2 + str1[i - 1]
 return str2
-------------------------------
test:
def check(remove_even):
    assert remove_even("python")==("pto")
    assert remove_even("program")==("porm")
    assert remove_even("language")==("lnug")

============MBPP/203============
prompt:
# Write a python function to find the hamming distance between given two integers.

def hamming_Distance(n1,n2) :
-------------------------------
entry_point:
hamming_Distance
-------------------------------
canonical_solution:
def hamming_Distance(n1,n2) : 
    x = n1 ^ n2  
    setBits = 0
    while (x > 0) : 
        setBits += x & 1
        x >>= 1
    return setBits  
-------------------------------
test:
def check(hamming_Distance):
    assert hamming_Distance(4,8) == 2
    assert hamming_Distance(2,4) == 2
    assert hamming_Distance(1,2) == 2

============MBPP/204============
prompt:
# Write a python function to count the occurrence of a given character in a string.

def count(s,c) :
-------------------------------
entry_point:
count
-------------------------------
canonical_solution:
def count(s,c) : 
    res = 0 
    for i in range(len(s)) : 
        if (s[i] == c): 
            res = res + 1
    return res 
-------------------------------
test:
def check(count):
    assert count("abcc","c") == 2
    assert count("ababca","a") == 3
    assert count("mnmm0pm","m") == 4

============MBPP/205============
prompt:
# Write a function to find the inversions of tuple elements in the given tuple list.

def inversion_elements(test_tup):
-------------------------------
entry_point:
inversion_elements
-------------------------------
canonical_solution:
def inversion_elements(test_tup):
  res = tuple(list(map(lambda x: ~x, list(test_tup))))
  return (res) 
-------------------------------
test:
def check(inversion_elements):
    assert inversion_elements((7, 8, 9, 1, 10, 7)) == (-8, -9, -10, -2, -11, -8)
    assert inversion_elements((2, 4, 5, 6, 1, 7)) == (-3, -5, -6, -7, -2, -8)
    assert inversion_elements((8, 9, 11, 14, 12, 13)) == (-9, -10, -12, -15, -13, -14)

============MBPP/206============
prompt:
# Write a function to perform the adjacent element concatenation in the given tuples.

def concatenate_elements(test_tup):
-------------------------------
entry_point:
concatenate_elements
-------------------------------
canonical_solution:
def concatenate_elements(test_tup):
  res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))
  return (res) 
-------------------------------
test:
def check(concatenate_elements):
    assert concatenate_elements(("DSP ", "IS ", "BEST ", "FOR ", "ALL ", "UTS")) == ('DSP IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL UTS')
    assert concatenate_elements(("RES ", "IS ", "BEST ", "FOR ", "ALL ", "QESR")) == ('RES IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL QESR')
    assert concatenate_elements(("MSAM", "IS ", "BEST ", "FOR ", "ALL ", "SKD")) == ('MSAMIS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL SKD')

============MBPP/207============
prompt:
# Write a function to count the longest repeating subsequences such that the two subsequences don’t have same string characters at same positions.

def find_longest_repeating_subseq(str):
-------------------------------
entry_point:
find_longest_repeating_subseq
-------------------------------
canonical_solution:
def find_longest_repeating_subseq(str): 
	n = len(str) 
	dp = [[0 for k in range(n+1)] for l in range(n+1)] 
	for i in range(1, n+1): 
		for j in range(1, n+1): 
			if (str[i-1] == str[j-1] and i != j): 
				dp[i][j] = 1 + dp[i-1][j-1] 
			else: 
				dp[i][j] = max(dp[i][j-1], dp[i-1][j]) 
	return dp[n][n]
-------------------------------
test:
def check(find_longest_repeating_subseq):
    assert find_longest_repeating_subseq("AABEBCDD") == 3
    assert find_longest_repeating_subseq("aabb") == 2
    assert find_longest_repeating_subseq("aab") == 1

============MBPP/208============
prompt:
# Write a function to check the given decimal with a precision of 2 by using regex.
import re
def is_decimal(num):
-------------------------------
entry_point:
is_decimal
-------------------------------
canonical_solution:
import re
def is_decimal(num):
  num_fetch = re.compile(r"""^[0-9]+(\.[0-9]{1,2})?$""")
  result = num_fetch.search(num)
  return bool(result)
-------------------------------
test:
def check(is_decimal):
    assert is_decimal('123.11') == True
    assert is_decimal('0.21') == True
    assert is_decimal('123.1214') == False

============MBPP/209============
prompt:
# Write a function to delete the smallest element from the given heap and then insert a new item.
import heapq as hq
def heap_replace(heap,a):
-------------------------------
entry_point:
heap_replace
-------------------------------
canonical_solution:
import heapq as hq
def heap_replace(heap,a):
  hq.heapify(heap)
  hq.heapreplace(heap, a)
  return heap
-------------------------------
test:
def check(heap_replace):
    assert heap_replace( [25, 44, 68, 21, 39, 23, 89],21)==[21, 25, 23, 44, 39, 68, 89]
    assert heap_replace([25, 44, 68, 21, 39, 23, 89],110)== [23, 25, 68, 44, 39, 110, 89]
    assert heap_replace([25, 44, 68, 21, 39, 23, 89],500)==[23, 25, 68, 44, 39, 500, 89]

============MBPP/210============
prompt:
# Write a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.
import re
def is_allowed_specific_char(string):
-------------------------------
entry_point:
is_allowed_specific_char
-------------------------------
canonical_solution:
import re
def is_allowed_specific_char(string):
    get_char = re.compile(r'[^a-zA-Z0-9.]')
    string = get_char.search(string)
    return not bool(string)
-------------------------------
test:
def check(is_allowed_specific_char):
    assert is_allowed_specific_char("ABCDEFabcdef123450") == True
    assert is_allowed_specific_char("*&%@#!}{") == False
    assert is_allowed_specific_char("HELLOhowareyou98765") == True

============MBPP/211============
prompt:
# Write a python function to count numbers whose oth and nth bits are set.

def count_Num(n):
-------------------------------
entry_point:
count_Num
-------------------------------
canonical_solution:
def count_Num(n): 
    if (n == 1): 
        return 1
    count = pow(2,n - 2) 
    return count 
-------------------------------
test:
def check(count_Num):
    assert count_Num(2) == 1
    assert count_Num(3) == 2
    assert count_Num(1) == 1

============MBPP/212============
prompt:
# Write a python function to find the sum of fourth power of n natural numbers.
import math  
def fourth_Power_Sum(n):
-------------------------------
entry_point:
fourth_Power_Sum
-------------------------------
canonical_solution:
import math  
def fourth_Power_Sum(n): 
    sum = 0
    for i in range(1,n+1) : 
        sum = sum + (i*i*i*i) 
    return sum
-------------------------------
test:
def check(fourth_Power_Sum):
    assert fourth_Power_Sum(2) == 17
    assert fourth_Power_Sum(4) == 354
    assert fourth_Power_Sum(6) == 2275

============MBPP/213============
prompt:
# Write a function to perform the concatenation of two string tuples.

def concatenate_strings(test_tup1, test_tup2):
-------------------------------
entry_point:
concatenate_strings
-------------------------------
canonical_solution:
def concatenate_strings(test_tup1, test_tup2):
  res = tuple(ele1 + ele2 for ele1, ele2 in zip(test_tup1, test_tup2))
  return (res) 
-------------------------------
test:
def check(concatenate_strings):
    assert concatenate_strings(("Manjeet", "Nikhil", "Akshat"), (" Singh", " Meherwal", " Garg")) == ('Manjeet Singh', 'Nikhil Meherwal', 'Akshat Garg')
    assert concatenate_strings(("Shaik", "Ayesha", "Sanya"), (" Dawood", " Begum", " Singh")) == ('Shaik Dawood', 'Ayesha Begum', 'Sanya Singh')
    assert concatenate_strings(("Harpreet", "Priyanka", "Muskan"), ("Kour", " Agarwal", "Sethi")) == ('HarpreetKour', 'Priyanka Agarwal', 'MuskanSethi')

============MBPP/214============
prompt:
# Write a function to convert radians to degrees.
import math
def degree_radian(radian):
-------------------------------
entry_point:
degree_radian
-------------------------------
canonical_solution:
import math
def degree_radian(radian):
 degree = radian*(180/math.pi)
 return degree
-------------------------------
test:
def check(degree_radian):
    assert degree_radian(90)==5156.620156177409
    assert degree_radian(60)==3437.746770784939
    assert degree_radian(120)==6875.493541569878

============MBPP/215============
prompt:
# Write a function to decode a run-length encoded given list.

def decode_list(alist):
-------------------------------
entry_point:
decode_list
-------------------------------
canonical_solution:
def decode_list(alist):
    def aux(g):
        if isinstance(g, list):
            return [(g[1], range(g[0]))]
        else:
            return [(g, [0])]
    return [x for g in alist for x, R in aux(g) for i in R]
-------------------------------
test:
def check(decode_list):
    assert decode_list([[2, 1], 2, 3, [2, 4], 5,1])==[1,1,2,3,4,4,5,1]
    assert decode_list(['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', [2, 'l'], 'y'])==['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', 'l', 'l', 'y']
    assert decode_list(['p', 'y', 't', 'h', 'o', 'n'])==['p', 'y', 't', 'h', 'o', 'n']

============MBPP/216============
prompt:
# Write a function to check if a nested list is a subset of another nested list.

def check_subset_list(list1, list2):
-------------------------------
entry_point:
check_subset_list
-------------------------------
canonical_solution:
def check_subset_list(list1, list2): 
    l1, l2 = list1[0], list2[0] 
    exist = True
    for i in list2: 
        if i not in list1: 
            exist = False
    return exist 
-------------------------------
test:
def check(check_subset_list):
    assert check_subset_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==False
    assert check_subset_list([[2, 3, 1], [4, 5], [6, 8]],[[4, 5], [6, 8]])==True
    assert check_subset_list([['a', 'b'], ['e'], ['c', 'd']],[['g']])==False

============MBPP/217============
prompt:
# Write a python function to find the first repeated character in a given string.

def first_Repeated_Char(str):
-------------------------------
entry_point:
first_Repeated_Char
-------------------------------
canonical_solution:
def first_Repeated_Char(str): 
    h = {}
    for ch in str:
        if ch in h: 
            return ch;
        else: 
            h[ch] = 0
    return '\0'
-------------------------------
test:
def check(first_Repeated_Char):
    assert first_Repeated_Char("Google") == "o"
    assert first_Repeated_Char("data") == "a"
    assert first_Repeated_Char("python") == '\0'

============MBPP/218============
prompt:
# Write a python function to find the minimum operations required to make two numbers equal.
import math   
def min_Operations(A,B):
-------------------------------
entry_point:
min_Operations
-------------------------------
canonical_solution:
import math   
def min_Operations(A,B):  
    if (A > B): 
        swap(A,B)  
    B = B // math.gcd(A,B);  
    return B - 1
-------------------------------
test:
def check(min_Operations):
    assert min_Operations(2,4) == 1
    assert min_Operations(4,10) == 4
    assert min_Operations(1,4) == 3

============MBPP/219============
prompt:
# Write a function to extract maximum and minimum k elements in the given tuple.

def extract_min_max(test_tup, K):
-------------------------------
entry_point:
extract_min_max
-------------------------------
canonical_solution:

def extract_min_max(test_tup, K):
  res = []
  test_tup = list(test_tup)
  temp = sorted(test_tup)
  for idx, val in enumerate(temp):
    if idx < K or idx >= len(temp) - K:
      res.append(val)
  res = tuple(res)
  return (res) 
-------------------------------
test:
def check(extract_min_max):
    assert extract_min_max((5, 20, 3, 7, 6, 8), 2) == (3, 5, 8, 20)
    assert extract_min_max((4, 5, 6, 1, 2, 7), 3) == (1, 2, 4, 5, 6, 7)
    assert extract_min_max((2, 3, 4, 8, 9, 11, 7), 4) == (2, 3, 4, 7, 8, 9, 11)

============MBPP/220============
prompt:
# Write a function to replace maximum n occurrences of spaces, commas, or dots with a colon.
import re
def replace_max_specialchar(text,n):
-------------------------------
entry_point:
replace_max_specialchar
-------------------------------
canonical_solution:
import re
def replace_max_specialchar(text,n):
 return (re.sub("[ ,.]", ":", text, n))
-------------------------------
test:
def check(replace_max_specialchar):
    assert replace_max_specialchar('Python language, Programming language.',2)==('Python:language: Programming language.')
    assert replace_max_specialchar('a b c,d e f',3)==('a:b:c:d e f')
    assert replace_max_specialchar('ram reshma,ram rahim',1)==('ram:reshma,ram rahim')

============MBPP/221============
prompt:
# Write a python function to find the first even number in a given list of numbers.

def first_even(nums):
-------------------------------
entry_point:
first_even
-------------------------------
canonical_solution:
def first_even(nums):
    first_even = next((el for el in nums if el%2==0),-1)
    return first_even
-------------------------------
test:
def check(first_even):
    assert first_even ([1, 3, 5, 7, 4, 1, 6, 8]) == 4
    assert first_even([2, 3, 4]) == 2
    assert first_even([5, 6, 7]) == 6

============MBPP/222============
prompt:
# Write a function to check if all the elements in tuple have same data type or not.

def check_type(test_tuple):
-------------------------------
entry_point:
check_type
-------------------------------
canonical_solution:
def check_type(test_tuple):
  res = True
  for ele in test_tuple:
    if not isinstance(ele, type(test_tuple[0])):
      res = False
      break
  return (res) 
-------------------------------
test:
def check(check_type):
    assert check_type((5, 6, 7, 3, 5, 6) ) == True
    assert check_type((1, 2, "4") ) == False
    assert check_type((3, 2, 1, 4, 5) ) == True

============MBPP/223============
prompt:
# Write a function to check for majority element in the given sorted array.

def is_majority(arr, n, x):
-------------------------------
entry_point:
is_majority
-------------------------------
canonical_solution:
def is_majority(arr, n, x):
	i = binary_search(arr, 0, n-1, x)
	if i == -1:
		return False
	if ((i + n//2) <= (n -1)) and arr[i + n//2] == x:
		return True
	else:
		return False
def binary_search(arr, low, high, x):
	if high >= low:
		mid = (low + high)//2 
		if (mid == 0 or x > arr[mid-1]) and (arr[mid] == x):
			return mid
		elif x > arr[mid]:
			return binary_search(arr, (mid + 1), high, x)
		else:
			return binary_search(arr, low, (mid -1), x)
	return -1
-------------------------------
test:
def check(is_majority):
    assert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True
    assert is_majority([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False
    assert is_majority([1, 1, 1, 2, 2], 5, 1) == True

============MBPP/224============
prompt:
# Write a python function to count set bits of a given number.

def count_Set_Bits(n):
-------------------------------
entry_point:
count_Set_Bits
-------------------------------
canonical_solution:
def count_Set_Bits(n): 
    count = 0
    while (n): 
        count += n & 1
        n >>= 1
    return count 
-------------------------------
test:
def check(count_Set_Bits):
    assert count_Set_Bits(2) == 1
    assert count_Set_Bits(4) == 1
    assert count_Set_Bits(6) == 2

============MBPP/225============
prompt:
# Write a python function to find the minimum element in a sorted and rotated array.

def find_Min(arr,low,high):
-------------------------------
entry_point:
find_Min
-------------------------------
canonical_solution:
def find_Min(arr,low,high): 
    while (low < high): 
        mid = low + (high - low) // 2;   
        if (arr[mid] == arr[high]): 
            high -= 1; 
        elif (arr[mid] > arr[high]): 
            low = mid + 1; 
        else: 
            high = mid; 
    return arr[high]; 
-------------------------------
test:
def check(find_Min):
    assert find_Min([1,2,3,4,5],0,4) == 1
    assert find_Min([4,6,8],0,2) == 4
    assert find_Min([2,3,5,7,9],0,4) == 2

============MBPP/226============
prompt:
# Write a python function to remove the characters which have odd index values of a given string.

def odd_values_string(str):
-------------------------------
entry_point:
odd_values_string
-------------------------------
canonical_solution:
def odd_values_string(str):
  result = "" 
  for i in range(len(str)):
    if i % 2 == 0:
      result = result + str[i]
  return result
-------------------------------
test:
def check(odd_values_string):
    assert odd_values_string('abcdef') == 'ace'
    assert odd_values_string('python') == 'pto'
    assert odd_values_string('data') == 'dt'

============MBPP/227============
prompt:
# Write a function to find minimum of three numbers.

def min_of_three(a,b,c):
-------------------------------
entry_point:
min_of_three
-------------------------------
canonical_solution:
def min_of_three(a,b,c): 
      if (a <= b) and (a <= c): 
        smallest = a 
      elif (b <= a) and (b <= c): 
        smallest = b 
      else: 
        smallest = c 
      return smallest 
-------------------------------
test:
def check(min_of_three):
    assert min_of_three(10,20,0)==0
    assert min_of_three(19,15,18)==15
    assert min_of_three(-10,-20,-30)==-30

============MBPP/228============
prompt:
# Write a python function to check whether all the bits are unset in the given range or not.

def all_Bits_Set_In_The_Given_Range(n,l,r):
-------------------------------
entry_point:
all_Bits_Set_In_The_Given_Range
-------------------------------
canonical_solution:
def all_Bits_Set_In_The_Given_Range(n,l,r):  
    num = (((1 << r) - 1) ^ ((1 << (l - 1)) - 1)) 
    new_num = n & num
    if (new_num == 0): 
        return True
    return False
-------------------------------
test:
def check(all_Bits_Set_In_The_Given_Range):
    assert all_Bits_Set_In_The_Given_Range(4,1,2) == True
    assert all_Bits_Set_In_The_Given_Range(17,2,4) == True
    assert all_Bits_Set_In_The_Given_Range(39,4,6) == False

============MBPP/229============
prompt:
# Write a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.

def re_arrange_array(arr, n):
-------------------------------
entry_point:
re_arrange_array
-------------------------------
canonical_solution:
def re_arrange_array(arr, n):
  j=0
  for i in range(0, n):
    if (arr[i] < 0):
      temp = arr[i]
      arr[i] = arr[j]
      arr[j] = temp
      j = j + 1
  return arr
-------------------------------
test:
def check(re_arrange_array):
    assert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]
    assert re_arrange_array([12, -14, -26, 13, 15], 5) == [-14, -26, 12, 13, 15]
    assert re_arrange_array([10, 24, 36, -42, -39, -78, 85], 7) == [-42, -39, -78, 10, 24, 36, 85]

============MBPP/230============
prompt:
# Write a function to replace blank spaces with any character in a string.

def replace_blank(str1,char):
-------------------------------
entry_point:
replace_blank
-------------------------------
canonical_solution:
def replace_blank(str1,char):
 str2 = str1.replace(' ', char)
 return str2
-------------------------------
test:
def check(replace_blank):
    assert replace_blank("hello people",'@')==("hello@people")
    assert replace_blank("python program language",'$')==("python$program$language")
    assert replace_blank("blank space","-")==("blank-space")

============MBPP/231============
prompt:
# Write a function to find the maximum sum in the given right triangle of numbers.

def max_sum(tri, n):
-------------------------------
entry_point:
max_sum
-------------------------------
canonical_solution:
def max_sum(tri, n): 
	if n > 1: 
		tri[1][1] = tri[1][1]+tri[0][0] 
		tri[1][0] = tri[1][0]+tri[0][0] 
	for i in range(2, n): 
		tri[i][0] = tri[i][0] + tri[i-1][0] 
		tri[i][i] = tri[i][i] + tri[i-1][i-1] 
		for j in range(1, i): 
			if tri[i][j]+tri[i-1][j-1] >= tri[i][j]+tri[i-1][j]: 
				tri[i][j] = tri[i][j] + tri[i-1][j-1] 
			else: 
				tri[i][j] = tri[i][j]+tri[i-1][j] 
	return (max(tri[n-1]))
-------------------------------
test:
def check(max_sum):
    assert max_sum([[1], [2,1], [3,3,2]], 3) == 6
    assert max_sum([[1], [1, 2], [4, 1, 12]], 3) == 15 
    assert max_sum([[2], [3,2], [13,23,12]], 3) == 28

============MBPP/232============
prompt:
# Write a function to get the n largest items from a dataset.
import heapq
def larg_nnum(list1,n):
-------------------------------
entry_point:
larg_nnum
-------------------------------
canonical_solution:
import heapq
def larg_nnum(list1,n):
 largest=heapq.nlargest(n,list1)
 return largest
-------------------------------
test:
def check(larg_nnum):
    assert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)==[100,90]
    assert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],5)==[100,90,80,70,60]
    assert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],3)==[100,90,80]

============MBPP/233============
prompt:
# Write a function to find the lateral surface area of a cylinder.

def lateralsuface_cylinder(r,h):
-------------------------------
entry_point:
lateralsuface_cylinder
-------------------------------
canonical_solution:
def lateralsuface_cylinder(r,h):
  lateralsurface= 2*3.1415*r*h
  return lateralsurface
-------------------------------
test:
def check(lateralsuface_cylinder):
    assert lateralsuface_cylinder(10,5)==314.15000000000003
    assert lateralsuface_cylinder(4,5)==125.66000000000001
    assert lateralsuface_cylinder(4,10)==251.32000000000002

============MBPP/234============
prompt:
# Write a function to find the volume of a cube.

def volume_cube(l):
-------------------------------
entry_point:
volume_cube
-------------------------------
canonical_solution:
def volume_cube(l):
  volume = l * l * l
  return volume
-------------------------------
test:
def check(volume_cube):
    assert volume_cube(3)==27
    assert volume_cube(2)==8
    assert volume_cube(5)==125

============MBPP/235============
prompt:
# Write a python function to set all even bits of a given number.

def even_bit_set_number(n):
-------------------------------
entry_point:
even_bit_set_number
-------------------------------
canonical_solution:
def even_bit_set_number(n): 
    count = 0;res = 0;temp = n 
    while(temp > 0): 
        if (count % 2 == 1): 
            res |= (1 << count)
        count+=1
        temp >>= 1
    return (n | res) 
-------------------------------
test:
def check(even_bit_set_number):
    assert even_bit_set_number(10) == 10
    assert even_bit_set_number(20) == 30
    assert even_bit_set_number(30) == 30

============MBPP/236============
prompt:
# Write a python function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.

def No_of_Triangle(N,K):
-------------------------------
entry_point:
No_of_Triangle
-------------------------------
canonical_solution:
def No_of_Triangle(N,K):
    if (N < K):
        return -1;
    else:
        Tri_up = 0;
        Tri_up = ((N - K + 1) *(N - K + 2)) // 2;
        Tri_down = 0;
        Tri_down = ((N - 2 * K + 1) *(N - 2 * K + 2)) // 2;
        return Tri_up + Tri_down;
-------------------------------
test:
def check(No_of_Triangle):
    assert No_of_Triangle(4,2) == 7
    assert No_of_Triangle(4,3) == 3
    assert No_of_Triangle(1,3) == -1

============MBPP/237============
prompt:
# Write a function to check the occurrences of records which occur similar times in the given tuples.
from collections import Counter 
def check_occurences(test_list):
-------------------------------
entry_point:
check_occurences
-------------------------------
canonical_solution:
from collections import Counter 
def check_occurences(test_list):
  res = dict(Counter(tuple(ele) for ele in map(sorted, test_list)))
  return  (res) 
-------------------------------
test:
def check(check_occurences):
    assert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}
    assert check_occurences([(4, 2), (2, 4), (3, 6), (6, 3), (7, 4)] ) == {(2, 4): 2, (3, 6): 2, (4, 7): 1}
    assert check_occurences([(13, 2), (11, 23), (12, 25), (25, 12), (16, 23)] ) == {(2, 13): 1, (11, 23): 1, (12, 25): 2, (16, 23): 1}

============MBPP/238============
prompt:
# Write a python function to count number of non-empty substrings of a given string.

def number_of_substrings(str):
-------------------------------
entry_point:
number_of_substrings
-------------------------------
canonical_solution:
def number_of_substrings(str): 
	str_len = len(str); 
	return int(str_len * (str_len + 1) / 2); 
-------------------------------
test:
def check(number_of_substrings):
    assert number_of_substrings("abc") == 6
    assert number_of_substrings("abcd") == 10
    assert number_of_substrings("abcde") == 15

============MBPP/239============
prompt:
# Write a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.

def get_total_number_of_sequences(m,n):
-------------------------------
entry_point:
get_total_number_of_sequences
-------------------------------
canonical_solution:
def get_total_number_of_sequences(m,n): 
	T=[[0 for i in range(n+1)] for i in range(m+1)] 
	for i in range(m+1): 
		for j in range(n+1): 
			if i==0 or j==0: 
				T[i][j]=0
			elif i<j: 
				T[i][j]=0
			elif j==1: 
				T[i][j]=i 
			else: 
				T[i][j]=T[i-1][j]+T[i//2][j-1] 
	return T[m][n]
-------------------------------
test:
def check(get_total_number_of_sequences):
    assert get_total_number_of_sequences(10, 4) == 4
    assert get_total_number_of_sequences(5, 2) == 6
    assert get_total_number_of_sequences(16, 3) == 84

============MBPP/240============
prompt:
# Write a function to replace the last element of the list with another list.

def replace_list(list1,list2):
-------------------------------
entry_point:
replace_list
-------------------------------
canonical_solution:
def replace_list(list1,list2):
 list1[-1:] = list2
 replace_list=list1
 return replace_list

-------------------------------
test:
def check(replace_list):
    assert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]
    assert replace_list([1,2,3,4,5],[5,6,7,8])==[1,2,3,4,5,6,7,8]
    assert replace_list(["red","blue","green"],["yellow"])==["red","blue","yellow"]

============MBPP/241============
prompt:
# Write a function to generate a 3d array having each element as '*'.

def array_3d(m,n,o):
-------------------------------
entry_point:
array_3d
-------------------------------
canonical_solution:
def array_3d(m,n,o):
 array_3d = [[ ['*' for col in range(m)] for col in range(n)] for row in range(o)]
 return array_3d
-------------------------------
test:
def check(array_3d):
    assert array_3d(6,4,3)==[[['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']]]
    assert array_3d(5,3,4)==[[['*', '*', '*', '*', '*'], ['*', '*', '*', '*','*'], ['*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*'],['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']]]
    assert array_3d(1,2,3)==[[['*'],['*']],[['*'],['*']],[['*'],['*']]]

============MBPP/242============
prompt:
# Write a function to count total characters in a string.

def count_charac(str1):
-------------------------------
entry_point:
count_charac
-------------------------------
canonical_solution:
def count_charac(str1):
 total = 0
 for i in str1:
    total = total + 1
 return total
-------------------------------
test:
def check(count_charac):
    assert count_charac("python programming")==18
    assert count_charac("language")==8
    assert count_charac("words")==5

============MBPP/243============
prompt:
# Write a function to sort the given list based on the occurrence of first element of tuples.

def sort_on_occurence(lst):
-------------------------------
entry_point:
sort_on_occurence
-------------------------------
canonical_solution:
def sort_on_occurence(lst): 
	dct = {} 
	for i, j in lst: 
		dct.setdefault(i, []).append(j) 
	return ([(i, *dict.fromkeys(j), len(j)) 
				for i, j in dct.items()]) 
-------------------------------
test:
def check(sort_on_occurence):
    assert sort_on_occurence([(1, 'Jake'), (2, 'Bob'), (1, 'Cara')]) == [(1, 'Jake', 'Cara', 2), (2, 'Bob', 1)]
    assert sort_on_occurence([('b', 'ball'), ('a', 'arm'), ('b', 'b'), ('a', 'ant')]) == [('b', 'ball', 'b', 2), ('a', 'arm', 'ant', 2)]
    assert sort_on_occurence([(2, 'Mark'), (3, 'Maze'), (2, 'Sara')]) == [(2, 'Mark', 'Sara', 2), (3, 'Maze', 1)]

============MBPP/244============
prompt:
# Write a python function to find the next perfect square greater than a given number.
import math  
def next_Perfect_Square(N):
-------------------------------
entry_point:
next_Perfect_Square
-------------------------------
canonical_solution:
import math  
def next_Perfect_Square(N): 
    nextN = math.floor(math.sqrt(N)) + 1
    return nextN * nextN 
-------------------------------
test:
def check(next_Perfect_Square):
    assert next_Perfect_Square(35) == 36
    assert next_Perfect_Square(6) == 9
    assert next_Perfect_Square(9) == 16

============MBPP/245============
prompt:
# Write a function to find the maximum sum of bi-tonic sub-sequence for the given array.

def max_sum(arr, n):
-------------------------------
entry_point:
max_sum
-------------------------------
canonical_solution:
def max_sum(arr, n): 
	MSIBS = arr[:] 
	for i in range(n): 
		for j in range(0, i): 
			if arr[i] > arr[j] and MSIBS[i] < MSIBS[j] + arr[i]: 
				MSIBS[i] = MSIBS[j] + arr[i] 
	MSDBS = arr[:] 
	for i in range(1, n + 1): 
		for j in range(1, i): 
			if arr[-i] > arr[-j] and MSDBS[-i] < MSDBS[-j] + arr[-i]: 
				MSDBS[-i] = MSDBS[-j] + arr[-i] 
	max_sum = float("-Inf") 
	for i, j, k in zip(MSIBS, MSDBS, arr): 
		max_sum = max(max_sum, i + j - k) 
	return max_sum
-------------------------------
test:
def check(max_sum):
    assert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9], 9) == 194
    assert max_sum([80, 60, 30, 40, 20, 10], 6) == 210
    assert max_sum([2, 3 ,14, 16, 21, 23, 29, 30], 8) == 138

============MBPP/246============
prompt:
# Write a function for computing square roots using the babylonian method.

def babylonian_squareroot(number):
-------------------------------
entry_point:
babylonian_squareroot
-------------------------------
canonical_solution:
def babylonian_squareroot(number):
    if(number == 0):
        return 0;
    g = number/2.0;
    g2 = g + 1;
    while(g != g2):
        n = number/ g;
        g2 = g;
        g = (g + n)/2;
    return g;
-------------------------------
test:
def check(babylonian_squareroot):
    assert babylonian_squareroot(10)==3.162277660168379
    assert babylonian_squareroot(2)==1.414213562373095
    assert babylonian_squareroot(9)==3.0

============MBPP/247============
prompt:
# Write a function to find the longest palindromic subsequence in the given string.

def lps(str):
-------------------------------
entry_point:
lps
-------------------------------
canonical_solution:
def lps(str): 
	n = len(str) 
	L = [[0 for x in range(n)] for x in range(n)] 
	for i in range(n): 
		L[i][i] = 1
	for cl in range(2, n+1): 
		for i in range(n-cl+1): 
			j = i+cl-1
			if str[i] == str[j] and cl == 2: 
				L[i][j] = 2
			elif str[i] == str[j]: 
				L[i][j] = L[i+1][j-1] + 2
			else: 
				L[i][j] = max(L[i][j-1], L[i+1][j]); 
	return L[0][n-1]
-------------------------------
test:
def check(lps):
    assert lps("TENS FOR TENS") == 5 
    assert lps("CARDIO FOR CARDS") == 7
    assert lps("PART OF THE JOURNEY IS PART") == 9 

============MBPP/248============
prompt:
# Write a function to calculate the harmonic sum of n-1.

def harmonic_sum(n):
-------------------------------
entry_point:
harmonic_sum
-------------------------------
canonical_solution:
def harmonic_sum(n):
  if n < 2:
    return 1
  else:
    return 1 / n + (harmonic_sum(n - 1)) 
-------------------------------
test:
def check(harmonic_sum):
    assert harmonic_sum(7) == 2.5928571428571425
    assert harmonic_sum(4) == 2.083333333333333
    assert harmonic_sum(19) == 3.547739657143682

============MBPP/249============
prompt:
# Write a function to find the intersection of two arrays using lambda function.

def intersection_array(array_nums1,array_nums2):
-------------------------------
entry_point:
intersection_array
-------------------------------
canonical_solution:
def intersection_array(array_nums1,array_nums2):
 result = list(filter(lambda x: x in array_nums1, array_nums2)) 
 return result
-------------------------------
test:
def check(intersection_array):
    assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]
    assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[3,5,7,9])==[3,5,7,9]
    assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[10,20,30,40])==[10]

============MBPP/250============
prompt:
# Write a python function to count the occcurences of an element in a tuple.

def count_X(tup, x):
-------------------------------
entry_point:
count_X
-------------------------------
canonical_solution:
def count_X(tup, x): 
    count = 0
    for ele in tup: 
        if (ele == x): 
            count = count + 1
    return count 
-------------------------------
test:
def check(count_X):
    assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0
    assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),10) == 3
    assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),8) == 4

============MBPP/251============
prompt:
# Write a function to insert an element before each element of a list.

def insert_element(list,element):
-------------------------------
entry_point:
insert_element
-------------------------------
canonical_solution:
def insert_element(list,element):
 list = [v for elt in list for v in (element, elt)]
 return list
-------------------------------
test:
def check(insert_element):
    assert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black'] 
    assert insert_element(['python', 'java'] ,'program')==['program', 'python', 'program', 'java'] 
    assert insert_element(['happy', 'sad'] ,'laugh')==['laugh', 'happy', 'laugh', 'sad'] 

============MBPP/252============
prompt:
# Write a python function to convert complex numbers to polar coordinates.
import cmath  
def convert(numbers):
-------------------------------
entry_point:
convert
-------------------------------
canonical_solution:
import cmath  
def convert(numbers):    
  num = cmath.polar(numbers)  
  return (num) 
-------------------------------
test:
def check(convert):
    assert convert(1) == (1.0, 0.0)
    assert convert(4) == (4.0,0.0)
    assert convert(5) == (5.0,0.0)

============MBPP/253============
prompt:
# Write a python function to count integers from a given list.

def count_integer(list1):
-------------------------------
entry_point:
count_integer
-------------------------------
canonical_solution:
def count_integer(list1):
    ctr = 0
    for i in list1:
        if isinstance(i, int):
            ctr = ctr + 1
    return ctr
-------------------------------
test:
def check(count_integer):
    assert count_integer([1,2,'abc',1.2]) == 2
    assert count_integer([1,2,3]) == 3
    assert count_integer([1,1.2,4,5.1]) == 2

============MBPP/254============
prompt:
# Write a function to find all words starting with 'a' or 'e' in a given string.
import re
def words_ae(text):
-------------------------------
entry_point:
words_ae
-------------------------------
canonical_solution:
import re
def words_ae(text):
 list = re.findall("[ae]\w+", text)
 return list
-------------------------------
test:
def check(words_ae):
    assert words_ae("python programe")==['ame']
    assert words_ae("python programe language")==['ame','anguage']
    assert words_ae("assert statement")==['assert', 'atement']

============MBPP/255============
prompt:
# Write a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.
from itertools import combinations_with_replacement 
def combinations_colors(l, n):
-------------------------------
entry_point:
combinations_colors
-------------------------------
canonical_solution:
from itertools import combinations_with_replacement 
def combinations_colors(l, n):
    return list(combinations_with_replacement(l,n))
-------------------------------
test:
def check(combinations_colors):
    assert combinations_colors( ["Red","Green","Blue"],1)==[('Red',), ('Green',), ('Blue',)]
    assert combinations_colors( ["Red","Green","Blue"],2)==[('Red', 'Red'), ('Red', 'Green'), ('Red', 'Blue'), ('Green', 'Green'), ('Green', 'Blue'), ('Blue', 'Blue')]
    assert combinations_colors( ["Red","Green","Blue"],3)==[('Red', 'Red', 'Red'), ('Red', 'Red', 'Green'), ('Red', 'Red', 'Blue'), ('Red', 'Green', 'Green'), ('Red', 'Green', 'Blue'), ('Red', 'Blue', 'Blue'), ('Green', 'Green', 'Green'), ('Green', 'Green', 'Blue'), ('Green', 'Blue', 'Blue'), ('Blue', 'Blue', 'Blue')]

============MBPP/256============
prompt:
# Write a python function to count the number of prime numbers less than a given non-negative number.

def count_Primes_nums(n):
-------------------------------
entry_point:
count_Primes_nums
-------------------------------
canonical_solution:
def count_Primes_nums(n):
    ctr = 0
    for num in range(n):
        if num <= 1:
            continue
        for i in range(2,num):
            if (num % i) == 0:
                break
        else:
            ctr += 1
    return ctr
-------------------------------
test:
def check(count_Primes_nums):
    assert count_Primes_nums(5) == 2
    assert count_Primes_nums(10) == 4
    assert count_Primes_nums(100) == 25

============MBPP/257============
prompt:
# Write a function to swap two numbers.

def swap_numbers(a,b):
-------------------------------
entry_point:
swap_numbers
-------------------------------
canonical_solution:
def swap_numbers(a,b):
 temp = a
 a = b
 b = temp
 return (a,b)
-------------------------------
test:
def check(swap_numbers):
    assert swap_numbers(10,20)==(20,10)
    assert swap_numbers(15,17)==(17,15)
    assert swap_numbers(100,200)==(200,100)

============MBPP/258============
prompt:
# Write a function to find number of odd elements in the given list using lambda function.

def count_odd(array_nums):
-------------------------------
entry_point:
count_odd
-------------------------------
canonical_solution:
def count_odd(array_nums):
   count_odd = len(list(filter(lambda x: (x%2 != 0) , array_nums)))
   return count_odd
-------------------------------
test:
def check(count_odd):
    assert count_odd([1, 2, 3, 5, 7, 8, 10])==4
    assert count_odd([10,15,14,13,-18,12,-20])==2
    assert count_odd([1, 2, 4, 8, 9])==2

============MBPP/259============
prompt:
# Write a function to maximize the given two tuples.

def maximize_elements(test_tup1, test_tup2):
-------------------------------
entry_point:
maximize_elements
-------------------------------
canonical_solution:
def maximize_elements(test_tup1, test_tup2):
  res = tuple(tuple(max(a, b) for a, b in zip(tup1, tup2))
   for tup1, tup2 in zip(test_tup1, test_tup2))
  return (res) 
-------------------------------
test:
def check(maximize_elements):
    assert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))
    assert maximize_elements(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((7, 8), (5, 10), (3, 10), (8, 11))
    assert maximize_elements(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((8, 9), (6, 11), (4, 11), (9, 12))

============MBPP/260============
prompt:
# Write a function to find the nth newman–shanks–williams prime number.

def newman_prime(n):
-------------------------------
entry_point:
newman_prime
-------------------------------
canonical_solution:
def newman_prime(n): 
	if n == 0 or n == 1: 
		return 1
	return 2 * newman_prime(n - 1) + newman_prime(n - 2)
-------------------------------
test:
def check(newman_prime):
    assert newman_prime(3) == 7 
    assert newman_prime(4) == 17
    assert newman_prime(5) == 41

============MBPP/261============
prompt:
# Write a function to perform mathematical division operation across the given tuples.

def division_elements(test_tup1, test_tup2):
-------------------------------
entry_point:
division_elements
-------------------------------
canonical_solution:
def division_elements(test_tup1, test_tup2):
  res = tuple(ele1 // ele2 for ele1, ele2 in zip(test_tup1, test_tup2))
  return (res) 
-------------------------------
test:
def check(division_elements):
    assert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)
    assert division_elements((12, 6, 8, 16),(6, 3, 4, 4)) == (2, 2, 2, 4)
    assert division_elements((20, 14, 36, 18),(5, 7, 6, 9)) == (4, 2, 6, 2)

============MBPP/262============
prompt:
# Write a function to split a given list into two parts where the length of the first part of the list is given.

def split_two_parts(list1, L):
-------------------------------
entry_point:
split_two_parts
-------------------------------
canonical_solution:
def split_two_parts(list1, L):
    return list1[:L], list1[L:]
-------------------------------
test:
def check(split_two_parts):
    assert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])
    assert split_two_parts(['a', 'b', 'c', 'd'],2)==(['a', 'b'], ['c', 'd'])
    assert split_two_parts(['p', 'y', 't', 'h', 'o', 'n'],4)==(['p', 'y', 't', 'h'], ['o', 'n'])

============MBPP/263============
prompt:
# Write a function to merge two dictionaries.

def merge_dict(d1,d2):
-------------------------------
entry_point:
merge_dict
-------------------------------
canonical_solution:
def merge_dict(d1,d2):
 d = d1.copy()
 d.update(d2)
 return d
-------------------------------
test:
def check(merge_dict):
    assert merge_dict({'a': 100, 'b': 200},{'x': 300, 'y': 200})=={'x': 300, 'y': 200, 'a': 100, 'b': 200}
    assert merge_dict({'a':900,'b':900,'d':900},{'a':900,'b':900,'d':900})=={'a':900,'b':900,'d':900,'a':900,'b':900,'d':900}
    assert merge_dict({'a':10,'b':20},{'x':30,'y':40})=={'x':30,'y':40,'a':10,'b':20}

============MBPP/264============
prompt:
# Write a function to calculate a dog's age in dog's years.

def dog_age(h_age):
-------------------------------
entry_point:
dog_age
-------------------------------
canonical_solution:
def dog_age(h_age):
 if h_age < 0:
 	exit()
 elif h_age <= 2:
	 d_age = h_age * 10.5
 else:
	 d_age = 21 + (h_age - 2)*4
 return d_age
-------------------------------
test:
def check(dog_age):
    assert dog_age(12)==61
    assert dog_age(15)==73
    assert dog_age(24)==109

============MBPP/265============
prompt:
# Write a function to split a list for every nth element.

def list_split(S, step):
-------------------------------
entry_point:
list_split
-------------------------------
canonical_solution:
def list_split(S, step):
    return [S[i::step] for i in range(step)]
-------------------------------
test:
def check(list_split):
    assert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']] 
    assert list_split([1,2,3,4,5,6,7,8,9,10,11,12,13,14],3)==[[1,4,7,10,13], [2,5,8,11,14], [3,6,9,12]] 
    assert list_split(['python','java','C','C++','DBMS','SQL'],2)==[['python', 'C', 'DBMS'], ['java', 'C++', 'SQL']] 

============MBPP/266============
prompt:
# Write a function to find the lateral surface area of a cube.

def lateralsurface_cube(l):
-------------------------------
entry_point:
lateralsurface_cube
-------------------------------
canonical_solution:
def lateralsurface_cube(l):
  LSA = 4 * (l * l)
  return LSA
-------------------------------
test:
def check(lateralsurface_cube):
    assert lateralsurface_cube(5)==100
    assert lateralsurface_cube(9)==324
    assert lateralsurface_cube(10)==400

============MBPP/267============
prompt:
# Write a python function to find the sum of squares of first n odd natural numbers.

def square_Sum(n):
-------------------------------
entry_point:
square_Sum
-------------------------------
canonical_solution:
def square_Sum(n):  
    return int(n*(4*n*n-1)/3) 
-------------------------------
test:
def check(square_Sum):
    assert square_Sum(2) == 10
    assert square_Sum(3) == 35
    assert square_Sum(4) == 84

============MBPP/268============
prompt:
# Write a function to find the n'th star number.

def find_star_num(n):
-------------------------------
entry_point:
find_star_num
-------------------------------
canonical_solution:
def find_star_num(n): 
	return (6 * n * (n - 1) + 1) 
-------------------------------
test:
def check(find_star_num):
    assert find_star_num(3) == 37
    assert find_star_num(4) == 73
    assert find_star_num(5) == 121

============MBPP/269============
prompt:
# Write a function to find the ascii value of a character.

def ascii_value(k):
-------------------------------
entry_point:
ascii_value
-------------------------------
canonical_solution:
def ascii_value(k):
  ch=k
  return ord(ch)
-------------------------------
test:
def check(ascii_value):
    assert ascii_value('A')==65
    assert ascii_value('R')==82
    assert ascii_value('S')==83

============MBPP/270============
prompt:
# Write a python function to find the sum of even numbers at even positions.

def sum_even_and_even_index(arr,n):
-------------------------------
entry_point:
sum_even_and_even_index
-------------------------------
canonical_solution:
def sum_even_and_even_index(arr,n):  
    i = 0
    sum = 0
    for i in range(0,n,2): 
        if (arr[i] % 2 == 0) : 
            sum += arr[i]  
    return sum
-------------------------------
test:
def check(sum_even_and_even_index):
    assert sum_even_and_even_index([5, 6, 12, 1, 18, 8],6) == 30
    assert sum_even_and_even_index([3, 20, 17, 9, 2, 10, 18, 13, 6, 18],10) == 26
    assert sum_even_and_even_index([5, 6, 12, 1],4) == 12

============MBPP/271============
prompt:
# Write a python function to find the sum of fifth power of first n even natural numbers.

def even_Power_Sum(n):
-------------------------------
entry_point:
even_Power_Sum
-------------------------------
canonical_solution:
def even_Power_Sum(n): 
    sum = 0; 
    for i in range(1,n+1): 
        j = 2*i; 
        sum = sum + (j*j*j*j*j); 
    return sum; 
-------------------------------
test:
def check(even_Power_Sum):
    assert even_Power_Sum(2) == 1056
    assert even_Power_Sum(3) == 8832
    assert even_Power_Sum(1) == 32

============MBPP/272============
prompt:
# Write a function to perfom the rear element extraction from list of tuples records.

def rear_extract(test_list):
-------------------------------
entry_point:
rear_extract
-------------------------------
canonical_solution:
def rear_extract(test_list):
  res = [lis[-1] for lis in test_list]
  return (res) 
-------------------------------
test:
def check(rear_extract):
    assert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]
    assert rear_extract([(1, 'Sai', 36), (2, 'Ayesha', 25), (3, 'Salman', 45)]) == [36, 25, 45]
    assert rear_extract([(1, 'Sudeep', 14), (2, 'Vandana', 36), (3, 'Dawood', 56)]) == [14, 36, 56]

============MBPP/273============
prompt:
# Write a function to substract the contents of one tuple with corresponding index of other tuple.

def substract_elements(test_tup1, test_tup2):
-------------------------------
entry_point:
substract_elements
-------------------------------
canonical_solution:
def substract_elements(test_tup1, test_tup2):
  res = tuple(map(lambda i, j: i - j, test_tup1, test_tup2))
  return (res) 
-------------------------------
test:
def check(substract_elements):
    assert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)
    assert substract_elements((11, 2, 3), (24, 45 ,16)) == (-13, -43, -13)
    assert substract_elements((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)

============MBPP/274============
prompt:
# Write a python function to find sum of even index binomial coefficients.
import math  
def even_binomial_Coeff_Sum( n):
-------------------------------
entry_point:
even_binomial_Coeff_Sum
-------------------------------
canonical_solution:
import math  
def even_binomial_Coeff_Sum( n): 
    return (1 << (n - 1)) 
-------------------------------
test:
def check(even_binomial_Coeff_Sum):
    assert even_binomial_Coeff_Sum(4) == 8
    assert even_binomial_Coeff_Sum(6) == 32
    assert even_binomial_Coeff_Sum(2) == 2

============MBPP/275============
prompt:
# Write a python function to find the position of the last removed element from the given array.
import math as mt 
def get_Position(a,n,m):
-------------------------------
entry_point:
get_Position
-------------------------------
canonical_solution:
import math as mt 
def get_Position(a,n,m): 
    for i in range(n): 
        a[i] = (a[i] // m + (a[i] % m != 0))  
    result,maxx = -1,-1
    for i in range(n - 1,-1,-1): 
        if (maxx < a[i]): 
            maxx = a[i] 
            result = i 
    return result + 1
-------------------------------
test:
def check(get_Position):
    assert get_Position([2,5,4],3,2) == 2
    assert get_Position([4,3],2,2) == 2
    assert get_Position([1,2,3,4],4,1) == 4

============MBPP/276============
prompt:
# Write a function to find the volume of a cylinder.

def volume_cylinder(r,h):
-------------------------------
entry_point:
volume_cylinder
-------------------------------
canonical_solution:
def volume_cylinder(r,h):
  volume=3.1415*r*r*h
  return volume
-------------------------------
test:
def check(volume_cylinder):
    assert volume_cylinder(10,5)==1570.7500000000002
    assert volume_cylinder(4,5)==251.32000000000002
    assert volume_cylinder(4,10)==502.64000000000004

============MBPP/277============
prompt:
# Write a function to filter a dictionary based on values.

def dict_filter(dict,n):
-------------------------------
entry_point:
dict_filter
-------------------------------
canonical_solution:
def dict_filter(dict,n):
 result = {key:value for (key, value) in dict.items() if value >=n}
 return result
-------------------------------
test:
def check(dict_filter):
    assert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}
    assert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},180)=={ 'Alden Cantrell': 180, 'Pierre Cox': 190}
    assert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},190)=={ 'Pierre Cox': 190}

============MBPP/278============
prompt:
# Write a function to find the element count that occurs before the record in the given tuple.

def count_first_elements(test_tup):
-------------------------------
entry_point:
count_first_elements
-------------------------------
canonical_solution:
def count_first_elements(test_tup):
  for count, ele in enumerate(test_tup):
    if isinstance(ele, tuple):
      break
  return (count) 
-------------------------------
test:
def check(count_first_elements):
    assert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3
    assert count_first_elements((2, 9, (5, 7), 11) ) == 2
    assert count_first_elements((11, 15, 5, 8, (2, 3), 8) ) == 4

============MBPP/279============
prompt:
# Write a function to find the nth decagonal number.

def is_num_decagonal(n):
-------------------------------
entry_point:
is_num_decagonal
-------------------------------
canonical_solution:
def is_num_decagonal(n): 
	return 4 * n * n - 3 * n 
-------------------------------
test:
def check(is_num_decagonal):
    assert is_num_decagonal(3) == 27
    assert is_num_decagonal(7) == 175
    assert is_num_decagonal(10) == 370

============MBPP/280============
prompt:
# Write a function to search an element in the given array by using sequential search.

def sequential_search(dlist, item):
-------------------------------
entry_point:
sequential_search
-------------------------------
canonical_solution:
def sequential_search(dlist, item):
    pos = 0
    found = False
    while pos < len(dlist) and not found:
        if dlist[pos] == item:
            found = True
        else:
            pos = pos + 1
    return found, pos
-------------------------------
test:
def check(sequential_search):
    assert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)
    assert sequential_search([12, 32, 45, 62, 35, 47, 44, 61],61) == (True, 7)
    assert sequential_search([9, 10, 17, 19, 22, 39, 48, 56],48) == (True, 6)

============MBPP/281============
prompt:
# Write a python function to check if the elements of a given list are unique or not.

def all_unique(test_list):
-------------------------------
entry_point:
all_unique
-------------------------------
canonical_solution:
def all_unique(test_list):
    if len(test_list) > len(set(test_list)):
        return False
    return True
-------------------------------
test:
def check(all_unique):
    assert all_unique([1,2,3]) == True
    assert all_unique([1,2,1,2]) == False
    assert all_unique([1,2,3,4,5]) == True

============MBPP/282============
prompt:
# Write a function to substaract two lists using map and lambda function.

def sub_list(nums1,nums2):
-------------------------------
entry_point:
sub_list
-------------------------------
canonical_solution:
def sub_list(nums1,nums2):
  result = map(lambda x, y: x - y, nums1, nums2)
  return list(result)
-------------------------------
test:
def check(sub_list):
    assert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]
    assert sub_list([1,2],[3,4])==[-2,-2]
    assert sub_list([90,120],[50,70])==[40,50]

============MBPP/283============
prompt:
# Write a python function to check whether the frequency of each digit is less than or equal to the digit itself.

def validate(n):
-------------------------------
entry_point:
validate
-------------------------------
canonical_solution:
def validate(n): 
    for i in range(10): 
        temp = n;  
        count = 0; 
        while (temp): 
            if (temp % 10 == i): 
                count+=1;  
            if (count > i): 
                return False
            temp //= 10; 
    return True
-------------------------------
test:
def check(validate):
    assert validate(1234) == True
    assert validate(51241) == False
    assert validate(321) == True

============MBPP/284============
prompt:
# Write a function to check whether all items of a list are equal to a given string.

def check_element(list,element):
-------------------------------
entry_point:
check_element
-------------------------------
canonical_solution:
def check_element(list,element):
  check_element=all(v== element for v in list)
  return check_element
-------------------------------
test:
def check(check_element):
    assert check_element(["green", "orange", "black", "white"],'blue')==False
    assert check_element([1,2,3,4],7)==False
    assert check_element(["green", "green", "green", "green"],'green')==True

============MBPP/285============
prompt:
# Write a function that matches a string that has an a followed by two to three 'b'.
import re
def text_match_two_three(text):
-------------------------------
entry_point:
text_match_two_three
-------------------------------
canonical_solution:
import re
def text_match_two_three(text):
        patterns = 'ab{2,3}'
        if re.search(patterns,  text):
                return 'Found a match!'
        else:
                return('Not matched!')
-------------------------------
test:
def check(text_match_two_three):
    assert text_match_two_three("ac")==('Not matched!')
    assert text_match_two_three("dc")==('Not matched!')
    assert text_match_two_three("abbbba")==('Found a match!')

============MBPP/286============
prompt:
# Write a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.

def max_sub_array_sum_repeated(a, n, k):
-------------------------------
entry_point:
max_sub_array_sum_repeated
-------------------------------
canonical_solution:
def max_sub_array_sum_repeated(a, n, k): 
	max_so_far = -2147483648
	max_ending_here = 0
	for i in range(n*k): 
		max_ending_here = max_ending_here + a[i%n] 
		if (max_so_far < max_ending_here): 
			max_so_far = max_ending_here 
		if (max_ending_here < 0): 
			max_ending_here = 0
	return max_so_far
-------------------------------
test:
def check(max_sub_array_sum_repeated):
    assert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30
    assert max_sub_array_sum_repeated([-1, 10, 20], 3, 2) == 59
    assert max_sub_array_sum_repeated([-1, -2, -3], 3, 3) == -1

============MBPP/287============
prompt:
# Write a python function to find the sum of squares of first n even natural numbers.

def square_Sum(n):
-------------------------------
entry_point:
square_Sum
-------------------------------
canonical_solution:
def square_Sum(n):  
    return int(2*n*(n+1)*(2*n+1)/3)
-------------------------------
test:
def check(square_Sum):
    assert square_Sum(2) == 20
    assert square_Sum(3) == 56
    assert square_Sum(4) == 120

============MBPP/288============
prompt:
# Write a function to count array elements having modular inverse under given prime number p equal to itself.

def modular_inverse(arr, N, P):
-------------------------------
entry_point:
modular_inverse
-------------------------------
canonical_solution:
def modular_inverse(arr, N, P):
	current_element = 0
	for i in range(0, N):
		if ((arr[i] * arr[i]) % P == 1):
			current_element = current_element + 1
	return current_element
-------------------------------
test:
def check(modular_inverse):
    assert modular_inverse([ 1, 6, 4, 5 ], 4, 7) == 2
    assert modular_inverse([1, 3, 8, 12, 12], 5, 13) == 3
    assert modular_inverse([2, 3, 4, 5], 4, 6) == 1

============MBPP/289============
prompt:
# Write a python function to calculate the number of odd days in a given year.

def odd_Days(N):
-------------------------------
entry_point:
odd_Days
-------------------------------
canonical_solution:
def odd_Days(N): 
    hund1 = N // 100
    hund4 = N // 400
    leap = N >> 2
    ordd = N - leap 
    if (hund1): 
        ordd += hund1 
        leap -= hund1 
    if (hund4): 
        ordd -= hund4 
        leap += hund4 
    days = ordd + leap * 2
    odd = days % 7
    return odd 
-------------------------------
test:
def check(odd_Days):
    assert odd_Days(100) == 5
    assert odd_Days(50) ==6
    assert odd_Days(75) == 2

============MBPP/290============
prompt:
# Write a function to find the list of lists with maximum length.

def max_length(list1):
-------------------------------
entry_point:
max_length
-------------------------------
canonical_solution:
def max_length(list1):
    max_length = max(len(x) for x in  list1 )  
    max_list = max((x) for x in   list1)
    return(max_length, max_list)
-------------------------------
test:
def check(max_length):
    assert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])
    assert max_length([[1], [5, 7], [10, 12, 14,15]])==(4, [10, 12, 14,15])
    assert max_length([[5], [15,20,25]])==(3, [15,20,25])

============MBPP/291============
prompt:
# Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.

def count_no_of_ways(n, k):
-------------------------------
entry_point:
count_no_of_ways
-------------------------------
canonical_solution:
def count_no_of_ways(n, k): 
	dp = [0] * (n + 1) 
	total = k 
	mod = 1000000007
	dp[1] = k 
	dp[2] = k * k	 
	for i in range(3,n+1): 
		dp[i] = ((k - 1) * (dp[i - 1] + dp[i - 2])) % mod 
	return dp[n]
-------------------------------
test:
def check(count_no_of_ways):
    assert count_no_of_ways(2, 4) == 16
    assert count_no_of_ways(3, 2) == 6
    assert count_no_of_ways(4, 4) == 228

============MBPP/292============
prompt:
# Write a python function to find quotient of two numbers.

def find(n,m):
-------------------------------
entry_point:
find
-------------------------------
canonical_solution:
def find(n,m):  
    q = n//m 
    return (q)
-------------------------------
test:
def check(find):
    assert find(10,3) == 3
    assert find(4,2) == 2
    assert find(20,5) == 4

============MBPP/293============
prompt:
# Write a function to find the third side of a right angled triangle.
import math
def otherside_rightangle(w,h):
-------------------------------
entry_point:
otherside_rightangle
-------------------------------
canonical_solution:
import math
def otherside_rightangle(w,h):
  s=math.sqrt((w*w)+(h*h))
  return s
-------------------------------
test:
def check(otherside_rightangle):
    assert otherside_rightangle(7,8)==10.63014581273465
    assert otherside_rightangle(3,4)==5
    assert otherside_rightangle(7,15)==16.55294535724685

============MBPP/294============
prompt:
# Write a function to find the maximum value in a given heterogeneous list.

def max_val(listval):
-------------------------------
entry_point:
max_val
-------------------------------
canonical_solution:
def max_val(listval):
     max_val = max(i for i in listval if isinstance(i, int)) 
     return(max_val)
-------------------------------
test:
def check(max_val):
    assert max_val(['Python', 3, 2, 4, 5, 'version'])==5
    assert max_val(['Python', 15, 20, 25])==25
    assert max_val(['Python', 30, 20, 40, 50, 'version'])==50

============MBPP/295============
prompt:
# Write a function to return the sum of all divisors of a number.

def sum_div(number):
-------------------------------
entry_point:
sum_div
-------------------------------
canonical_solution:
def sum_div(number):
    divisors = [1]
    for i in range(2, number):
        if (number % i)==0:
            divisors.append(i)
    return sum(divisors)
-------------------------------
test:
def check(sum_div):
    assert sum_div(8)==7
    assert sum_div(12)==16
    assert sum_div(7)==1

============MBPP/296============
prompt:
# Write a python function to count inversions in an array.

def get_Inv_Count(arr,n):
-------------------------------
entry_point:
get_Inv_Count
-------------------------------
canonical_solution:
def get_Inv_Count(arr,n): 
    inv_count = 0
    for i in range(n): 
        for j in range(i + 1,n): 
            if (arr[i] > arr[j]): 
                inv_count += 1
    return inv_count 
-------------------------------
test:
def check(get_Inv_Count):
    assert get_Inv_Count([1,20,6,4,5],5) == 5
    assert get_Inv_Count([1,2,1],3) == 1
    assert get_Inv_Count([1,2,5,6,1],5) == 3

============MBPP/297============
prompt:
# Write a function to flatten a given nested list structure.

def flatten_list(list1):
-------------------------------
entry_point:
flatten_list
-------------------------------
canonical_solution:
def flatten_list(list1):
    result_list = []
    if not list1: return result_list
    stack = [list(list1)]
    while stack:
        c_num = stack.pop()
        next = c_num.pop()
        if c_num: stack.append(c_num)
        if isinstance(next, list):
            if next: stack.append(list(next))
        else: result_list.append(next)
    result_list.reverse()
    return result_list 
-------------------------------
test:
def check(flatten_list):
    assert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]
    assert flatten_list([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]])==[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]
    assert flatten_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]

============MBPP/298============
prompt:
# Write a function to find the nested list elements which are present in another list.

def intersection_nested_lists(l1, l2):
-------------------------------
entry_point:
intersection_nested_lists
-------------------------------
canonical_solution:
def intersection_nested_lists(l1, l2):
    result = [[n for n in lst if n in l1] for lst in l2]
    return result
-------------------------------
test:
def check(intersection_nested_lists):
    assert intersection_nested_lists( [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==[[12], [7, 11], [1, 5, 8]]
    assert intersection_nested_lists([[2, 3, 1], [4, 5], [6, 8]], [[4, 5], [6, 8]])==[[], []]
    assert intersection_nested_lists(['john','amal','joel','george'],[['john'],['jack','john','mary'],['howard','john'],['jude']])==[['john'], ['john'], ['john'], []]

============MBPP/299============
prompt:
# Write a function to calculate the maximum aggregate from the list of tuples.
from collections import defaultdict
def max_aggregate(stdata):
-------------------------------
entry_point:
max_aggregate
-------------------------------
canonical_solution:
from collections import defaultdict
def max_aggregate(stdata):
    temp = defaultdict(int)
    for name, marks in stdata:
        temp[name] += marks
    return max(temp.items(), key=lambda x: x[1])
-------------------------------
test:
def check(max_aggregate):
    assert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)
    assert max_aggregate([('Juan Whelan',50),('Sabah Colley',48),('Peter Nichols',37),('Juan Whelan',22),('Sabah Colley',14)])==('Juan Whelan', 72)
    assert max_aggregate([('Juan Whelan',10),('Sabah Colley',20),('Peter Nichols',30),('Juan Whelan',40),('Sabah Colley',50)])==('Sabah Colley', 70)

============MBPP/300============
prompt:
# Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.

def count_binary_seq(n):
-------------------------------
entry_point:
count_binary_seq
-------------------------------
canonical_solution:
def count_binary_seq(n): 
	nCr = 1
	res = 1
	for r in range(1, n + 1): 
		nCr = (nCr * (n + 1 - r)) / r 
		res += nCr * nCr 
	return res 
-------------------------------
test:
def check(count_binary_seq):
    assert count_binary_seq(1) == 2.0
    assert count_binary_seq(2) == 6.0
    assert count_binary_seq(3) == 20.0

============MBPP/301============
prompt:
# Write a function to find the depth of a dictionary.

def dict_depth(d):
-------------------------------
entry_point:
dict_depth
-------------------------------
canonical_solution:
def dict_depth(d):
    if isinstance(d, dict):
        return 1 + (max(map(dict_depth, d.values())) if d else 0)
    return 0
-------------------------------
test:
def check(dict_depth):
    assert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4
    assert dict_depth({'a':1, 'b': {'c':'python'}})==2
    assert dict_depth({1: 'Sun', 2: {3: {4:'Mon'}}})==3

============MBPP/302============
prompt:
# Write a python function to find the most significant bit number which is also a set bit.

def set_Bit_Number(n):
-------------------------------
entry_point:
set_Bit_Number
-------------------------------
canonical_solution:
def set_Bit_Number(n): 
    if (n == 0): 
        return 0; 
    msb = 0; 
    n = int(n / 2); 
    while (n > 0): 
        n = int(n / 2); 
        msb += 1; 
    return (1 << msb)
-------------------------------
test:
def check(set_Bit_Number):
    assert set_Bit_Number(6) == 4
    assert set_Bit_Number(10) == 8
    assert set_Bit_Number(18) == 16

============MBPP/303============
prompt:
# Write a python function to check whether the count of inversion of two types are same or not.
import sys 
def solve(a,n):
-------------------------------
entry_point:
solve
-------------------------------
canonical_solution:
import sys 
def solve(a,n):   
    mx = -sys.maxsize - 1
    for j in range(1,n):  
        if (mx > a[j]):  
            return False  
        mx = max(mx,a[j - 1])    
    return True
-------------------------------
test:
def check(solve):
    assert solve([1,0,2],3) == True
    assert solve([1,2,0],3) == False
    assert solve([1,2,1],3) == True

============MBPP/304============
prompt:
# Write a python function to find element at a given index after number of rotations.

def find_Element(arr,ranges,rotations,index) :
-------------------------------
entry_point:
find_Element
-------------------------------
canonical_solution:
def find_Element(arr,ranges,rotations,index) :  
    for i in range(rotations - 1,-1,-1 ) : 
        left = ranges[i][0] 
        right = ranges[i][1] 
        if (left <= index and right >= index) : 
            if (index == left) : 
                index = right 
            else : 
                index = index - 1 
    return arr[index] 
-------------------------------
test:
def check(find_Element):
    assert find_Element([1,2,3,4,5],[[0,2],[0,3]],2,1) == 3
    assert find_Element([1,2,3,4],[[0,1],[0,2]],1,2) == 3
    assert find_Element([1,2,3,4,5,6],[[0,1],[0,2]],1,1) == 1

============MBPP/305============
prompt:
# Write a function to match two words from a list of words starting with letter 'p'.
import re
def start_withp(words):
-------------------------------
entry_point:
start_withp
-------------------------------
canonical_solution:
import re
def start_withp(words):
 for w in words:
        m = re.match("(P\w+)\W(P\w+)", w)
        if m:
            return m.groups()
-------------------------------
test:
def check(start_withp):
    assert start_withp(["Python PHP", "Java JavaScript", "c c++"])==('Python', 'PHP')
    assert start_withp(["Python Programming","Java Programming"])==('Python','Programming')
    assert start_withp(["Pqrst Pqr","qrstuv"])==('Pqrst','Pqr')

============MBPP/306============
prompt:
# Write a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i .

def max_sum_increasing_subseq(a, n, index, k):
-------------------------------
entry_point:
max_sum_increasing_subseq
-------------------------------
canonical_solution:
def max_sum_increasing_subseq(a, n, index, k):
	dp = [[0 for i in range(n)] 
			for i in range(n)]
	for i in range(n):
		if a[i] > a[0]:
			dp[0][i] = a[i] + a[0]
		else:
			dp[0][i] = a[i]
	for i in range(1, n):
		for j in range(n):
			if a[j] > a[i] and j > i:
				if dp[i - 1][i] + a[j] > dp[i - 1][j]:
					dp[i][j] = dp[i - 1][i] + a[j]
				else:
					dp[i][j] = dp[i - 1][j]
			else:
				dp[i][j] = dp[i - 1][j]
	return dp[index][k]
-------------------------------
test:
def check(max_sum_increasing_subseq):
    assert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11
    assert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 2, 5) == 7
    assert max_sum_increasing_subseq([11, 15, 19, 21, 26, 28, 31], 7, 2, 4) == 71

============MBPP/307============
prompt:
# Write a function to get a colon of a tuple.
from copy import deepcopy
def colon_tuplex(tuplex,m,n):
-------------------------------
entry_point:
colon_tuplex
-------------------------------
canonical_solution:
from copy import deepcopy
def colon_tuplex(tuplex,m,n):
  tuplex_colon = deepcopy(tuplex)
  tuplex_colon[m].append(n)
  return tuplex_colon
-------------------------------
test:
def check(colon_tuplex):
    assert colon_tuplex(("HELLO", 5, [], True) ,2,50)==("HELLO", 5, [50], True) 
    assert colon_tuplex(("HELLO", 5, [], True) ,2,100)==(("HELLO", 5, [100],True))
    assert colon_tuplex(("HELLO", 5, [], True) ,2,500)==("HELLO", 5, [500], True)

============MBPP/308============
prompt:
# Write a function to find the specified number of largest products from two given lists.

def large_product(nums1, nums2, N):
-------------------------------
entry_point:
large_product
-------------------------------
canonical_solution:
def large_product(nums1, nums2, N):
    result = sorted([x*y for x in nums1 for y in nums2], reverse=True)[:N]
    return result
-------------------------------
test:
def check(large_product):
    assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]
    assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],4)==[60, 54, 50, 48]
    assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],5)==[60, 54, 50, 48, 45]

============MBPP/309============
prompt:
# Write a python function to find the maximum of two numbers.

def maximum(a,b):
-------------------------------
entry_point:
maximum
-------------------------------
canonical_solution:
def maximum(a,b):   
    if a >= b: 
        return a 
    else: 
        return b 
-------------------------------
test:
def check(maximum):
    assert maximum(5,10) == 10
    assert maximum(-1,-2) == -1
    assert maximum(9,7) == 9

============MBPP/310============
prompt:
# Write a function to convert a given string to a tuple.

def string_to_tuple(str1):
-------------------------------
entry_point:
string_to_tuple
-------------------------------
canonical_solution:
def string_to_tuple(str1):
    result = tuple(x for x in str1 if not x.isspace()) 
    return result
-------------------------------
test:
def check(string_to_tuple):
    assert string_to_tuple("python 3.0")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')
    assert string_to_tuple("item1")==('i', 't', 'e', 'm', '1')
    assert string_to_tuple("15.10")==('1', '5', '.', '1', '0')

============MBPP/311============
prompt:
# Write a python function to set the left most unset bit.

def set_left_most_unset_bit(n):
-------------------------------
entry_point:
set_left_most_unset_bit
-------------------------------
canonical_solution:
def set_left_most_unset_bit(n): 
    if not (n & (n + 1)): 
        return n 
    pos, temp, count = 0, n, 0 
    while temp: 
        if not (temp & 1): 
            pos = count      
        count += 1; temp>>=1
    return (n | (1 << (pos))) 
-------------------------------
test:
def check(set_left_most_unset_bit):
    assert set_left_most_unset_bit(10) == 14
    assert set_left_most_unset_bit(12) == 14
    assert set_left_most_unset_bit(15) == 15

============MBPP/312============
prompt:
# Write a function to find the volume of a cone.
import math
def volume_cone(r,h):
-------------------------------
entry_point:
volume_cone
-------------------------------
canonical_solution:
import math
def volume_cone(r,h):
  volume = (1.0/3) * math.pi * r * r * h
  return volume
-------------------------------
test:
def check(volume_cone):
    assert volume_cone(5,12)==314.15926535897927
    assert volume_cone(10,15)==1570.7963267948965
    assert volume_cone(19,17)==6426.651371693521

============MBPP/313============
prompt:
# Write a python function to print positive numbers in a list.

def pos_nos(list1):
-------------------------------
entry_point:
pos_nos
-------------------------------
canonical_solution:
def pos_nos(list1):
  for num in list1: 
    if num >= 0: 
       return num 
-------------------------------
test:
def check(pos_nos):
    assert pos_nos([-1,-2,1,2]) == 1,2
    assert pos_nos([3,4,-5]) == 3,4
    assert pos_nos([-2,-3,1]) == 1

============MBPP/314============
prompt:
# Write a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.

def max_sum_rectangular_grid(grid, n) :
-------------------------------
entry_point:
max_sum_rectangular_grid
-------------------------------
canonical_solution:
def max_sum_rectangular_grid(grid, n) : 
	incl = max(grid[0][0], grid[1][0]) 
	excl = 0
	for i in range(1, n) : 
		excl_new = max(excl, incl) 
		incl = excl + max(grid[0][i], grid[1][i]) 
		excl = excl_new 
	return max(excl, incl)
-------------------------------
test:
def check(max_sum_rectangular_grid):
    assert max_sum_rectangular_grid([ [1, 4, 5], [2, 0, 0 ] ], 3) == 7
    assert max_sum_rectangular_grid([ [ 1, 2, 3, 4, 5], [ 6, 7, 8, 9, 10] ], 5) == 24
    assert max_sum_rectangular_grid([ [7, 9, 11, 15, 19], [21, 25, 28, 31, 32] ], 5) == 81

============MBPP/315============
prompt:
# Write a python function to find the first maximum length of even word.

def find_Max_Len_Even(str):
-------------------------------
entry_point:
find_Max_Len_Even
-------------------------------
canonical_solution:
def find_Max_Len_Even(str): 
    n = len(str) 
    i = 0
    currlen = 0
    maxlen = 0
    st = -1
    while (i < n): 
        if (str[i] == ' '): 
            if (currlen % 2 == 0): 
                if (maxlen < currlen): 
                    maxlen = currlen 
                    st = i - currlen 
            currlen = 0 
        else : 
            currlen += 1
        i += 1
    if (currlen % 2 == 0): 
        if (maxlen < currlen): 
            maxlen = currlen 
            st = i - currlen 
    if (st == -1): 
        return "-1" 
    return str[st: st + maxlen] 
-------------------------------
test:
def check(find_Max_Len_Even):
    assert find_Max_Len_Even("python language") == "language"
    assert find_Max_Len_Even("maximum even length") == "length"
    assert find_Max_Len_Even("eve") == "-1"

============MBPP/316============
prompt:
# Write a function to find the index of the last occurrence of a given number in a sorted array.

def find_last_occurrence(A, x):
-------------------------------
entry_point:
find_last_occurrence
-------------------------------
canonical_solution:
def find_last_occurrence(A, x):
    (left, right) = (0, len(A) - 1)
    result = -1
    while left <= right:
        mid = (left + right) // 2
        if x == A[mid]:
            result = mid
            left = mid + 1
        elif x < A[mid]:
            right = mid - 1
        else:
            left = mid + 1
    return result 
-------------------------------
test:
def check(find_last_occurrence):
    assert find_last_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 3
    assert find_last_occurrence([2, 3, 5, 8, 6, 6, 8, 9, 9, 9], 9) == 9
    assert find_last_occurrence([2, 2, 1, 5, 6, 6, 6, 9, 9, 9], 6) == 6

============MBPP/317============
prompt:
# Write a function to reflect the modified run-length encoding from a list.
from itertools import groupby
def modified_encode(alist):
-------------------------------
entry_point:
modified_encode
-------------------------------
canonical_solution:
from itertools import groupby
def modified_encode(alist):
        def ctr_ele(el):
            if len(el)>1: return [len(el), el[0]]
            else: return el[0]
        return [ctr_ele(list(group)) for key, group in groupby(alist)]
-------------------------------
test:
def check(modified_encode):
    assert modified_encode([1,1,2,3,4,4,5,1])==[[2, 1], 2, 3, [2, 4], 5, 1]
    assert modified_encode('automatically')==['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', [2, 'l'], 'y']
    assert modified_encode('python')==['p', 'y', 't', 'h', 'o', 'n']

============MBPP/318============
prompt:
# Write a python function to find the maximum volume of a cuboid with given sum of sides.

def max_volume (s):
-------------------------------
entry_point:
max_volume
-------------------------------
canonical_solution:
def max_volume (s): 
    maxvalue = 0
    i = 1
    for i in range(s - 1): 
        j = 1
        for j in range(s): 
            k = s - i - j 
            maxvalue = max(maxvalue, i * j * k)         
    return maxvalue 
-------------------------------
test:
def check(max_volume):
    assert max_volume(8) == 18
    assert max_volume(4) == 2
    assert max_volume(1) == 0

============MBPP/319============
prompt:
# Write a function to find all five characters long word in the given string by using regex.
import re
def find_long_word(text):
-------------------------------
entry_point:
find_long_word
-------------------------------
canonical_solution:
import re
def find_long_word(text):
  return (re.findall(r"\b\w{5}\b", text))
-------------------------------
test:
def check(find_long_word):
    assert find_long_word('Please move back to strem') == ['strem']
    assert find_long_word('4K Ultra HD streaming player') == ['Ultra']
    assert find_long_word('Streaming Media Player') == ['Media']

============MBPP/320============
prompt:
# Write a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.

def sum_difference(n):
-------------------------------
entry_point:
sum_difference
-------------------------------
canonical_solution:
def sum_difference(n):
    sumofsquares = 0
    squareofsum = 0
    for num in range(1, n+1):
        sumofsquares += num * num
        squareofsum += num
    squareofsum = squareofsum ** 2
    return squareofsum - sumofsquares
-------------------------------
test:
def check(sum_difference):
    assert sum_difference(12)==5434
    assert sum_difference(20)==41230
    assert sum_difference(54)==2151270

============MBPP/321============
prompt:
# Write a function to find the demlo number for the given number.

def find_demlo(s):
-------------------------------
entry_point:
find_demlo
-------------------------------
canonical_solution:
def find_demlo(s): 
	l = len(s) 
	res = "" 
	for i in range(1,l+1): 
		res = res + str(i) 
	for i in range(l-1,0,-1): 
		res = res + str(i) 
	return res 	
-------------------------------
test:
def check(find_demlo):
    assert find_demlo("111111") == '12345654321'
    assert find_demlo("1111") == '1234321'
    assert find_demlo("13333122222") == '123456789101110987654321'

============MBPP/322============
prompt:
# Write a function to find all index positions of the minimum values in a given list.

def position_min(list1):
-------------------------------
entry_point:
position_min
-------------------------------
canonical_solution:
def position_min(list1):
    min_val = min(list1)
    min_result = [i for i, j in enumerate(list1) if j == min_val]
    return min_result
-------------------------------
test:
def check(position_min):
    assert position_min([12,33,23,10,67,89,45,667,23,12,11,10,54])==[3,11]
    assert position_min([1,2,2,2,4,4,4,5,5,5,5])==[0]
    assert position_min([2,1,5,6,8,3,4,9,10,11,8,12])==[1]

============MBPP/323============
prompt:
# Write a function to re-arrange the given array in alternating positive and negative items.

def right_rotate(arr, n, out_of_place, cur):
-------------------------------
entry_point:
right_rotate
-------------------------------
canonical_solution:
def right_rotate(arr, n, out_of_place, cur):
	temp = arr[cur]
	for i in range(cur, out_of_place, -1):
		arr[i] = arr[i - 1]
	arr[out_of_place] = temp
	return arr
def re_arrange(arr, n):
	out_of_place = -1
	for index in range(n):
		if (out_of_place >= 0):
			if ((arr[index] >= 0 and arr[out_of_place] < 0) or
			(arr[index] < 0 and arr[out_of_place] >= 0)):
				arr = right_rotate(arr, n, out_of_place, index)
				if (index-out_of_place > 2):
					out_of_place += 2
				else:
					out_of_place = - 1
		if (out_of_place == -1):
			if ((arr[index] >= 0 and index % 2 == 0) or
			 (arr[index] < 0 and index % 2 == 1)):
				out_of_place = index
	return arr
-------------------------------
test:
def check(right_rotate):
    assert re_arrange([-5, -2, 5, 2, 4,	7, 1, 8, 0, -8], 10) == [-5, 5, -2, 2, -8, 4, 7, 1, 8, 0]
    assert re_arrange([1, 2, 3, -4, -1, 4], 6) == [-4, 1, -1, 2, 3, 4]
    assert re_arrange([4, 7, 9, 77, -4, 5, -3, -9], 8) == [-4, 4, -3, 7, -9, 9, 77, 5]

============MBPP/324============
prompt:
# Write a function to extract the sum of alternate chains of tuples.

def sum_of_alternates(test_tuple):
-------------------------------
entry_point:
sum_of_alternates
-------------------------------
canonical_solution:
def sum_of_alternates(test_tuple):
  sum1 = 0
  sum2 = 0
  for idx, ele in enumerate(test_tuple):
    if idx % 2:
      sum1 += ele
    else:
      sum2 += ele
  return ((sum1),(sum2)) 
-------------------------------
test:
def check(sum_of_alternates):
    assert sum_of_alternates((5, 6, 3, 6, 10, 34)) == (46, 18)
    assert sum_of_alternates((1, 2, 3, 4, 5)) == (6, 9)
    assert sum_of_alternates((6, 7, 8, 9, 4, 5)) == (21, 18)

============MBPP/325============
prompt:
# Write a python function to find the minimum number of squares whose sum is equal to a given number.

def get_Min_Squares(n):
-------------------------------
entry_point:
get_Min_Squares
-------------------------------
canonical_solution:
def get_Min_Squares(n):
    if n <= 3:
        return n;
    res = n 
    for x in range(1,n + 1):
        temp = x * x;
        if temp > n:
            break
        else:
            res = min(res,1 + get_Min_Squares(n  - temp)) 
    return res;
-------------------------------
test:
def check(get_Min_Squares):
    assert get_Min_Squares(6) == 3
    assert get_Min_Squares(2) == 2
    assert get_Min_Squares(4) == 1

============MBPP/326============
prompt:
# Write a function to get the word with most number of occurrences in the given strings list.
from collections import defaultdict 

def most_occurrences(test_list):
-------------------------------
entry_point:
most_occurrences
-------------------------------
canonical_solution:
from collections import defaultdict 

def most_occurrences(test_list):
  temp = defaultdict(int)
  for sub in test_list:
    for wrd in sub.split():
      temp[wrd] += 1
  res = max(temp, key=temp.get)
  return (str(res)) 
-------------------------------
test:
def check(most_occurrences):
    assert most_occurrences(["UTS is best for RTF", "RTF love UTS", "UTS is best"] ) == 'UTS'
    assert most_occurrences(["Its been a great year", "this year is so worse", "this year is okay"] ) == 'year'
    assert most_occurrences(["Families can be reunited", "people can be reunited", "Tasks can be achieved "] ) == 'can'

============MBPP/327============
prompt:
# Write a function to print check if the triangle is isosceles or not.

def check_isosceles(x,y,z):
-------------------------------
entry_point:
check_isosceles
-------------------------------
canonical_solution:
def check_isosceles(x,y,z):
  if x==y or y==z or z==x:
	   return True
  else:
     return False
-------------------------------
test:
def check(check_isosceles):
    assert check_isosceles(6,8,12)==False 
    assert check_isosceles(6,6,12)==True
    assert check_isosceles(6,16,20)==False

============MBPP/328============
prompt:
# Write a function to rotate a given list by specified number of items to the left direction.

def rotate_left(list1,m,n):
-------------------------------
entry_point:
rotate_left
-------------------------------
canonical_solution:
def rotate_left(list1,m,n):
  result =  list1[m:]+list1[:n]
  return result
-------------------------------
test:
def check(rotate_left):
    assert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)==[4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4]
    assert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2,2)==[3, 4, 5, 6, 7, 8, 9, 10, 1, 2]
    assert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],5,2)==[6, 7, 8, 9, 10, 1, 2]

============MBPP/329============
prompt:
# Write a python function to count negative numbers in a list.

def neg_count(list):
-------------------------------
entry_point:
neg_count
-------------------------------
canonical_solution:
def neg_count(list):
  neg_count= 0
  for num in list: 
    if num <= 0: 
      neg_count += 1
  return neg_count 
-------------------------------
test:
def check(neg_count):
    assert neg_count([-1,-2,3,-4,-5]) == 4
    assert neg_count([1,2,3]) == 0
    assert neg_count([1,2,-3,-10,20]) == 2

============MBPP/330============
prompt:
# Write a function to find all three, four, five characters long words in the given string by using regex.
import re
def find_char(text):
-------------------------------
entry_point:
find_char
-------------------------------
canonical_solution:
import re
def find_char(text):
  return (re.findall(r"\b\w{3,5}\b", text))
-------------------------------
test:
def check(find_char):
    assert find_char('For the four consumer complaints contact manager AKR reddy') == ['For', 'the', 'four', 'AKR', 'reddy']
    assert find_char('Certain service are subject to change MSR') == ['are', 'MSR']
    assert find_char('Third party legal desclaimers') == ['Third', 'party', 'legal']

============MBPP/331============
prompt:
# Write a python function to count unset bits of a given number.

def count_unset_bits(n):
-------------------------------
entry_point:
count_unset_bits
-------------------------------
canonical_solution:
def count_unset_bits(n): 
    count = 0
    x = 1
    while(x < n + 1): 
        if ((x & n) == 0): 
            count += 1
        x = x << 1
    return count  
-------------------------------
test:
def check(count_unset_bits):
    assert count_unset_bits(2) == 1
    assert count_unset_bits(4) == 2
    assert count_unset_bits(6) == 1

============MBPP/332============
prompt:
# Write a function to count character frequency of a given string.

def char_frequency(str1):
-------------------------------
entry_point:
char_frequency
-------------------------------
canonical_solution:
def char_frequency(str1):
    dict = {}
    for n in str1:
        keys = dict.keys()
        if n in keys:
            dict[n] += 1
        else:
            dict[n] = 1
    return dict
-------------------------------
test:
def check(char_frequency):
    assert char_frequency('python')=={'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}
    assert char_frequency('program')=={'p': 1, 'r': 2, 'o': 1, 'g': 1, 'a': 1, 'm': 1}
    assert char_frequency('language')=={'l': 1, 'a': 2, 'n': 1, 'g': 2, 'u': 1, 'e': 1}

============MBPP/333============
prompt:
# Write a python function to sort a list according to the second element in sublist.

def Sort(sub_li):
-------------------------------
entry_point:
Sort
-------------------------------
canonical_solution:
def Sort(sub_li): 
    sub_li.sort(key = lambda x: x[1]) 
    return sub_li 
-------------------------------
test:
def check(Sort):
    assert Sort([['a', 10], ['b', 5], ['c', 20], ['d', 15]]) == [['b', 5], ['a', 10], ['d', 15], ['c', 20]]
    assert Sort([['452', 10], ['256', 5], ['100', 20], ['135', 15]]) == [['256', 5], ['452', 10], ['135', 15], ['100', 20]]
    assert Sort([['rishi', 10], ['akhil', 5], ['ramya', 20], ['gaur', 15]]) == [['akhil', 5], ['rishi', 10], ['gaur', 15], ['ramya', 20]]

============MBPP/334============
prompt:
# Write a python function to check whether the triangle is valid or not if sides are given.

def check_Validity(a,b,c):
-------------------------------
entry_point:
check_Validity
-------------------------------
canonical_solution:
def check_Validity(a,b,c):  
    if (a + b <= c) or (a + c <= b) or (b + c <= a) : 
        return False
    else: 
        return True        
-------------------------------
test:
def check(check_Validity):
    assert check_Validity(1,2,3) == False
    assert check_Validity(2,3,5) == False
    assert check_Validity(7,10,5) == True

============MBPP/335============
prompt:
# Write a function to find the sum of arithmetic progression.

def ap_sum(a,n,d):
-------------------------------
entry_point:
ap_sum
-------------------------------
canonical_solution:
def ap_sum(a,n,d):
  total = (n * (2 * a + (n - 1) * d)) / 2
  return total
-------------------------------
test:
def check(ap_sum):
    assert ap_sum(1,5,2)==25
    assert ap_sum(2,6,4)==72
    assert ap_sum(1,4,5)==34

============MBPP/336============
prompt:
# Write a function to check whether the given month name contains 28 days or not.

def check_monthnum(monthname1):
-------------------------------
entry_point:
check_monthnum
-------------------------------
canonical_solution:
def check_monthnum(monthname1):
  if monthname1 == "February":
    return True
  else:
    return False
-------------------------------
test:
def check(check_monthnum):
    assert check_monthnum("February")==True
    assert check_monthnum("January")==False
    assert check_monthnum("March")==False

============MBPP/337============
prompt:
# Write a function that matches a word at the end of a string, with optional punctuation.
import re
def text_match_word(text):
-------------------------------
entry_point:
text_match_word
-------------------------------
canonical_solution:
import re
def text_match_word(text):
        patterns = '\w+\S*$'
        if re.search(patterns,  text):
                return 'Found a match!'
        else:
                return 'Not matched!'
-------------------------------
test:
def check(text_match_word):
    assert text_match_word("python.")==('Found a match!')
    assert text_match_word("python.")==('Found a match!')
    assert text_match_word("  lang  .")==('Not matched!')

============MBPP/338============
prompt:
# Write a python function to count the number of substrings with same first and last characters.

def check_Equality(s):
-------------------------------
entry_point:
check_Equality
-------------------------------
canonical_solution:
def check_Equality(s): 
    return (ord(s[0]) == ord(s[len(s) - 1])); 
def count_Substring_With_Equal_Ends(s): 
    result = 0; 
    n = len(s); 
    for i in range(n):
        for j in range(1,n-i+1): 
            if (check_Equality(s[i:i+j])): 
                result+=1; 
    return result; 
-------------------------------
test:
def check(check_Equality):
    assert count_Substring_With_Equal_Ends('aba') == 4
    assert count_Substring_With_Equal_Ends('abcab') == 7
    assert count_Substring_With_Equal_Ends('abc') == 3

============MBPP/339============
prompt:
# Write a python function to find the maximum occuring divisor in an interval.

def find_Divisor(x,y):
-------------------------------
entry_point:
find_Divisor
-------------------------------
canonical_solution:
def find_Divisor(x,y):  
    if (x==y): 
        return y 
    return 2
-------------------------------
test:
def check(find_Divisor):
    assert find_Divisor(2,2) == 2
    assert find_Divisor(2,5) == 2
    assert find_Divisor(5,10) == 2

============MBPP/340============
prompt:
# Write a python function to find the sum of the three lowest positive numbers from a given list of numbers.

def sum_three_smallest_nums(lst):
-------------------------------
entry_point:
sum_three_smallest_nums
-------------------------------
canonical_solution:
def sum_three_smallest_nums(lst):
	return sum(sorted([x for x in lst if x > 0])[:3])
-------------------------------
test:
def check(sum_three_smallest_nums):
    assert sum_three_smallest_nums([10,20,30,40,50,60,7]) == 37
    assert sum_three_smallest_nums([1,2,3,4,5]) == 6
    assert sum_three_smallest_nums([0,1,2,3,4,5]) == 6

============MBPP/341============
prompt:
# Write a function to convert the given set into ordered tuples.

def set_to_tuple(s):
-------------------------------
entry_point:
set_to_tuple
-------------------------------
canonical_solution:
def set_to_tuple(s):
  t = tuple(sorted(s))
  return (t)
-------------------------------
test:
def check(set_to_tuple):
    assert set_to_tuple({1, 2, 3, 4, 5}) == (1, 2, 3, 4, 5)
    assert set_to_tuple({6, 7, 8, 9, 10, 11}) == (6, 7, 8, 9, 10, 11)
    assert set_to_tuple({12, 13, 14, 15, 16}) == (12, 13, 14, 15, 16)

============MBPP/342============
prompt:
# Write a function to find the smallest range that includes at-least one element from each of the given arrays.
from heapq import heappop, heappush
class Node:
def __init__(self, value, list_num, index):
-------------------------------
entry_point:
__init__
-------------------------------
canonical_solution:
from heapq import heappop, heappush
class Node:
    def __init__(self, value, list_num, index):
        self.value = value
        self.list_num = list_num
        self.index = index
    def __lt__(self, other):
        return self.value < other.value
def find_minimum_range(list):
    high = float('-inf')
    p = (0, float('inf'))
    pq = []
    for i in range(len(list)):
        heappush(pq, Node(list[i][0], i, 0))
        high = max(high, list[i][0])
    while True:
        top = heappop(pq)
        low = top.value
        i = top.list_num
        j = top.index
        if high - low < p[1] - p[0]:
            p = (low, high)
        if j == len(list[i]) - 1:
            return p
        heappush(pq, Node(list[i][j + 1], i, j + 1))
        high = max(high, list[i][j + 1])
-------------------------------
test:
def check(__init__):
    assert find_minimum_range([[3, 6, 8, 10, 15], [1, 5, 12], [4, 8, 15, 16], [2, 6]]) == (4, 6)
    assert find_minimum_range([[ 2, 3, 4, 8, 10, 15 ], [1, 5, 12], [7, 8, 15, 16], [3, 6]]) == (4, 7)
    assert find_minimum_range([[4, 7, 9, 11, 16], [2, 6, 13], [5, 9, 16, 17], [3, 7]]) == (5, 7)

============MBPP/343============
prompt:
# Write a function to calculate the number of digits and letters in a string.

def dig_let(s):
-------------------------------
entry_point:
dig_let
-------------------------------
canonical_solution:
def dig_let(s):
 d=l=0
 for c in s:
    if c.isdigit():
        d=d+1
    elif c.isalpha():
        l=l+1
    else:
        pass
 return (l,d)
-------------------------------
test:
def check(dig_let):
    assert dig_let("python")==(6,0)
    assert dig_let("program")==(7,0)
    assert dig_let("python3.0")==(6,2)

============MBPP/344============
prompt:
# Write a python function to find number of elements with odd factors in a given range.

def count_Odd_Squares(n,m):
-------------------------------
entry_point:
count_Odd_Squares
-------------------------------
canonical_solution:
def count_Odd_Squares(n,m): 
    return int(m**0.5) - int((n-1)**0.5) 
-------------------------------
test:
def check(count_Odd_Squares):
    assert count_Odd_Squares(5,100) == 8
    assert count_Odd_Squares(8,65) == 6
    assert count_Odd_Squares(2,5) == 1

============MBPP/345============
prompt:
# Write a function to find the difference between two consecutive numbers in a given list.

def diff_consecutivenums(nums):
-------------------------------
entry_point:
diff_consecutivenums
-------------------------------
canonical_solution:
def diff_consecutivenums(nums):
    result = [b-a for a, b in zip(nums[:-1], nums[1:])]
    return result
-------------------------------
test:
def check(diff_consecutivenums):
    assert diff_consecutivenums([1, 1, 3, 4, 4, 5, 6, 7])==[0, 2, 1, 0, 1, 1, 1]
    assert diff_consecutivenums([4, 5, 8, 9, 6, 10])==[1, 3, 1, -3, 4]
    assert diff_consecutivenums([0, 1, 2, 3, 4, 4, 4, 4, 5, 7])==[1, 1, 1, 1, 0, 0, 0, 1, 2]

============MBPP/346============
prompt:
# Write a function to find entringer number e(n, k).

def zigzag(n, k):
-------------------------------
entry_point:
zigzag
-------------------------------
canonical_solution:
def zigzag(n, k): 
	if (n == 0 and k == 0): 
		return 1
	if (k == 0): 
		return 0
	return zigzag(n, k - 1) + zigzag(n - 1, n - k)
-------------------------------
test:
def check(zigzag):
    assert zigzag(4, 3) == 5
    assert zigzag(4, 2) == 4
    assert zigzag(3, 1) == 1

============MBPP/347============
prompt:
# Write a python function to count the number of squares in a rectangle.

def count_Squares(m,n):
-------------------------------
entry_point:
count_Squares
-------------------------------
canonical_solution:
def count_Squares(m,n): 
    if (n < m): 
        temp = m 
        m = n 
        n = temp 
    return n * (n + 1) * (3 * m - n + 1) // 6
-------------------------------
test:
def check(count_Squares):
    assert count_Squares(4,3) == 20
    assert count_Squares(1,2) == 2
    assert count_Squares(2,2) == 5

============MBPP/348============
prompt:
# Write a function to count sequences of given length having non-negative prefix sums that can be generated by given values.

def bin_coff(n, r):
-------------------------------
entry_point:
bin_coff
-------------------------------
canonical_solution:
def bin_coff(n, r): 
	val = 1
	if (r > (n - r)): 
		r = (n - r) 
	for i in range(0, r): 
		val *= (n - i) 
		val //= (i + 1) 
	return val 
def find_ways(M): 
	n = M // 2
	a = bin_coff(2 * n, n) 
	b = a // (n + 1) 
	return (b) 
-------------------------------
test:
def check(bin_coff):
    assert find_ways(4) == 2
    assert find_ways(6) == 5
    assert find_ways(8) == 14

============MBPP/349============
prompt:
# Write a python function to check whether the given string is a binary string or not.

def check(string) :
-------------------------------
entry_point:
check
-------------------------------
canonical_solution:
def check(string) :
    p = set(string) 
    s = {'0', '1'} 
    if s == p or p == {'0'} or p == {'1'}: 
        return ("Yes") 
    else : 
        return ("No") 
-------------------------------
test:
def check(check):
    assert check("01010101010") == "Yes"
    assert check("name0") == "No"
    assert check("101") == "Yes"

============MBPP/350============
prompt:
# Write a python function to minimize the length of the string by removing occurrence of only one character.

def minimum_Length(s) :
-------------------------------
entry_point:
minimum_Length
-------------------------------
canonical_solution:
def minimum_Length(s) : 
    maxOcc = 0
    n = len(s) 
    arr = [0]*26
    for i in range(n) : 
        arr[ord(s[i]) -ord('a')] += 1
    for i in range(26) : 
        if arr[i] > maxOcc : 
            maxOcc = arr[i] 
    return n - maxOcc 
-------------------------------
test:
def check(minimum_Length):
    assert minimum_Length("mnm") == 1
    assert minimum_Length("abcda") == 3
    assert minimum_Length("abcb") == 2

============MBPP/351============
prompt:
# Write a python function to find the first element occurring k times in a given array.

def first_Element(arr,n,k):
-------------------------------
entry_point:
first_Element
-------------------------------
canonical_solution:
def first_Element(arr,n,k): 
    count_map = {}; 
    for i in range(0, n): 
        if(arr[i] in count_map.keys()): 
            count_map[arr[i]] += 1
        else: 
            count_map[arr[i]] = 1
        i += 1
    for i in range(0, n):  
        if (count_map[arr[i]] == k): 
            return arr[i] 
        i += 1 
    return -1
-------------------------------
test:
def check(first_Element):
    assert first_Element([0,1,2,3,4,5],6,1) == 0
    assert first_Element([1,2,1,3,4],5,2) == 1
    assert first_Element([2,3,4,3,5,7,1,2,3,5],10,2) == 2

============MBPP/352============
prompt:
# Write a python function to check whether all the characters in a given string are unique.

def unique_Characters(str):
-------------------------------
entry_point:
unique_Characters
-------------------------------
canonical_solution:
def unique_Characters(str):
    for i in range(len(str)):
        for j in range(i + 1,len(str)): 
            if (str[i] == str[j]):
                return False;
    return True;
-------------------------------
test:
def check(unique_Characters):
    assert unique_Characters('aba') == False
    assert unique_Characters('abc') == True
    assert unique_Characters('abab') == False

============MBPP/353============
prompt:
# Write a function to remove a specified column from a given nested list.

def remove_column(list1, n):
-------------------------------
entry_point:
remove_column
-------------------------------
canonical_solution:
def remove_column(list1, n):
   for i in list1: 
    del i[n] 
   return list1
-------------------------------
test:
def check(remove_column):
    assert remove_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]],0)==[[2, 3], [4, 5], [1, 1]]
    assert remove_column([[1, 2, 3], [-2, 4, -5], [1, -1, 1]],2)==[[1, 2], [-2, 4], [1, -1]]
    assert remove_column([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]],0)==[[3], [7], [3], [15, 17], [7], [11]]

============MBPP/354============
prompt:
# Write a function to find t-nth term of arithemetic progression.

def tn_ap(a,n,d):
-------------------------------
entry_point:
tn_ap
-------------------------------
canonical_solution:
def tn_ap(a,n,d):
  tn = a + (n - 1) * d
  return tn
-------------------------------
test:
def check(tn_ap):
    assert tn_ap(1,5,2)==9
    assert tn_ap(2,6,4)==22
    assert tn_ap(1,4,5)==16

============MBPP/355============
prompt:
# Write a python function to count the number of rectangles in a circle of radius r.

def count_Rectangles(radius):
-------------------------------
entry_point:
count_Rectangles
-------------------------------
canonical_solution:
def count_Rectangles(radius):  
    rectangles = 0 
    diameter = 2 * radius 
    diameterSquare = diameter * diameter 
    for a in range(1, 2 * radius):  
        for b in range(1, 2 * radius): 
            diagnalLengthSquare = (a * a +  b * b)  
            if (diagnalLengthSquare <= diameterSquare) : 
                rectangles += 1
    return rectangles 
-------------------------------
test:
def check(count_Rectangles):
    assert count_Rectangles(2) == 8
    assert count_Rectangles(1) == 1
    assert count_Rectangles(0) == 0

============MBPP/356============
prompt:
# Write a function to find the third angle of a triangle using two angles.

def find_angle(a,b):
-------------------------------
entry_point:
find_angle
-------------------------------
canonical_solution:
def find_angle(a,b):
 c = 180 - (a + b)
 return c

-------------------------------
test:
def check(find_angle):
    assert find_angle(47,89)==44
    assert find_angle(45,95)==40
    assert find_angle(50,40)==90

============MBPP/357============
prompt:
# Write a function to find the maximum element of all the given tuple records.

def find_max(test_list):
-------------------------------
entry_point:
find_max
-------------------------------
canonical_solution:
def find_max(test_list):
  res = max(int(j) for i in test_list for j in i)
  return (res) 
-------------------------------
test:
def check(find_max):
    assert find_max([(2, 4), (6, 7), (5, 1), (6, 10), (8, 7)]) == 10
    assert find_max([(3, 5), (7, 8), (6, 2), (7, 11), (9, 8)]) == 11
    assert find_max([(4, 6), (8, 9), (7, 3), (8, 12), (10, 9)]) == 12

============MBPP/358============
prompt:
# Write a function to find modulo division of two lists using map and lambda function.

def moddiv_list(nums1,nums2):
-------------------------------
entry_point:
moddiv_list
-------------------------------
canonical_solution:
def moddiv_list(nums1,nums2):
  result = map(lambda x, y: x % y, nums1, nums2)
  return list(result)
-------------------------------
test:
def check(moddiv_list):
    assert moddiv_list([4,5,6],[1, 2, 3])==[0, 1, 0]
    assert moddiv_list([3,2],[1,4])==[0, 2]
    assert moddiv_list([90,120],[50,70])==[40, 50]

============MBPP/359============
prompt:
# Write a python function to check whether one root of the quadratic equation is twice of the other or not.

def Check_Solution(a,b,c):
-------------------------------
entry_point:
Check_Solution
-------------------------------
canonical_solution:
def Check_Solution(a,b,c): 
    if (2*b*b == 9*a*c): 
        return ("Yes"); 
    else: 
        return ("No"); 
-------------------------------
test:
def check(Check_Solution):
    assert Check_Solution(1,3,2) == "Yes"
    assert Check_Solution(1,2,3) == "No"
    assert Check_Solution(1,-5,6) == "No"

============MBPP/360============
prompt:
# Write a function to find the n’th carol number.

def get_carol(n):
-------------------------------
entry_point:
get_carol
-------------------------------
canonical_solution:
def get_carol(n): 
	result = (2**n) - 1
	return result * result - 2
-------------------------------
test:
def check(get_carol):
    assert get_carol(2) == 7
    assert get_carol(4) == 223
    assert get_carol(5) == 959

============MBPP/361============
prompt:
# Write a function to remove empty lists from a given list of lists.

def remove_empty(list1):
-------------------------------
entry_point:
remove_empty
-------------------------------
canonical_solution:
def remove_empty(list1):
  remove_empty = [x for x in list1 if x]
  return remove_empty
-------------------------------
test:
def check(remove_empty):
    assert remove_empty([[], [], [], 'Red', 'Green', [1,2], 'Blue', [], []])==['Red', 'Green', [1, 2], 'Blue']
    assert remove_empty([[], [], [],[],[], 'Green', [1,2], 'Blue', [], []])==[ 'Green', [1, 2], 'Blue']
    assert remove_empty([[], [], [], 'Python',[],[], 'programming', 'language',[],[],[], [], []])==['Python', 'programming', 'language']

============MBPP/362============
prompt:
# Write a python function to find the item with maximum occurrences in a given list.

def max_occurrences(nums):
-------------------------------
entry_point:
max_occurrences
-------------------------------
canonical_solution:
def max_occurrences(nums):
    max_val = 0
    result = nums[0] 
    for i in nums:
        occu = nums.count(i)
        if occu > max_val:
            max_val = occu
            result = i 
    return result
-------------------------------
test:
def check(max_occurrences):
    assert max_occurrences([1,2,3,1,2,3,12,4,2]) ==  2
    assert max_occurrences([1,2,6,7,0,1,0,1,0]) == 1,0
    assert max_occurrences([1,2,3,1,2,4,1]) == 1

============MBPP/363============
prompt:
# Write a function to add the k elements to each element in the tuple.

def add_K_element(test_list, K):
-------------------------------
entry_point:
add_K_element
-------------------------------
canonical_solution:
def add_K_element(test_list, K):
  res = [tuple(j + K for j in sub ) for sub in test_list]
  return (res) 
-------------------------------
test:
def check(add_K_element):
    assert add_K_element([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4) == [(5, 7, 8), (6, 8, 10), (7, 12, 5)]
    assert add_K_element([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 8) == [(9, 10, 11), (12, 13, 14), (15, 16, 17)]
    assert add_K_element([(11, 12, 13), (14, 15, 16), (17, 18, 19)], 9) == [(20, 21, 22), (23, 24, 25), (26, 27, 28)]

============MBPP/364============
prompt:
# Write a function to find the number of flips required to make the given binary string a sequence of alternate characters.

def make_flip(ch):
-------------------------------
entry_point:
make_flip
-------------------------------
canonical_solution:
def make_flip(ch): 
	return '1' if (ch == '0') else '0'
def get_flip_with_starting_charcter(str, expected): 
	flip_count = 0
	for i in range(len( str)): 
		if (str[i] != expected): 
			flip_count += 1
		expected = make_flip(expected) 
	return flip_count 
def min_flip_to_make_string_alternate(str): 
	return min(get_flip_with_starting_charcter(str, '0'),get_flip_with_starting_charcter(str, '1')) 
-------------------------------
test:
def check(make_flip):
    assert min_flip_to_make_string_alternate("0001010111") == 2
    assert min_flip_to_make_string_alternate("001") == 1
    assert min_flip_to_make_string_alternate("010111011") == 2 

============MBPP/365============
prompt:
# Write a python function to count the number of digits of a given number.

def count_Digit(n):
-------------------------------
entry_point:
count_Digit
-------------------------------
canonical_solution:
def count_Digit(n):
    count = 0
    while n != 0:
        n //= 10
        count += 1
    return count
-------------------------------
test:
def check(count_Digit):
    assert count_Digit(12345) == 5
    assert count_Digit(11223305) == 8
    assert count_Digit(4123459) == 7

============MBPP/366============
prompt:
# Write a python function to find the largest product of the pair of adjacent elements from a given list of integers.

def adjacent_num_product(list_nums):
-------------------------------
entry_point:
adjacent_num_product
-------------------------------
canonical_solution:
def adjacent_num_product(list_nums):
    return max(a*b for a, b in zip(list_nums, list_nums[1:]))
-------------------------------
test:
def check(adjacent_num_product):
    assert adjacent_num_product([1,2,3,4,5,6]) == 30
    assert adjacent_num_product([1,2,3,4,5]) == 20
    assert adjacent_num_product([2,3]) == 6

============MBPP/367============
prompt:
# Write a function to check if a binary tree is balanced or not.
class Node: 
def __init__(self, data):
-------------------------------
entry_point:
__init__
-------------------------------
canonical_solution:
class Node: 
	def __init__(self, data): 
		self.data = data 
		self.left = None
		self.right = None
def get_height(root): 
	if root is None: 
		return 0
	return max(get_height(root.left), get_height(root.right)) + 1
def is_tree_balanced(root): 
	if root is None: 
		return True
	lh = get_height(root.left) 
	rh = get_height(root.right) 
	if (abs(lh - rh) <= 1) and is_tree_balanced( 
	root.left) is True and is_tree_balanced( root.right) is True: 
		return True
	return False
-------------------------------
test:
def check(__init__):
    assert is_tree_balanced(root) == False
    assert is_tree_balanced(root1) == True
    assert is_tree_balanced(root2) == False 

============MBPP/368============
prompt:
# Write a function to repeat the given tuple n times.

def repeat_tuples(test_tup, N):
-------------------------------
entry_point:
repeat_tuples
-------------------------------
canonical_solution:
def repeat_tuples(test_tup, N):
  res = ((test_tup, ) * N)
  return (res) 
-------------------------------
test:
def check(repeat_tuples):
    assert repeat_tuples((1, 3), 4) == ((1, 3), (1, 3), (1, 3), (1, 3))
    assert repeat_tuples((1, 2), 3) == ((1, 2), (1, 2), (1, 2))
    assert repeat_tuples((3, 4), 5) == ((3, 4), (3, 4), (3, 4), (3, 4), (3, 4))

============MBPP/369============
prompt:
# Write a function to find the lateral surface area of cuboid

def lateralsurface_cuboid(l,w,h):
-------------------------------
entry_point:
lateralsurface_cuboid
-------------------------------
canonical_solution:
def lateralsurface_cuboid(l,w,h):
  LSA = 2*h*(l+w)
  return LSA
-------------------------------
test:
def check(lateralsurface_cuboid):
    assert lateralsurface_cuboid(8,5,6)==156
    assert lateralsurface_cuboid(7,9,10)==320
    assert lateralsurface_cuboid(10,20,30)==1800

============MBPP/370============
prompt:
# Write a function to sort a tuple by its float element.

def float_sort(price):
-------------------------------
entry_point:
float_sort
-------------------------------
canonical_solution:
def float_sort(price):
  float_sort=sorted(price, key=lambda x: float(x[1]), reverse=True)
  return float_sort
-------------------------------
test:
def check(float_sort):
    assert float_sort([('item1', '12.20'), ('item2', '15.10'), ('item3', '24.5')])==[('item3', '24.5'), ('item2', '15.10'), ('item1', '12.20')] 
    assert float_sort([('item1', '15'), ('item2', '10'), ('item3', '20')])==[('item3', '20'), ('item1', '15'), ('item2', '10')] 
    assert float_sort([('item1', '5'), ('item2', '10'), ('item3', '14')])==[('item3', '14'), ('item2', '10'), ('item1', '5')] 

============MBPP/371============
prompt:
# Write a function to find the smallest missing element in a sorted array.

def smallest_missing(A, left_element, right_element):
-------------------------------
entry_point:
smallest_missing
-------------------------------
canonical_solution:
def smallest_missing(A, left_element, right_element):
    if left_element > right_element:
        return left_element
    mid = left_element + (right_element - left_element) // 2
    if A[mid] == mid:
        return smallest_missing(A, mid + 1, right_element)
    else:
        return smallest_missing(A, left_element, mid - 1)
-------------------------------
test:
def check(smallest_missing):
    assert smallest_missing([0, 1, 2, 3, 4, 5, 6], 0, 6) == 7
    assert smallest_missing([0, 1, 2, 6, 9, 11, 15], 0, 6) == 3
    assert smallest_missing([1, 2, 3, 4, 6, 9, 11, 15], 0, 7) == 0

============MBPP/372============
prompt:
# Write a function to sort a given list of elements in ascending order using heap queue algorithm.
import heapq as hq
def heap_assending(nums):
-------------------------------
entry_point:
heap_assending
-------------------------------
canonical_solution:
import heapq as hq
def heap_assending(nums):
  hq.heapify(nums)
  s_result = [hq.heappop(nums) for i in range(len(nums))]
  return s_result
-------------------------------
test:
def check(heap_assending):
    assert heap_assending([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==[1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18]
    assert heap_assending([25, 35, 22, 85, 14, 65, 75, 25, 58])==[14, 22, 25, 25, 35, 58, 65, 75, 85]
    assert heap_assending([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]

============MBPP/373============
prompt:
# Write a function to find the volume of a cuboid.

def volume_cuboid(l,w,h):
-------------------------------
entry_point:
volume_cuboid
-------------------------------
canonical_solution:
def volume_cuboid(l,w,h):
  volume=l*w*h
  return volume
-------------------------------
test:
def check(volume_cuboid):
    assert volume_cuboid(1,2,3)==6
    assert volume_cuboid(5,7,9)==315
    assert volume_cuboid(10,15,21)==3150

============MBPP/374============
prompt:
# Write a function to print all permutations of a given string including duplicates.

def permute_string(str):
-------------------------------
entry_point:
permute_string
-------------------------------
canonical_solution:
def permute_string(str):
    if len(str) == 0:
        return ['']
    prev_list = permute_string(str[1:len(str)])
    next_list = []
    for i in range(0,len(prev_list)):
        for j in range(0,len(str)):
            new_str = prev_list[i][0:j]+str[0]+prev_list[i][j:len(str)-1]
            if new_str not in next_list:
                next_list.append(new_str)
    return next_list
-------------------------------
test:
def check(permute_string):
    assert permute_string('ab')==['ab', 'ba']
    assert permute_string('abc')==['abc', 'bac', 'bca', 'acb', 'cab', 'cba']
    assert permute_string('abcd')==['abcd', 'bacd', 'bcad', 'bcda', 'acbd', 'cabd', 'cbad', 'cbda', 'acdb', 'cadb', 'cdab', 'cdba', 'abdc', 'badc', 'bdac', 'bdca', 'adbc', 'dabc', 'dbac', 'dbca', 'adcb', 'dacb', 'dcab', 'dcba']

============MBPP/375============
prompt:
# Write a function to round the given number to the nearest multiple of a specific number.

def round_num(n,m):
-------------------------------
entry_point:
round_num
-------------------------------
canonical_solution:
def round_num(n,m):
    a = (n //m) * m
    b = a + m
    return (b if n - a > b - n else a)
-------------------------------
test:
def check(round_num):
    assert round_num(4722,10)==4720
    assert round_num(1111,5)==1110
    assert round_num(219,2)==218

============MBPP/376============
prompt:
# Write a function to remove tuple elements that occur more than once and replace the duplicates with some custom value.

def remove_replica(test_tup):
-------------------------------
entry_point:
remove_replica
-------------------------------
canonical_solution:
def remove_replica(test_tup):
  temp = set()
  res = tuple(ele if ele not in temp and not temp.add(ele) 
				else 'MSP' for ele in test_tup)
  return (res)
-------------------------------
test:
def check(remove_replica):
    assert remove_replica((1, 1, 4, 4, 4, 5, 5, 6, 7, 7)) == (1, 'MSP', 4, 'MSP', 'MSP', 5, 'MSP', 6, 7, 'MSP')
    assert remove_replica((2, 3, 4, 4, 5, 6, 6, 7, 8, 9, 9)) == (2, 3, 4, 'MSP', 5, 6, 'MSP', 7, 8, 9, 'MSP')
    assert remove_replica((2, 2, 5, 4, 5, 7, 5, 6, 7, 7)) == (2, 'MSP', 5, 4, 'MSP', 7, 'MSP', 6, 'MSP', 'MSP')

============MBPP/377============
prompt:
# Write a python function to remove all occurrences of a character in a given string.

def remove_Char(s,c) :
-------------------------------
entry_point:
remove_Char
-------------------------------
canonical_solution:
def remove_Char(s,c) :  
    counts = s.count(c) 
    s = list(s) 
    while counts :  
        s.remove(c) 
        counts -= 1 
    s = '' . join(s)   
    return (s) 
-------------------------------
test:
def check(remove_Char):
    assert remove_Char("aba",'a') == "b"
    assert remove_Char("toggle",'g') == "tole"
    assert remove_Char("aabbc",'b') == "aac"

============MBPP/378============
prompt:
# Write a python function to shift last element to first position in the given list.

def move_first(test_list):
-------------------------------
entry_point:
move_first
-------------------------------
canonical_solution:
def move_first(test_list):
  test_list = test_list[-1:] + test_list[:-1]  
  return test_list
-------------------------------
test:
def check(move_first):
    assert move_first([1,2,3,4]) == [4,1,2,3]
    assert move_first([0,1,2,3]) == [3,0,1,2]
    assert move_first([9,8,7,1]) == [1,9,8,7]

============MBPP/379============
prompt:
# Write a function to find the surface area of a cuboid.

def surfacearea_cuboid(l,w,h):
-------------------------------
entry_point:
surfacearea_cuboid
-------------------------------
canonical_solution:
def surfacearea_cuboid(l,w,h):
  SA = 2*(l*w + l * h + w * h)
  return SA
-------------------------------
test:
def check(surfacearea_cuboid):
    assert surfacearea_cuboid(1,2,3)==22
    assert surfacearea_cuboid(5,7,9)==286
    assert surfacearea_cuboid(10,15,21)==1350

============MBPP/380============
prompt:
# Write a function to generate a two-dimensional array.

def multi_list(rownum,colnum):
-------------------------------
entry_point:
multi_list
-------------------------------
canonical_solution:
def multi_list(rownum,colnum):
  multi_list = [[0 for col in range(colnum)] for row in range(rownum)]
  for row in range(rownum):
    for col in range(colnum):
        multi_list[row][col]= row*col
  return multi_list

-------------------------------
test:
def check(multi_list):
    assert multi_list(3,4)==[[0, 0, 0, 0], [0, 1, 2, 3], [0, 2, 4, 6]] 
    assert multi_list(5,7)==[[0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 3, 4, 5, 6], [0, 2, 4, 6, 8, 10, 12], [0, 3, 6, 9, 12, 15, 18], [0, 4, 8, 12, 16, 20, 24]]
    assert multi_list(10,15)==[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28], [0, 3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42], [0, 4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56], [0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70], [0, 6, 12, 18, 24, 30, 36, 42, 48, 54, 60, 66, 72, 78, 84], [0, 7, 14, 21, 28, 35, 42, 49, 56, 63, 70, 77, 84, 91, 98], [0, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 104, 112], [0, 9, 18, 27, 36, 45, 54, 63, 72, 81, 90, 99, 108, 117, 126]]

============MBPP/381============
prompt:
# Write a function to sort a list of lists by a given index of the inner list.
from operator import itemgetter
def index_on_inner_list(list_data, index_no):
-------------------------------
entry_point:
index_on_inner_list
-------------------------------
canonical_solution:
from operator import itemgetter
def index_on_inner_list(list_data, index_no):
    result = sorted(list_data, key=itemgetter(index_no))
    return result
-------------------------------
test:
def check(index_on_inner_list):
    assert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==[('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99), ('Wyatt Knott', 91, 94)]
    assert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,1)==[('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99)]
    assert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,2)==[('Wyatt Knott', 91, 94), ('Brady Kent', 97, 96), ('Beau Turnbull', 94, 98), ('Greyson Fulton', 98, 99)]

============MBPP/382============
prompt:
# Write a function to find the number of rotations in a circularly sorted array.

def find_rotation_count(A):
-------------------------------
entry_point:
find_rotation_count
-------------------------------
canonical_solution:
def find_rotation_count(A):
    (left, right) = (0, len(A) - 1)
    while left <= right:
        if A[left] <= A[right]:
            return left
        mid = (left + right) // 2
        next = (mid + 1) % len(A)
        prev = (mid - 1 + len(A)) % len(A)
        if A[mid] <= A[next] and A[mid] <= A[prev]:
            return mid
        elif A[mid] <= A[right]:
            right = mid - 1
        elif A[mid] >= A[left]:
            left = mid + 1
    return -1
-------------------------------
test:
def check(find_rotation_count):
    assert find_rotation_count([8, 9, 10, 1, 2, 3, 4, 5, 6, 7]) == 3
    assert find_rotation_count([8, 9, 10,2, 5, 6]) == 3
    assert find_rotation_count([2, 5, 6, 8, 9, 10]) == 0

============MBPP/383============
prompt:
# Write a python function to toggle all odd bits of a given number.

def even_bit_toggle_number(n) :
-------------------------------
entry_point:
even_bit_toggle_number
-------------------------------
canonical_solution:
def even_bit_toggle_number(n) : 
    res = 0; count = 0; temp = n    
    while(temp > 0 ) : 
        if (count % 2 == 0) : 
            res = res | (1 << count)      
        count = count + 1
        temp >>= 1 
    return n ^ res 
-------------------------------
test:
def check(even_bit_toggle_number):
    assert even_bit_toggle_number(10) == 15
    assert even_bit_toggle_number(20) == 1
    assert even_bit_toggle_number(30) == 11

============MBPP/384============
prompt:
# Write a python function to find the frequency of the smallest value in a given array.

def frequency_Of_Smallest(n,arr):
-------------------------------
entry_point:
frequency_Of_Smallest
-------------------------------
canonical_solution:
def frequency_Of_Smallest(n,arr): 
    mn = arr[0] 
    freq = 1
    for i in range(1,n): 
        if (arr[i] < mn): 
            mn = arr[i] 
            freq = 1
        elif (arr[i] == mn): 
            freq += 1
    return freq 
-------------------------------
test:
def check(frequency_Of_Smallest):
    assert frequency_Of_Smallest(5,[1,2,3,4,3]) == 1
    assert frequency_Of_Smallest(7,[3,1,2,5,6,2,3]) == 1
    assert frequency_Of_Smallest(7,[3,3,6,3,7,4,9]) == 3

============MBPP/385============
prompt:
# Write a function to find the n'th perrin number using recursion.

def get_perrin(n):
-------------------------------
entry_point:
get_perrin
-------------------------------
canonical_solution:
def get_perrin(n):
  if (n == 0):
    return 3
  if (n == 1):
    return 0
  if (n == 2):
    return 2 
  return get_perrin(n - 2) + get_perrin(n - 3)
-------------------------------
test:
def check(get_perrin):
    assert get_perrin(9) == 12
    assert get_perrin(4) == 2
    assert get_perrin(6) == 5

============MBPP/386============
prompt:
# Write a function to find out the minimum no of swaps required for bracket balancing in the given string.

def swap_count(s):
-------------------------------
entry_point:
swap_count
-------------------------------
canonical_solution:
def swap_count(s):
	chars = s
	count_left = 0
	count_right = 0
	swap = 0
	imbalance = 0; 
	for i in range(len(chars)):
		if chars[i] == '[':
			count_left += 1
			if imbalance > 0:
				swap += imbalance
				imbalance -= 1
		elif chars[i] == ']':
			count_right += 1
			imbalance = (count_right - count_left) 
	return swap
-------------------------------
test:
def check(swap_count):
    assert swap_count("[]][][") == 2
    assert swap_count("[[][]]") == 0
    assert swap_count("[[][]]][") == 1

============MBPP/387============
prompt:
# Write a python function to check whether the hexadecimal number is even or odd.

def even_or_odd(N):
-------------------------------
entry_point:
even_or_odd
-------------------------------
canonical_solution:
def even_or_odd(N): 
    l = len(N) 
    if (N[l-1] =='0'or N[l-1] =='2'or 
        N[l-1] =='4'or N[l-1] =='6'or 
        N[l-1] =='8'or N[l-1] =='A'or 
        N[l-1] =='C'or N[l-1] =='E'): 
        return ("Even") 
    else: 
        return ("Odd") 
-------------------------------
test:
def check(even_or_odd):
    assert even_or_odd("AB3454D") =="Odd"
    assert even_or_odd("ABC") == "Even"
    assert even_or_odd("AAD") == "Odd"

============MBPP/388============
prompt:
# Write a python function to find the highest power of 2 that is less than or equal to n.

def highest_Power_of_2(n):
-------------------------------
entry_point:
highest_Power_of_2
-------------------------------
canonical_solution:
def highest_Power_of_2(n): 
    res = 0; 
    for i in range(n, 0, -1): 
        if ((i & (i - 1)) == 0): 
            res = i; 
            break; 
    return res; 
-------------------------------
test:
def check(highest_Power_of_2):
    assert highest_Power_of_2(10) == 8
    assert highest_Power_of_2(19) == 16
    assert highest_Power_of_2(32) == 32

============MBPP/389============
prompt:
# Write a function to find the n'th lucas number.

def find_lucas(n):
-------------------------------
entry_point:
find_lucas
-------------------------------
canonical_solution:
def find_lucas(n): 
	if (n == 0): 
		return 2
	if (n == 1): 
		return 1
	return find_lucas(n - 1) + find_lucas(n - 2) 
-------------------------------
test:
def check(find_lucas):
    assert find_lucas(9) == 76
    assert find_lucas(4) == 7
    assert find_lucas(3) == 4

============MBPP/390============
prompt:
# Write a function to insert a given string at the beginning of all items in a list.

def add_string(list,string):
-------------------------------
entry_point:
add_string
-------------------------------
canonical_solution:
def add_string(list,string):
 add_string=[string.format(i) for i in  list]
 return add_string
-------------------------------
test:
def check(add_string):
    assert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']
    assert add_string(['a','b','c','d'], 'python{0}')==[ 'pythona', 'pythonb', 'pythonc', 'pythond']
    assert add_string([5,6,7,8],'string{0}')==['string5', 'string6', 'string7', 'string8']

============MBPP/391============
prompt:
# Write a function to convert more than one list to nested dictionary.

def convert_list_dictionary(l1, l2, l3):
-------------------------------
entry_point:
convert_list_dictionary
-------------------------------
canonical_solution:
def convert_list_dictionary(l1, l2, l3):
     result = [{x: {y: z}} for (x, y, z) in zip(l1, l2, l3)]
     return result
-------------------------------
test:
def check(convert_list_dictionary):
    assert convert_list_dictionary(["S001", "S002", "S003", "S004"],["Adina Park", "Leyton Marsh", "Duncan Boyle", "Saim Richards"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]
    assert convert_list_dictionary(["abc","def","ghi","jkl"],["python","program","language","programs"],[100,200,300,400])==[{'abc':{'python':100}},{'def':{'program':200}},{'ghi':{'language':300}},{'jkl':{'programs':400}}]
    assert convert_list_dictionary(["A1","A2","A3","A4"],["java","C","C++","DBMS"],[10,20,30,40])==[{'A1':{'java':10}},{'A2':{'C':20}},{'A3':{'C++':30}},{'A4':{'DBMS':40}}]

============MBPP/392============
prompt:
# Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).

def get_max_sum (n):
-------------------------------
entry_point:
get_max_sum
-------------------------------
canonical_solution:
def get_max_sum (n):
	res = list()
	res.append(0)
	res.append(1)
	i = 2
	while i<n + 1:
		res.append(max(i, (res[int(i / 2)] 
						+ res[int(i / 3)] +
							res[int(i / 4)]
						+ res[int(i / 5)])))
		i = i + 1
	return res[n]
-------------------------------
test:
def check(get_max_sum):
    assert get_max_sum(60) == 106
    assert get_max_sum(10) == 12
    assert get_max_sum(2) == 2

============MBPP/393============
prompt:
# Write a function to find the list with maximum length using lambda function.

def max_length_list(input_list):
-------------------------------
entry_point:
max_length_list
-------------------------------
canonical_solution:
def max_length_list(input_list):
    max_length = max(len(x) for x in input_list )   
    max_list = max(input_list, key = lambda i: len(i))    
    return(max_length, max_list)
-------------------------------
test:
def check(max_length_list):
    assert max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])
    assert max_length_list([[1,2,3,4,5],[1,2,3,4],[1,2,3],[1,2],[1]])==(5,[1,2,3,4,5])
    assert max_length_list([[3,4,5],[6,7,8,9],[10,11,12]])==(4,[6,7,8,9])

============MBPP/394============
prompt:
# Write a function to check if given tuple is distinct or not.

def check_distinct(test_tup):
-------------------------------
entry_point:
check_distinct
-------------------------------
canonical_solution:
def check_distinct(test_tup):
  res = True
  temp = set()
  for ele in test_tup:
    if ele in temp:
      res = False
      break
    temp.add(ele)
  return (res) 
-------------------------------
test:
def check(check_distinct):
    assert check_distinct((1, 4, 5, 6, 1, 4)) == False
    assert check_distinct((1, 4, 5, 6)) == True
    assert check_distinct((2, 3, 4, 5, 6)) == True

============MBPP/395============
prompt:
# Write a python function to find the first non-repeated character in a given string.

def first_non_repeating_character(str1):
-------------------------------
entry_point:
first_non_repeating_character
-------------------------------
canonical_solution:
def first_non_repeating_character(str1):
  char_order = []
  ctr = {}
  for c in str1:
    if c in ctr:
      ctr[c] += 1
    else:
      ctr[c] = 1 
      char_order.append(c)
  for c in char_order:
    if ctr[c] == 1:
      return c
  return None
-------------------------------
test:
def check(first_non_repeating_character):
    assert first_non_repeating_character("abcabc") == None
    assert first_non_repeating_character("abc") == "a"
    assert first_non_repeating_character("ababc") == "c"

============MBPP/396============
prompt:
# Write a function to check whether the given string starts and ends with the same character or not using regex.
import re  
regex = r'^[a-z]$|^([a-z]).*\1$'
def check_char(string):
-------------------------------
entry_point:
check_char
-------------------------------
canonical_solution:
import re  
regex = r'^[a-z]$|^([a-z]).*\1$'
def check_char(string): 
	if(re.search(regex, string)): 
		return "Valid" 
	else: 
		return "Invalid" 
-------------------------------
test:
def check(check_char):
    assert check_char("abba") == "Valid"
    assert check_char("a") == "Valid"
    assert check_char("abcd") == "Invalid"

============MBPP/397============
prompt:
# Write a function to find the median of three specific numbers.

def median_numbers(a,b,c):
-------------------------------
entry_point:
median_numbers
-------------------------------
canonical_solution:
def median_numbers(a,b,c):
 if a > b:
    if a < c:
        median = a
    elif b > c:
        median = b
    else:
        median = c
 else:
    if a > c:
        median = a
    elif b < c:
        median = b
    else:
        median = c
 return median
-------------------------------
test:
def check(median_numbers):
    assert median_numbers(25,55,65)==55.0
    assert median_numbers(20,10,30)==20.0
    assert median_numbers(15,45,75)==45.0

============MBPP/398============
prompt:
# Write a function to compute the sum of digits of each number of a given list.

def sum_of_digits(nums):
-------------------------------
entry_point:
sum_of_digits
-------------------------------
canonical_solution:
def sum_of_digits(nums):
    return sum(int(el) for n in nums for el in str(n) if el.isdigit())
-------------------------------
test:
def check(sum_of_digits):
    assert sum_of_digits([10,2,56])==14
    assert sum_of_digits([[10,20,4,5,'b',70,'a']])==19
    assert sum_of_digits([10,20,-4,5,-70])==19

============MBPP/399============
prompt:
# Write a function to perform the mathematical bitwise xor operation across the given tuples.

def bitwise_xor(test_tup1, test_tup2):
-------------------------------
entry_point:
bitwise_xor
-------------------------------
canonical_solution:
def bitwise_xor(test_tup1, test_tup2):
  res = tuple(ele1 ^ ele2 for ele1, ele2 in zip(test_tup1, test_tup2))
  return (res) 
-------------------------------
test:
def check(bitwise_xor):
    assert bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)
    assert bitwise_xor((11, 5, 7, 10), (6, 3, 4, 4)) == (13, 6, 3, 14)
    assert bitwise_xor((12, 6, 8, 11), (7, 4, 5, 6)) == (11, 2, 13, 13)

============MBPP/400============
prompt:
# Write a function to extract the frequency of unique tuples in the given list order irrespective.

def extract_freq(test_list):
-------------------------------
entry_point:
extract_freq
-------------------------------
canonical_solution:
def extract_freq(test_list):
  res = len(list(set(tuple(sorted(sub)) for sub in test_list)))
  return (res)
-------------------------------
test:
def check(extract_freq):
    assert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3
    assert extract_freq([(4, 15), (2, 3), (5, 4), (6, 7)] ) == 4
    assert extract_freq([(5, 16), (2, 3), (6, 5), (6, 9)] ) == 4

============MBPP/401============
prompt:
# Write a function to perform index wise addition of tuple elements in the given two nested tuples.

def add_nested_tuples(test_tup1, test_tup2):
-------------------------------
entry_point:
add_nested_tuples
-------------------------------
canonical_solution:
def add_nested_tuples(test_tup1, test_tup2):
  res = tuple(tuple(a + b for a, b in zip(tup1, tup2))
   for tup1, tup2 in zip(test_tup1, test_tup2))
  return (res) 
-------------------------------
test:
def check(add_nested_tuples):
    assert add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))
    assert add_nested_tuples(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))
    assert add_nested_tuples(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))

============MBPP/402============
prompt:
# Write a function to compute the value of ncr%p.

def ncr_modp(n, r, p):
-------------------------------
entry_point:
ncr_modp
-------------------------------
canonical_solution:
def ncr_modp(n, r, p): 
    C = [0 for i in range(r+1)]   
    C[0] = 1
    for i in range(1, n+1): 
        for j in range(min(i, r), 0, -1): 
            C[j] = (C[j] + C[j-1]) % p   
    return C[r] 
-------------------------------
test:
def check(ncr_modp):
    assert ncr_modp(10,2,13)==6
    assert ncr_modp(15,12,43)==25
    assert ncr_modp(17,9,18)==10

============MBPP/403============
prompt:
# Write a function to check if a url is valid or not using regex.
import re
def is_valid_URL(str):
-------------------------------
entry_point:
is_valid_URL
-------------------------------
canonical_solution:
import re
def is_valid_URL(str):
	regex = ("((http|https)://)(www.)?" +
			"[a-zA-Z0-9@:%._\\+~#?&//=]" +
			"{2,256}\\.[a-z]" +
			"{2,6}\\b([-a-zA-Z0-9@:%" +
			"._\\+~#?&//=]*)")
	p = re.compile(regex)
	if (str == None):
		return False
	if(re.search(p, str)):
		return True
	else:
		return False
-------------------------------
test:
def check(is_valid_URL):
    assert is_valid_URL("https://www.google.com") == True
    assert is_valid_URL("https:/www.gmail.com") == False
    assert is_valid_URL("https:// www.redit.com") == False

============MBPP/404============
prompt:
# Write a python function to find the minimum of two numbers.

def minimum(a,b):
-------------------------------
entry_point:
minimum
-------------------------------
canonical_solution:
def minimum(a,b):   
    if a <= b: 
        return a 
    else: 
        return b 
-------------------------------
test:
def check(minimum):
    assert minimum(1,2) == 1
    assert minimum(-5,-4) == -5
    assert minimum(0,0) == 0

============MBPP/405============
prompt:
# Write a function to check whether an element exists within a tuple.

def check_tuplex(tuplex,tuple1):
-------------------------------
entry_point:
check_tuplex
-------------------------------
canonical_solution:
def check_tuplex(tuplex,tuple1): 
  if tuple1 in tuplex:
    return True
  else:
     return False
-------------------------------
test:
def check(check_tuplex):
    assert check_tuplex(("w", 3, "r", "e", "s", "o", "u", "r", "c", "e"),'r')==True
    assert check_tuplex(("w", 3, "r", "e", "s", "o", "u", "r", "c", "e"),'5')==False
    assert check_tuplex(("w", 3, "r", "e", "s", "o", "u", "r", "c","e"),3)==True

============MBPP/406============
prompt:
# Write a python function to find the parity of a given number.

def find_Parity(x):
-------------------------------
entry_point:
find_Parity
-------------------------------
canonical_solution:
def find_Parity(x): 
    y = x ^ (x >> 1); 
    y = y ^ (y >> 2); 
    y = y ^ (y >> 4); 
    y = y ^ (y >> 8); 
    y = y ^ (y >> 16); 
    if (y & 1): 
        return ("Odd Parity"); 
    return ("Even Parity"); 
-------------------------------
test:
def check(find_Parity):
    assert find_Parity(12) == "Even Parity"
    assert find_Parity(7) == "Odd Parity"
    assert find_Parity(10) == "Even Parity"

============MBPP/407============
prompt:
# Write a function to create the next bigger number by rearranging the digits of a given number.

def rearrange_bigger(n):
-------------------------------
entry_point:
rearrange_bigger
-------------------------------
canonical_solution:
def rearrange_bigger(n):
    nums = list(str(n))
    for i in range(len(nums)-2,-1,-1):
        if nums[i] < nums[i+1]:
            z = nums[i:]
            y = min(filter(lambda x: x > z[0], z))
            z.remove(y)
            z.sort()
            nums[i:] = [y] + z
            return int("".join(nums))
    return False
-------------------------------
test:
def check(rearrange_bigger):
    assert rearrange_bigger(12)==21
    assert rearrange_bigger(10)==False
    assert rearrange_bigger(102)==120

============MBPP/408============
prompt:
# Write a function to find k number of pairs which consist of one element from the first array and one element from the second array.
import heapq
def k_smallest_pairs(nums1, nums2, k):
-------------------------------
entry_point:
k_smallest_pairs
-------------------------------
canonical_solution:
import heapq
def k_smallest_pairs(nums1, nums2, k):
   queue = []
   def push(i, j):
       if i < len(nums1) and j < len(nums2):
           heapq.heappush(queue, [nums1[i] + nums2[j], i, j])
   push(0, 0)
   pairs = []
   while queue and len(pairs) < k:
       _, i, j = heapq.heappop(queue)
       pairs.append([nums1[i], nums2[j]])
       push(i, j + 1)
       if j == 0:
           push(i + 1, 0)
   return pairs
-------------------------------
test:
def check(k_smallest_pairs):
    assert k_smallest_pairs([1,3,7],[2,4,6],2)==[[1, 2], [1, 4]]
    assert k_smallest_pairs([1,3,7],[2,4,6],1)==[[1, 2]]
    assert k_smallest_pairs([1,3,7],[2,4,6],7)==[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]

============MBPP/409============
prompt:
# Write a function to find the minimum product from the pairs of tuples within a given list.

def min_product_tuple(list1):
-------------------------------
entry_point:
min_product_tuple
-------------------------------
canonical_solution:
def min_product_tuple(list1):
    result_min = min([abs(x * y) for x, y in list1] )
    return result_min
-------------------------------
test:
def check(min_product_tuple):
    assert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8
    assert min_product_tuple([(10,20), (15,2), (5,10)] )==30
    assert min_product_tuple([(11,44), (10,15), (20,5), (12, 9)] )==100

============MBPP/410============
prompt:
# Write a function to find the minimum value in a given heterogeneous list.

def min_val(listval):
-------------------------------
entry_point:
min_val
-------------------------------
canonical_solution:
def min_val(listval):
     min_val = min(i for i in listval if isinstance(i, int))
     return min_val
-------------------------------
test:
def check(min_val):
    assert min_val(['Python', 3, 2, 4, 5, 'version'])==2
    assert min_val(['Python', 15, 20, 25])==15
    assert min_val(['Python', 30, 20, 40, 50, 'version'])==20

============MBPP/411============
prompt:
# Write a function to convert the given snake case string to camel case string by using regex.
import re
def snake_to_camel(word):
-------------------------------
entry_point:
snake_to_camel
-------------------------------
canonical_solution:
import re
def snake_to_camel(word):
  return ''.join(x.capitalize() or '_' for x in word.split('_'))
-------------------------------
test:
def check(snake_to_camel):
    assert snake_to_camel('android_tv') == 'AndroidTv'
    assert snake_to_camel('google_pixel') == 'GooglePixel'
    assert snake_to_camel('apple_watch') == 'AppleWatch'

============MBPP/412============
prompt:
# Write a python function to remove odd numbers from a given list.

def remove_odd(l):
-------------------------------
entry_point:
remove_odd
-------------------------------
canonical_solution:
def remove_odd(l):
    for i in l:
        if i % 2 != 0:
            l.remove(i)
    return l
-------------------------------
test:
def check(remove_odd):
    assert remove_odd([1,2,3]) == [2]
    assert remove_odd([2,4,6]) == [2,4,6]
    assert remove_odd([10,20,3]) == [10,20]

============MBPP/413============
prompt:
# Write a function to extract the nth element from a given list of tuples.

def extract_nth_element(list1, n):
-------------------------------
entry_point:
extract_nth_element
-------------------------------
canonical_solution:
def extract_nth_element(list1, n):
    result = [x[n] for x in list1]
    return result
-------------------------------
test:
def check(extract_nth_element):
    assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']
    assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,2)==[99, 96, 94, 98]
    assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)],1)==[98, 97, 91, 94]

============MBPP/414============
prompt:
# Write a python function to check whether the value exists in a sequence or not.

def overlapping(list1,list2):
-------------------------------
entry_point:
overlapping
-------------------------------
canonical_solution:
def overlapping(list1,list2):  
    c=0
    d=0
    for i in list1: 
        c+=1
    for i in list2: 
        d+=1
    for i in range(0,c): 
        for j in range(0,d): 
            if(list1[i]==list2[j]): 
                return 1
    return 0
-------------------------------
test:
def check(overlapping):
    assert overlapping([1,2,3,4,5],[6,7,8,9]) == False
    assert overlapping([1,2,3],[4,5,6]) == False
    assert overlapping([1,4,5],[1,4,5]) == True

============MBPP/415============
prompt:
# Write a python function to find a pair with highest product from a given array of integers.

def max_Product(arr):
-------------------------------
entry_point:
max_Product
-------------------------------
canonical_solution:
def max_Product(arr): 
    arr_len = len(arr) 
    if (arr_len < 2): 
        return ("No pairs exists")           
    x = arr[0]; y = arr[1]      
    for i in range(0,arr_len): 
        for j in range(i + 1,arr_len): 
            if (arr[i] * arr[j] > x * y): 
                x = arr[i]; y = arr[j] 
    return x,y    
-------------------------------
test:
def check(max_Product):
    assert max_Product([1,2,3,4,7,0,8,4]) == (7,8)
    assert max_Product([0,-1,-2,-4,5,0,-6]) == (-4,-6)
    assert max_Product([1,2,3]) == (2,3)

============MBPP/416============
prompt:
# Write a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.
MAX = 1000000
def breakSum(n):
-------------------------------
entry_point:
breakSum
-------------------------------
canonical_solution:
MAX = 1000000
def breakSum(n): 
	dp = [0]*(n+1) 
	dp[0] = 0
	dp[1] = 1
	for i in range(2, n+1): 
		dp[i] = max(dp[int(i/2)] + dp[int(i/3)] + dp[int(i/4)], i); 
	return dp[n]
-------------------------------
test:
def check(breakSum):
    assert breakSum(12) == 13
    assert breakSum(24) == 27
    assert breakSum(23) == 23

============MBPP/417============
prompt:
# Write a function to find common first element in given list of tuple.

def group_tuples(Input):
-------------------------------
entry_point:
group_tuples
-------------------------------
canonical_solution:
def group_tuples(Input): 
	out = {} 
	for elem in Input: 
		try: 
			out[elem[0]].extend(elem[1:]) 
		except KeyError: 
			out[elem[0]] = list(elem) 
	return [tuple(values) for values in out.values()] 
-------------------------------
test:
def check(group_tuples):
    assert group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]
    assert group_tuples([('a', 'b'), ('a', 'c'), ('d', 'e')]) == [('a', 'b', 'c'), ('d', 'e')]
    assert group_tuples([('f', 'g'), ('f', 'g'), ('h', 'i')]) == [('f', 'g', 'g'), ('h', 'i')]

============MBPP/418============
prompt:
# Write a python function to find the sublist having maximum length.

def Find_Max(lst):
-------------------------------
entry_point:
Find_Max
-------------------------------
canonical_solution:
def Find_Max(lst): 
    maxList = max((x) for x in lst) 
    return maxList
-------------------------------
test:
def check(Find_Max):
    assert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']
    assert Find_Max([[1],[1,2],[1,2,3]]) == [1,2,3]
    assert Find_Max([[1,1],[1,2,3],[1,5,6,1]]) == [1,5,6,1]

============MBPP/419============
prompt:
# Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.

def round_and_sum(list1):
-------------------------------
entry_point:
round_and_sum
-------------------------------
canonical_solution:
def round_and_sum(list1):
  lenght=len(list1)
  round_and_sum=sum(list(map(round,list1))* lenght)
  return round_and_sum
-------------------------------
test:
def check(round_and_sum):
    assert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243
    assert round_and_sum([5,2,9,24.3,29])==345
    assert round_and_sum([25.0,56.7,89.2])==513

============MBPP/420============
prompt:
# Write a python function to find the cube sum of first n even natural numbers.

def cube_Sum(n):
-------------------------------
entry_point:
cube_Sum
-------------------------------
canonical_solution:
def cube_Sum(n): 
    sum = 0
    for i in range(1,n + 1): 
        sum += (2*i)*(2*i)*(2*i) 
    return sum
-------------------------------
test:
def check(cube_Sum):
    assert cube_Sum(2) == 72
    assert cube_Sum(3) == 288
    assert cube_Sum(4) == 800

============MBPP/421============
prompt:
# Write a function to concatenate each element of tuple by the delimiter.

def concatenate_tuple(test_tup):
-------------------------------
entry_point:
concatenate_tuple
-------------------------------
canonical_solution:
def concatenate_tuple(test_tup):
    delim = "-"
    res = ''.join([str(ele) + delim for ele in test_tup])
    res = res[ : len(res) - len(delim)]
    return (str(res)) 
-------------------------------
test:
def check(concatenate_tuple):
    assert concatenate_tuple(("ID", "is", 4, "UTS") ) == 'ID-is-4-UTS'
    assert concatenate_tuple(("QWE", "is", 4, "RTY") ) == 'QWE-is-4-RTY'
    assert concatenate_tuple(("ZEN", "is", 4, "OP") ) == 'ZEN-is-4-OP'

============MBPP/422============
prompt:
# Write a python function to find the average of cubes of first n natural numbers.

def find_Average_Of_Cube(n):
-------------------------------
entry_point:
find_Average_Of_Cube
-------------------------------
canonical_solution:
def find_Average_Of_Cube(n):  
    sum = 0
    for i in range(1, n + 1): 
        sum += i * i * i  
    return round(sum / n, 6) 
-------------------------------
test:
def check(find_Average_Of_Cube):
    assert find_Average_Of_Cube(2) == 4.5
    assert find_Average_Of_Cube(3) == 12
    assert find_Average_Of_Cube(1) == 1

============MBPP/423============
prompt:
# Write a function to solve gold mine problem.

def get_maxgold(gold, m, n):
-------------------------------
entry_point:
get_maxgold
-------------------------------
canonical_solution:
def get_maxgold(gold, m, n): 
    goldTable = [[0 for i in range(n)] 
                        for j in range(m)]   
    for col in range(n-1, -1, -1): 
        for row in range(m):  
            if (col == n-1): 
                right = 0
            else: 
                right = goldTable[row][col+1] 
            if (row == 0 or col == n-1): 
                right_up = 0
            else: 
                right_up = goldTable[row-1][col+1] 
            if (row == m-1 or col == n-1): 
                right_down = 0
            else: 
                right_down = goldTable[row+1][col+1] 
            goldTable[row][col] = gold[row][col] + max(right, right_up, right_down) 
    res = goldTable[0][0] 
    for i in range(1, m): 
        res = max(res, goldTable[i][0])  
    return res 
-------------------------------
test:
def check(get_maxgold):
    assert get_maxgold([[1, 3, 1, 5],[2, 2, 4, 1],[5, 0, 2, 3],[0, 6, 1, 2]],4,4)==16
    assert get_maxgold([[10,20],[30,40]],2,2)==70
    assert get_maxgold([[4,9],[3,7]],2,2)==13

============MBPP/424============
prompt:
# Write a function to extract only the rear index element of each string in the given tuple.

def extract_rear(test_tuple):
-------------------------------
entry_point:
extract_rear
-------------------------------
canonical_solution:
def extract_rear(test_tuple):
  res = list(sub[len(sub) - 1] for sub in test_tuple)
  return (res) 
-------------------------------
test:
def check(extract_rear):
    assert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']
    assert extract_rear(('Avenge', 'for', 'People') ) == ['e', 'r', 'e']
    assert extract_rear(('Gotta', 'get', 'go') ) == ['a', 't', 'o']

============MBPP/425============
prompt:
# Write a function to count the number of sublists containing a particular element.

def count_element_in_list(list1, x):
-------------------------------
entry_point:
count_element_in_list
-------------------------------
canonical_solution:
def count_element_in_list(list1, x): 
    ctr = 0
    for i in range(len(list1)): 
        if x in list1[i]: 
            ctr+= 1          
    return ctr
-------------------------------
test:
def check(count_element_in_list):
    assert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3
    assert count_element_in_list([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'A')==3
    assert count_element_in_list([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'E')==1

============MBPP/426============
prompt:
# Write a function to filter odd numbers using lambda function.

def filter_oddnumbers(nums):
-------------------------------
entry_point:
filter_oddnumbers
-------------------------------
canonical_solution:
def filter_oddnumbers(nums):
 odd_nums = list(filter(lambda x: x%2 != 0, nums))
 return odd_nums
-------------------------------
test:
def check(filter_oddnumbers):
    assert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]
    assert filter_oddnumbers([10,20,45,67,84,93])==[45,67,93]
    assert filter_oddnumbers([5,7,9,8,6,4,3])==[5,7,9,3]

============MBPP/427============
prompt:
# Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.
import re
def change_date_format(dt):
-------------------------------
entry_point:
change_date_format
-------------------------------
canonical_solution:
import re
def change_date_format(dt):
        return re.sub(r'(\d{4})-(\d{1,2})-(\d{1,2})', '\\3-\\2-\\1', dt)
-------------------------------
test:
def check(change_date_format):
    assert change_date_format("2026-01-02") == '02-01-2026'
    assert change_date_format("2020-11-13") == '13-11-2020'
    assert change_date_format("2021-04-26") == '26-04-2021'

============MBPP/428============
prompt:
# Write a function to sort the given array by using shell sort.

def shell_sort(my_list):
-------------------------------
entry_point:
shell_sort
-------------------------------
canonical_solution:
def shell_sort(my_list):
    gap = len(my_list) // 2
    while gap > 0:
        for i in range(gap, len(my_list)):
            current_item = my_list[i]
            j = i
            while j >= gap and my_list[j - gap] > current_item:
                my_list[j] = my_list[j - gap]
                j -= gap
            my_list[j] = current_item
        gap //= 2

    return my_list
-------------------------------
test:
def check(shell_sort):
    assert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]
    assert shell_sort([24, 22, 39, 34, 87, 73, 68]) == [22, 24, 34, 39, 68, 73, 87]
    assert shell_sort([32, 30, 16, 96, 82, 83, 74]) == [16, 30, 32, 74, 82, 83, 96]

============MBPP/429============
prompt:
# Write a function to extract the elementwise and tuples from the given two tuples.

def and_tuples(test_tup1, test_tup2):
-------------------------------
entry_point:
and_tuples
-------------------------------
canonical_solution:
def and_tuples(test_tup1, test_tup2):
  res = tuple(ele1 & ele2 for ele1, ele2 in zip(test_tup1, test_tup2))
  return (res) 
-------------------------------
test:
def check(and_tuples):
    assert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)
    assert and_tuples((1, 2, 3, 4), (5, 6, 7, 8)) == (1, 2, 3, 0)
    assert and_tuples((8, 9, 11, 12), (7, 13, 14, 17)) == (0, 9, 10, 0)

============MBPP/430============
prompt:
# Write a function to find the directrix of a parabola.

def parabola_directrix(a, b, c):
-------------------------------
entry_point:
parabola_directrix
-------------------------------
canonical_solution:
def parabola_directrix(a, b, c): 
  directrix=((int)(c - ((b * b) + 1) * 4 * a ))
  return directrix
-------------------------------
test:
def check(parabola_directrix):
    assert parabola_directrix(5,3,2)==-198
    assert parabola_directrix(9,8,4)==-2336
    assert parabola_directrix(2,4,6)==-130

============MBPP/431============
prompt:
# Write a function that takes two lists and returns true if they have at least one common element.

def common_element(list1, list2):
-------------------------------
entry_point:
common_element
-------------------------------
canonical_solution:
def common_element(list1, list2):
     result = False
     for x in list1:
         for y in list2:
             if x == y:
                 result = True
                 return result
-------------------------------
test:
def check(common_element):
    assert common_element([1,2,3,4,5], [5,6,7,8,9])==True
    assert common_element([1,2,3,4,5], [6,7,8,9])==None
    assert common_element(['a','b','c'], ['d','b','e'])==True

============MBPP/432============
prompt:
# Write a function to find the median of a trapezium.

def median_trapezium(base1,base2,height):
-------------------------------
entry_point:
median_trapezium
-------------------------------
canonical_solution:
def median_trapezium(base1,base2,height):
 median = 0.5 * (base1+ base2)
 return median
-------------------------------
test:
def check(median_trapezium):
    assert median_trapezium(15,25,35)==20
    assert median_trapezium(10,20,30)==15
    assert median_trapezium(6,9,4)==7.5

============MBPP/433============
prompt:
# Write a function to check whether the entered number is greater than the elements of the given array.

def check_greater(arr, number):
-------------------------------
entry_point:
check_greater
-------------------------------
canonical_solution:
def check_greater(arr, number):
  arr.sort()
  if number > arr[-1]:
    return ('Yes, the entered number is greater than those in the array')
  else:
    return ('No, entered number is less than those in the array')
-------------------------------
test:
def check(check_greater):
    assert check_greater([1, 2, 3, 4, 5], 4) == 'No, entered number is less than those in the array'
    assert check_greater([2, 3, 4, 5, 6], 8) == 'Yes, the entered number is greater than those in the array'
    assert check_greater([9, 7, 4, 8, 6, 1], 11) == 'Yes, the entered number is greater than those in the array'

============MBPP/434============
prompt:
# Write a function that matches a string that has an a followed by one or more b's.
import re
def text_match_one(text):
-------------------------------
entry_point:
text_match_one
-------------------------------
canonical_solution:
import re
def text_match_one(text):
        patterns = 'ab+?'
        if re.search(patterns,  text):
                return 'Found a match!'
        else:
                return('Not matched!')

-------------------------------
test:
def check(text_match_one):
    assert text_match_one("ac")==('Not matched!')
    assert text_match_one("dc")==('Not matched!')
    assert text_match_one("abba")==('Found a match!')

============MBPP/435============
prompt:
# Write a python function to find the last digit of a given number.

def last_Digit(n) :
-------------------------------
entry_point:
last_Digit
-------------------------------
canonical_solution:
def last_Digit(n) :
    return (n % 10) 
-------------------------------
test:
def check(last_Digit):
    assert last_Digit(123) == 3
    assert last_Digit(25) == 5
    assert last_Digit(30) == 0

============MBPP/436============
prompt:
# Write a python function to print negative numbers in a list.

def neg_nos(list1):
-------------------------------
entry_point:
neg_nos
-------------------------------
canonical_solution:
def neg_nos(list1):
  for num in list1: 
    if num < 0: 
       return num 
-------------------------------
test:
def check(neg_nos):
    assert neg_nos([-1,4,5,-6]) == -1,-6
    assert neg_nos([-1,-2,3,4]) == -1,-2
    assert neg_nos([-7,-6,8,9]) == -7,-6

============MBPP/437============
prompt:
# Write a function to remove odd characters in a string.

def remove_odd(str1):
-------------------------------
entry_point:
remove_odd
-------------------------------
canonical_solution:
def remove_odd(str1):
 str2 = ''
 for i in range(1, len(str1) + 1):
    if(i % 2 == 0):
        str2 = str2 + str1[i - 1]
 return str2
-------------------------------
test:
def check(remove_odd):
    assert remove_odd("python")==("yhn")
    assert remove_odd("program")==("rga")
    assert remove_odd("language")==("agae")

============MBPP/438============
prompt:
# Write a function to count bidirectional tuple pairs.

def count_bidirectional(test_list):
-------------------------------
entry_point:
count_bidirectional
-------------------------------
canonical_solution:
def count_bidirectional(test_list):
  res = 0
  for idx in range(0, len(test_list)):
    for iidx in range(idx + 1, len(test_list)):
      if test_list[iidx][0] == test_list[idx][1] and test_list[idx][1] == test_list[iidx][0]:
        res += 1
  return (str(res)) 
-------------------------------
test:
def check(count_bidirectional):
    assert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '3'
    assert count_bidirectional([(5, 6), (1, 3), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '2'
    assert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 2), (6, 5), (2, 1)] ) == '4'

============MBPP/439============
prompt:
# Write a function to convert a list of multiple integers into a single integer.

def multiple_to_single(L):
-------------------------------
entry_point:
multiple_to_single
-------------------------------
canonical_solution:
def multiple_to_single(L):
  x = int("".join(map(str, L)))
  return x
-------------------------------
test:
def check(multiple_to_single):
    assert multiple_to_single([11, 33, 50])==113350
    assert multiple_to_single([-1,2,3,4,5,6])==-123456
    assert multiple_to_single([10,15,20,25])==10152025

============MBPP/440============
prompt:
# Write a function to find all adverbs and their positions in a given sentence.
import re
def find_adverb_position(text):
-------------------------------
entry_point:
find_adverb_position
-------------------------------
canonical_solution:
import re
def find_adverb_position(text):
 for m in re.finditer(r"\w+ly", text):
    return (m.start(), m.end(), m.group(0))
-------------------------------
test:
def check(find_adverb_position):
    assert find_adverb_position("clearly!! we can see the sky")==(0, 7, 'clearly')
    assert find_adverb_position("seriously!! there are many roses")==(0, 9, 'seriously')
    assert find_adverb_position("unfortunately!! sita is going to home")==(0, 13, 'unfortunately')

============MBPP/441============
prompt:
# Write a function to find the surface area of a cube.

def surfacearea_cube(l):
-------------------------------
entry_point:
surfacearea_cube
-------------------------------
canonical_solution:
def surfacearea_cube(l):
  surfacearea= 6*l*l
  return surfacearea
-------------------------------
test:
def check(surfacearea_cube):
    assert surfacearea_cube(5)==150
    assert surfacearea_cube(3)==54
    assert surfacearea_cube(10)==600

============MBPP/442============
prompt:
# Write a function to find the ration of positive numbers in an array of integers.
from array import array
def positive_count(nums):
-------------------------------
entry_point:
positive_count
-------------------------------
canonical_solution:
from array import array
def positive_count(nums):
    n = len(nums)
    n1 = 0
    for x in nums:
        if x > 0:
            n1 += 1
        else:
          None
    return round(n1/n,2)
-------------------------------
test:
def check(positive_count):
    assert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54
    assert positive_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==0.69
    assert positive_count([2, 4, -6, -9, 11, -12, 14, -5, 17])==0.56

============MBPP/443============
prompt:
# Write a python function to find the largest negative number from the given list.

def largest_neg(list1):
-------------------------------
entry_point:
largest_neg
-------------------------------
canonical_solution:
def largest_neg(list1): 
    max = list1[0] 
    for x in list1: 
        if x < max : 
             max = x  
    return max
-------------------------------
test:
def check(largest_neg):
    assert largest_neg([1,2,3,-4,-6]) == -6
    assert largest_neg([1,2,3,-8,-9]) == -9
    assert largest_neg([1,2,3,4,-1]) == -1

============MBPP/444============
prompt:
# Write a function to trim each tuple by k in the given tuple list.

def trim_tuple(test_list, K):
-------------------------------
entry_point:
trim_tuple
-------------------------------
canonical_solution:
def trim_tuple(test_list, K):
  res = []
  for ele in test_list:
    N = len(ele)
    res.append(tuple(list(ele)[K: N - K]))
  return (str(res)) 
-------------------------------
test:
def check(trim_tuple):
    assert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2) == '[(2,), (9,), (2,), (2,)]'
    assert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1), (9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 1) == '[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]'
    assert trim_tuple([(7, 8, 4, 9), (11, 8, 12, 4),(4, 1, 7, 8), (3, 6, 9, 7)], 1) == '[(8, 4), (8, 12), (1, 7), (6, 9)]'

============MBPP/445============
prompt:
# Write a function to perform index wise multiplication of tuple elements in the given two tuples.

def index_multiplication(test_tup1, test_tup2):
-------------------------------
entry_point:
index_multiplication
-------------------------------
canonical_solution:
def index_multiplication(test_tup1, test_tup2):
  res = tuple(tuple(a * b for a, b in zip(tup1, tup2))
   for tup1, tup2 in zip(test_tup1, test_tup2))
  return (res) 
-------------------------------
test:
def check(index_multiplication):
    assert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))
    assert index_multiplication(((2, 4), (5, 6), (3, 10), (2, 11)),((7, 8), (4, 10), (2, 2), (8, 4)) ) == ((14, 32), (20, 60), (6, 20), (16, 44))
    assert index_multiplication(((3, 5), (6, 7), (4, 11), (3, 12)),((8, 9), (5, 11), (3, 3), (9, 5)) ) == ((24, 45), (30, 77), (12, 33), (27, 60))

============MBPP/446============
prompt:
# Write a python function to count the occurence of all elements of list in a tuple.
from collections import Counter 
def count_Occurrence(tup, lst):
-------------------------------
entry_point:
count_Occurrence
-------------------------------
canonical_solution:
from collections import Counter 
def count_Occurrence(tup, lst): 
    count = 0
    for item in tup: 
        if item in lst: 
            count+= 1 
    return count  
-------------------------------
test:
def check(count_Occurrence):
    assert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3
    assert count_Occurrence((1, 2, 3, 1, 4, 6, 7, 1, 4),[1, 4, 7]) == 6
    assert count_Occurrence((1,2,3,4,5,6),[1,2]) == 2

============MBPP/447============
prompt:
# Write a function to find cubes of individual elements in a list using lambda function.

def cube_nums(nums):
-------------------------------
entry_point:
cube_nums
-------------------------------
canonical_solution:
def cube_nums(nums):
 cube_nums = list(map(lambda x: x ** 3, nums))
 return cube_nums
-------------------------------
test:
def check(cube_nums):
    assert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]
    assert cube_nums([10,20,30])==([1000, 8000, 27000])
    assert cube_nums([12,15])==([1728, 3375])

============MBPP/448============
prompt:
# Write a function to calculate the sum of perrin numbers.

def cal_sum(n):
-------------------------------
entry_point:
cal_sum
-------------------------------
canonical_solution:
def cal_sum(n): 
	a = 3
	b = 0
	c = 2
	if (n == 0): 
		return 3
	if (n == 1): 
		return 3
	if (n == 2): 
		return 5
	sum = 5
	while (n > 2): 
		d = a + b 
		sum = sum + d 
		a = b 
		b = c 
		c = d 
		n = n-1
	return sum
-------------------------------
test:
def check(cal_sum):
    assert cal_sum(9) == 49
    assert cal_sum(10) == 66
    assert cal_sum(11) == 88

============MBPP/449============
prompt:
# Write a python function to check whether the triangle is valid or not if 3 points are given.

def check_Triangle(x1,y1,x2,y2,x3,y3):
-------------------------------
entry_point:
check_Triangle
-------------------------------
canonical_solution:
def check_Triangle(x1,y1,x2,y2,x3,y3): 
    a = (x1*(y2-y3)+x2*(y3-y1)+x3*(y1-y2))   
    if a == 0: 
        return ('No') 
    else: 
        return ('Yes') 
-------------------------------
test:
def check(check_Triangle):
    assert check_Triangle(1,5,2,5,4,6) == 'Yes'
    assert check_Triangle(1,1,1,4,1,5) == 'No'
    assert check_Triangle(1,1,1,1,1,1) == 'No'

============MBPP/450============
prompt:
# Write a function to extract specified size of strings from a give list of string values.

def extract_string(str, l):
-------------------------------
entry_point:
extract_string
-------------------------------
canonical_solution:
def extract_string(str, l):
    result = [e for e in str if len(e) == l] 
    return result
-------------------------------
test:
def check(extract_string):
    assert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']
    assert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,6)==['Python']
    assert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,9)==['exercises']

============MBPP/451============
prompt:
# Write a function to remove all whitespaces from the given string using regex.
import re
def remove_whitespaces(text1):
-------------------------------
entry_point:
remove_whitespaces
-------------------------------
canonical_solution:
import re
def remove_whitespaces(text1):
  return (re.sub(r'\s+', '',text1))
-------------------------------
test:
def check(remove_whitespaces):
    assert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'
    assert remove_whitespaces(' Google    Dart ') == 'GoogleDart'
    assert remove_whitespaces(' iOS    Swift ') == 'iOSSwift'

============MBPP/452============
prompt:
# Write a function that gives loss amount if the given amount has loss else return none.

def loss_amount(actual_cost,sale_amount):
-------------------------------
entry_point:
loss_amount
-------------------------------
canonical_solution:
def loss_amount(actual_cost,sale_amount): 
  if(sale_amount > actual_cost):
    amount = sale_amount - actual_cost
    return amount
  else:
    return None
-------------------------------
test:
def check(loss_amount):
    assert loss_amount(1500,1200)==None
    assert loss_amount(100,200)==100
    assert loss_amount(2000,5000)==3000

============MBPP/453============
prompt:
# Write a python function to find the sum of even factors of a number.
import math 
def sumofFactors(n) :
-------------------------------
entry_point:
sumofFactors
-------------------------------
canonical_solution:
import math 
def sumofFactors(n) : 
    if (n % 2 != 0) : 
        return 0
    res = 1
    for i in range(2, (int)(math.sqrt(n)) + 1) :    
        count = 0
        curr_sum = 1
        curr_term = 1
        while (n % i == 0) : 
            count= count + 1
            n = n // i 
            if (i == 2 and count == 1) : 
                curr_sum = 0
            curr_term = curr_term * i 
            curr_sum = curr_sum + curr_term 
        res = res * curr_sum  
    if (n >= 2) : 
        res = res * (1 + n) 
    return res 
-------------------------------
test:
def check(sumofFactors):
    assert sumofFactors(18) == 26
    assert sumofFactors(30) == 48
    assert sumofFactors(6) == 8

============MBPP/454============
prompt:
# Write a function that matches a word containing 'z'.
import re
def text_match_wordz(text):
-------------------------------
entry_point:
text_match_wordz
-------------------------------
canonical_solution:
import re
def text_match_wordz(text):
        patterns = '\w*z.\w*'
        if re.search(patterns,  text):
                return 'Found a match!'
        else:
                return('Not matched!')
-------------------------------
test:
def check(text_match_wordz):
    assert text_match_wordz("pythonz.")==('Found a match!')
    assert text_match_wordz("xyz.")==('Found a match!')
    assert text_match_wordz("  lang  .")==('Not matched!')

============MBPP/455============
prompt:
# Write a function to check whether the given month number contains 31 days or not.

def check_monthnumb_number(monthnum2):
-------------------------------
entry_point:
check_monthnumb_number
-------------------------------
canonical_solution:
def check_monthnumb_number(monthnum2):
  if(monthnum2==1 or monthnum2==3 or monthnum2==5 or monthnum2==7 or monthnum2==8 or monthnum2==10 or monthnum2==12):
    return True
  else:
    return False
-------------------------------
test:
def check(check_monthnumb_number):
    assert check_monthnumb_number(5)==True
    assert check_monthnumb_number(2)==False
    assert check_monthnumb_number(6)==False

============MBPP/456============
prompt:
# Write a function to reverse strings in a given list of string values.

def reverse_string_list(stringlist):
-------------------------------
entry_point:
reverse_string_list
-------------------------------
canonical_solution:
def reverse_string_list(stringlist):
    result = [x[::-1] for x in stringlist]
    return result
-------------------------------
test:
def check(reverse_string_list):
    assert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']
    assert reverse_string_list(['john','amal','joel','george'])==['nhoj','lama','leoj','egroeg']
    assert reverse_string_list(['jack','john','mary'])==['kcaj','nhoj','yram']

============MBPP/457============
prompt:
# Write a python function to find the sublist having minimum length.

def Find_Min(lst):
-------------------------------
entry_point:
Find_Min
-------------------------------
canonical_solution:
def Find_Min(lst): 
    minList = min((x) for x in lst) 
    return minList
-------------------------------
test:
def check(Find_Min):
    assert Find_Min([[1],[1,2],[1,2,3]]) == [1]
    assert Find_Min([[1,1],[1,1,1],[1,2,7,8]]) == [1,1]
    assert Find_Min([['x'],['x','y'],['x','y','z']]) == ['x']

============MBPP/458============
prompt:
# Write a function to find the area of a rectangle.

def rectangle_area(l,b):
-------------------------------
entry_point:
rectangle_area
-------------------------------
canonical_solution:
def rectangle_area(l,b):
  area=l*b
  return area
-------------------------------
test:
def check(rectangle_area):
    assert rectangle_area(10,20)==200
    assert rectangle_area(10,5)==50
    assert rectangle_area(4,2)==8

============MBPP/459============
prompt:
# Write a function to remove uppercase substrings from a given string by using regex.
import re
def remove_uppercase(str1):
-------------------------------
entry_point:
remove_uppercase
-------------------------------
canonical_solution:
import re
def remove_uppercase(str1):
  remove_upper = lambda text: re.sub('[A-Z]', '', text)
  result =  remove_upper(str1)
  return (result)
-------------------------------
test:
def check(remove_uppercase):
    assert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'
    assert remove_uppercase('wAtchTheinTernEtrAdIo') == 'wtchheinerntrdo'
    assert remove_uppercase('VoicESeaRchAndreComMendaTionS') == 'oiceachndreomendaion'

============MBPP/460============
prompt:
# Write a python function to get the first element of each sublist.

def Extract(lst):
-------------------------------
entry_point:
Extract
-------------------------------
canonical_solution:
def Extract(lst): 
    return [item[0] for item in lst] 
-------------------------------
test:
def check(Extract):
    assert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]
    assert Extract([[1,2,3],[4, 5]]) == [1,4]
    assert Extract([[9,8,1],[1,2]]) == [9,1]

============MBPP/461============
prompt:
# Write a python function to count the upper case characters in a given string.

def upper_ctr(str):
-------------------------------
entry_point:
upper_ctr
-------------------------------
canonical_solution:
def upper_ctr(str):
    upper_ctr = 0
    for i in range(len(str)):
          if str[i] >= 'A' and str[i] <= 'Z': upper_ctr += 1
          return upper_ctr
-------------------------------
test:
def check(upper_ctr):
    assert upper_ctr('PYthon') == 1
    assert upper_ctr('BigData') == 1
    assert upper_ctr('program') == 0

============MBPP/462============
prompt:
# Write a function to find all possible combinations of the elements of a given list.

def combinations_list(list1):
-------------------------------
entry_point:
combinations_list
-------------------------------
canonical_solution:
def combinations_list(list1):
    if len(list1) == 0:
        return [[]]
    result = []
    for el in combinations_list(list1[1:]):
        result += [el, el+[list1[0]]]
    return result
-------------------------------
test:
def check(combinations_list):
    assert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]
    assert combinations_list(['red', 'green', 'blue', 'white', 'black', 'orange'])==[[], ['red'], ['green'], ['green', 'red'], ['blue'], ['blue', 'red'], ['blue', 'green'], ['blue', 'green', 'red'], ['white'], ['white', 'red'], ['white', 'green'], ['white', 'green', 'red'], ['white', 'blue'], ['white', 'blue', 'red'], ['white', 'blue', 'green'], ['white', 'blue', 'green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['black', 'blue'], ['black', 'blue', 'red'], ['black', 'blue', 'green'], ['black', 'blue', 'green', 'red'], ['black', 'white'], ['black', 'white', 'red'], ['black', 'white', 'green'], ['black', 'white', 'green', 'red'], ['black', 'white', 'blue'], ['black', 'white', 'blue', 'red'], ['black', 'white', 'blue', 'green'], ['black', 'white', 'blue', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'blue'], ['orange', 'blue', 'red'], ['orange', 'blue', 'green'], ['orange', 'blue', 'green', 'red'], ['orange', 'white'], ['orange', 'white', 'red'], ['orange', 'white', 'green'], ['orange', 'white', 'green', 'red'], ['orange', 'white', 'blue'], ['orange', 'white', 'blue', 'red'], ['orange', 'white', 'blue', 'green'], ['orange', 'white', 'blue', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red'], ['orange', 'black', 'blue'], ['orange', 'black', 'blue', 'red'], ['orange', 'black', 'blue', 'green'], ['orange', 'black', 'blue', 'green', 'red'], ['orange', 'black', 'white'], ['orange', 'black', 'white', 'red'], ['orange', 'black', 'white', 'green'], ['orange', 'black', 'white', 'green', 'red'], ['orange', 'black', 'white', 'blue'], ['orange', 'black', 'white', 'blue', 'red'], ['orange', 'black', 'white', 'blue', 'green'], ['orange', 'black', 'white', 'blue', 'green', 'red']]
    assert combinations_list(['red', 'green', 'black', 'orange'])==[[], ['red'], ['green'], ['green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red']]

============MBPP/463============
prompt:
# Write a function to find the maximum product subarray of the given array.

def max_subarray_product(arr):
-------------------------------
entry_point:
max_subarray_product
-------------------------------
canonical_solution:
def max_subarray_product(arr):
	n = len(arr)
	max_ending_here = 1
	min_ending_here = 1
	max_so_far = 0
	flag = 0
	for i in range(0, n):
		if arr[i] > 0:
			max_ending_here = max_ending_here * arr[i]
			min_ending_here = min (min_ending_here * arr[i], 1)
			flag = 1
		elif arr[i] == 0:
			max_ending_here = 1
			min_ending_here = 1
		else:
			temp = max_ending_here
			max_ending_here = max (min_ending_here * arr[i], 1)
			min_ending_here = temp * arr[i]
		if (max_so_far < max_ending_here):
			max_so_far = max_ending_here
	if flag == 0 and max_so_far == 0:
		return 0
	return max_so_far
-------------------------------
test:
def check(max_subarray_product):
    assert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112
    assert max_subarray_product([6, -3, -10, 0, 2]) == 180 
    assert max_subarray_product([-2, -40, 0, -2, -3]) == 80

============MBPP/464============
prompt:
# Write a function to check if all values are same in a dictionary.

def check_value(dict, n):
-------------------------------
entry_point:
check_value
-------------------------------
canonical_solution:
def check_value(dict, n):
    result = all(x == n for x in dict.values()) 
    return result
-------------------------------
test:
def check(check_value):
    assert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10)==False
    assert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},12)==True
    assert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},5)==False

============MBPP/465============
prompt:
# Write a function to drop empty items from a given dictionary.

def drop_empty(dict1):
-------------------------------
entry_point:
drop_empty
-------------------------------
canonical_solution:
def drop_empty(dict1):
  dict1 = {key:value for (key, value) in dict1.items() if value is not None}
  return dict1
-------------------------------
test:
def check(drop_empty):
    assert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}
    assert drop_empty({'c1': 'Red', 'c2': None, 'c3':None})=={'c1': 'Red'}
    assert drop_empty({'c1': None, 'c2': 'Green', 'c3':None})=={ 'c2': 'Green'}

============MBPP/466============
prompt:
# Write a function to find the peak element in the given array.

def find_peak_util(arr, low, high, n):
-------------------------------
entry_point:
find_peak_util
-------------------------------
canonical_solution:
def find_peak_util(arr, low, high, n): 
	mid = low + (high - low)/2
	mid = int(mid) 
	if ((mid == 0 or arr[mid - 1] <= arr[mid]) and
		(mid == n - 1 or arr[mid + 1] <= arr[mid])): 
		return mid 
	elif (mid > 0 and arr[mid - 1] > arr[mid]): 
		return find_peak_util(arr, low, (mid - 1), n) 
	else: 
		return find_peak_util(arr, (mid + 1), high, n) 
def find_peak(arr, n): 
	return find_peak_util(arr, 0, n - 1, n) 
-------------------------------
test:
def check(find_peak_util):
    assert find_peak([1, 3, 20, 4, 1, 0], 6) == 2
    assert find_peak([2, 3, 4, 5, 6], 5) == 4
    assert find_peak([8, 9, 11, 12, 14, 15], 6) == 5 

============MBPP/467============
prompt:
# Write a python function to convert decimal number to octal number.

def decimal_to_Octal(deciNum):
-------------------------------
entry_point:
decimal_to_Octal
-------------------------------
canonical_solution:
def decimal_to_Octal(deciNum):
    octalNum = 0
    countval = 1;
    dNo = deciNum;
    while (deciNum!= 0):
        remainder= deciNum % 8;
        octalNum+= remainder*countval;
        countval= countval*10;
        deciNum //= 8; 
    return (octalNum)
-------------------------------
test:
def check(decimal_to_Octal):
    assert decimal_to_Octal(10) == 12
    assert decimal_to_Octal(2) == 2
    assert decimal_to_Octal(33) == 41

============MBPP/468============
prompt:
# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.

def max_product(arr, n ):
-------------------------------
entry_point:
max_product
-------------------------------
canonical_solution:
def max_product(arr, n ): 
	mpis =[0] * (n) 
	for i in range(n): 
		mpis[i] = arr[i] 
	for i in range(1, n): 
		for j in range(i): 
			if (arr[i] > arr[j] and
					mpis[i] < (mpis[j] * arr[i])): 
						mpis[i] = mpis[j] * arr[i] 
	return max(mpis)
-------------------------------
test:
def check(max_product):
    assert max_product([3, 100, 4, 5, 150, 6], 6) == 45000 
    assert max_product([4, 42, 55, 68, 80], 5) == 50265600
    assert max_product([10, 22, 9, 33, 21, 50, 41, 60], 8) == 21780000 

============MBPP/469============
prompt:
# Write a function to find the maximum profit earned from a maximum of k stock transactions

def max_profit(price, k):
-------------------------------
entry_point:
max_profit
-------------------------------
canonical_solution:
def max_profit(price, k):
    n = len(price)
    final_profit = [[None for x in range(n)] for y in range(k + 1)]
    for i in range(k + 1):
        for j in range(n):
            if i == 0 or j == 0:
                final_profit[i][j] = 0
            else:
                max_so_far = 0
                for x in range(j):
                    curr_price = price[j] - price[x] + final_profit[i-1][x]
                    if max_so_far < curr_price:
                        max_so_far = curr_price
                final_profit[i][j] = max(final_profit[i][j-1], max_so_far)
    return final_profit[k][n-1]
-------------------------------
test:
def check(max_profit):
    assert max_profit([1, 5, 2, 3, 7, 6, 4, 5], 3) == 10
    assert max_profit([2, 4, 7, 5, 4, 3, 5], 2) == 7
    assert max_profit([10, 6, 8, 4, 2], 2) == 2

============MBPP/470============
prompt:
# Write a function to find the pairwise addition of the elements of the given tuples.

def add_pairwise(test_tup):
-------------------------------
entry_point:
add_pairwise
-------------------------------
canonical_solution:
def add_pairwise(test_tup):
  res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))
  return (res) 
-------------------------------
test:
def check(add_pairwise):
    assert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)
    assert add_pairwise((2, 6, 8, 9, 11)) == (8, 14, 17, 20)
    assert add_pairwise((3, 7, 9, 10, 12)) == (10, 16, 19, 22)

============MBPP/471============
prompt:
# Write a python function to find remainder of array multiplication divided by n.

def find_remainder(arr, lens, n):
-------------------------------
entry_point:
find_remainder
-------------------------------
canonical_solution:
def find_remainder(arr, lens, n): 
    mul = 1
    for i in range(lens):  
        mul = (mul * (arr[i] % n)) % n 
    return mul % n 
-------------------------------
test:
def check(find_remainder):
    assert find_remainder([ 100, 10, 5, 25, 35, 14 ],6,11) ==9
    assert find_remainder([1,1,1],3,1) == 0
    assert find_remainder([1,2,1],3,2) == 0

============MBPP/472============
prompt:
# Write a python function to check whether the given list contains consecutive numbers or not.

def check_Consecutive(l):
-------------------------------
entry_point:
check_Consecutive
-------------------------------
canonical_solution:
def check_Consecutive(l): 
    return sorted(l) == list(range(min(l),max(l)+1)) 
-------------------------------
test:
def check(check_Consecutive):
    assert check_Consecutive([1,2,3,4,5]) == True
    assert check_Consecutive([1,2,3,5,6]) == False
    assert check_Consecutive([1,2,1]) == False

============MBPP/473============
prompt:
# Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.

def tuple_intersection(test_list1, test_list2):
-------------------------------
entry_point:
tuple_intersection
-------------------------------
canonical_solution:
def tuple_intersection(test_list1, test_list2):
  res = set([tuple(sorted(ele)) for ele in test_list1]) & set([tuple(sorted(ele)) for ele in test_list2])
  return (res)
-------------------------------
test:
def check(tuple_intersection):
    assert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}
    assert tuple_intersection([(4, 1), (7, 4), (11, 13), (17, 14)] , [(1, 4), (7, 4), (16, 12), (10, 13)]) == {(4, 7), (1, 4)}
    assert tuple_intersection([(2, 1), (3, 2), (1, 3), (1, 4)] , [(11, 2), (2, 3), (6, 2), (1, 3)]) == {(1, 3), (2, 3)}

============MBPP/474============
prompt:
# Write a function to replace characters in a string.

def replace_char(str1,ch,newch):
-------------------------------
entry_point:
replace_char
-------------------------------
canonical_solution:
def replace_char(str1,ch,newch):
 str2 = str1.replace(ch, newch)
 return str2
-------------------------------
test:
def check(replace_char):
    assert replace_char("polygon",'y','l')==("pollgon")
    assert replace_char("character",'c','a')==("aharaater")
    assert replace_char("python",'l','a')==("python")

============MBPP/475============
prompt:
# Write a function to sort counter by value.
from collections import Counter
def sort_counter(dict1):
-------------------------------
entry_point:
sort_counter
-------------------------------
canonical_solution:
from collections import Counter
def sort_counter(dict1):
 x = Counter(dict1)
 sort_counter=x.most_common()
 return sort_counter
-------------------------------
test:
def check(sort_counter):
    assert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]
    assert sort_counter({'Math':400, 'Physics':300, 'Chemistry':250})==[('Math', 400), ('Physics', 300), ('Chemistry', 250)]
    assert sort_counter({'Math':900, 'Physics':1000, 'Chemistry':1250})==[('Chemistry', 1250), ('Physics', 1000), ('Math', 900)]

============MBPP/476============
prompt:
# Write a python function to find the sum of the largest and smallest value in a given array.

def big_sum(nums):
-------------------------------
entry_point:
big_sum
-------------------------------
canonical_solution:
def big_sum(nums):
      sum= max(nums)+min(nums)
      return sum
-------------------------------
test:
def check(big_sum):
    assert big_sum([1,2,3]) == 4
    assert big_sum([-1,2,3,4]) == 3
    assert big_sum([2,3,6]) == 8

============MBPP/477============
prompt:
# Write a python function to convert the given string to lower case.

def is_lower(string):
-------------------------------
entry_point:
is_lower
-------------------------------
canonical_solution:
def is_lower(string):
  return (string.lower())
-------------------------------
test:
def check(is_lower):
    assert is_lower("InValid") == "invalid"
    assert is_lower("TruE") == "true"
    assert is_lower("SenTenCE") == "sentence"

============MBPP/478============
prompt:
# Write a function to remove lowercase substrings from a given string.
import re
def remove_lowercase(str1):
-------------------------------
entry_point:
remove_lowercase
-------------------------------
canonical_solution:
import re
def remove_lowercase(str1):
 remove_lower = lambda text: re.sub('[a-z]', '', text)
 result =  remove_lower(str1)
 return result
-------------------------------
test:
def check(remove_lowercase):
    assert remove_lowercase("PYTHon")==('PYTH')
    assert remove_lowercase("FInD")==('FID')
    assert remove_lowercase("STRinG")==('STRG')

============MBPP/479============
prompt:
# Write a python function to find the first digit of a given number.

def first_Digit(n) :
-------------------------------
entry_point:
first_Digit
-------------------------------
canonical_solution:
def first_Digit(n) :  
    while n >= 10:  
        n = n / 10; 
    return int(n) 
-------------------------------
test:
def check(first_Digit):
    assert first_Digit(123) == 1
    assert first_Digit(456) == 4
    assert first_Digit(12) == 1

============MBPP/480============
prompt:
# Write a python function to find the maximum occurring character in a given string.

def get_max_occuring_char(str1):
-------------------------------
entry_point:
get_max_occuring_char
-------------------------------
canonical_solution:
def get_max_occuring_char(str1):
  ASCII_SIZE = 256
  ctr = [0] * ASCII_SIZE
  max = -1
  ch = ''
  for i in str1:
    ctr[ord(i)]+=1;
  for i in str1:
    if max < ctr[ord(i)]:
      max = ctr[ord(i)]
      ch = i
  return ch
-------------------------------
test:
def check(get_max_occuring_char):
    assert get_max_occuring_char("data") == "a"
    assert get_max_occuring_char("create") == "e"
    assert get_max_occuring_char("brilliant girl") == "i"

============MBPP/481============
prompt:
# Write a function to determine if there is a subset of the given set with sum equal to the given sum.

def is_subset_sum(set, n, sum):
-------------------------------
entry_point:
is_subset_sum
-------------------------------
canonical_solution:
def is_subset_sum(set, n, sum):
	if (sum == 0):
		return True
	if (n == 0):
		return False
	if (set[n - 1] > sum):
		return is_subset_sum(set, n - 1, sum)
	return is_subset_sum(set, n-1, sum) or is_subset_sum(set, n-1, sum-set[n-1])
-------------------------------
test:
def check(is_subset_sum):
    assert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 9) == True
    assert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 30) == False
    assert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 15) == True

============MBPP/482============
prompt:
# Write a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.
import re 
def match(text):
-------------------------------
entry_point:
match
-------------------------------
canonical_solution:
import re 
def match(text): 
		pattern = '[A-Z]+[a-z]+$'
		if re.search(pattern, text): 
				return('Yes') 
		else: 
				return('No') 
-------------------------------
test:
def check(match):
    assert match("Geeks") == 'Yes'
    assert match("geeksforGeeks") == 'Yes'
    assert match("geeks") == 'No'

============MBPP/483============
prompt:
# Write a python function to find the first natural number whose factorial is divisible by x.

def first_Factorial_Divisible_Number(x):
-------------------------------
entry_point:
first_Factorial_Divisible_Number
-------------------------------
canonical_solution:
def first_Factorial_Divisible_Number(x): 
    i = 1;
    fact = 1; 
    for i in range(1,x): 
        fact = fact * i 
        if (fact % x == 0): 
            break
    return i 
-------------------------------
test:
def check(first_Factorial_Divisible_Number):
    assert first_Factorial_Divisible_Number(10) == 5
    assert first_Factorial_Divisible_Number(15) == 5
    assert first_Factorial_Divisible_Number(5) == 4

============MBPP/484============
prompt:
# Write a function to remove the matching tuples from the given two tuples.

def remove_matching_tuple(test_list1, test_list2):
-------------------------------
entry_point:
remove_matching_tuple
-------------------------------
canonical_solution:
def remove_matching_tuple(test_list1, test_list2):
  res = [sub for sub in test_list1 if sub not in test_list2]
  return (res) 
-------------------------------
test:
def check(remove_matching_tuple):
    assert remove_matching_tuple([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('Hello', 'dude'), ('How', 'are')]) == [('you', '?')]
    assert remove_matching_tuple([('Part', 'of'), ('the', 'journey'), ('is ', 'end')], [('Journey', 'the'), ('is', 'end')]) == [('Part', 'of'), ('the', 'journey'), ('is ', 'end')]
    assert remove_matching_tuple([('Its', 'been'), ('a', 'long'), ('day', 'without')], [('a', 'long'), ('my', 'friend')]) == [('Its', 'been'), ('day', 'without')]

============MBPP/485============
prompt:
# Write a function to find the largest palindromic number in the given array.

def is_palindrome(n) :
-------------------------------
entry_point:
is_palindrome
-------------------------------
canonical_solution:
def is_palindrome(n) : 
	divisor = 1
	while (n / divisor >= 10) : 
		divisor *= 10
	while (n != 0) : 
		leading = n // divisor 
		trailing = n % 10
		if (leading != trailing) : 
			return False
		n = (n % divisor) // 10
		divisor = divisor // 100
	return True
def largest_palindrome(A, n) : 
	A.sort() 
	for i in range(n - 1, -1, -1) : 
		if (is_palindrome(A[i])) : 
			return A[i] 
	return -1
-------------------------------
test:
def check(is_palindrome):
    assert largest_palindrome([1, 232, 54545, 999991], 4) == 54545
    assert largest_palindrome([1, 2, 3, 4, 5, 50], 6) == 5
    assert largest_palindrome([1, 3, 7, 9, 45], 5)  == 9

============MBPP/486============
prompt:
# Write a function to compute binomial probability for the given number.

def nCr(n, r):
-------------------------------
entry_point:
nCr
-------------------------------
canonical_solution:
def nCr(n, r): 
	if (r > n / 2): 
		r = n - r 
	answer = 1 
	for i in range(1, r + 1): 
		answer *= (n - r + i) 
		answer /= i 
	return answer 
def binomial_probability(n, k, p): 
	return (nCr(n, k) * pow(p, k) *	pow(1 - p, n - k)) 
-------------------------------
test:
def check(nCr):
    assert binomial_probability(10, 5, 1.0/3) == 0.13656454808718185
    assert binomial_probability(11, 6, 2.0/4) == 0.2255859375
    assert binomial_probability(12, 7, 3.0/5) == 0.227030335488

============MBPP/487============
prompt:
# Write a function to sort a list of tuples in increasing order by the last element in each tuple.

def sort_tuple(tup):
-------------------------------
entry_point:
sort_tuple
-------------------------------
canonical_solution:
def sort_tuple(tup): 
	lst = len(tup) 
	for i in range(0, lst): 
		for j in range(0, lst-i-1): 
			if (tup[j][-1] > tup[j + 1][-1]): 
				temp = tup[j] 
				tup[j]= tup[j + 1] 
				tup[j + 1]= temp 
	return tup
-------------------------------
test:
def check(sort_tuple):
    assert sort_tuple([(1, 3), (3, 2), (2, 1)] ) == [(2, 1), (3, 2), (1, 3)]
    assert sort_tuple([(2, 4), (3, 3), (1, 1)] ) == [(1, 1), (3, 3), (2, 4)]
    assert sort_tuple([(3, 9), (6, 7), (4, 3)] ) == [(4, 3), (6, 7), (3, 9)]

============MBPP/488============
prompt:
# Write a function to find the area of a pentagon.
import math
def area_pentagon(a):
-------------------------------
entry_point:
area_pentagon
-------------------------------
canonical_solution:
import math
def area_pentagon(a):
  area=(math.sqrt(5*(5+2*math.sqrt(5)))*pow(a,2))/4.0
  return area
-------------------------------
test:
def check(area_pentagon):
    assert area_pentagon(5)==43.01193501472417
    assert area_pentagon(10)==172.0477400588967
    assert area_pentagon(15)==387.10741513251753

============MBPP/489============
prompt:
# Write a python function to find the frequency of the largest value in a given array.

def frequency_Of_Largest(n,arr):
-------------------------------
entry_point:
frequency_Of_Largest
-------------------------------
canonical_solution:
def frequency_Of_Largest(n,arr): 
    mn = arr[0] 
    freq = 1
    for i in range(1,n): 
        if (arr[i] >mn): 
            mn = arr[i] 
            freq = 1
        elif (arr[i] == mn): 
            freq += 1
    return freq 
-------------------------------
test:
def check(frequency_Of_Largest):
    assert frequency_Of_Largest(5,[1,2,3,4,4]) == 2
    assert frequency_Of_Largest(3,[5,6,5]) == 1
    assert frequency_Of_Largest(4,[2,7,7,7]) == 3

============MBPP/490============
prompt:
# Write a function to extract all the pairs which are symmetric in the given tuple list.

def extract_symmetric(test_list):
-------------------------------
entry_point:
extract_symmetric
-------------------------------
canonical_solution:
def extract_symmetric(test_list):
  temp = set(test_list) & {(b, a) for a, b in test_list}
  res = {(a, b) for a, b in temp if a < b}
  return (res) 
-------------------------------
test:
def check(extract_symmetric):
    assert extract_symmetric([(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)] ) == {(8, 9), (6, 7)}
    assert extract_symmetric([(7, 8), (3, 4), (8, 7), (10, 9), (11, 3), (9, 10)] ) == {(9, 10), (7, 8)}
    assert extract_symmetric([(8, 9), (4, 5), (9, 8), (11, 10), (12, 4), (10, 11)] ) == {(8, 9), (10, 11)}

============MBPP/491============
prompt:
# Write a function to find the sum of geometric progression series.
import math
def sum_gp(a,n,r):
-------------------------------
entry_point:
sum_gp
-------------------------------
canonical_solution:
import math
def sum_gp(a,n,r):
 total = (a * (1 - math.pow(r, n ))) / (1- r)
 return total
-------------------------------
test:
def check(sum_gp):
    assert sum_gp(1,5,2)==31
    assert sum_gp(1,5,4)==341
    assert sum_gp(2,6,3)==728

============MBPP/492============
prompt:
# Write a function to search an element in the given array by using binary search.

def binary_search(item_list,item):
-------------------------------
entry_point:
binary_search
-------------------------------
canonical_solution:
def binary_search(item_list,item):
	first = 0
	last = len(item_list)-1
	found = False
	while( first<=last and not found):
		mid = (first + last)//2
		if item_list[mid] == item :
			found = True
		else:
			if item < item_list[mid]:
				last = mid - 1
			else:
				first = mid + 1	
	return found
-------------------------------
test:
def check(binary_search):
    assert binary_search([1,2,3,5,8], 6) == False
    assert binary_search([7, 8, 9, 10, 13], 10) == True
    assert binary_search([11, 13, 14, 19, 22, 36], 23) == False

============MBPP/493============
prompt:
# Write a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.
import math
def calculate_polygons(startx, starty, endx, endy, radius):
-------------------------------
entry_point:
calculate_polygons
-------------------------------
canonical_solution:
import math
def calculate_polygons(startx, starty, endx, endy, radius):
    sl = (2 * radius) * math.tan(math.pi / 6)
    p = sl * 0.5
    b = sl * math.cos(math.radians(30))
    w = b * 2
    h = 2 * sl   
    startx = startx - w
    starty = starty - h
    endx = endx + w
    endy = endy + h
    origx = startx
    origy = starty
    xoffset = b
    yoffset = 3 * p
    polygons = []
    row = 1
    counter = 0
    while starty < endy:
        if row % 2 == 0:
            startx = origx + xoffset
        else:
            startx = origx
        while startx < endx:
            p1x = startx
            p1y = starty + p
            p2x = startx
            p2y = starty + (3 * p)
            p3x = startx + b
            p3y = starty + h
            p4x = startx + w
            p4y = starty + (3 * p)
            p5x = startx + w
            p5y = starty + p
            p6x = startx + b
            p6y = starty
            poly = [
                (p1x, p1y),
                (p2x, p2y),
                (p3x, p3y),
                (p4x, p4y),
                (p5x, p5y),
                (p6x, p6y),
                (p1x, p1y)]
            polygons.append(poly)
            counter += 1
            startx += w
        starty += yoffset
        row += 1
    return polygons
-------------------------------
test:
def check(calculate_polygons):
    assert calculate_polygons(1,1, 4, 4, 3)==[[(-5.0, -4.196152422706632), (-5.0, -0.7320508075688767), (-2.0, 1.0), (1.0, -0.7320508075688767), (1.0, -4.196152422706632), (-2.0, -5.928203230275509), (-5.0, -4.196152422706632)], [(1.0, -4.196152422706632), (1.0, -0.7320508075688767), (4.0, 1.0), (7.0, -0.7320508075688767), (7.0, -4.196152422706632), (4.0, -5.928203230275509), (1.0, -4.196152422706632)], [(7.0, -4.196152422706632), (7.0, -0.7320508075688767), (10.0, 1.0), (13.0, -0.7320508075688767), (13.0, -4.196152422706632), (10.0, -5.928203230275509), (7.0, -4.196152422706632)], [(-2.0, 1.0000000000000004), (-2.0, 4.464101615137755), (1.0, 6.196152422706632), (4.0, 4.464101615137755), (4.0, 1.0000000000000004), (1.0, -0.7320508075688767), (-2.0, 1.0000000000000004)], [(4.0, 1.0000000000000004), (4.0, 4.464101615137755), (7.0, 6.196152422706632), (10.0, 4.464101615137755), (10.0, 1.0000000000000004), (7.0, -0.7320508075688767), (4.0, 1.0000000000000004)], [(-5.0, 6.196152422706632), (-5.0, 9.660254037844387), (-2.0, 11.392304845413264), (1.0, 9.660254037844387), (1.0, 6.196152422706632), (-2.0, 4.464101615137755), (-5.0, 6.196152422706632)], [(1.0, 6.196152422706632), (1.0, 9.660254037844387), (4.0, 11.392304845413264), (7.0, 9.660254037844387), (7.0, 6.196152422706632), (4.0, 4.464101615137755), (1.0, 6.196152422706632)], [(7.0, 6.196152422706632), (7.0, 9.660254037844387), (10.0, 11.392304845413264), (13.0, 9.660254037844387), (13.0, 6.196152422706632), (10.0, 4.464101615137755), (7.0, 6.196152422706632)], [(-2.0, 11.392304845413264), (-2.0, 14.85640646055102), (1.0, 16.588457268119896), (4.0, 14.85640646055102), (4.0, 11.392304845413264), (1.0, 9.660254037844387), (-2.0, 11.392304845413264)], [(4.0, 11.392304845413264), (4.0, 14.85640646055102), (7.0, 16.588457268119896), (10.0, 14.85640646055102), (10.0, 11.392304845413264), (7.0, 9.660254037844387), (4.0, 11.392304845413264)]]
    assert calculate_polygons(5,4,7,9,8)==[[(-11.0, -9.856406460551018), (-11.0, -0.6188021535170058), (-3.0, 4.0), (5.0, -0.6188021535170058), (5.0, -9.856406460551018), (-3.0, -14.475208614068023), (-11.0, -9.856406460551018)], [(5.0, -9.856406460551018), (5.0, -0.6188021535170058), (13.0, 4.0), (21.0, -0.6188021535170058), (21.0, -9.856406460551018), (13.0, -14.475208614068023), (5.0, -9.856406460551018)], [(21.0, -9.856406460551018), (21.0, -0.6188021535170058), (29.0, 4.0), (37.0, -0.6188021535170058), (37.0, -9.856406460551018), (29.0, -14.475208614068023), (21.0, -9.856406460551018)], [(-3.0, 4.0), (-3.0, 13.237604307034012), (5.0, 17.856406460551018), (13.0, 13.237604307034012), (13.0, 4.0), (5.0, -0.6188021535170058), (-3.0, 4.0)], [(13.0, 4.0), (13.0, 13.237604307034012), (21.0, 17.856406460551018), (29.0, 13.237604307034012), (29.0, 4.0), (21.0, -0.6188021535170058), (13.0, 4.0)], [(-11.0, 17.856406460551018), (-11.0, 27.09401076758503), (-3.0, 31.712812921102035), (5.0, 27.09401076758503), (5.0, 17.856406460551018), (-3.0, 13.237604307034012), (-11.0, 17.856406460551018)], [(5.0, 17.856406460551018), (5.0, 27.09401076758503), (13.0, 31.712812921102035), (21.0, 27.09401076758503), (21.0, 17.856406460551018), (13.0, 13.237604307034012), (5.0, 17.856406460551018)], [(21.0, 17.856406460551018), (21.0, 27.09401076758503), (29.0, 31.712812921102035), (37.0, 27.09401076758503), (37.0, 17.856406460551018), (29.0, 13.237604307034012), (21.0, 17.856406460551018)], [(-3.0, 31.712812921102035), (-3.0, 40.95041722813605), (5.0, 45.569219381653056), (13.0, 40.95041722813605), (13.0, 31.712812921102035), (5.0, 27.09401076758503), (-3.0, 31.712812921102035)], [(13.0, 31.712812921102035), (13.0, 40.95041722813605), (21.0, 45.569219381653056), (29.0, 40.95041722813605), (29.0, 31.712812921102035), (21.0, 27.09401076758503), (13.0, 31.712812921102035)]]
    assert calculate_polygons(9,6,4,3,2)==[[(5.0, 2.5358983848622456), (5.0, 4.8452994616207485), (7.0, 6.0), (9.0, 4.8452994616207485), (9.0, 2.5358983848622456), (7.0, 1.3811978464829942), (5.0, 2.5358983848622456)], [(7.0, 6.0), (7.0, 8.309401076758503), (9.0, 9.464101615137753), (11.0, 8.309401076758503), (11.0, 6.0), (9.0, 4.8452994616207485), (7.0, 6.0)]]

============MBPP/494============
prompt:
# Write a function to convert the given binary tuple to integer.

def binary_to_integer(test_tup):
-------------------------------
entry_point:
binary_to_integer
-------------------------------
canonical_solution:
def binary_to_integer(test_tup):
  res = int("".join(str(ele) for ele in test_tup), 2)
  return (str(res)) 
-------------------------------
test:
def check(binary_to_integer):
    assert binary_to_integer((1, 1, 0, 1, 0, 0, 1)) == '105'
    assert binary_to_integer((0, 1, 1, 0, 0, 1, 0, 1)) == '101'
    assert binary_to_integer((1, 1, 0, 1, 0, 1)) == '53'

============MBPP/495============
prompt:
# Write a function to remove lowercase substrings from a given string by using regex.
import re
def remove_lowercase(str1):
-------------------------------
entry_point:
remove_lowercase
-------------------------------
canonical_solution:
import re
def remove_lowercase(str1):
  remove_lower = lambda text: re.sub('[a-z]', '', text)
  result =  remove_lower(str1)
  return (result)
-------------------------------
test:
def check(remove_lowercase):
    assert remove_lowercase('KDeoALOklOOHserfLoAJSIskdsf') == 'KDALOOOHLAJSI'
    assert remove_lowercase('ProducTnamEstreAmIngMediAplAYer') == 'PTEAIMAAY'
    assert remove_lowercase('maNufacTuredbYSheZenTechNolOGIes') == 'NTYSZTNOGI'

============MBPP/496============
prompt:
# Write a function to find the smallest integers from a given list of numbers using heap queue algorithm.
import heapq as hq
def heap_queue_smallest(nums,n):
-------------------------------
entry_point:
heap_queue_smallest
-------------------------------
canonical_solution:
import heapq as hq
def heap_queue_smallest(nums,n):
  smallest_nums = hq.nsmallest(n, nums)
  return smallest_nums
-------------------------------
test:
def check(heap_queue_smallest):
    assert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],3)==[14, 22, 25] 
    assert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],2)==[14, 22]
    assert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 22, 58],5)==[14, 22, 22, 25, 35]

============MBPP/497============
prompt:
# Write a function to find the surface area of a cone.
import math
def surfacearea_cone(r,h):
-------------------------------
entry_point:
surfacearea_cone
-------------------------------
canonical_solution:
import math
def surfacearea_cone(r,h):
  l = math.sqrt(r * r + h * h)
  SA = math.pi * r * (r + l)
  return SA
-------------------------------
test:
def check(surfacearea_cone):
    assert surfacearea_cone(5,12)==282.7433388230814
    assert surfacearea_cone(10,15)==880.5179353159282
    assert surfacearea_cone(19,17)==2655.923961165254

============MBPP/498============
prompt:
# Write a python function to find gcd of two positive integers.

def gcd(x, y):
-------------------------------
entry_point:
gcd
-------------------------------
canonical_solution:
def gcd(x, y):
    gcd = 1
    if x % y == 0:
        return y
    for k in range(int(y / 2), 0, -1):
        if x % k == 0 and y % k == 0:
            gcd = k
            break  
    return gcd
-------------------------------
test:
def check(gcd):
    assert gcd(12, 17) == 1
    assert gcd(4,6) == 2
    assert gcd(2,9) == 1

============MBPP/499============
prompt:
# Write a function to find the diameter of a circle.

def diameter_circle(r):
-------------------------------
entry_point:
diameter_circle
-------------------------------
canonical_solution:
def diameter_circle(r):
  diameter=2*r
  return diameter
-------------------------------
test:
def check(diameter_circle):
    assert diameter_circle(10)==20
    assert diameter_circle(40)==80
    assert diameter_circle(15)==30

============MBPP/500============
prompt:
# Write a function to concatenate all elements of the given list into a string.

def concatenate_elements(list):
-------------------------------
entry_point:
concatenate_elements
-------------------------------
canonical_solution:
def concatenate_elements(list):
  ans = ' '
  for i in list:
    ans = ans+ ' '+i
  return (ans) 
-------------------------------
test:
def check(concatenate_elements):
    assert concatenate_elements(['hello','there','have','a','rocky','day'] ) == '  hello there have a rocky day'
    assert concatenate_elements([ 'Hi', 'there', 'How','are', 'you'] ) == '  Hi there How are you'
    assert concatenate_elements([ 'Part', 'of', 'the','journey', 'is', 'end'] ) == '  Part of the journey is end'

============MBPP/501============
prompt:
# Write a python function to find common divisor between two numbers in a given pair.

def ngcd(x,y):
-------------------------------
entry_point:
ngcd
-------------------------------
canonical_solution:
def ngcd(x,y):
    i=1
    while(i<=x and i<=y):
        if(x%i==0 and y%i == 0):
            gcd=i;
        i+=1
    return gcd;
def num_comm_div(x,y):
  n = ngcd(x,y)
  result = 0
  z = int(n**0.5)
  i = 1
  while(i <= z):
    if(n % i == 0):
      result += 2 
      if(i == n/i):
        result-=1
    i+=1
  return result
-------------------------------
test:
def check(ngcd):
    assert num_comm_div(2,4) == 2
    assert num_comm_div(2,8) == 2
    assert num_comm_div(12,24) == 6

============MBPP/502============
prompt:
# Write a python function to find remainder of two numbers.

def find(n,m):
-------------------------------
entry_point:
find
-------------------------------
canonical_solution:
def find(n,m):
  r = n%m
  return (r)
-------------------------------
test:
def check(find):
    assert find(3,3) == 0
    assert find(10,3) == 1
    assert find(16,5) == 1

============MBPP/503============
prompt:
# Write a function to add consecutive numbers of a given list.

def add_consecutive_nums(nums):
-------------------------------
entry_point:
add_consecutive_nums
-------------------------------
canonical_solution:
def add_consecutive_nums(nums):
    result = [b+a for a, b in zip(nums[:-1], nums[1:])]
    return result
-------------------------------
test:
def check(add_consecutive_nums):
    assert add_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])==[2, 4, 7, 8, 9, 11, 13]
    assert add_consecutive_nums([4, 5, 8, 9, 6, 10])==[9, 13, 17, 15, 16]
    assert add_consecutive_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[3, 5, 7, 9, 11, 13, 15, 17, 19]

============MBPP/504============
prompt:
# Write a python function to find the cube sum of first n natural numbers.

def sum_Of_Series(n):
-------------------------------
entry_point:
sum_Of_Series
-------------------------------
canonical_solution:
def sum_Of_Series(n): 
    sum = 0
    for i in range(1,n + 1): 
        sum += i * i*i       
    return sum
-------------------------------
test:
def check(sum_Of_Series):
    assert sum_Of_Series(5) == 225
    assert sum_Of_Series(2) == 9
    assert sum_Of_Series(3) == 36

============MBPP/505============
prompt:
# Write a function to move all zeroes to the end of the given array.

def re_order(A):
-------------------------------
entry_point:
re_order
-------------------------------
canonical_solution:
def re_order(A):
    k = 0
    for i in A:
        if i:
            A[k] = i
            k = k + 1
    for i in range(k, len(A)):
        A[i] = 0
    return A
-------------------------------
test:
def check(re_order):
    assert re_order([6, 0, 8, 2, 3, 0, 4, 0, 1]) == [6, 8, 2, 3, 4, 1, 0, 0, 0]
    assert re_order([4, 0, 2, 7, 0, 9, 0, 12, 0]) == [4, 2, 7, 9, 12, 0, 0, 0, 0]
    assert re_order([3, 11, 0, 74, 14, 0, 1, 0, 2]) == [3, 11, 74, 14, 1, 2, 0, 0, 0]

============MBPP/506============
prompt:
# Write a function to calculate the permutation coefficient of given p(n, k).

def permutation_coefficient(n, k):
-------------------------------
entry_point:
permutation_coefficient
-------------------------------
canonical_solution:
def permutation_coefficient(n, k): 
	P = [[0 for i in range(k + 1)] 
			for j in range(n + 1)] 
	for i in range(n + 1): 
		for j in range(min(i, k) + 1): 
			if (j == 0): 
				P[i][j] = 1
			else: 
				P[i][j] = P[i - 1][j] + ( 
						j * P[i - 1][j - 1]) 
			if (j < k): 
				P[i][j + 1] = 0
	return P[n][k] 
-------------------------------
test:
def check(permutation_coefficient):
    assert permutation_coefficient(10, 2) == 90
    assert permutation_coefficient(10, 3) == 720
    assert permutation_coefficient(10, 1) == 10

============MBPP/507============
prompt:
# Write a function to remove specific words from a given list.

def remove_words(list1, removewords):
-------------------------------
entry_point:
remove_words
-------------------------------
canonical_solution:
def remove_words(list1, removewords):
    for word in list(list1):
        if word in removewords:
            list1.remove(word)
    return list1  
-------------------------------
test:
def check(remove_words):
    assert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['white', 'orange'])==['red', 'green', 'blue', 'black']
    assert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['black', 'orange'])==['red', 'green', 'blue', 'white']
    assert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['blue', 'white'])==['red', 'green', 'black', 'orange']

============MBPP/508============
prompt:
# Write a function to check if the common elements between two given lists are in the same order or not.

def same_order(l1, l2):
-------------------------------
entry_point:
same_order
-------------------------------
canonical_solution:
def same_order(l1, l2):
    common_elements = set(l1) & set(l2)
    l1 = [e for e in l1 if e in common_elements]
    l2 = [e for e in l2 if e in common_elements]
    return l1 == l2
-------------------------------
test:
def check(same_order):
    assert same_order(["red","green","black","orange"],["red","pink","green","white","black"])==True
    assert same_order(["red","pink","green","white","black"],["white","orange","pink","black"])==False
    assert same_order(["red","green","black","orange"],["red","pink","green","white","black"])==True

============MBPP/509============
prompt:
# Write a python function to find the average of odd numbers till a given odd number.

def average_Odd(n) :
-------------------------------
entry_point:
average_Odd
-------------------------------
canonical_solution:
def average_Odd(n) : 
    if (n%2==0) : 
        return ("Invalid Input") 
        return -1 
    sm =0
    count =0
    while (n>=1) : 
        count=count+1
        sm = sm + n 
        n = n-2
    return sm//count 
-------------------------------
test:
def check(average_Odd):
    assert average_Odd(9) == 5
    assert average_Odd(5) == 3
    assert average_Odd(11) == 6

============MBPP/510============
prompt:
# Write a function to find the number of subsequences having product smaller than k for the given non negative array.

def no_of_subsequences(arr, k):
-------------------------------
entry_point:
no_of_subsequences
-------------------------------
canonical_solution:
def no_of_subsequences(arr, k): 
	n = len(arr) 
	dp = [[0 for i in range(n + 1)] 
			for j in range(k + 1)] 
	for i in range(1, k + 1): 
		for j in range(1, n + 1): 
			dp[i][j] = dp[i][j - 1] 
			if arr[j - 1] <= i and arr[j - 1] > 0: 
				dp[i][j] += dp[i // arr[j - 1]][j - 1] + 1
	return dp[k][n]
-------------------------------
test:
def check(no_of_subsequences):
    assert no_of_subsequences([1,2,3,4], 10) == 11
    assert no_of_subsequences([4,8,7,2], 50) == 9
    assert no_of_subsequences([5,6,7,8], 15) == 4

