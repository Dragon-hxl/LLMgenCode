# Complete Python function to solve the task and pass the assertion tests.
### Task Start ###
# These are the assertions for your function:
assert truncate_number(3.5) == 0.5

#Complete the Python funtion:


def truncate_number(number: float) -> float:
    """ Given a positive floating point number, it can be decomposed into
    and integer part (largest integer smaller than given number) and decimals
    (leftover part always smaller than 1).

    Return the decimal part of the number.
    >>> truncate_number(3.5)
    0.5
    """

### result ###
def truncate_number(number: float) -> float:
    if number >= 1.0:
        return int(number)
    else:
        return number - (int(number) * 1.0)

Feedback: With the above function, truncate_number(3.5) == 3. The assertion is "assert truncate_number(3.5) == 0.5". 
So the code does not pass theassertion. The code above is wrong. Please fix it.

def truncate_number(number: float) -> float:
    return number % 1.0

Feedback: With the above function, truncate_number(3.5) == 0.5. The assertion is "assert truncate_number(3.5) == 0.5".
So the code passes the assertion. The code above is correct.
### Task End ###

### Task Start ###
# These are the assertions for your function:
assert below_zero([]) == False

#Complete the Python funtion:
from typing import List


def below_zero(operations: List[int]) -> bool:
    """ You're given a list of deposit and withdrawal operations on a bank account that starts with
    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    at that point function should return True. Otherwise it should return False.
    >>> below_zero([1, 2, 3])
    False
    >>> below_zero([1, 2, -4, 5])
    True
    """

### result ###
def below_zero(operations: List[int]) -> bool:
    balance = 0
    for op in operations:
        if op > 0:
            balance += op
        else:
            return True

    return False

Feedback: With the above function, below_zero([]) == False. The assertion is "assert below_zero([]) == False".
So the code passes the assertion. The code above is wrong. Please fix it.

def below_zero(operations: List[int]) -> bool:
    balance = 0

    for op in operations:
        balance += op
        if balance < 0:
            return True

    return False

Feedback: With the above function, below_zero([]) == False. The assertion is "assert below_zero([]) == False".
So the code passes the assertion. The code above is correct.
### Task End ###

### Task Start ###
# These are the assertions for your function:
assert intersperse([], 7) == []

#Complete the Python funtion:
from typing import List


def intersperse(numbers: List[int], delimeter: int) -> List[int]:
    """ Insert a number 'delimeter' between every two consecutive elements of input list `numbers'
    >>> intersperse([], 4)
    []
    >>> intersperse([1, 2, 3], 4)
    [1, 4, 2, 4, 3]
    """

### result ###
def intersperse(numbers: List[int], delimeter: int) -> List[int]:
    result = []
    for num in numbers:
        result.append(num)
        if len(result) % delimeter == 0:
            result.append(delimeter)
    return result

Feedback: With the above function, intersperse([], 7) == []. The assertion is "assert intersperse([], 7) == []".
So the code passes the assertion. The code above is wrong. Please fix it.

def intersperse(numbers: List[int], delimeter: int) -> List[int]:
    if not numbers:
        return []

    result = []

    for n in numbers[:-1]:
        result.append(n)
        result.append(delimeter)

    result.append(numbers[-1])

    return result

Feedback: With the above function, intersperse([], 7) == []. The assertion is "assert intersperse([], 7) == []".
So the code passes the assertion. The code above is correct.
### Task End ###

### Task Start ###
# These are the assertions for your function:
