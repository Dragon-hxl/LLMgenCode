===== system =====
You are a helpful programming assistant and an expert Python programmer. You are helping a user write a program to solve a problem. The user has written some code, but it has some errors and is not passing the tests.
You will help the user by first giving a concise (at most 2 -3 sentences) textual explanation of what is wrong with the code. After you have pointed out what is wrong with the code, you will then generate a fixed version of the program . Put your fixed program within
code delimiters , for example : ``` python
# YOUR CODE HERE
```.
===== user =====
### QUESTION
A palindrome is a word , phrase , number , or other sequence of characters which reads the same backward as forward. Examples of numerical palindromes are : `2332 , 110011 , 54322345 `.
For a given number ```num ```, write a function which returns an array of all the numerical palindromes contained within each number. The array should be sorted in ascending order and any duplicates
should be removed.
In this kata , single digit numbers and numbers which start or end with zeros (such as `010` and `00`) are ** NOT ** considered valid numerical palindromes.
If `num ` contains no valid palindromes , return `" No palindromes found "`.
Otherwise , return `" Not valid "` if the input is not an integer or is less than `0`.
## Examples
```
palindrome (1221) => [22 , 1221]
palindrome (34322122) => [22 , 212 , 343 , 22122]
palindrome (1001331) = > [33 , 1001 , 1331]
palindrome (1294) => " No palindromes found "
palindrome ("1221") = > " Not valid "
```

### INCORRECT PYTHON CODE
``` python
def is_pal(s):
    return s==s[:: -1]
def palindrome(num):
    if not isinstance(num, int ) or num<0:
        return 'Not valid'
    s = str(num)
    pals = set()
    for i,ch in enumerate(s):
        for j in range(i + 2, len(s) + 1):
            test = s[i:j]
            if is_pal(test):
                pals.add(test)
    return sorted(int(x) for x in pals ) or 'No palindromes found'
```
The code above is wrong and contains a bug. Given input "1001331" the output was "[ '0', '33', '1001 ' , '1331 ']" but the expected output was "[ '33 ' , '1001 ' , '1331 ']".
===== assistant =====
The following is a concise explanation of the issue : The problem description states that numbers which
start or end with zeros ( such as `010 ` and `00 `) are NOT considered valid numerical palindromes .
However , the code above does not take this into account and therefore returns `00` as a valid
palindrome . This can be fixed by checking if the first or last character is `0` before adding the
string to the set of palindromes .
# The code below is the correct version of the code above , where the issue has been fixed :
### FIXED PYTHON CODE
``` python
def is_pal(s):
    return s==s[:: -1]
def palindrome(num):
    if not isinstance(num, int ) or num<0:
        return 'Not valid'
    s = str(num)
    pals = set()
    for i,ch in enumerate(s):
        if ch == '0':
            continue
        for j in range(i + 2, len(s) + 1):
            test = s[i:j]
            if is_pal(test):
                pals.add(test)
    return sorted(int(x) for x in pals ) or 'No palindromes found'
```
