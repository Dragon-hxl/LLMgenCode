# Complete Python function to solve the task and pass the assertion tests.
### Task Start ###
# These are the assertions for your function:
assert has_close_elements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == True

#Complete the Python funtion:
from typing import List
def has_close_elements(numbers: List[float], threshold: float) -> bool:
    """ Check if in given list of numbers, are any two numbers closer to each other than
    given threshold.
    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)
    False
    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)
    True
    """

### result ###
def has_close_elements(numbers: List[float], threshold: float) -> bool:
    for idx, elem in enumerate(numbers):
        for idx2, elem2 in enumerate(numbers):
            if idx != idx2:
                distance = abs(elem - elem2)
                if distance < threshold:
                    return True
    return False

Feedback: The code above is correct.
### Task End ###

### Task Start ###
# These are the assertions for your function:
assert candidate('(()()) ((())) () ((())()())') == ['(()())', '((()))', '()', '((())()())']

#Complete the Python funtion:
from typing import List
def separate_paren_groups(paren_string: str) -> List[str]:
    """ Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    separate those group into separate strings and return the list of those.
    Separate groups are balanced (each open brace is properly closed) and not nested within each other
    Ignore any spaces in the input string.
    >>> separate_paren_groups('( ) (( )) (( )( ))')
    ['()', '(())', '(()())']
    """

### result ###
def separate_paren_groups(paren_string: str) -> List[str]:
    result = []
    current_string = []
    current_depth = 0
    for c in paren_string:
        if c == '(':
            current_depth += 1
            current_string.append(c)
        elif c == ')':
            current_depth -= 1
            current_string.append(c)

            if current_depth == 0:
                result.append(''.join(current_string))
                current_string.clear()
    return result

Feedback: The code above is correct.
### Task End ###

### Task Start ###
# These are the assertions for your function:
assert truncate_number(3.5) == 0.5

#Complete the Python funtion:
def truncate_number(number: float) -> float:
    """ Given a positive floating point number, it can be decomposed into
    and integer part (largest integer smaller than given number) and decimals
    (leftover part always smaller than 1).

    Return the decimal part of the number.
    >>> truncate_number(3.5)
    0.5
    """

### result ###
def truncate_number(number: float) -> float:
    if number >= 1.0:
        return int(number)
    else:
        return number - (int(number) * 1.0)

Feedback: The code above is wrong. Please fix it.

def truncate_number(number: float) -> float:
    return number % 1.0

Feedback: The code above is correct.
### Task End ###

### Task Start ###
# These are the assertions for your function:
assert below_zero([]) == False

#Complete the Python funtion:
from typing import List
def below_zero(operations: List[int]) -> bool:
    """ You're given a list of deposit and withdrawal operations on a bank account that starts with
    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    at that point function should return True. Otherwise it should return False.
    >>> below_zero([1, 2, 3])
    False
    >>> below_zero([1, 2, -4, 5])
    True
    """

### result ###
def below_zero(operations: List[int]) -> bool:
    balance = 0
    for op in operations:
        if op > 0:
            balance += op
        else:
            return True
    return False

Feedback: The code above is wrong. Please fix it.

def below_zero(operations: List[int]) -> bool:
    balance = 0
    for op in operations:
        balance += op
        if balance < 0:
            return True
    return False

Feedback: The code above is correct.
### Task End ###

### Task Start ###
# These are the assertions for your function:
assert abs(mean_absolute_deviation([1.0, 2.0, 3.0]) - 2.0/3.0) < 1e-6

#Complete the Python funtion:
from typing import List
def mean_absolute_deviation(numbers: List[float]) -> float:
    """ For a given list of input numbers, calculate Mean Absolute Deviation
    around the mean of this dataset.
    Mean Absolute Deviation is the average absolute difference between each
    element and a centerpoint (mean in this case):
    MAD = average | x - x_mean |
    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])
    1.0
    """

### result ###
def mean_absolute_deviation(numbers: List[float]) -> float:
    mean = sum(numbers) / len(numbers)
    deviation = [abs(num - mean) for num in numbers]
    return sum(deviation)/len(deviation)

Feedback: The code above is correct.
### Task End ###

### Task Start ###
# These are the assertions for your function:
assert intersperse([], 7) == []

#Complete the Python funtion:
from typing import List


def intersperse(numbers: List[int], delimeter: int) -> List[int]:
    """ Insert a number 'delimeter' between every two consecutive elements of input list `numbers'
    >>> intersperse([], 4)
    []
    >>> intersperse([1, 2, 3], 4)
    [1, 4, 2, 4, 3]
    """

### result ###
def intersperse(numbers: List[int], delimeter: int) -> List[int]:
    result = []
    for num in numbers:
        result.append(num)
        if len(result) % delimeter == 0:
            result.append(delimeter)
    return result

Feedback: The code above is wrong. Please fix it.

def intersperse(numbers: List[int], delimeter: int) -> List[int]:
    if not numbers:
        return []
    result = []
    for n in numbers[:-1]:
        result.append(n)
        result.append(delimeter)
    result.append(numbers[-1])
    return result

Feedback: The code above is correct.
### Task End ###

### Task Start ###
# These are the assertions for your function: