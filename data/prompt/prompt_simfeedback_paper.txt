# Complete Python function to solve the task and pass the assertion tests.
### Task Start ###
# These are the assertions for your function:
assert truncate_number(3.5) == 0.5

# Complete the Python funtion:
def truncate_number(number: float) -> float:
    """ Given a positive floating point number, it can be decomposed into
    and integer part (largest integer smaller than given number) and decimals
    (leftover part always smaller than 1).

    Return the decimal part of the number.
    >>> truncate_number(3.5)
    0.5
    """

### result ###
```python
def truncate_number(number: float) -> float:
    if number >= 1.0:
        return int(number)
    else:
        return number - (int(number) * 1.0)
```
Feedback: The code above is wrong. Please fix it.

### fix result ###
```python
def truncate_number(number: float) -> float:
    return number % 1.0
```
Feedback: The code above is correct.
### Task End ###

### Task Start ###
# These are the assertions for your function:
assert below_zero([]) == False

# Complete the Python funtion:
from typing import List
def below_zero(operations: List[int]) -> bool:
    """ You're given a list of deposit and withdrawal operations on a bank account that starts with
    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    at that point function should return True. Otherwise it should return False.
    >>> below_zero([1, 2, 3])
    False
    >>> below_zero([1, 2, -4, 5])
    True
    """

### result ###
```python
def below_zero(operations: List[int]) -> bool:
    balance = 0
    for op in operations:
        if op > 0:
            balance += op
        else:
            return True
    return False
```
Feedback: The code above is wrong. Please fix it.

### fix result ###
```python
def below_zero(operations: List[int]) -> bool:
    balance = 0
    for op in operations:
        balance += op
        if balance < 0:
            return True
    return False
```
Feedback: The code above is correct.
### Task End ###

### Task Start ###
# These are the assertions for your function:
assert intersperse([], 7) == []

# Complete the Python funtion:
from typing import List
def intersperse(numbers: List[int], delimeter: int) -> List[int]:
    """ Insert a number 'delimeter' between every two consecutive elements of input list `numbers'
    >>> intersperse([], 4)
    []
    >>> intersperse([1, 2, 3], 4)
    [1, 4, 2, 4, 3]
    """

### result ###
```python
def intersperse(numbers: List[int], delimeter: int) -> List[int]:
    result = []
    for num in numbers:
        result.append(num)
        if len(result) % delimeter == 0:
            result.append(delimeter)
    return result
```
Feedback: The code above is wrong. Please fix it.

### fix result ###
```python
def intersperse(numbers: List[int], delimeter: int) -> List[int]:
    if not numbers:
        return []
    result = []
    for n in numbers[:-1]:
        result.append(n)
        result.append(delimeter)
    result.append(numbers[-1])
    return result
```
Feedback: The code above is correct.
### Task End ###


### Task Start ###
# These are the assertions for your function:
assert square_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]

# Complete the Python funtion:
def square_nums(nums):
    """ 
    Write a function to find squares of individual elements in a list using lambda function. 
    """

### result ###
```python
def square_nums(nums):
    square_nums = list(map(lambda x: x ** 2, nums))
    return square_nums
```
Feedback: The code above is correct.
### Task End ###

### Task Start ###
# These are the assertions for your function:
assert find_Rotations("aaaa") == 1

# Complete the Python funtion:
def find_Rotations(s):
    """ 
    Write a python function to find the minimum number of rotations required to get the same string. 
    """

### result ###
```python
def find_Rotations(s):
    if len(s) == 1:
        return 1
    elif len(s) == 0:
        return 0
    else:
        l = len(s)
        min = len(s)
        for i, c in enumerate(s):
            if c == s[0]:
                temp = i
            if temp < min:
                min = temp
        return min
```
Feedback: The code above is wrong. Please fix it.

### fix result ###
```python
    def find_Rotations(s):
        n = len(s)
        for i in range(1, n + 1):
            if s[i:n] + s[0:i] == s:
                return i
        return n
```
Feedback: The code above is correct.
### Task End ###

### Task Start ###
# These are the assertions for your function:
assert small_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)==[10,20]
# Complete the Python funtion:
def small_nnum(lst,n):
    """ 
    Write a function to get the n smallest items from a dataset. 
    """
### result ###
```python
    def small_nnum(lst,n):
        lst = sorted(lst)
        lst = lst[:n]
        return lst
```
Feedback: The code above is correct.
### Task End ###

### Task Start ###
# These are the assertions for your function:
